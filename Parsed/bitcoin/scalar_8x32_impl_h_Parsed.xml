<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/scalar_8x32_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2014 Pieter Wuille                                   *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_SCALAR_REPR_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_SCALAR_REPR_IMPL_H</name></cpp:macro></cpp:define>

<comment type="block">/* Limbs of the secp256k1 order. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_0</name></cpp:macro> <cpp:value>((uint32_t)0xD0364141UL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_1</name></cpp:macro> <cpp:value>((uint32_t)0xBFD25E8CUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_2</name></cpp:macro> <cpp:value>((uint32_t)0xAF48A03BUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_3</name></cpp:macro> <cpp:value>((uint32_t)0xBAAEDCE6UL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_4</name></cpp:macro> <cpp:value>((uint32_t)0xFFFFFFFEUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_5</name></cpp:macro> <cpp:value>((uint32_t)0xFFFFFFFFUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_6</name></cpp:macro> <cpp:value>((uint32_t)0xFFFFFFFFUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_7</name></cpp:macro> <cpp:value>((uint32_t)0xFFFFFFFFUL)</cpp:value></cpp:define>

<comment type="block">/* Limbs of 2^256 minus the secp256k1 order. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_C_0</name></cpp:macro> <cpp:value>(~SECP256K1_N_0 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_C_1</name></cpp:macro> <cpp:value>(~SECP256K1_N_1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_C_2</name></cpp:macro> <cpp:value>(~SECP256K1_N_2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_C_3</name></cpp:macro> <cpp:value>(~SECP256K1_N_3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_C_4</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<comment type="block">/* Limbs of half the secp256k1 order. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_0</name></cpp:macro> <cpp:value>((uint32_t)0x681B20A0UL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_1</name></cpp:macro> <cpp:value>((uint32_t)0xDFE92F46UL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_2</name></cpp:macro> <cpp:value>((uint32_t)0x57A4501DUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_3</name></cpp:macro> <cpp:value>((uint32_t)0x5D576E73UL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_4</name></cpp:macro> <cpp:value>((uint32_t)0xFFFFFFFFUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_5</name></cpp:macro> <cpp:value>((uint32_t)0xFFFFFFFFUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_6</name></cpp:macro> <cpp:value>((uint32_t)0xFFFFFFFFUL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_N_H_7</name></cpp:macro> <cpp:value>((uint32_t)0x7FFFFFFFUL)</cpp:value></cpp:define>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_set_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>secp256k1_scalar_get_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>==</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>secp256k1_scalar_get_bits_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>==</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>secp256k1_scalar_get_bits</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_check_overflow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_7</name><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* No need for a &gt; check. */</comment>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_6</name><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* No need for a &gt; check. */</comment>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_5</name><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* No need for a &gt; check. */</comment>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_4</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_4</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_3</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_3</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_2</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_2</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_1</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_1</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>SECP256K1_N_0</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <return>return <expr><name>yes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_reduce</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>overflow</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>overflow</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>overflow</name> <operator>*</operator> <name>SECP256K1_N_C_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>overflow</name> <operator>*</operator> <name>SECP256K1_N_C_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>overflow</name> <operator>*</operator> <name>SECP256K1_N_C_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>overflow</name> <operator>*</operator> <name>SECP256K1_N_C_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>overflow</name> <operator>*</operator> <name>SECP256K1_N_C_4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
    <return>return <expr><name>overflow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>overflow</name> <operator>=</operator> <name>t</name> <operator>+</operator> <call><name>secp256k1_scalar_check_overflow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>overflow</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>overflow</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_reduce</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>overflow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_cadd_bit</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bit</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>flag</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>  <comment type="block">/* forcing (bit &gt;&gt; 5) &gt; 7 makes this a noop */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bit</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFULL</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_scalar_check_overflow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_set_b32</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b32</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>over</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>b32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>over</name> <operator>=</operator> <call><name>secp256k1_scalar_reduce</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>secp256k1_scalar_check_overflow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>overflow</name> <operator>=</operator> <name>over</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_get_b32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nonzero</name> <init>= <expr><literal type="number">0xFFFFFFFFUL</literal> <operator>*</operator> <operator>(</operator><call><name>secp256k1_scalar_is_zero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_5</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_6</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>SECP256K1_N_7</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_high</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_H_7</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_H_7</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_H_6</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt> <comment type="block">/* No need for a &gt; check. */</comment>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_H_5</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt> <comment type="block">/* No need for a &gt; check. */</comment>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_H_4</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt> <comment type="block">/* No need for a &gt; check. */</comment>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_H_3</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_H_3</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_H_2</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_H_2</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>no</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>SECP256K1_N_H_1</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>yes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_H_1</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>yes</name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>SECP256K1_N_H_0</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>no</name></expr>;</expr_stmt>
    <return>return <expr><name>yes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_cond_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* If we are flag = 0, mask = 00...00 and this is a no-op;
     * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>!</operator><name>flag</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nonzero</name> <init>= <expr><literal type="number">0xFFFFFFFFUL</literal> <operator>*</operator> <operator>(</operator><call><name>secp256k1_scalar_is_zero</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>SECP256K1_N_0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>SECP256K1_N_1</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>SECP256K1_N_2</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>SECP256K1_N_3</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>SECP256K1_N_4</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>SECP256K1_N_5</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>SECP256K1_N_6</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>SECP256K1_N_7</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <name>nonzero</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>mask</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Inspired by the macros in OpenSSL's crypto/bn/asm/x86_64-gcc.c. */</comment>

<comment type="block" format="doxygen">/** Add a*b to the number defined by (c0,c1,c2). c2 must never overflow. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>muladd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    uint32_t tl, th; \
    { \
        uint64_t t = (uint64_t)a * b; \
        th = t &gt;&gt; 32;         <comment type="block">/* at most 0xFFFFFFFE */</comment> \
        tl = t; \
    } \
    c0 += tl;                 <comment type="block">/* overflow is handled on the next line */</comment> \
    th += (c0 &lt; tl) ? 1 : 0;  <comment type="block">/* at most 0xFFFFFFFF */</comment> \
    c1 += th;                 <comment type="block">/* overflow is handled on the next line */</comment> \
    c2 += (c1 &lt; th) ? 1 : 0;  <comment type="block">/* never overflows by contract (verified in the next line) */</comment> \
    VERIFY_CHECK((c1 &gt;= th) || (c2 != 0)); \
}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Add a*b to the number defined by (c0,c1). c1 must never overflow. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>muladd_fast</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    uint32_t tl, th; \
    { \
        uint64_t t = (uint64_t)a * b; \
        th = t &gt;&gt; 32;         <comment type="block">/* at most 0xFFFFFFFE */</comment> \
        tl = t; \
    } \
    c0 += tl;                 <comment type="block">/* overflow is handled on the next line */</comment> \
    th += (c0 &lt; tl) ? 1 : 0;  <comment type="block">/* at most 0xFFFFFFFF */</comment> \
    c1 += th;                 <comment type="block">/* never overflows by contract (verified in the next line) */</comment> \
    VERIFY_CHECK(c1 &gt;= th); \
}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Add 2*a*b to the number defined by (c0,c1,c2). c2 must never overflow. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>muladd2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    uint32_t tl, th, th2, tl2; \
    { \
        uint64_t t = (uint64_t)a * b; \
        th = t &gt;&gt; 32;               <comment type="block">/* at most 0xFFFFFFFE */</comment> \
        tl = t; \
    } \
    th2 = th + th;                  <comment type="block">/* at most 0xFFFFFFFE (in case th was 0x7FFFFFFF) */</comment> \
    c2 += (th2 &lt; th) ? 1 : 0;       <comment type="block">/* never overflows by contract (verified the next line) */</comment> \
    VERIFY_CHECK((th2 &gt;= th) || (c2 != 0)); \
    tl2 = tl + tl;                  <comment type="block">/* at most 0xFFFFFFFE (in case the lowest 63 bits of tl were 0x7FFFFFFF) */</comment> \
    th2 += (tl2 &lt; tl) ? 1 : 0;      <comment type="block">/* at most 0xFFFFFFFF */</comment> \
    c0 += tl2;                      <comment type="block">/* overflow is handled on the next line */</comment> \
    th2 += (c0 &lt; tl2) ? 1 : 0;      <comment type="block">/* second overflow is handled on the next line */</comment> \
    c2 += (c0 &lt; tl2) &amp; (th2 == 0);  <comment type="block">/* never overflows by contract (verified the next line) */</comment> \
    VERIFY_CHECK((c0 &gt;= tl2) || (th2 != 0) || (c2 != 0)); \
    c1 += th2;                      <comment type="block">/* overflow is handled on the next line */</comment> \
    c2 += (c1 &lt; th2) ? 1 : 0;       <comment type="block">/* never overflows by contract (verified the next line) */</comment> \
    VERIFY_CHECK((c1 &gt;= th2) || (c2 != 0)); \
}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Add a to the number defined by (c0,c1,c2). c2 must never overflow. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sumadd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    unsigned int over; \
    c0 += (a);                  <comment type="block">/* overflow is handled on the next line */</comment> \
    over = (c0 &lt; (a)) ? 1 : 0; \
    c1 += over;                 <comment type="block">/* overflow is handled on the next line */</comment> \
    c2 += (c1 &lt; over) ? 1 : 0;  <comment type="block">/* never overflows by contract */</comment> \
}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Add a to the number defined by (c0,c1). c1 must never overflow, c2 must be zero. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sumadd_fast</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    c0 += (a);                 <comment type="block">/* overflow is handled on the next line */</comment> \
    c1 += (c0 &lt; (a)) ? 1 : 0;  <comment type="block">/* never overflows by contract (verified the next line) */</comment> \
    VERIFY_CHECK((c1 != 0) | (c0 &gt;= (a))); \
    VERIFY_CHECK(c2 == 0); \
}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Extract the lowest 32 bits of (c0,c1,c2) into n, and left shift the number 32 bits. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extract</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    (n) = c0; \
    c0 = c1; \
    c1 = c2; \
    c2 = 0; \
}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Extract the lowest 32 bits of (c0,c1,c2) into n, and left shift the number 32 bits. c2 is required to be zero. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extract_fast</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    (n) = c0; \
    c0 = c1; \
    c1 = 0; \
    VERIFY_CHECK(c2 == 0); \
}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_reduce_512</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>n0</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>n1</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>n3</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>n4</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>n5</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>n6</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>n7</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>m3</name></decl>, <decl><type ref="prev"/><name>m4</name></decl>, <decl><type ref="prev"/><name>m5</name></decl>, <decl><type ref="prev"/><name>m6</name></decl>, <decl><type ref="prev"/><name>m7</name></decl>, <decl><type ref="prev"/><name>m8</name></decl>, <decl><type ref="prev"/><name>m9</name></decl>, <decl><type ref="prev"/><name>m10</name></decl>, <decl><type ref="prev"/><name>m11</name></decl>, <decl><type ref="prev"/><name>m12</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p3</name></decl>, <decl><type ref="prev"/><name>p4</name></decl>, <decl><type ref="prev"/><name>p5</name></decl>, <decl><type ref="prev"/><name>p6</name></decl>, <decl><type ref="prev"/><name>p7</name></decl>, <decl><type ref="prev"/><name>p8</name></decl>;</decl_stmt>

    <comment type="block">/* 96 bit accumulator. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

    <comment type="block">/* Reduce 512 bits into 385. */</comment>
    <comment type="block">/* m[0..12] = l[0..7] + n[0..7] * SECP256K1_N_C. */</comment>
    <expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd_fast</name><argument_list>(<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name>m0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd_fast</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n2</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n3</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n2</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n3</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n2</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n5</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n3</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n2</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n6</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n5</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n3</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n7</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n6</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n5</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n4</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n7</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n6</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n5</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n7</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n6</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>n5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>n7</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>n6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>m10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd_fast</name><argument_list>(<argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name>m11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c0</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m12</name> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>

    <comment type="block">/* Reduce 385 bits into 258. */</comment>
    <comment type="block">/* p[0..8] = m[0..7] + m[8..12] * SECP256K1_N_C. */</comment>
    <expr_stmt><expr><name>c0</name> <operator>=</operator> <name>m0</name></expr>;</expr_stmt> <expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd_fast</name><argument_list>(<argument><expr><name>m8</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd_fast</name><argument_list>(<argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m9</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m8</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m10</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m9</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m8</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m10</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m9</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m8</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m12</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m10</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m9</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m12</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m10</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m12</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd</name><argument_list>(<argument><expr><name>m10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>p6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd_fast</name><argument_list>(<argument><expr><name>m7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd_fast</name><argument_list>(<argument><expr><name>m12</name></expr></argument>, <argument><expr><name>SECP256K1_N_C_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sumadd_fast</name><argument_list>(<argument><expr><name>m11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name>p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p8</name> <operator>=</operator> <name>c0</name> <operator>+</operator> <name>m12</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>p8</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reduce 258 bits into 256. */</comment>
    <comment type="block">/* r[0..7] = p[0..7] + p[8] * SECP256K1_N_C. */</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>p0</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>SECP256K1_N_C_0</name> <operator>*</operator> <name>p8</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>p1</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>SECP256K1_N_C_1</name> <operator>*</operator> <name>p8</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>p2</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>SECP256K1_N_C_2</name> <operator>*</operator> <name>p8</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>p3</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>SECP256K1_N_C_3</name> <operator>*</operator> <name>p8</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>p4</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>p8</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>p5</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>p6</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>p7</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

    <comment type="block">/* Final reduction of r. */</comment>
    <expr_stmt><expr><call><name>secp256k1_scalar_reduce</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <call><name>secp256k1_scalar_check_overflow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_mul_512</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* 96 bit accumulator. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>c0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* l[0..15] = a[0..7] * b[0..7]. */</comment>
    <expr_stmt><expr><call><name>muladd_fast</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd_fast</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_sqr_512</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* 96 bit accumulator. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>c0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* l[0..15] = a[0..7]^2. */</comment>
    <expr_stmt><expr><call><name>muladd_fast</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd2</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>muladd_fast</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>extract_fast</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sumadd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sumadd_fast</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>muladd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>muladd_fast</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>muladd2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>extract</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>extract_fast</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>l</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_mul_512</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_reduce_512</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_shr_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_sqr</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>l</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_sqr_512</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_reduce_512</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ENDOMORPHISM</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_split_128</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r1</name></decl></parameter>, <parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r1</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r2</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_eq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_mul_shift_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>l</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shiftlimbs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shiftlow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shifthigh</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_mul_512</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>shiftlimbs</name> <operator>=</operator> <name>shift</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>shiftlow</name> <operator>=</operator> <name>shift</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>shifthigh</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>shiftlow</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">512</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">480</literal> <operator>&amp;&amp;</operator> <name>shiftlow</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shifthigh</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">480</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">448</literal> <operator>&amp;&amp;</operator> <name>shiftlow</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shifthigh</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">448</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">416</literal> <operator>&amp;&amp;</operator> <name>shiftlow</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shifthigh</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">416</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">384</literal> <operator>&amp;&amp;</operator> <name>shiftlow</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shifthigh</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">384</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">352</literal> <operator>&amp;&amp;</operator> <name>shiftlow</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shifthigh</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">352</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">320</literal> <operator>&amp;&amp;</operator> <name>shiftlow</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shifthigh</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">320</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">288</literal> <operator>&amp;&amp;</operator> <name>shiftlow</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shifthigh</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">288</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <name>shiftlimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shiftlow</name><operator>)</operator></expr>  </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_cadd_bit</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>l</name><index>[<expr><operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_SCALAR_REPR_IMPL_H */</comment>
</unit>
