<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/script/signingprovider.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SCRIPT_SIGNINGPROVIDER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SCRIPT_SIGNINGPROVIDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>KeyOriginInfo</name>;</struct_decl>

<comment type="block" format="doxygen">/** An interface to be implemented by keystores that support signing. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SigningProvider</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>SigningProvider</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>virtual</name> <name>bool</name> <macro><name>GetCScript</name><argument_list>(<argument>const CScriptID &amp;scriptid</argument>, <argument>CScript&amp; script</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>HaveCScript</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScriptID</name> <operator>&amp;</operator><name>scriptid</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetPubKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CKeyID</name> <operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><name>CPubKey</name><operator>&amp;</operator> <name>pubkey</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CKeyID</name> <operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><name>CKey</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>HaveKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CKeyID</name> <operator>&amp;</operator><name>address</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetKeyOrigin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CKeyID</name><operator>&amp;</operator> <name>keyid</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name><operator>&amp;</operator> <name>info</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>DUMMY_SIGNING_PROVIDER</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>HidingSigningProvider</name> <range>: <expr><name>public</name> <name>SigningProvider</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <specifier>const</specifier> <name>bool</name> <name>m_hide_secret</name></expr>;
    <expr><specifier>const</specifier> <name>bool</name> <name>m_hide_origin</name></expr>;
    <expr><specifier>const</specifier> <name>SigningProvider</name><operator>*</operator> <name>m_provider</name></expr>;

<expr><name>public</name><operator>:</operator>
    <macro><name>HidingSigningProvider</name><argument_list>(<argument>const SigningProvider* provider</argument>, <argument>bool hide_secret</argument>, <argument>bool hide_origin</argument>)</argument_list></macro> <operator>:</operator> <call><name>m_hide_secret</name><argument_list>(<argument><expr><name>hide_secret</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>m_hide_origin</name><argument_list>(<argument><expr><name>hide_origin</name></expr></argument>)</argument_list></call></expr>, <macro><name>m_provider</name><argument_list>(<argument>provider</argument>)</argument_list></macro> <expr><block>{}</block>
    <name>bool</name> <macro><name>GetCScript</name><argument_list>(<argument>const CScriptID&amp; scriptid</argument>, <argument>CScript&amp; script</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>bool</name> <macro><name>GetPubKey</name><argument_list>(<argument>const CKeyID&amp; keyid</argument>, <argument>CPubKey&amp; pubkey</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>bool</name> <macro><name>GetKey</name><argument_list>(<argument>const CKeyID&amp; keyid</argument>, <argument>CKey&amp; key</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>bool</name> <macro><name>GetKeyOrigin</name><argument_list>(<argument>const CKeyID&amp; keyid</argument>, <argument>KeyOriginInfo&amp; info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>FlatSigningProvider</name></name></type> <name>final</name> <range>: <expr><name>public</name> <name>SigningProvider</name>
<block>{
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CScriptID</name></expr></argument>, <argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name> <name>scripts</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name> <name>pubkeys</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>origins</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name> <name>keys</name></expr>;

    <expr><name>bool</name> <macro><name>GetCScript</name><argument_list>(<argument>const CScriptID&amp; scriptid</argument>, <argument>CScript&amp; script</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>bool</name> <macro><name>GetPubKey</name><argument_list>(<argument>const CKeyID&amp; keyid</argument>, <argument>CPubKey&amp; pubkey</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>bool</name> <macro><name>GetKeyOrigin</name><argument_list>(<argument>const CKeyID&amp; keyid</argument>, <argument>KeyOriginInfo&amp; info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>bool</name> <macro><name>GetKey</name><argument_list>(<argument>const CKeyID&amp; keyid</argument>, <argument>CKey&amp; key</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>FlatSigningProvider</name></type> <name>Merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Fillable signing provider that keeps keys in an address-&gt;secret map */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>FillableSigningProvider</name> <range>: <expr><name>public</name> <name>SigningProvider</name>
<block>{
<expr><name>protected</name><operator>:</operator>
    <name>using</name> <name>KeyMap</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name></expr>;
    <expr><name>using</name> <name>ScriptMap</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CScriptID</name></expr></argument>, <argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></expr>;

    <expr><name>KeyMap</name> <name>mapKeys</name> <call><name>GUARDED_BY</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>ScriptMap</name> <name>mapScripts</name> <call><name>GUARDED_BY</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>void</name> <macro><name>ImplicitlyLearnRelatedKeyScripts</name><argument_list>(<argument>const CPubKey&amp; pubkey</argument>)</argument_list></macro> <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
    <name>mutable</name> <name>CCriticalSection</name> <name>cs_KeyStore</name></expr>;

    <expr><name>virtual</name> <name>bool</name> <call><name>AddKeyPubKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CKey</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CPubKey</name> <operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <name>bool</name> <macro><name>AddKey</name><argument_list>(<argument>const CKey &amp;key</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>AddKeyPubKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
    <name>virtual</name> <name>bool</name> <macro><name>GetPubKey</name><argument_list>(<argument>const CKeyID &amp;address</argument>, <argument>CPubKey&amp; vchPubKeyOut</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>virtual</name> <name>bool</name> <macro><name>HaveKey</name><argument_list>(<argument>const CKeyID &amp;address</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name> <macro><name>GetKeys</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>virtual</name> <name>bool</name> <macro><name>GetKey</name><argument_list>(<argument>const CKeyID &amp;address</argument>, <argument>CKey &amp;keyOut</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>virtual</name> <name>bool</name> <call><name>AddCScript</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>redeemScript</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <name>bool</name> <macro><name>HaveCScript</name><argument_list>(<argument>const CScriptID &amp;hash</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
    <expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CScriptID</name></expr></argument>&gt;</argument_list></name> <macro><name>GetCScripts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>virtual</name> <name>bool</name> <macro><name>GetCScript</name><argument_list>(<argument>const CScriptID &amp;hash</argument>, <argument>CScript&amp; redeemScriptOut</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Return the CKeyID of the key involved in a script (if there is a unique one). */</comment>
<function_decl><type><name>CKeyID</name></type> <name>GetKeyForDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SCRIPT_SIGNINGPROVIDER_H</comment>
</unit>
