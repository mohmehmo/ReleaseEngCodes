<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/group.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_GROUP_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GROUP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"num.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** A group element of the secp256k1 curve, in affine coordinates. */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>infinity</name></decl>;</decl_stmt> <comment type="block">/* whether this represents the point at infinity */</comment>
}</block></struct></type> <name>secp256k1_ge</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GE_CONST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)), 0}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GE_CONST_INFINITY</name></cpp:macro> <cpp:value>{SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), 1}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** A group element of the secp256k1 curve, in jacobian coordinates. */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>x</name></decl>;</decl_stmt> <comment type="block">/* actual X: x/z^2 */</comment>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>y</name></decl>;</decl_stmt> <comment type="block">/* actual Y: y/z^3 */</comment>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>infinity</name></decl>;</decl_stmt> <comment type="block">/* whether this represents the point at infinity */</comment>
}</block></struct></type> <name>secp256k1_gej</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GEJ_CONST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1), 0}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GEJ_CONST_INFINITY</name></cpp:macro> <cpp:value>{SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 0), 1}</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>secp256k1_fe_storage</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_fe_storage</name></type> <name>y</name></decl>;</decl_stmt>
}</block></struct></type> <name>secp256k1_ge_storage</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GE_STORAGE_CONST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{SECP256K1_FE_STORAGE_CONST((a),(b),(c),(d),(e),(f),(g),(h)), SECP256K1_FE_STORAGE_CONST((i),(j),(k),(l),(m),(n),(o),(p))}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GE_STORAGE_CONST_GET</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SECP256K1_FE_STORAGE_CONST_GET(t.x), SECP256K1_FE_STORAGE_CONST_GET(t.y)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Set a group element equal to the point with given X and Y coordinates */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_xy</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a group element (affine) equal to the point with the given X coordinate
 *  and a Y coordinate that is a quadratic residue modulo p. The return value
 *  is true iff a coordinate with the given X coordinate exists.
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_set_xquad</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a group element (affine) equal to the point with the given X coordinate, and given oddness
 *  for Y. Return value indicates whether the result is valid. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_set_xo_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>odd</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a group element is the point at infinity. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_is_infinity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a group element is valid (i.e., on the curve). */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_is_valid_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_neg</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a group element equal to another which is given in jacobian coordinates */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_gej</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a batch of group elements equal to the inputs given in jacobian coordinates */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_all_gej_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Bring a batch inputs given in jacobian coordinates (with known z-ratios) to
 *  the same global z "denominator". zr must contain the known z-ratios such
 *  that mul(a[i].z, zr[i+1]) == a[i+1].z. zr[0] is ignored. The x and y
 *  coordinates of the result are stored in r, the common z coordinate is
 *  stored in globalz. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_globalz_set_table_gej</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>globalz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>zr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a group element (affine) equal to the point at infinity. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_infinity</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a group element (jacobian) equal to the point at infinity. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_set_infinity</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a group element (jacobian) equal to another which is given in affine coordinates. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_set_ge</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compare the X coordinate of a group element (jacobian). */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_gej_eq_x_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set r equal to the inverse of a (i.e., mirrored around the X axis) */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_neg</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a group element is the point at infinity. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_gej_is_infinity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a group element's y coordinate is a quadratic residue. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_gej_has_quad_y_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set r equal to the double of a. If rzr is not-NULL, r-&gt;z = a-&gt;z * *rzr (where infinity means an implicit z = 0).
 * a may not be zero. Constant time. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_double_nonzero</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set r equal to the double of a. If rzr is not-NULL, r-&gt;z = a-&gt;z * *rzr (where infinity means an implicit z = 0). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_double_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set r equal to the sum of a and b. If rzr is non-NULL, r-&gt;z = a-&gt;z * *rzr (a cannot be infinity in that case). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set r equal to the sum of a and b (with b given in affine coordinates, and not infinity). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_ge</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set r equal to the sum of a and b (with b given in affine coordinates). This is more efficient
    than secp256k1_gej_add_var. It is identical to secp256k1_gej_add_ge but without constant-time
    guarantee, and b is allowed to be infinity. If rzr is non-NULL, r-&gt;z = a-&gt;z * *rzr (a cannot be infinity in that case). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_ge_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set r equal to the sum of a and b (with the inverse of b's Z coordinate passed as bzinv). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_zinv_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>bzinv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ENDOMORPHISM</name></cpp:ifdef>
<comment type="block" format="doxygen">/** Set r to be equal to lambda times a, where lambda is chosen in a way such that this is very fast. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_mul_lambda</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Clear a secp256k1_gej to prevent leaking sensitive information. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Clear a secp256k1_ge to prevent leaking sensitive information. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Convert a group element to the storage type. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_to_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Convert a group element back from the storage type. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_from_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_storage_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Rescale a jacobian point by b which must be non-zero. Constant-time. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_rescale</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_GROUP_H */</comment>
</unit>
