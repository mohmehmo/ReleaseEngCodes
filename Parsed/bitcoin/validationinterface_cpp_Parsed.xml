<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/validationinterface.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validationinterface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scheduler.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;future&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/signals2/signal.hpp&gt;</cpp:file></cpp:include>

<struct>struct <name>ValidationInterfaceConnections</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>UpdatedBlockTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>TransactionAddedToMempool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>BlockConnected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>BlockDisconnected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>TransactionRemovedFromMempool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>ChainStateFlushed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>BlockChecked</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>NewPoWValidBlock</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>MainSignalsInstance</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier>, <specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier>, <name>bool</name> <name>fInitialDownload</name><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>UpdatedBlockTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name>CTransactionRef</name> <modifier>&amp;</modifier><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>TransactionAddedToMempool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator>, <specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier><name>pindex</name>, <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>BlockConnected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>, <specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier> <name>pindex</name><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>BlockDisconnected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name>CTransactionRef</name> <modifier>&amp;</modifier><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>TransactionRemovedFromMempool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name>CBlockLocator</name> <modifier>&amp;</modifier><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>ChainStateFlushed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier>, <specifier>const</specifier> <name>BlockValidationState</name><modifier>&amp;</modifier><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>BlockChecked</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier>, <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>NewPoWValidBlock</name></decl>;</decl_stmt>

    <comment type="line">// We are not allowed to assume the scheduler only runs in one thread,</comment>
    <comment type="line">// but must ensure all callbacks happen in-order, so we end up creating</comment>
    <comment type="line">// our own queue here :(</comment>
    <decl_stmt><decl><type><name>SingleThreadedSchedulerClient</name></type> <name>m_schedulerClient</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>CValidationInterface</name><modifier>*</modifier></expr></argument>, <argument><expr><name>ValidationInterfaceConnections</name></expr></argument>&gt;</argument_list></name></type> <name>m_connMainSignals</name></decl>;</decl_stmt>

    <constructor><specifier>explicit</specifier> <name>MainSignalsInstance</name><parameter_list>(<parameter><decl><type><name>CScheduler</name> <modifier>*</modifier></type><name>pscheduler</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_schedulerClient</name><argument_list>(<argument><expr><name>pscheduler</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>CMainSignals</name></type> <name>g_signals</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>RegisterBackgroundSignalScheduler</name></name><parameter_list>(<parameter><decl><type><name>CScheduler</name><modifier>&amp;</modifier></type> <name>scheduler</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>m_internals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MainSignalsInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scheduler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>UnregisterBackgroundSignalScheduler</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>FlushBackgroundCallbacks</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>m_internals</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>EmptyQueue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>CMainSignals</name><operator>::</operator><name>CallbacksPending</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_internals</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>CallbacksPending</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CMainSignals</name><modifier>&amp;</modifier></type> <name>GetMainSignals</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>g_signals</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegisterValidationInterface</name><parameter_list>(<parameter><decl><type><name>CValidationInterface</name><modifier>*</modifier></type> <name>pwalletIn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ValidationInterfaceConnections</name><modifier>&amp;</modifier></type> <name>conns</name> <init>= <expr><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>m_connMainSignals</name><index>[<expr><name>pwalletIn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>UpdatedBlockTip</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>UpdatedBlockTip</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>UpdatedBlockTip</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>TransactionAddedToMempool</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>TransactionAddedToMempool</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>TransactionAddedToMempool</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>BlockConnected</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>BlockConnected</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>BlockConnected</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>BlockDisconnected</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>BlockDisconnected</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>BlockDisconnected</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>TransactionRemovedFromMempool</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>TransactionRemovedFromMempool</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>TransactionRemovedFromMempool</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>ChainStateFlushed</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>ChainStateFlushed</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>ChainStateFlushed</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>BlockChecked</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>BlockChecked</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>BlockChecked</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conns</name><operator>.</operator><name>NewPoWValidBlock</name></name> <operator>=</operator> <call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>NewPoWValidBlock</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CValidationInterface</name><operator>::</operator><name>NewPoWValidBlock</name></name></expr></argument>, <argument><expr><name>pwalletIn</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnregisterValidationInterface</name><parameter_list>(<parameter><decl><type><name>CValidationInterface</name><modifier>*</modifier></type> <name>pwalletIn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>g_signals</name><operator>.</operator><name>m_internals</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>m_connMainSignals</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>pwalletIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnregisterAllValidationInterfaces</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g_signals</name><operator>.</operator><name>m_internals</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>m_connMainSignals</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CallFunctionInValidationInterfaceQueue</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>g_signals</name><operator>.</operator><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SyncWithValidationInterfaceQueue</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockNotHeld</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Block until the validation queue drains</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>promise</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name></type> <name>promise</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CallFunctionInValidationInterfaceQueue</name><argument_list>(<argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>promise</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>promise</name><operator>.</operator><name>set_value</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>promise</name><operator>.</operator><name>get_future</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>UpdatedBlockTip</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pindexNew</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pindexFork</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fInitialDownload</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which</comment>
    <comment type="line">// the chain actually updates. One way to ensure this is for the caller to invoke this signal</comment>
    <comment type="line">// in the same critical section where the chain is updated</comment>

    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>pindexNew</name></argument>, <argument><name>pindexFork</name></argument>, <argument><name>fInitialDownload</name></argument>, <argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>UpdatedBlockTip</name></name><argument_list>(<argument><expr><name>pindexNew</name></expr></argument>, <argument><expr><name>pindexFork</name></expr></argument>, <argument><expr><name>fInitialDownload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>TransactionAddedToMempool</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransactionRef</name> <modifier>&amp;</modifier></type><name>ptx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>ptx</name></argument>, <argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>TransactionAddedToMempool</name></name><argument_list>(<argument><expr><name>ptx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>TransactionRemovedFromMempool</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransactionRef</name> <modifier>&amp;</modifier></type><name>ptx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>ptx</name></argument>, <argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>TransactionRemovedFromMempool</name></name><argument_list>(<argument><expr><name>ptx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>BlockConnected</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>pblock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pvtxConflicted</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>pblock</name></argument>, <argument><name>pindex</name></argument>, <argument><name>pvtxConflicted</name></argument>, <argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>BlockConnected</name></name><argument_list>(<argument><expr><name>pblock</name></expr></argument>, <argument><expr><name>pindex</name></expr></argument>, <argument><expr><operator>*</operator><name>pvtxConflicted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>BlockDisconnected</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pblock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>pblock</name></argument>, <argument><name>pindex</name></argument>, <argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>BlockDisconnected</name></name><argument_list>(<argument><expr><name>pblock</name></expr></argument>, <argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>ChainStateFlushed</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockLocator</name> <modifier>&amp;</modifier></type><name>locator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>m_schedulerClient</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>locator</name></argument>, <argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>ChainStateFlushed</name></name><argument_list>(<argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>BlockChecked</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BlockValidationState</name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>BlockChecked</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CMainSignals</name><operator>::</operator><name>NewPoWValidBlock</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m_internals</name><operator>-&gt;</operator><name>NewPoWValidBlock</name></name><argument_list>(<argument><expr><name>pindex</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
