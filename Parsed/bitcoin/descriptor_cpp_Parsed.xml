<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/script/descriptor.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/descriptor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;span.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bip32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/spanparsing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/vector.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<namespace>namespace <block>{

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Checksum                                                               //</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////</comment>

<comment type="line">// This section implements a checksum algorithm for descriptors with the</comment>
<comment type="line">// following properties:</comment>
<comment type="line">// * Mistakes in a descriptor string are measured in "symbol errors". The higher</comment>
<comment type="line">//   the number of symbol errors, the harder it is to detect:</comment>
<comment type="line">//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for</comment>
<comment type="line">//     another in that set always counts as 1 symbol error.</comment>
<comment type="line">//     * Note that hex encoded keys are covered by these characters. Xprvs and</comment>
<comment type="line">//       xpubs use other characters too, but already have their own checksum</comment>
<comment type="line">//       mechanism.</comment>
<comment type="line">//     * Function names like "multi()" use other characters, but mistakes in</comment>
<comment type="line">//       these would generally result in an unparsable descriptor.</comment>
<comment type="line">//   * A case error always counts as 1 symbol error.</comment>
<comment type="line">//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.</comment>
<comment type="line">// * Any 1 symbol error is always detected.</comment>
<comment type="line">// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.</comment>
<comment type="line">// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.</comment>
<comment type="line">// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.</comment>
<comment type="line">// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected</comment>
<comment type="line">// * Random errors have a chance of 1 in 2**40 of being undetected.</comment>
<comment type="line">//</comment>
<comment type="line">// These properties are achieved by expanding every group of 3 (non checksum) characters into</comment>
<comment type="line">// 4 GF(32) symbols, over which a cyclic code is defined.</comment>

<comment type="block">/*
 * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),
 * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.
 *
 * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.
 * It is chosen to define an cyclic error detecting code which is selected by:
 * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting
 *   3 errors in windows up to 19000 symbols.
 * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.
 * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.
 * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.
 *
 * The generator and the constants to implement it can be verified using this Sage code:
 *   B = GF(2) # Binary field
 *   BP.&lt;b&gt; = B[] # Polynomials over the binary field
 *   F_mod = b**5 + b**3 + 1
 *   F.&lt;f&gt; = GF(32, modulus=F_mod, repr='int') # GF(32) definition
 *   FP.&lt;x&gt; = F[] # Polynomials over GF(32)
 *   E_mod = x**3 + x + F.fetch_int(8)
 *   E.&lt;e&gt; = F.extension(E_mod) # Extension field definition
 *   alpha = e**2743 # Choice of an element in extension field
 *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.
 *       assert((alpha**p == 1) == (p % 32767 == 0))
 *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])
 *   print(G) # Print out the generator
 *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.
 *       v = 0
 *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):
 *           v = v*32 + coef.integer_representation()
 *       print("0x%x" % v)
 */</comment>
<function><type><name>uint64_t</name></type> <name>PolyMod</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>c0</name> <init>= <expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">35</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7ffffffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>^</operator> <name>val</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c0</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>^=</operator> <literal type="number">0xf5dee51989</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c0</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>^=</operator> <literal type="number">0xa9fdca3312</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c0</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>^=</operator> <literal type="number">0x1bab10e32d</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c0</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>^=</operator> <literal type="number">0x3706b1677a</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c0</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>^=</operator> <literal type="number">0x644d626ffd</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>DescriptorChecksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>span</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block" format="doxygen">/** A character set designed such that:
     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.
     *  - Case errors cause an offset that's a multiple of 32.
     *  - As many alphabetic characters are in the same group (while following the above restrictions).
     *
     * If p(x) gives the position of a character c in this character set, every group of 3 characters
     * (a,b,c) is encoded as the 4 symbols (p(a) &amp; 31, p(b) &amp; 31, p(c) &amp; 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).
     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just
     * affect a single symbol.
     *
     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect
     * the position within the groups.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>INPUT_CHARSET</name> <init>=
        <expr><literal type="string">"0123456789()[],'/*abcdefgh@:$%{}"</literal>
        <literal type="string">"IJKLMNOPQRSTUVWXYZ&amp;+-.;&lt;=&gt;?!^_|~"</literal>
        <literal type="string">"ijklmnopqrstuvwxyzABCDEFGH`#\"\\ "</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** The character set for the checksum itself (same as bech32). */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>CHECKSUM_CHARSET</name> <init>= <expr><literal type="string">"qpzry9x8gf2tvdw0s3jn54khce6mua7l"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>clscount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>ch</name> <range>: <expr><name>span</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>pos</name> <init>= <expr><call><name><name>INPUT_CHARSET</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PolyMod</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pos</name> <operator>&amp;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Emit a symbol for the position inside the group, for every character.</comment>
        <expr_stmt><expr><name>cls</name> <operator>=</operator> <name>cls</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>pos</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// Accumulate the group numbers</comment>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>clscount</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Emit an extra symbol representing the group numbers, for every 3 characters.</comment>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PolyMod</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>clscount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>clscount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PolyMod</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PolyMod</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <comment type="line">// Shift further to determine the checksum.</comment>
    <expr_stmt><expr><name>c</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Prevent appending zeroes from not affecting the checksum.</comment>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>CHECKSUM_CHARSET</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>j</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>AddChecksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>str</name> <operator>+</operator> <literal type="string">"#"</literal> <operator>+</operator> <call><name>DescriptorChecksum</name><argument_list>(<argument><expr><call><name>MakeSpan</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Internal representation                                                //</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////</comment>

<typedef>typedef <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>KeyPath</name>;</typedef>

<comment type="block" format="doxygen">/** Interface for public key objects in descriptors. */</comment>
<struct>struct <name>PubkeyProvider</name>
<block>{<public type="default">
    <destructor_decl><specifier>virtual</specifier> <name>~PubkeyProvider</name><parameter_list>()</parameter_list> = <specifier>default</specifier>;</destructor_decl>

    <comment type="block" format="doxygen">/** Derive a public key. If key==nullptr, only info is desired. */</comment>
    <function_decl><type><specifier>virtual</specifier> <name>bool</name></type> <name>GetPubKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <specifier>const</specifier> = <literal type="number">0</literal>;</function_decl>

    <comment type="block" format="doxygen">/** Whether this represent multiple public keys at different positions. */</comment>
    <function_decl><type><specifier>virtual</specifier> <name>bool</name></type> <name>IsRange</name><parameter_list>()</parameter_list> <specifier>const</specifier> = <literal type="number">0</literal>;</function_decl>

    <comment type="block" format="doxygen">/** Get the size of the generated public key(s) in bytes (33 or 65). */</comment>
    <function_decl><type><specifier>virtual</specifier> <name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <specifier>const</specifier> = <literal type="number">0</literal>;</function_decl>

    <comment type="block" format="doxygen">/** Get the descriptor string form. */</comment>
    <function_decl><type><specifier>virtual</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToString</name><parameter_list>()</parameter_list> <specifier>const</specifier> = <literal type="number">0</literal>;</function_decl>

    <comment type="block" format="doxygen">/** Get the descriptor string form including private data (if available in arg). */</comment>
    <function_decl><type><specifier>virtual</specifier> <name>bool</name></type> <name>ToPrivateString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> = <literal type="number">0</literal>;</function_decl>

    <comment type="block" format="doxygen">/** Derive a private key, if private data is available in arg. */</comment>
    <function_decl><type><specifier>virtual</specifier> <name>bool</name></type> <name>GetPrivKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <specifier>const</specifier> = <literal type="number">0</literal>;</function_decl>
</public>}</block>;</struct>

<class>class <name>OriginPubkeyProvider</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>PubkeyProvider</name></super></super_list>
<block>{<private type="default">
    <decl_stmt><decl><type><name>KeyOriginInfo</name></type> <name>m_origin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>m_provider</name></decl>;</decl_stmt>

    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>OriginString</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>begin</name></name><argument_list>(<argument><expr><name><name>m_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>end</name></name><argument_list>(<argument><expr><name><name>m_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FormatHDKeypath</name><argument_list>(<argument><expr><name><name>m_origin</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

</private><public>public:
    <constructor><name>OriginPubkeyProvider</name><parameter_list>(<parameter><decl><type><name>KeyOriginInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>provider</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_origin</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>m_provider</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>bool</name></type> <name>GetPubKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_provider</name><operator>-&gt;</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>begin</name></name><argument_list>(<argument><expr><name><name>m_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>end</name></name><argument_list>(<argument><expr><name><name>m_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>path</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>info</name><operator>.</operator><name>path</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>IsRange</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_provider</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_provider</name><operator>-&gt;</operator><name>GetSize</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToString</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><literal type="string">"["</literal> <operator>+</operator> <call><name>OriginString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal> <operator>+</operator> <call><name><name>m_provider</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>ToPrivateString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>ret</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>sub</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_provider</name><operator>-&gt;</operator><name>ToPrivateString</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"["</literal> <operator>+</operator> <call><name>OriginString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>GetPrivKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name><name>m_provider</name><operator>-&gt;</operator><name>GetPrivKey</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** An object representing a parsed constant public key in a descriptor. */</comment>
<class>class <name>ConstPubkeyProvider</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>PubkeyProvider</name></super></super_list>
<block>{<private type="default">
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>m_pubkey</name></decl>;</decl_stmt>

</private><public>public:
    <constructor><name>ConstPubkeyProvider</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_pubkey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>bool</name></type> <name>GetPubKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>m_pubkey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>path</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyid</name> <init>= <expr><call><name><name>m_pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>keyid</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyid</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>IsRange</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
    <function><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_pubkey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToString</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>m_pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_pubkey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>ToPrivateString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>ret</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>arg</name><operator>.</operator><name>GetKey</name></name><argument_list>(<argument><expr><call><name><name>m_pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>EncodeSecret</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>GetPrivKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name><name>arg</name><operator>.</operator><name>GetKey</name></name><argument_list>(<argument><expr><call><name><name>m_pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<enum type="class">enum class <name>DeriveType</name> <block>{
    <decl><name>NO</name></decl>,
    <decl><name>UNHARDENED</name></decl>,
    <decl><name>HARDENED</name></decl>,
}</block>;</enum>

<comment type="block" format="doxygen">/** An object representing a parsed extended public key in a descriptor. */</comment>
<class>class <name>BIP32PubkeyProvider</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>PubkeyProvider</name></super></super_list>
<block>{<private type="default">
    <decl_stmt><decl><type><name>CExtPubKey</name></type> <name>m_extkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KeyPath</name></type> <name>m_path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DeriveType</name></type> <name>m_derive</name></decl>;</decl_stmt>

    <function><type><name>bool</name></type> <name>GetExtKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CExtKey</name><modifier>&amp;</modifier></type> <name>ret</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>arg</name><operator>.</operator><name>GetKey</name></name><argument_list>(<argument><expr><call><name><name>m_extkey</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>nDepth</name></name> <operator>=</operator> <name><name>m_extkey</name><operator>.</operator><name>nDepth</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>m_extkey</name><operator>.</operator><name>vchFingerprint</name></name></expr></argument>, <argument><expr><name><name>m_extkey</name><operator>.</operator><name>vchFingerprint</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>vchFingerprint</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ret</name><operator>.</operator><name>vchFingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>nChild</name></name> <operator>=</operator> <name><name>m_extkey</name><operator>.</operator><name>nChild</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>chaincode</name></name> <operator>=</operator> <name><name>m_extkey</name><operator>.</operator><name>chaincode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>IsHardened</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>HARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>entry</name> <range>: <expr><name>m_path</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

</private><public>public:
    <constructor><name>BIP32PubkeyProvider</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CExtPubKey</name><modifier>&amp;</modifier></type> <name>extkey</name></decl></parameter>, <parameter><decl><type><name>KeyPath</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>DeriveType</name></type> <name>derive</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_extkey</name><argument_list>(<argument><expr><name>extkey</name></expr></argument>)</argument_list></call>, <call><name>m_path</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>m_derive</name><argument_list>(<argument><expr><name>derive</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>bool</name></type> <name>IsRange</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name>m_derive</name> <operator>!=</operator> <name><name>DeriveType</name><operator>::</operator><name>NO</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>size_t</name></type> <name>GetSize</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><literal type="number">33</literal></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>GetPubKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>IsHardened</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>CKey</name></type> <name>priv_key</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetPrivKey</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>priv_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <call><name><name>priv_key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// TODO: optimize by caching</comment>
                <decl_stmt><decl><type><name>CExtPubKey</name></type> <name>extkey</name> <init>= <expr><name>m_extkey</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>auto</name></type> <name>entry</name> <range>: <expr><name>m_path</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>extkey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>extkey</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>UNHARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>extkey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>extkey</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m_derive</name> <operator>!=</operator> <name><name>DeriveType</name><operator>::</operator><name>HARDENED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>extkey</name><operator>.</operator><name>pubkey</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyid</name> <init>= <expr><call><name><name>m_extkey</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>keyid</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyid</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>m_path</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>UNHARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>HARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pos</name><operator>)</operator> <operator>|</operator> <literal type="number">0x80000000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToString</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name> <init>= <expr><call><name>EncodeExtPubKey</name><argument_list>(<argument><expr><name>m_extkey</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FormatHDKeypath</name><argument_list>(<argument><expr><name>m_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IsRange</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="string">"/*"</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>HARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>ToPrivateString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CExtKey</name></type> <name>key</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetExtKey</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>EncodeExtKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FormatHDKeypath</name><argument_list>(<argument><expr><name>m_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IsRange</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="string">"/*"</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>HARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>GetPrivKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CExtKey</name></type> <name>extkey</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetExtKey</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>extkey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>entry</name> <range>: <expr><name>m_path</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>extkey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>extkey</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>UNHARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>extkey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>extkey</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>m_derive</name> <operator>==</operator> <name><name>DeriveType</name><operator>::</operator><name>HARDENED</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>extkey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>extkey</name></expr></argument>, <argument><expr><name>pos</name> <operator>|</operator> <literal type="number">0x80000000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>extkey</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** Base class for all Descriptor implementations. */</comment>
<class>class <name>DescriptorImpl</name> <super_list>: <super><specifier>public</specifier> <name>Descriptor</name></super></super_list>
<block>{<private type="default">
    <comment type="line" format="doxygen">//! Public key arguments for this descriptor (size 1 for PK, PKH, WPKH; any size for Multisig).</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>m_pubkey_args</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! The sub-descriptor argument (nullptr for everything but SH and WSH).</comment>
    <comment type="line" format="doxygen">//! In doc/descriptors.m this is referred to as SCRIPT expressions sh(SCRIPT)</comment>
    <comment type="line" format="doxygen">//! and wsh(SCRIPT), and distinct from KEY expressions and ADDR expressions.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DescriptorImpl</name></expr></argument>&gt;</argument_list></name></type> <name>m_subdescriptor_arg</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! The string name of the descriptor function.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>m_name</name></decl>;</decl_stmt>

</private><protected>protected:
    <comment type="line" format="doxygen">//! Return a serialization of anything except pubkey and script arguments, to be prepended to those.</comment>
    <function><type><specifier>virtual</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToStringExtra</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><literal type="string">""</literal></expr>;</return> </block_content>}</block></function>

    <comment type="block" format="doxygen">/** A helper function to construct the scripts for this descriptor.
     *
     *  This function is invoked once for every CScript produced by evaluating
     *  m_subdescriptor_arg, or just once in case m_subdescriptor_arg is nullptr.

     *  @param pubkeys The evaluations of the m_pubkey_args field.
     *  @param script The evaluation of m_subdescriptor_arg (or nullptr when m_subdescriptor_arg is nullptr).
     *  @param out A FlatSigningProvider to put scripts or public keys in that are necessary to the solver.
     *             The script arguments to this function are automatically added, as is the origin info of the provided pubkeys.
     *  @return A vector with scriptPubKeys for this descriptor.
     */</comment>
    <function_decl><type><specifier>virtual</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pubkeys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> = <literal type="number">0</literal>;</function_decl>

</protected><public>public:
    <constructor><name>DescriptorImpl</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pubkeys</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DescriptorImpl</name></expr></argument>&gt;</argument_list></name></type> <name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_pubkey_args</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pubkeys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>m_subdescriptor_arg</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>m_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>bool</name></type> <name>IsSolvable</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>m_subdescriptor_arg</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_subdescriptor_arg</name><operator>-&gt;</operator><name>IsSolvable</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>IsRange</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>final</specifier>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>pubkey</name> <range>: <expr><name>m_pubkey_args</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>pubkey</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>m_subdescriptor_arg</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>m_subdescriptor_arg</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>ToStringHelper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>priv</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>extra</name> <init>= <expr><call><name>ToStringExtra</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><ternary><condition><expr><call><name><name>extra</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name> <init>= <expr><name>m_name</name> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>extra</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>pubkey</name> <range>: <expr><name>m_pubkey_args</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pos</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="string">","</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>tmp</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>priv</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pubkey</name><operator>-&gt;</operator><name>ToPrivateString</name></name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>pubkey</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>m_subdescriptor_arg</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pos</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="string">","</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>tmp</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_subdescriptor_arg</name><operator>-&gt;</operator><name>ToStringHelper</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToString</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>final</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ToStringHelper</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>AddChecksum</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>ToPrivateString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <specifier>final</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>ToStringHelper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>AddChecksum</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>ExpandHelper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>cache_read</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>output_scripts</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>cache_write</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>entries</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>m_pubkey_args</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Construct temporary data in `entries` and `subscripts`, to avoid producing output in case of failure.</comment>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>p</name> <range>: <expr><name>m_pubkey_args</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// If we have a cache, we don't need GetPubKey to compute the public key.</comment>
            <comment type="line">// Pass in nullptr to signify only origin info is desired.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>p</name><operator>-&gt;</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cache_read</name></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><operator>&amp;</operator><call><name><name>entries</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>entries</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>cache_read</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Cached expanded public key exists, use it.</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>cache_read</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>compressed</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>cache_read</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0x02</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cache_read</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>cache_read</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">33</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>uncompressed</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>cache_read</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>cache_read</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">65</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>compressed</name> <operator>||</operator> <name>uncompressed</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><call><name><name>cache_read</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cache_read</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>compressed</name></expr> ?</condition><then> <expr><literal type="number">33</literal></expr> </then><else>: <expr><literal type="number">65</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name> <operator>=</operator> <name>pubkey</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>cache_read</name> <operator>=</operator> <call><name><name>cache_read</name><operator>-&gt;</operator><name>subspan</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>compressed</name></expr> ?</condition><then> <expr><literal type="number">33</literal></expr> </then><else>: <expr><literal type="number">65</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>cache_write</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>cache_write</name><operator>-&gt;</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>cache_write</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entries</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>first</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entries</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>first</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>subscripts</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>m_subdescriptor_arg</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>subprovider</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_subdescriptor_arg</name><operator>-&gt;</operator><name>ExpandHelper</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cache_read</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><name>subprovider</name></expr></argument>, <argument><expr><name>cache_write</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>Merge</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>subprovider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>pubkeys</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>entry</name> <operator>:</operator> <name>entries</name></expr></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>origins</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>first</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>CPubKey</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>m_subdescriptor_arg</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>subscript</name> <range>: <expr><name>subscripts</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>scripts</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>addscripts</name> <init>= <expr><call><name>MakeScripts</name><argument_list>(<argument><expr><name>pubkeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subscript</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>addscript</name> <operator>:</operator> <name>addscripts</name></expr></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>output_scripts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>addscript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>output_scripts</name> <operator>=</operator> <call><name>MakeScripts</name><argument_list>(<argument><expr><name>pubkeys</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>Expand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>output_scripts</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>cache</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>final</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>ExpandHelper</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>output_scripts</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>ExpandFromCache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>output_scripts</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>final</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>span</name> <init>= <expr><call><name>MakeSpan</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>ExpandHelper</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>DUMMY_SIGNING_PROVIDER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>span</name></expr></argument>, <argument><expr><name>output_scripts</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>span</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>ExpandPrivate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>final</specifier>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>p</name> <range>: <expr><name>m_pubkey_args</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>p</name><operator>-&gt;</operator><name>GetPrivKey</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>keys</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>m_subdescriptor_arg</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>subprovider</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m_subdescriptor_arg</name><operator>-&gt;</operator><name>ExpandPrivate</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>subprovider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>Merge</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>subprovider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed addr(A) descriptor. */</comment>
<class>class <name>AddressDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>CTxDestination</name></type> <name>m_destination</name></decl>;</decl_stmt>
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToStringExtra</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>m_destination</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>m_destination</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</protected><public>public:
    <constructor><name>AddressDescriptor</name><parameter_list>(<parameter><decl><type><name>CTxDestination</name></type> <name>destination</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call>, <call><name>m_destination</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>bool</name></type> <name>IsSolvable</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>final</specifier> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed raw(H) descriptor. */</comment>
<class>class <name>RawDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScript</name></type> <name>m_script</name></decl>;</decl_stmt>
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToStringExtra</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>m_script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><name>m_script</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</protected><public>public:
    <constructor><name>RawDescriptor</name><parameter_list>(<parameter><decl><type><name>CScript</name></type> <name>script</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call>, <call><name>m_script</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>bool</name></type> <name>IsSolvable</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>final</specifier> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed pk(P) descriptor. */</comment>
<class>class <name>PKDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</protected><public>public:
    <constructor><name>PKDescriptor</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>prov</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><call><name>Vector</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><literal type="string">"pk"</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed pkh(P) descriptor. */</comment>
<class>class <name>PKHDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>id</name> <init>= <expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pubkeys</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</protected><public>public:
    <constructor><name>PKHDescriptor</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>prov</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><call><name>Vector</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><literal type="string">"pkh"</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed wpkh(P) descriptor. */</comment>
<class>class <name>WPKHDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>id</name> <init>= <expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pubkeys</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</protected><public>public:
    <constructor><name>WPKHDescriptor</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>prov</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><call><name>Vector</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><literal type="string">"wpkh"</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed combo(P) descriptor. */</comment>
<class>class <name>ComboDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>id</name> <init>= <expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pubkeys</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// P2PK</comment>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// P2PKH</comment>
        <if_stmt><if>if <condition>(<expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>IsCompressed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CScript</name></type> <name>p2wpkh</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>scripts</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>p2wpkh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p2wpkh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>p2wpkh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>p2wpkh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// P2SH-P2WPKH</comment>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>
</protected><public>public:
    <constructor><name>ComboDescriptor</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>prov</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><call><name>Vector</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><literal type="string">"combo"</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed multi(...) or sortedmulti(...) descriptor */</comment>
<class>class <name>MultisigDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_threshold</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>m_sorted</name></decl>;</decl_stmt>
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ToStringExtra</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name>m_threshold</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>m_sorted</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>sorted_keys</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>sorted_keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sorted_keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><name>m_threshold</name></expr></argument>, <argument><expr><name>sorted_keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><name>m_threshold</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</protected><public>public:
    <constructor><name>MultisigDescriptor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>providers</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sorted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>providers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><name>sorted</name> <operator>?</operator> <literal type="string">"sortedmulti"</literal> <operator>:</operator> <literal type="string">"multi"</literal></expr></argument>)</argument_list></call>, <call><name>m_threshold</name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call>, <call><name>m_sorted</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed sh(...) descriptor. */</comment>
<class>class <name>SHDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><operator>*</operator><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</protected><public>public:
    <constructor><name>SHDescriptor</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DescriptorImpl</name></expr></argument>&gt;</argument_list></name></type> <name>desc</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** A parsed wsh(...) descriptor. */</comment>
<class>class <name>WSHDescriptor</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>DescriptorImpl</name></super></super_list>
<block>{<private type="default">
</private><protected>protected:
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>MakeScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>*</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>WitnessV0ScriptHash</name><argument_list>(<argument><expr><operator>*</operator><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</protected><public>public:
    <constructor><name>WSHDescriptor</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DescriptorImpl</name></expr></argument>&gt;</argument_list></name></type> <name>desc</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>DescriptorImpl</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"wsh"</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</class>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Parser                                                                 //</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////</comment>

<enum type="class">enum class <name>ParseScriptContext</name> <block>{
    <decl><name>TOP</name></decl>,
    <decl><name>P2SH</name></decl>,
    <decl><name>P2WSH</name></decl>,
}</block>;</enum>

<comment type="block" format="doxygen">/** Parse a key path, being passed a split list of elements (the first element is ignored). */</comment>
<function><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseKeyPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>split</name></decl></parameter>, <parameter><decl><type><name>KeyPath</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>elem</name> <init>= <expr><name><name>split</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>hardened</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>elem</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>elem</name><index>[<expr><call><name><name>elem</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name><name>elem</name><index>[<expr><call><name><name>elem</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>elem</name> <operator>=</operator> <call><name><name>elem</name><operator>.</operator><name>first</name></name><argument_list>(<argument><expr><call><name><name>elem</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hardened</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>p</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseUInt32</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>elem</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>elem</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Key path value '%s' is not a valid uint32"</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>elem</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>elem</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0x7FFFFFFFUL</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Key path value %u is out of range"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>hardened</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Parse a public key that excludes origin information. */</comment>
<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>ParsePubkeyInner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>permit_uncompressed</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <using>using <namespace>namespace <name>spanparsing</name>;</namespace></using>

    <decl_stmt><decl><type><name>auto</name></type> <name>split</name> <init>= <expr><call><name>Split</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"No key provided"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IsHex</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>pubkey</name><operator>.</operator><name>IsFullyValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>permit_uncompressed</name> <operator>||</operator> <call><name><name>pubkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>ConstPubkeyProvider</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Uncompressed keys are not allowed"</literal></expr>;</expr_stmt>
                    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Pubkey '%s' is invalid"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CKey</name></type> <name>key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>permit_uncompressed</name> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>keys</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>ConstPubkeyProvider</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Uncompressed keys are not allowed"</literal></expr>;</expr_stmt>
                <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CExtKey</name></type> <name>extkey</name> <init>= <expr><call><name>DecodeExtKey</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CExtPubKey</name></type> <name>extpubkey</name> <init>= <expr><call><name>DecodeExtPubKey</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>extkey</name><operator>.</operator><name>key</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>extpubkey</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"key '%s' is not valid"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>KeyPath</name></type> <name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DeriveType</name></type> <name>type</name> <init>= <expr><name><name>DeriveType</name><operator>::</operator><name>NO</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>split</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>MakeSpan</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>first</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>split</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DeriveType</name><operator>::</operator><name>UNHARDENED</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>split</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>MakeSpan</name><argument_list>(<argument><expr><literal type="string">"*'"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>first</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>split</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>MakeSpan</name><argument_list>(<argument><expr><literal type="string">"*h"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>first</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>split</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DeriveType</name><operator>::</operator><name>HARDENED</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseKeyPath</name><argument_list>(<argument><expr><name>split</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>extkey</name><operator>.</operator><name>key</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>extpubkey</name> <operator>=</operator> <call><name><name>extkey</name><operator>.</operator><name>Neuter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>keys</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>extpubkey</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>extkey</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>BIP32PubkeyProvider</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>extpubkey</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Parse a public key including origin information (if enabled). */</comment>
<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>ParsePubkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>permit_uncompressed</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <using>using <namespace>namespace <name>spanparsing</name>;</namespace></using>

    <decl_stmt><decl><type><name>auto</name></type> <name>origin_split</name> <init>= <expr><call><name>Split</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>origin_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Multiple ']' characters found for a single pubkey"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>origin_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ParsePubkeyInner</name><argument_list>(<argument><expr><name><name>origin_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>permit_uncompressed</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>origin_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>origin_split</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Key origin start '[ character expected but not found, got '%c' instead"</literal></expr></argument>, <argument><expr><name><name>origin_split</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>slash_split</name> <init>= <expr><call><name>Split</name><argument_list>(<argument><expr><name><name>origin_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>subspan</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>slash_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Fingerprint is not 4 bytes (%u characters instead of 8 characters)"</literal></expr></argument>, <argument><expr><name><name>slash_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>fpr_hex</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>slash_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>slash_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHex</name><argument_list>(<argument><expr><name>fpr_hex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Fingerprint '%s' is not hex"</literal></expr></argument>, <argument><expr><name>fpr_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>fpr_bytes</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>fpr_hex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KeyOriginInfo</name></type> <name>info</name></decl>;</decl_stmt>
    <assert type="static">static_assert<argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Fingerprint must be 4 bytes"</literal></expr></argument>)</argument_list>;</assert>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>fpr_bytes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>fpr_bytes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fpr_bytes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseKeyPath</name><argument_list>(<argument><expr><name>slash_split</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>provider</name> <init>= <expr><call><name>ParsePubkeyInner</name><argument_list>(<argument><expr><name><name>origin_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>permit_uncompressed</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>provider</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>OriginPubkeyProvider</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Parse a script in a particular context. */</comment>
<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DescriptorImpl</name></expr></argument>&gt;</argument_list></name></type> <name>ParseScript</name><parameter_list>(<parameter><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name>ParseScriptContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <using>using <namespace>namespace <name>spanparsing</name>;</namespace></using>

    <decl_stmt><decl><type><name>auto</name></type> <name>expr</name> <init>= <expr><call><name>Expr</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>sorted_multi</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>Func</name><argument_list>(<argument><expr><literal type="string">"pk"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>pubkey</name> <init>= <expr><call><name>ParsePubkey</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pubkey</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>PKDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>Func</name><argument_list>(<argument><expr><literal type="string">"pkh"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>pubkey</name> <init>= <expr><call><name>ParsePubkey</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pubkey</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>PKHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"combo"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>pubkey</name> <init>= <expr><call><name>ParsePubkey</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pubkey</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>ComboDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"combo"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Cannot have combo in non-top level"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sorted_multi</name> <operator>=</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"sortedmulti"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"multi"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>threshold</name> <init>= <expr><call><name>Expr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>thres</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>providers</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseUInt32</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>threshold</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>threshold</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>thres</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Multi threshold '%s' is not valid"</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>threshold</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>threshold</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>script_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>expr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Const</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Multi: expected ',', got '%c'"</literal></expr></argument>, <argument><expr><name><name>expr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>arg</name> <init>= <expr><call><name>Expr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>pk</name> <init>= <expr><call><name>ParsePubkey</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pk</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>script_size</name> <operator>+=</operator> <call><name><name>pk</name><operator>-&gt;</operator><name>GetSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>providers</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive"</literal></expr></argument>, <argument><expr><call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>thres</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Multisig threshold cannot be %d, must be at least 1"</literal></expr></argument>, <argument><expr><name>thres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>thres</name> <operator>&gt;</operator> <call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Multisig threshold cannot be larger than the number of keys; threshold is %d but only %u keys specified"</literal></expr></argument>, <argument><expr><name>thres</name></expr></argument>, <argument><expr><call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Cannot have %u pubkeys in bare multisig; only at most 3 pubkeys"</literal></expr></argument>, <argument><expr><call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2SH</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>script_size</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>MAX_SCRIPT_ELEMENT_SIZE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"P2SH script is too large, %d bytes is larger than %d bytes"</literal></expr></argument>, <argument><expr><name>script_size</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>MAX_SCRIPT_ELEMENT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>MultisigDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>thres</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>providers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sorted_multi</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"wpkh"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>pubkey</name> <init>= <expr><call><name>ParsePubkey</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pubkey</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>WPKHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"wpkh"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Cannot have wpkh within wsh"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>desc</name> <init>= <expr><call><name>ParseScript</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name><name>ParseScriptContext</name><operator>::</operator><name>P2SH</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <call><name><name>expr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>SHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Cannot have sh in non-top level"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"wsh"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>desc</name> <init>= <expr><call><name>ParseScript</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <call><name><name>expr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>WSHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"wsh"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Cannot have wsh within wsh"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>expr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Address is not valid"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>AddressDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <call><name>Func</name><argument_list>(<argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name><argument_list>(<argument><expr><call><name><name>expr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHex</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Raw script is not hex"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>bytes</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>RawDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>bytes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bytes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2SH</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"A function is needed within P2SH"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"A function is needed within P2WSH"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s is not a valid descriptor function"</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>expr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>InferPubkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>, <parameter><decl><type><name>ParseScriptContext</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></type> <name>key_provider</name> <init>= <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>ConstPubkeyProvider</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KeyOriginInfo</name></type> <name>info</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetKeyOrigin</name></name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>OriginPubkeyProvider</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>key_provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>key_provider</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DescriptorImpl</name></expr></argument>&gt;</argument_list></name></type> <name>InferScript</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>ParseScriptContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>txntype</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>txntype</name> <operator>==</operator> <name>TX_PUBKEY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>pubkey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>PKDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>InferPubkey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>txntype</name> <operator>==</operator> <name>TX_PUBKEYHASH</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint160</name></type> <name>hash</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyid</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>PKHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>InferPubkey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>txntype</name> <operator>==</operator> <name>TX_WITNESS_V0_KEYHASH</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint160</name></type> <name>hash</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyid</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>WPKHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>InferPubkey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>txntype</name> <operator>==</operator> <name>TX_MULTISIG</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PubkeyProvider</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>providers</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>providers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>InferPubkey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>MultisigDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>providers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>txntype</name> <operator>==</operator> <name>TX_SCRIPTHASH</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>==</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint160</name></type> <name>hash</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>scriptid</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>scriptid</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name></type> <name>sub</name> <init>= <expr><call><name>InferScript</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>, <argument><expr><name><name>ParseScriptContext</name><operator>::</operator><name>P2SH</name></name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sub</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>SHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>txntype</name> <operator>==</operator> <name>TX_WITNESS_V0_SCRIPTHASH</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>!=</operator> <name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>scriptid</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CRIPEMD160</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>scriptid</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>scriptid</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name></type> <name>sub</name> <init>= <expr><call><name>InferScript</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>, <argument><expr><name><name>ParseScriptContext</name><operator>::</operator><name>P2WSH</name></name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sub</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>WSHDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>script</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>AddressDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>RawDescriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


}</block></namespace> <comment type="line">// namespace</comment>

<comment type="block" format="doxygen">/** Check a descriptor checksum, and update desc to be the checksum-less part. */</comment>
<function><type><name>bool</name></type> <name>CheckChecksum</name><parameter_list>(<parameter><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>require_checksum</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>*</modifier></type> <name>out_checksum</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <using>using <namespace>namespace <name>spanparsing</name>;</namespace></using>

    <decl_stmt><decl><type><name>auto</name></type> <name>check_split</name> <init>= <expr><call><name>Split</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>check_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Multiple '#' symbols"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>check_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>require_checksum</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Missing checksum"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>check_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>check_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Expected 8 character checksum, not %u characters"</literal></expr></argument>, <argument><expr><name><name>check_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>checksum</name> <init>= <expr><call><name>DescriptorChecksum</name><argument_list>(<argument><expr><name><name>check_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>checksum</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Invalid characters in payload"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>check_split</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>std</name><operator>::</operator><name>equal</name></name><argument_list>(<argument><expr><call><name><name>checksum</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>checksum</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>check_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Provided checksum '%s' does not match computed checksum '%s'"</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>check_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>check_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>out_checksum</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out_checksum</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>check_split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Descriptor</name></expr></argument>&gt;</argument_list></name></type> <name>Parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>require_checksum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sp</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckChecksum</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>require_checksum</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>ret</name> <init>= <expr><call><name>ParseScript</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>sp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Descriptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>GetDescriptorChecksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>descriptor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sp</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckChecksum</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Descriptor</name></expr></argument>&gt;</argument_list></name></type> <name>InferDescriptor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>InferScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>ParseScriptContext</name><operator>::</operator><name>TOP</name></name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
