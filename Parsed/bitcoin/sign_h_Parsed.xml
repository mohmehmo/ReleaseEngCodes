<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/script/sign.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SCRIPT_SIGN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SCRIPT_SIGN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/interpreter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/keyorigin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CKeyID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CScript</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CScriptID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CTransaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SigningProvider</name></decl>;</decl_stmt>

<struct_decl>struct <name>CMutableTransaction</name>;</struct_decl>

<comment type="block" format="doxygen">/** Interface for signature creators. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BaseSignatureCreator</name> <block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>BaseSignatureCreator</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>virtual</name> <specifier>const</specifier> <name>BaseSignatureChecker</name><operator>&amp;</operator> <macro><name>Checker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Create a singular (non-script) signature. */</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>CreateSig</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SigningProvider</name><operator>&amp;</operator> <name>provider</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchSig</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CKeyID</name><operator>&amp;</operator> <name>keyid</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>scriptCode</name></expr></argument>, <argument><expr><name>SigVersion</name> <name>sigversion</name></expr></argument>)</argument_list> const <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** A signature creator for transactions. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>MutableTransactionSignatureCreator</name> <range>: <expr><name>public</name> <name>BaseSignatureCreator</name> <block>{
    <expr><specifier>const</specifier> <name>CMutableTransaction</name><operator>*</operator> <name>txTo</name></expr>;
    <expr><name>unsigned</name> <name>int</name> <name>nIn</name></expr>;
    <expr><name>int</name> <name>nHashType</name></expr>;
    <expr><name>CAmount</name> <name>amount</name></expr>;
    <expr><specifier>const</specifier> <name>MutableTransactionSignatureChecker</name> <name>checker</name></expr>;

<expr><name>public</name><operator>:</operator>
    <macro><name>MutableTransactionSignatureCreator</name><argument_list>(<argument>const CMutableTransaction* txToIn</argument>, <argument>unsigned int nInIn</argument>, <argument>const CAmount&amp; amountIn</argument>, <argument>int nHashTypeIn = SIGHASH_ALL</argument>)</argument_list></macro></expr>;
    <expr><specifier>const</specifier> <name>BaseSignatureChecker</name><operator>&amp;</operator> <macro><name>Checker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>checker</name></expr>;</return> }</block>
    <name>bool</name> <macro><name>CreateSig</name><argument_list>(<argument>const SigningProvider&amp; provider</argument>, <argument>std::vector&lt;unsigned char&gt;&amp; vchSig</argument>, <argument>const CKeyID&amp; keyid</argument>, <argument>const CScript&amp; scriptCode</argument>, <argument>SigVersion sigversion</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** A signature creator that just produces 71-byte empty signatures. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>DUMMY_SIGNATURE_CREATOR</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** A signature creator that just produces 72-byte empty signatures. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>DUMMY_MAXIMUM_SIGNATURE_CREATOR</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>SigPair</name></expr>;</expr_stmt></typedef>

<comment type="line">// This struct contains information from a transaction input and also contains signatures for that input.</comment>
<comment type="line">// The information contained here can be used to create a signature and is also filled by ProduceSignature</comment>
<comment type="line">// in order to construct final scriptSigs and scriptWitnesses.</comment>
<struct>struct <name>SignatureData</name> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>complete</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; Stores whether the scriptSig and scriptWitness are complete</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>witness</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; Stores whether the input this SigData corresponds to is a witness input</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; The scriptSig of an input. Contains complete signatures or the traditional partial signatures format</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>redeem_script</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; The redeemScript (if any) for the input</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>witness_script</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs.</comment>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>scriptWitness</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>SigPair</name></expr></argument>&gt;</argument_list></name> <name>signatures</name></expr>;</expr_stmt> <comment type="line" format="doxygen">///&lt; BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>misc_pubkeys</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name> <name>missing_pubkeys</name></expr>;</expr_stmt> <comment type="line" format="doxygen">///&lt; KeyIDs of pubkeys which could not be found</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name> <name>missing_sigs</name></expr>;</expr_stmt> <comment type="line" format="doxygen">///&lt; KeyIDs of pubkeys for signatures which could not be found</comment>
    <decl_stmt><decl><type><name>uint160</name></type> <name>missing_redeem_script</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; ScriptID of the missing redeemScript (if any)</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>missing_witness_script</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; SHA256 of the missing witnessScript (if any)</comment>

    <macro><name>SignatureData</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>SignatureData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>script</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>scriptSig</name><argument_list>(<argument>script</argument>)</argument_list></macro> <block>{}</block>
    <name>void</name> <macro><name>MergeSignatureData</name><argument_list>(<argument>SignatureData sigdata</argument>)</argument_list></macro></expr>;</expr_stmt>
}</block>;</struct>

<comment type="line">// Takes a stream and multiple arguments and serializes them as if first serialized into a vector and then into the stream</comment>
<comment type="line">// The resulting output into the stream has the total serialized length of all of the objects followed by all objects concatenated with each other.</comment>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>X</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>SerializeToVector</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>X</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>GetSerializeSizeMany</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>GetVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SerializeMany</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Takes a stream and multiple arguments and unserializes them first as a vector then each object individually in the order provided in the arguments</comment>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>X</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>UnserializeFromVector</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>X</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>expected_size</name> <init>= <expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>remaining_before</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UnserializeMany</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>remaining_after</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>remaining_after</name> <operator>+</operator> <name>expected_size</name> <operator>!=</operator> <name>remaining_before</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Size of value was not the stated size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Deserialize HD keypaths into a map</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>DeserializeHDKeypaths</name><argument_list>(<argument><expr><name>Stream</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>hd_keypaths</name></expr></argument>)</argument_list>
<block>{<block_content>
    <comment type="line">// Make sure that the key is the size of pubkey + 1</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CPubKey</name><operator>::</operator><name>SIZE</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CPubKey</name><operator>::</operator><name>COMPRESSED_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Size of key was not the expected size for the type BIP32 keypath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Read in the pubkey from key</comment>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pubkey</name><operator>.</operator><name>IsFullyValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Invalid pubkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>hd_keypaths</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Duplicate Key, pubkey derivation path already provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Read in key path</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>value_len</name> <init>= <expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>value_len</name> <operator>%</operator> <literal type="number">4</literal> <operator>||</operator> <name>value_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Invalid length for HD key path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>KeyOriginInfo</name></type> <name>keypath</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>&gt;&gt;</operator> <name><name>keypath</name><operator>.</operator><name>fingerprint</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>value_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>&gt;&gt;</operator> <name>index</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keypath</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Add to map</comment>
    <expr_stmt><expr><call><name><name>hd_keypaths</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Serialize HD keypaths to a stream from a map</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>SerializeHDKeypaths</name><argument_list>(<argument><expr><name>Stream</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>hd_keypaths</name></expr></argument>, <argument><expr><name>uint8_t</name> <name>type</name></expr></argument>)</argument_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>keypath_pair</name> <range>: <expr><name>hd_keypaths</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keypath_pair</name><operator>.</operator><name>first</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Invalid CPubKey being serialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>SerializeToVector</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>MakeSpan</name><argument_list>(<argument><expr><name><name>keypath_pair</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><call><name><name>keypath_pair</name><operator>.</operator><name>second</name><operator>.</operator><name>path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>keypath_pair</name><operator>.</operator><name>second</name><operator>.</operator><name>fingerprint</name></name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>path</name> <range>: <expr><name><name>keypath_pair</name><operator>.</operator><name>second</name><operator>.</operator><name>path</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>path</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/** Produce a script signature using a generic signature creator. */</comment>
<function_decl><type><name>bool</name></type> <name>ProduceSignature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>creator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Produce a script signature for a transaction. */</comment>
<function_decl><type><name>bool</name></type> <name>SignSignature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name> <modifier>&amp;</modifier></type><name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>fromPubKey</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>txTo</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHashType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SignSignature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name> <modifier>&amp;</modifier></type><name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>txFrom</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>txTo</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHashType</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Extract signature data from a transaction input, and insert it. */</comment>
<function_decl><type><name>SignatureData</name></type> <name>DataFromTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UpdateInput</name><parameter_list>(<parameter><decl><type><name>CTxIn</name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SignatureData</name><modifier>&amp;</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Check whether we know how to sign for an output like this, assuming we
 * have all private keys. While this function does not need private keys, the passed
 * provider is used to look up public keys and redeemscripts by hash.
 * Solvability is unrelated to whether we consider this output to be ours. */</comment>
<function_decl><type><name>bool</name></type> <name>IsSolvable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a scriptPubKey is known to be segwit. */</comment>
<function_decl><type><name>bool</name></type> <name>IsSegWitOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SCRIPT_SIGN_H</comment>
</unit>
