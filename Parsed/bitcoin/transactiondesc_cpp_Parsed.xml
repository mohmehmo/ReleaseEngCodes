<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/transactiondesc.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/transactiondesc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/paymentserver.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/transactionrecord.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/ismine.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<function><type><name>QString</name></type> <name><name>TransactionDesc</name><operator>::</operator><name>FormatTxStatus</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>interfaces</name><operator>::</operator><name>WalletTx</name></name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>interfaces</name><operator>::</operator><name>WalletTxStatus</name></name><modifier>&amp;</modifier></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inMempool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numBlocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>status</name><operator>.</operator><name>is_final</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>nLockTime</name></name> <operator>&lt;</operator> <name>LOCKTIME_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open for %n more block(s)"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>nLockTime</name></name> <operator>-</operator> <name>numBlocks</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open until %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>dateTimeStr</name></name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>nLockTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nDepth</name> <init>= <expr><name><name>status</name><operator>.</operator><name>depth_in_main_chain</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nDepth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"conflicted with a transaction with %1 confirmations"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><operator>-</operator><name>nDepth</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>nDepth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"0/unconfirmed, %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>inMempool</name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"in memory pool"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"not in memory pool"</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>status</name><operator>.</operator><name>is_abandoned</name></name></expr> ?</condition><then> <expr><literal type="string">", "</literal><operator>+</operator><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"abandoned"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>nDepth</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1/unconfirmed"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>nDepth</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1 confirmations"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>nDepth</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Takes an encoded PaymentRequest as a string and tries to find the Common Name of the X.509 certificate</comment>
<comment type="line">// used to sign the PaymentRequest.</comment>
<function><type><name>bool</name></type> <name>GetPaymentRequestMerchant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>pr</name></decl></parameter>, <parameter><decl><type><name>QString</name><modifier>&amp;</modifier></type> <name>merchant</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Search for the supported pki type strings</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>pr</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x0b</literal></expr>}</block></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"x509+sha256"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name> <operator>||</operator> <call><name><name>pr</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x09</literal></expr>}</block></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"x509+sha1"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// We want the common name of the Subject of the cert. This should be the second occurrence</comment>
        <comment type="line">// of the bytes 0x0603550403. The first occurrence of those is the common name of the issuer.</comment>
        <comment type="line">// After those bytes will be either 0x13 or 0x0C, then length, then either the ascii or utf8</comment>
        <comment type="line">// string with the common name which is the merchant name</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>cn_pos</name> <init>= <expr><call><name><name>pr</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cn_pos</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cn_pos</name> <operator>=</operator> <call><name><name>pr</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>}</block></expr></argument>, <argument><expr><name>cn_pos</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>cn_pos</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cn_pos</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>pr</name><index>[<expr><name>cn_pos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x13</literal> <operator>||</operator> <name><name>pr</name><index>[<expr><name>cn_pos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x0c</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>cn_pos</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// Consume the type</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>str_len</name> <init>= <expr><name><name>pr</name><index>[<expr><name>cn_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>cn_pos</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// Consume the string length</comment>
                    <expr_stmt><expr><name>merchant</name> <operator>=</operator> <call><name><name>QString</name><operator>::</operator><name>fromUtf8</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>cn_pos</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>TransactionDesc</name><operator>::</operator><name>toHTML</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><name>TransactionRecord</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>numBlocks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>WalletTxStatus</name></name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>WalletOrderForm</name></name></type> <name>orderForm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>inMempool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>WalletTx</name></name></type> <name>wtx</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>getWalletTxDetails</name></name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>orderForm</name></expr></argument>, <argument><expr><name>inMempool</name></expr></argument>, <argument><expr><name>numBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>strHTML</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>strHTML</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;html&gt;&lt;font face='verdana, arial, helvetica, sans-serif'&gt;"</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTime</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>time</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nCredit</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>credit</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nDebit</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>debit</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nNet</name> <init>= <expr><name>nCredit</name> <operator>-</operator> <name>nDebit</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Status"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name>FormatTxStatus</name><argument_list>(<argument><expr><name>wtx</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>inMempool</name></expr></argument>, <argument><expr><name>numBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Date"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>nTime</name></expr> ?</condition><then> <expr><call><name><name>GUIUtil</name><operator>::</operator><name>dateTimeStr</name></name><argument_list>(<argument><expr><name>nTime</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>

    <comment type="line">//</comment>
    <comment type="line">// From</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>is_coinbase</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Source"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Generated"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>value_map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"from"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"from"</literal></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Online transaction</comment>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"From"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"from"</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// Offline transaction</comment>
        <if_stmt><if>if <condition>(<expr><name>nNet</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Credit</comment>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>isminetype</name></type> <name>ismine</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>getAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ismine</name></expr></argument>, <comment type="block">/* purpose= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"From"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"To"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>QString</name></type> <name>addressOwned</name> <init>= <expr><ternary><condition><expr><name>ismine</name> <operator>==</operator> <name>ISMINE_SPENDABLE</name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"own address"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"watch-only"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>addressOwned</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>addressOwned</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//</comment>
    <comment type="line">// To</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>value_map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"to"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"to"</literal></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Online transaction</comment>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strAddress</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"to"</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"To"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>strAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>getAddress</name></name><argument_list>(
                <argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <comment type="block">/* is_mine= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <comment type="block">/* purpose= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name>strAddress</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Amount</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>is_coinbase</name></name> <operator>&amp;&amp;</operator> <name>nCredit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// Coinbase</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>nUnmatured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nUnmatured</name> <operator>+=</operator> <call><name><name>wallet</name><operator>.</operator><name>getCredit</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>, <argument><expr><name>ISMINE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Credit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>status</name><operator>.</operator><name>is_in_main_chain</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>nUnmatured</name></expr></argument>)</argument_list></call><operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"matures in %n more block(s)"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>status</name><operator>.</operator><name>blocks_to_maturity</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"("</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"not accepted"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nNet</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// Credit</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Credit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>nNet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>isminetype</name></type> <name>fAllFromMe</name> <init>= <expr><name>ISMINE_SPENDABLE</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>isminetype</name></type> <name>mine</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>txin_is_mine</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>fAllFromMe</name> <operator>&gt;</operator> <name>mine</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fAllFromMe</name> <operator>=</operator> <name>mine</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>isminetype</name></type> <name>fAllToMe</name> <init>= <expr><name>ISMINE_SPENDABLE</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>isminetype</name></type> <name>mine</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>txout_is_mine</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>fAllToMe</name> <operator>&gt;</operator> <name>mine</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fAllToMe</name> <operator>=</operator> <name>mine</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>fAllFromMe</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>fAllFromMe</name> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"From"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"watch-only"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Debit</comment>
            <comment type="line">//</comment>
            <decl_stmt><decl><type><name>auto</name></type> <name>mine</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>txout_is_mine</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// Ignore change</comment>
                <decl_stmt><decl><type><name>isminetype</name></type> <name>toSelf</name> <init>= <expr><operator>*</operator><operator>(</operator><name>mine</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>toSelf</name> <operator>==</operator> <name>ISMINE_SPENDABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fAllFromMe</name> <operator>==</operator> <name>ISMINE_SPENDABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>wtx</name><operator>.</operator><name>value_map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"to"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"to"</literal></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Offline transaction</comment>
                    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"To"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>getAddress</name></name><argument_list>(
                                <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <comment type="block">/* is_mine= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <comment type="block">/* purpose= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if<condition>(<expr><name>toSelf</name> <operator>==</operator> <name>ISMINE_SPENDABLE</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">" (own address)"</literal></expr>;</expr_stmt></block_content></block></if>
                        <if type="elseif">else if<condition>(<expr><name>toSelf</name> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">" (watch-only)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Debit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>-</operator><name><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name>toSelf</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Credit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name>fAllToMe</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Payment to self</comment>
                <decl_stmt><decl><type><name>CAmount</name></type> <name>nChange</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>change</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CAmount</name></type> <name>nValue</name> <init>= <expr><name>nCredit</name> <operator>-</operator> <name>nChange</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Total debit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>-</operator><name>nValue</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Total credit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>nValue</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>CAmount</name></type> <name>nTxFee</name> <init>= <expr><name>nDebit</name> <operator>-</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetValueOut</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nTxFee</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transaction fee"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>-</operator><name>nTxFee</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">//</comment>
            <comment type="line">// Mixed debit transaction</comment>
            <comment type="line">//</comment>
            <decl_stmt><decl><type><name>auto</name></type> <name>mine</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>txin_is_mine</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vin</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>mine</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Debit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>-</operator><call><name><name>wallet</name><operator>.</operator><name>getDebit</name></name><argument_list>(<argument><expr><name>txin</name></expr></argument>, <argument><expr><name>ISMINE_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>mine</name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>txout_is_mine</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>mine</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Credit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><call><name><name>wallet</name><operator>.</operator><name>getCredit</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>, <argument><expr><name>ISMINE_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Net amount"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>nNet</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Message</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>value_map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"message"</literal></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Message"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt;&lt;br&gt;"</literal> <operator>+</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"message"</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>value_map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"comment"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"comment"</literal></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Comment"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt;&lt;br&gt;"</literal> <operator>+</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>value_map</name><index>[<expr><literal type="string">"comment"</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transaction ID"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>rec</name><operator>-&gt;</operator><name>getTxHash</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transaction total size"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetTotalSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" bytes&lt;br&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transaction virtual size"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" bytes&lt;br&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Output index"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>rec</name><operator>-&gt;</operator><name>getOutputIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>

    <comment type="line">// Message from normal bitcoin:URI (bitcoin:123...?message=example)</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>r</name> <range>: <expr><name>orderForm</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="string">"Message"</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Message"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt;&lt;br&gt;"</literal> <operator>+</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">//</comment>
        <comment type="line">// PaymentRequest info:</comment>
        <comment type="line">//</comment>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="string">"PaymentRequest"</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>QString</name></type> <name>merchant</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetPaymentRequestMerchant</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>merchant</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>merchant</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>merchant</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">" (Certificate was not verified)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>merchant</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Merchant"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name>merchant</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>is_coinbase</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>quint32</name></type> <name>numBlocksToMaturity</name> <init>= <expr><name>COINBASE_MATURITY</name> <operator>+</operator>  <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Generated coins must mature %1 blocks before they can be spent. When you generated this block, it was broadcast to the network to be added to the block chain. If it fails to get into the chain, its state will change to \"not accepted\" and it won't be spendable. This may occasionally happen if another node generates a block within a few seconds of yours."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>numBlocksToMaturity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Debug view</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getLogCategories</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>BCLog</name><operator>::</operator><name>NONE</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;hr&gt;&lt;br&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Debug information"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;&lt;br&gt;"</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vin</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>txinIsMine</name></name><argument_list>(<argument><expr><name>txin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Debit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>-</operator><call><name><name>wallet</name><operator>.</operator><name>getDebit</name></name><argument_list>(<argument><expr><name>txin</name></expr></argument>, <argument><expr><name>ISMINE_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>txoutIsMine</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Credit"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt; "</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><call><name><name>wallet</name><operator>.</operator><name>getCredit</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>, <argument><expr><name>ISMINE_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transaction"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt;&lt;br&gt;"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;br&gt;&lt;b&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Inputs"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":&lt;/b&gt;"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;ul&gt;"</literal></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vin</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>COutPoint</name></type> <name>prevout</name> <init>= <expr><name><name>txin</name><operator>.</operator><name>prevout</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Coin</name></type> <name>prev</name></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name><name>node</name><operator>.</operator><name>getUnspentOutput</name></name><argument_list>(<argument><expr><name>prevout</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <block>{<block_content>
                    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;li&gt;"</literal></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>CTxOut</name> <modifier>&amp;</modifier></type><name>vout</name> <init>= <expr><name><name>prev</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>vout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>getAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <comment type="block">/* is_mine= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <comment type="block">/* purpose= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>strHTML</name> <operator>=</operator> <name>strHTML</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Amount"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name><name>vout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>strHTML</name> <operator>=</operator> <name>strHTML</name> <operator>+</operator> <literal type="string">" IsMine="</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>wallet</name><operator>.</operator><name>txoutIsMine</name></name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ISMINE_SPENDABLE</name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"&lt;/li&gt;"</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>strHTML</name> <operator>=</operator> <name>strHTML</name> <operator>+</operator> <literal type="string">" IsWatchOnly="</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>wallet</name><operator>.</operator><name>txoutIsMine</name></name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">"&lt;/li&gt;"</literal></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;/ul&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>strHTML</name> <operator>+=</operator> <literal type="string">"&lt;/font&gt;&lt;/html&gt;"</literal></expr>;</expr_stmt>
    <return>return <expr><name>strHTML</name></expr>;</return>
</block_content>}</block></function>
</unit>
