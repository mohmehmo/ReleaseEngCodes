<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/optionsdialog.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsdialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/forms/ui_optionsdialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include> <comment type="line">// for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txdb.h&gt;</cpp:file></cpp:include> <comment type="line">// for -dbcache defaults</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDataWidgetMapper&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDir&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QIntValidator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLocale&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSystemTrayIcon&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>

<constructor><name><name>OptionsDialog</name><operator>::</operator><name>OptionsDialog</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enableWallet</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QDialog</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>ui</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Ui</name><operator>::</operator><name>OptionsDialog</name></name></expr></argument>)</argument_list></call>,
    <call><name>model</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>mapper</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>setupUi</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Main elements init */</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>databaseCache</name><operator>-&gt;</operator><name>setMinimum</name></name><argument_list>(<argument><expr><name>nMinDbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>databaseCache</name><operator>-&gt;</operator><name>setMaximum</name></name><argument_list>(<argument><expr><name>nMaxDbCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>threadsScriptVerif</name><operator>-&gt;</operator><name>setMinimum</name></name><argument_list>(<argument><expr><operator>-</operator><call><name>GetNumCores</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>threadsScriptVerif</name><operator>-&gt;</operator><name>setMaximum</name></name><argument_list>(<argument><expr><name>MAX_SCRIPTCHECK_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>pruneWarning</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>pruneWarning</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QLabel { color: red; }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>pruneSize</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>prune</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>pruneSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>setEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Network elements init */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_UPNP</name></cpp:ifndef>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>mapPortUpnp</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name><operator>-&gt;</operator><name>setValidator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QIntValidator</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyIpTor</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyPortTor</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyPortTor</name><operator>-&gt;</operator><name>setValidator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QIntValidator</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>setEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>setEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>updateProxyValidationState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocksTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIpTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>setEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocksTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyPortTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>setEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocksTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>updateProxyValidationState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Window elements init */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <comment type="block">/* remove Window tab on Mac */</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>removeTab</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>indexOf</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>tabWindow</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* hide launch at startup option on macOS */</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>bitcoinAtStartup</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>verticalLayout_Main</name><operator>-&gt;</operator><name>removeWidget</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>bitcoinAtStartup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>verticalLayout_Main</name><operator>-&gt;</operator><name>removeItem</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>horizontalSpacer_0_Main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* remove Wallet tab in case of -disablewallet */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enableWallet</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>removeTab</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>indexOf</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>tabWallet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Display elements init */</comment>
    <decl_stmt><decl><type><name>QDir</name></type> <name>translations</name><argument_list>(<argument><expr><literal type="string">":translations"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>bitcoinAtStartup</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>bitcoinAtStartup</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>bitcoinAtStartup</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>bitcoinAtStartup</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>openBitcoinConfButton</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>openBitcoinConfButton</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>addItem</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>langStr</name> <range>: <expr><call><name><name>translations</name><operator>.</operator><name>entryList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QLocale</name></type> <name>locale</name><argument_list>(<argument><expr><name>langStr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <comment type="block" format="doxygen">/** check if the locale name consists of 2 parts (language_country) */</comment>
        <if_stmt><if>if<condition>(<expr><call><name><name>langStr</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block" format="doxygen">/** display language strings as "native language - native country (locale name)", e.g. "Deutsch - Deutschland (de)" */</comment>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>addItem</name></name><argument_list>(<argument><expr><call><name><name>locale</name><operator>.</operator><name>nativeLanguageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>locale</name><operator>.</operator><name>nativeCountryName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>langStr</name> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><name>langStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block" format="doxygen">/** display language strings as "native language (locale name)", e.g. "Deutsch (de)" */</comment>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lang</name><operator>-&gt;</operator><name>addItem</name></name><argument_list>(<argument><expr><call><name><name>locale</name><operator>.</operator><name>nativeLanguageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>langStr</name> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><name>langStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>thirdPartyTxUrls</name><operator>-&gt;</operator><name>setPlaceholderText</name></name><argument_list>(<argument><expr><literal type="string">"https://example.com/tx/%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BitcoinUnits</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Widget-to-option mapper */</comment>
    <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>new</operator> <call><name>QDataWidgetMapper</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>setSubmitPolicy</name></name><argument_list>(<argument><expr><name><name>QDataWidgetMapper</name><operator>::</operator><name>ManualSubmit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>setOrientation</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>Vertical</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>GUIUtil</name><operator>::</operator><name>ItemDelegate</name></name><modifier>*</modifier></type> <name>delegate</name> <init>= <expr><operator>new</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>ItemDelegate</name></name><argument_list>(<argument><expr><name>mapper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>delegate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GUIUtil</name><operator>::</operator><name>ItemDelegate</name><operator>::</operator><name>keyEscapePressed</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>reject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>setItemDelegate</name></name><argument_list>(<argument><expr><name>delegate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* setup/change UI elements when proxy IPs are invalid/valid */</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name><operator>-&gt;</operator><name>setCheckValidator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ProxyAddressValidator</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyIpTor</name><operator>-&gt;</operator><name>setCheckValidator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ProxyAddressValidator</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QValidatedLineEdit</name><operator>::</operator><name>validationDidChange</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>updateProxyValidationState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIpTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QValidatedLineEdit</name><operator>::</operator><name>validationDidChange</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>updateProxyValidationState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLineEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>updateProxyValidationState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyPortTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLineEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>updateProxyValidationState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>QSystemTrayIcon</name><operator>::</operator><name>isSystemTrayAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>hideTrayIcon</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>hideTrayIcon</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>minimizeToTray</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>minimizeToTray</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>OptionsDialog</name><operator>::</operator><name>~OptionsDialog</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>delete</operator> <name>ui</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>setModel</name></name><parameter_list>(<parameter><decl><type><name>OptionsModel</name> <modifier>*</modifier></type><name>_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>_model</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>_model</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* check if client restart is needed and show persistent message */</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>_model</name><operator>-&gt;</operator><name>isRestartRequired</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>showRestartWarning</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Prune values are in GB to be consistent with intro.cpp</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>constexpr</specifier> <name>uint64_t</name></type> <name>nMinDiskSpace</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>MIN_DISK_SPACE_FOR_BLOCK_FILES</name> <operator>/</operator> <name>GB_BYTES</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>MIN_DISK_SPACE_FOR_BLOCK_FILES</name> <operator>%</operator> <name>GB_BYTES</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>pruneSize</name><operator>-&gt;</operator><name>setRange</name></name><argument_list>(<argument><expr><name>nMinDiskSpace</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>QString</name></type> <name>strLabel</name> <init>= <expr><call><name><name>_model</name><operator>-&gt;</operator><name>getOverriddenByCommandLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>strLabel</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>strLabel</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>overriddenByCommandLineLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>strLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>setModel</name></name><argument_list>(<argument><expr><name>_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>toFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateDefaultProxyNets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* warn when one of the following settings changes by user action (placed here so init via mapper doesn't trigger them) */</comment>

    <comment type="block">/* Main */</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>prune</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>showRestartWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>prune</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>togglePruneWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>connect</name><argument_list>(<argument>ui-&gt;pruneSize</argument>, <argument>static_cast&lt;void (QSpinBox::*)(int)&gt;(&amp;QSpinBox::valueChanged)</argument>, <argument>this</argument>, <argument>&amp;OptionsDialog::showRestartWarning</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>connect</name><argument_list>(<argument>ui-&gt;databaseCache</argument>, <argument>static_cast&lt;void (QSpinBox::*)(int)&gt;(&amp;QSpinBox::valueChanged)</argument>, <argument>this</argument>, <argument>&amp;OptionsDialog::showRestartWarning</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>connect</name><argument_list>(<argument>ui-&gt;threadsScriptVerif</argument>, <argument>static_cast&lt;void (QSpinBox::*)(int)&gt;(&amp;QSpinBox::valueChanged)</argument>, <argument>this</argument>, <argument>&amp;OptionsDialog::showRestartWarning</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <comment type="block">/* Wallet */</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>spendZeroConfChange</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>showRestartWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Network */</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>allowIncoming</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>showRestartWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>showRestartWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocksTor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>showRestartWarning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Display */</comment>
    <macro><name>connect</name><argument_list>(<argument>ui-&gt;lang</argument>, <argument>static_cast&lt;void (QValueComboBox::*)()&gt;(&amp;QValueComboBox::valueChanged)</argument>, <argument>[this]{ showRestartWarning(); }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>thirdPartyTxUrls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLineEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showRestartWarning</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>setCurrentTab</name></name><parameter_list>(<parameter><decl><type><name><name>OptionsDialog</name><operator>::</operator><name>Tab</name></name></type> <name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>tab_widget</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name><name>OptionsDialog</name><operator>::</operator><name>Tab</name><operator>::</operator><name>TAB_NETWORK</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tab_widget</name> <operator>=</operator> <name><name>ui</name><operator>-&gt;</operator><name>tabNetwork</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name><name>OptionsDialog</name><operator>::</operator><name>Tab</name><operator>::</operator><name>TAB_MAIN</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tab_widget</name> <operator>=</operator> <name><name>ui</name><operator>-&gt;</operator><name>tabMain</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tab_widget</name> <operator>&amp;&amp;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>currentWidget</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>tab_widget</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>setCurrentWidget</name></name><argument_list>(<argument><expr><name>tab_widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>setMapper</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* Main */</comment>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>bitcoinAtStartup</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>StartAtStartup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>threadsScriptVerif</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ThreadsScriptVerif</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>databaseCache</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>DatabaseCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>prune</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>Prune</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>pruneSize</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>PruneSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Wallet */</comment>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>spendZeroConfChange</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>SpendZeroConfChange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>coinControlFeatures</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>CoinControlFeatures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Network */</comment>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>mapPortUpnp</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>MapPortUPnP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>allowIncoming</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>Listen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocks</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ProxyUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ProxyIP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ProxyPort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>connectSocksTor</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ProxyUseTor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIpTor</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ProxyIPTor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>proxyPortTor</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ProxyPortTor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Window */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><call><name><name>QSystemTrayIcon</name><operator>::</operator><name>isSystemTrayAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>hideTrayIcon</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>HideTrayIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>minimizeToTray</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>MinimizeToTray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>minimizeOnClose</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>MinimizeOnClose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Display */</comment>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>Language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>DisplayUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>addMapping</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>thirdPartyTxUrls</name></name></expr></argument>, <argument><expr><name><name>OptionsModel</name><operator>::</operator><name>ThirdPartyTxUrls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>setOkButtonState</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>okButton</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>fState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>on_resetButton_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>model</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// confirmation dialog</comment>
        <decl_stmt><decl><type><name><name>QMessageBox</name><operator>::</operator><name>StandardButton</name></name></type> <name>btnRetVal</name> <init>= <expr><call><name><name>QMessageBox</name><operator>::</operator><name>question</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Confirm options reset"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Client restart required to activate changes."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;&lt;br&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Client will be shut down. Do you want to proceed?"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name> <operator>|</operator> <name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>, <argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name>btnRetVal</name> <operator>==</operator> <name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="block">/* reset all options and close GUI */</comment>
        <expr_stmt><expr><call><name><name>model</name><operator>-&gt;</operator><name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>on_openBitcoinConfButton_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* explain the purpose of the config file */</comment>
    <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>information</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Configuration options"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The configuration file is used to specify advanced user options which override GUI settings. "</literal>
           <literal type="string">"Additionally, any command-line options will override this configuration file."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* show an error if there was some problem opening the file */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>GUIUtil</name><operator>::</operator><name>openBitcoinConf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The configuration file could not be opened."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>on_okButton_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>mapper</name><operator>-&gt;</operator><name>submit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>accept</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateDefaultProxyNets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>on_cancelButton_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>reject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>on_hideTrayIcon_stateChanged</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>fState</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>minimizeToTray</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>minimizeToTray</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>minimizeToTray</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>togglePruneWarning</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>pruneWarning</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>pruneWarning</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>showRestartWarning</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fPersistent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>statusLabel</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QLabel { color: red; }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>fPersistent</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>statusLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Client restart required to activate changes."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>statusLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"This change would require a client restart."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// clear non-persistent status label after 10 seconds</comment>
        <comment type="line">// Todo: should perhaps be a class attribute, if we extend the use of statusLabel</comment>
        <expr_stmt><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsDialog</name><operator>::</operator><name>clearStatusLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>clearStatusLabel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>statusLabel</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>model</name> <operator>&amp;&amp;</operator> <call><name><name>model</name><operator>-&gt;</operator><name>isRestartRequired</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>showRestartWarning</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>updateProxyValidationState</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QValidatedLineEdit</name> <modifier>*</modifier></type><name>pUiProxyIp</name> <init>= <expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QValidatedLineEdit</name> <modifier>*</modifier></type><name>otherProxyWidget</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pUiProxyIp</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>proxyIpTor</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name></name></expr> </then><else>: <expr><name><name>ui</name><operator>-&gt;</operator><name>proxyIpTor</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>pUiProxyIp</name><operator>-&gt;</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name><operator>-&gt;</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>proxyPortTor</name><operator>-&gt;</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyPortTor</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setOkButtonState</name><argument_list>(<argument><expr><call><name><name>otherProxyWidget</name><operator>-&gt;</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//only enable ok button if both proxys are valid</comment>
        <expr_stmt><expr><call><name>clearStatusLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>setOkButtonState</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>statusLabel</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QLabel { color: red; }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>statusLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The supplied proxy address is invalid."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>OptionsDialog</name><operator>::</operator><name>updateDefaultProxyNets</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>proxyType</name></type> <name>proxy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strProxy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>strDefaultProxyGUI</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>model</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProxy</name><argument_list>(<argument><expr><name>NET_IPV4</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strProxy</name> <operator>=</operator> <call><name><name>proxy</name><operator>.</operator><name>proxy</name><operator>.</operator><name>ToStringIP</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>proxy</name><operator>.</operator><name>proxy</name><operator>.</operator><name>ToStringPort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strDefaultProxyGUI</name> <operator>=</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>strProxy</name> <operator>==</operator> <call><name><name>strDefaultProxyGUI</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyReachIPv4</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyReachIPv4</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>model</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProxy</name><argument_list>(<argument><expr><name>NET_IPV6</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strProxy</name> <operator>=</operator> <call><name><name>proxy</name><operator>.</operator><name>proxy</name><operator>.</operator><name>ToStringIP</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>proxy</name><operator>.</operator><name>proxy</name><operator>.</operator><name>ToStringPort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strDefaultProxyGUI</name> <operator>=</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>strProxy</name> <operator>==</operator> <call><name><name>strDefaultProxyGUI</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyReachIPv6</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyReachIPv6</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>model</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProxy</name><argument_list>(<argument><expr><name>NET_ONION</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strProxy</name> <operator>=</operator> <call><name><name>proxy</name><operator>.</operator><name>proxy</name><operator>.</operator><name>ToStringIP</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>proxy</name><operator>.</operator><name>proxy</name><operator>.</operator><name>ToStringPort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strDefaultProxyGUI</name> <operator>=</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyIp</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>proxyPort</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>strProxy</name> <operator>==</operator> <call><name><name>strDefaultProxyGUI</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyReachTor</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>ui</name><operator>-&gt;</operator><name>proxyReachTor</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>ProxyAddressValidator</name><operator>::</operator><name>ProxyAddressValidator</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
<call><name>QValidator</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name><name>QValidator</name><operator>::</operator><name>State</name></name></type> <name><name>ProxyAddressValidator</name><operator>::</operator><name>validate</name></name><parameter_list>(<parameter><decl><type><name>QString</name> <modifier>&amp;</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>pos</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Validate the proxy</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>serv</name><argument_list>(<argument><expr><call><name>LookupNumeric</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_GUI_PROXY_PORT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxyType</name></type> <name>addrProxy</name> <init>= <expr><call><name>proxyType</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>addrProxy</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>QValidator</name><operator>::</operator><name>Acceptable</name></name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>QValidator</name><operator>::</operator><name>Invalid</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
