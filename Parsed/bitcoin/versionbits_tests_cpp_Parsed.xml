<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/versionbits_tests.cpp"><comment type="line">// Copyright (c) 2014-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;versionbits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/params.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<comment type="block">/* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>TestTime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nHeight</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1415926536</literal> <operator>+</operator> <literal type="number">600</literal> <operator>*</operator> <name>nHeight</name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name></type> <name>paramsDummy</name> <init>= <expr><call><name><name>Consensus</name><operator>::</operator><name>Params</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<class>class <name>TestConditionChecker</name> <super_list>: <super><specifier>public</specifier> <name>AbstractThresholdConditionChecker</name></super></super_list>
<block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><specifier>mutable</specifier> <name>ThresholdConditionCache</name></type> <name>cache</name></decl>;</decl_stmt>

</private><public>public:
    <function><type><name>int64_t</name></type> <name>BeginTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>int64_t</name></type> <name>EndTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>int</name></type> <name>Period</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><literal type="number">1000</literal></expr>;</return> </block_content>}</block></function>
    <function><type><name>int</name></type> <name>Threshold</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><literal type="number">900</literal></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>Condition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><operator>(</operator><name><name>pindex</name><operator>-&gt;</operator><name>nVersion</name></name> <operator>&amp;</operator> <literal type="number">0x100</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

    <function><type><name>ThresholdState</name></type> <name>GetStateFor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexPrev</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>AbstractThresholdConditionChecker</name><operator>::</operator><name>GetStateFor</name></name><argument_list>(<argument><expr><name>pindexPrev</name></expr></argument>, <argument><expr><name>paramsDummy</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>int</name></type> <name>GetStateSinceHeightFor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexPrev</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>AbstractThresholdConditionChecker</name><operator>::</operator><name>GetStateSinceHeightFor</name></name><argument_list>(<argument><expr><name>pindexPrev</name></expr></argument>, <argument><expr><name>paramsDummy</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>

<class>class <name>TestAlwaysActiveConditionChecker</name> <super_list>: <super><specifier>public</specifier> <name>TestConditionChecker</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <function><type><name>int64_t</name></type> <name>BeginTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><name>Consensus</name><operator>::</operator><name>BIP9Deployment</name><operator>::</operator><name>ALWAYS_ACTIVE</name></name></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKERS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<class>class <name>VersionBitsTester</name>
<block>{<private type="default">
    <comment type="line">// A fake blockchain</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CBlockIndex</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>vpblock</name></decl>;</decl_stmt>

    <comment type="line">// 6 independent checkers for the same bit.</comment>
    <comment type="line">// The first one performs all checks, the second only 50%, the third only 25%, etc...</comment>
    <comment type="line">// This is to test whether lack of cached information leads to the same results.</comment>
    <decl_stmt><decl><type><name>TestConditionChecker</name></type> <name><name>checker</name><index>[<expr><name>CHECKERS</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// Another 6 that assume always active activation</comment>
    <decl_stmt><decl><type><name>TestAlwaysActiveConditionChecker</name></type> <name><name>checker_always</name><index>[<expr><name>CHECKERS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// Test counter (to identify failures)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

</private><public>public:
    <constructor><name>VersionBitsTester</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>Reset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vpblock</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><operator>delete</operator> <name><name>vpblock</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type>  <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHECKERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>checker</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TestConditionChecker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>checker_always</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TestAlwaysActiveConditionChecker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>vpblock</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <destructor><name>~VersionBitsTester</name><parameter_list>()</parameter_list> <block>{<block_content>
         <expr_stmt><expr><call><name>Reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></destructor>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>Mine</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nTime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <while>while <condition>(<expr><call><name><name>vpblock</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>height</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name> <init>= <expr><operator>new</operator> <call><name>CBlockIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>=</operator> <call><name><name>vpblock</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pindex</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pindex</name><operator>-&gt;</operator><name>nTime</name></name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pindex</name><operator>-&gt;</operator><name>nVersion</name></name> <operator>=</operator> <name>nVersion</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>BuildSkip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vpblock</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>TestStateSinceHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHECKERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateSinceHeightFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>height</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for StateSinceHeight"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker_always</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateSinceHeightFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for StateSinceHeight (always active)"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>TestDefined</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHECKERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>DEFINED</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for DEFINED"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker_always</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for ACTIVE (always active)"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>TestStarted</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHECKERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>STARTED</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for STARTED"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker_always</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for ACTIVE (always active)"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>TestLockedIn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHECKERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>LOCKED_IN</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for LOCKED_IN"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker_always</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for ACTIVE (always active)"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>TestActive</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHECKERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for ACTIVE"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker_always</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for ACTIVE (always active)"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>VersionBitsTester</name><modifier>&amp;</modifier></type> <name>TestFailed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHECKERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>FAILED</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for FAILED"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name><name>checker_always</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetStateFor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Test %i for ACTIVE (always active)"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>CBlockIndex</name> <modifier>*</modifier></type> <name>Tip</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><call><name><name>vpblock</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>vpblock</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>versionbits_tests</argument>, <argument>TestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>versionbits_test</argument>)</argument_list></macro>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// DEFINED -&gt; FAILED</comment>
        <expr_stmt><expr><call><name>VersionBitsTester</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">989</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">989</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30001</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30002</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2001</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30004</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30005</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call>

        <comment type="line">// DEFINED -&gt; STARTED -&gt; FAILED</comment>
                           <operator>.</operator><call><name>Reset</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <comment type="line">// One second more and it would be defined</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// So that's what happens the next period</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2051</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10010</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// 51 old blocks</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2950</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10020</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// 899 new blocks</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call> <comment type="line">// 50 old blocks (so 899 out of the past 1000)</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">20010</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>

        <comment type="line">// DEFINED -&gt; STARTED -&gt; FAILED while threshold reached</comment>
                           <operator>.</operator><call><name>Reset</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x101</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <comment type="line">// One second more and it would be defined</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x101</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// So that's what happens the next period</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// 999 new blocks</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call> <comment type="line">// 1 new block (so 1000 out of the past 1000 are new)</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">3999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30001</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30002</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">14333</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">24000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>

        <comment type="line">// DEFINED -&gt; STARTED -&gt; LOCKEDIN at the last minute -&gt; ACTIVE</comment>
                           <operator>.</operator><call><name>Reset</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x101</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <comment type="line">// One second more and it would be defined</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x101</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// So that's what happens the next period</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2050</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10010</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// 50 old blocks</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2950</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10020</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// 900 new blocks</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">19999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call> <comment type="line">// 49 old blocks</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">29999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestLockedIn</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call> <comment type="line">// 1 old block (so 900 out of the past 1000)</comment>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">3999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30001</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestLockedIn</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30002</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestActive</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">14333</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">30003</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestActive</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">24000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestActive</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call>

        <comment type="line">// DEFINED multiple periods -&gt; STARTED multiple periods -&gt; FAILED</comment>
                           <operator>.</operator><call><name>Reset</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestDefined</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestStarted</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">6000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">6000</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>Mine</name><argument_list>(<argument><expr><literal type="number">7000</literal></expr></argument>, <argument><expr><call><name>TestTime</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>TestFailed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TestStateSinceHeight</name><argument_list>(<argument><expr><literal type="number">6000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Sanity checks of version bit deployments</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name> <modifier>&amp;</modifier></type><name>mainnetParams</name> <init>= <expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>Consensus</name><operator>::</operator><name>MAX_VERSION_BITS_DEPLOYMENTS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>bitmask</name> <init>= <expr><call><name>VersionBitsMask</name><argument_list>(<argument><expr><name>mainnetParams</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Make sure that no deployment tries to set an invalid bit.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>bitmask</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>VERSIONBITS_TOP_MASK</name></expr></argument>, <argument><expr><name>bitmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify that the deployment windows of different deployment using the</comment>
        <comment type="line">// same bit are disjoint.</comment>
        <comment type="line">// This test may need modification at such time as a new deployment</comment>
        <comment type="line">// is proposed that reuses the bit of an activated soft fork, before the</comment>
        <comment type="line">// end time of that soft fork.  (Alternatively, the end time of that</comment>
        <comment type="line">// activated soft fork could be later changed to be earlier to avoid</comment>
        <comment type="line">// overlap.)</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>Consensus</name><operator>::</operator><name>MAX_VERSION_BITS_DEPLOYMENTS</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>VersionBitsMask</name><argument_list>(<argument><expr><name>mainnetParams</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call> <operator>==</operator> <name>bitmask</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nStartTime</name> <operator>&gt;</operator> <name><name>mainnetParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTimeout</name> <operator>||</operator>
                        <name><name>mainnetParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nStartTime</name> <operator>&gt;</operator> <name><name>mainnetParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>versionbits_computeblockversion</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Check that ComputeBlockVersion will set the appropriate bit correctly</comment>
    <comment type="line">// on mainnet.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name> <modifier>&amp;</modifier></type><name>mainnetParams</name> <init>= <expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Use the TESTDUMMY deployment for testing purposes.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bit</name> <init>= <expr><name><name>mainnetParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>bit</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nStartTime</name> <init>= <expr><name><name>mainnetParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nStartTime</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTimeout</name> <init>= <expr><name><name>mainnetParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nTimeout</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nStartTime</name> <operator>&lt;</operator> <name>nTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// In the first chain, test that the bit is set by CBV until it has failed.</comment>
    <comment type="line">// In the second chain, test the bit is set by CBV while STARTED and</comment>
    <comment type="line">// LOCKED-IN, and then no longer set while ACTIVE.</comment>
    <decl_stmt><decl><type><name>VersionBitsTester</name></type> <name>firstChain</name></decl>, <decl><type ref="prev"/><name>secondChain</name></decl>;</decl_stmt>

    <comment type="line">// Start generating blocks before nStartTime</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTime</name> <init>= <expr><name>nStartTime</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Before MedianTimePast of the chain has crossed nStartTime, the bit</comment>
    <comment type="line">// should not be set.</comment>
    <decl_stmt><decl><type><name>CBlockIndex</name> <modifier>*</modifier></type><name>lastBlock</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>firstChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.</comment>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>firstChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens</comment>
        <comment type="line">// to be 4, and the bit we're testing happens to be bit 28.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Now mine 5 more blocks at the start time -- MTP should not have passed yet, so</comment>
    <comment type="line">// CBV should still not yet set the bit.</comment>
    <expr_stmt><expr><name>nTime</name> <operator>=</operator> <name>nStartTime</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>firstChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Advance to the next period and transition to STARTED,</comment>
    <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>firstChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// so ComputeBlockVersion should now set the bit,</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// and should also be using the VERSIONBITS_TOP_BITS.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VERSIONBITS_TOP_MASK</name></expr></argument>, <argument><expr><name>VERSIONBITS_TOP_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that ComputeBlockVersion will set the bit until nTimeout</comment>
    <expr_stmt><expr><name>nTime</name> <operator>+=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>blocksToMine</name> <init>= <expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="line">// test blocks for up to 2 time periods</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nHeight</name> <init>= <expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// These blocks are all before nTimeout is reached.</comment>
    <while>while <condition>(<expr><name><name>nTime</name> <argument_list type="generic">&lt; <argument><expr><name>nTimeout</name> <operator>&amp;&amp;</operator> <name>blocksToMine</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>firstChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name>nHeight</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VERSIONBITS_TOP_MASK</name></expr></argument>, <argument><expr><name>VERSIONBITS_TOP_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blocksToMine</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>nTime</name> <operator>+=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nHeight</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>nTime</name> <operator>=</operator> <name>nTimeout</name></expr>;</expr_stmt>
    <comment type="line">// FAILED is only triggered at the end of a period, so CBV should be setting</comment>
    <comment type="line">// the bit until the period transition.</comment>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>firstChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name>nHeight</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nHeight</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// The next block should trigger no longer setting the bit.</comment>
    <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>firstChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name>nHeight</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// On a new chain:</comment>
    <comment type="line">// verify that the bit will be set after lock-in, and then stop being set</comment>
    <comment type="line">// after activation.</comment>
    <expr_stmt><expr><name>nTime</name> <operator>=</operator> <name>nStartTime</name></expr>;</expr_stmt>

    <comment type="line">// Mine one period worth of blocks, and check that the bit will be on for the</comment>
    <comment type="line">// next period.</comment>
    <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>secondChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Mine another period worth of blocks, signaling the new bit.</comment>
    <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>secondChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_TOP_BITS</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// After one period of setting the bit on each block, it should have locked in.</comment>
    <comment type="line">// We keep setting the bit for one more period though, until activation.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Now check that we keep mining the block until the end of this period, and</comment>
    <comment type="line">// then stop at the beginning of the next period.</comment>
    <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>secondChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastBlock</name> <operator>=</operator> <call><name><name>secondChain</name><operator>.</operator><name>Mine</name></name><argument_list>(<argument><expr><name><name>mainnetParams</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>VERSIONBITS_LAST_OLD_BLOCK_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ComputeBlockVersion</name><argument_list>(<argument><expr><name>lastBlock</name></expr></argument>, <argument><expr><name>mainnetParams</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Finally, verify that after a soft fork has activated, CBV no longer uses</comment>
    <comment type="line">// VERSIONBITS_LAST_OLD_BLOCK_VERSION.</comment>
    <comment type="line">//BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) &amp; VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);</comment>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
