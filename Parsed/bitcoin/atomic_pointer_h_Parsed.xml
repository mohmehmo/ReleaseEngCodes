<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/port/atomic_pointer.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<comment type="line">// AtomicPointer provides storage for a lock-free pointer.</comment>
<comment type="line">// Platform-dependent implementation of AtomicPointer:</comment>
<comment type="line">// - If the platform provides a cheap barrier, we use it with raw pointers</comment>
<comment type="line">// - If &lt;atomic&gt; is present (on newer versions of gcc, it is), we use</comment>
<comment type="line">//   a &lt;atomic&gt;-based AtomicPointer.  However we prefer the memory</comment>
<comment type="line">//   barrier based version, because at least on a gcc 4.4 32-bit build</comment>
<comment type="line">//   on linux, we have encountered a buggy &lt;atomic&gt; implementation.</comment>
<comment type="line">//   Also, some &lt;atomic&gt; implementations are much slower than a memory-barrier</comment>
<comment type="line">//   based implementation (~16ns for &lt;atomic&gt; based acquire-load vs. ~1ns for</comment>
<comment type="line">//   a barrier based acquire-load).</comment>
<comment type="line">// This code is based on atomicops-internals-* in Google's perftools:</comment>
<comment type="line">// http://code.google.com/p/google-perftools/source/browse/#svn%2Ftrunk%2Fsrc%2Fbase</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PORT_ATOMIC_POINTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_ATOMIC_POINTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LEVELDB_ATOMIC_PRESENT</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OS_WIN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OS_MACOSX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libkern/OSAtomic.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_CPU_X86_FAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_CPU_X86_FAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARMEL__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_CPU_ARM_FAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_CPU_ARM64_FAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_CPU_PPC_FAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_CPU_MIPS_FAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>port</name> <block>{<block_content>

<comment type="line">// AtomicPointer based on &lt;cstdatomic&gt; if available</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LEVELDB_ATOMIC_PRESENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>AtomicPointer</name> <block>{<block_content>
 <label><name>private</name>:</label>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>rep_</name></expr>;</expr_stmt>
 <label><name>public</name>:</label>
  <macro><name>AtomicPointer</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
  <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>AtomicPointer</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>rep_</name><argument_list>(<argument>v</argument>)</argument_list></macro> <block>{ }</block>
  <specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>Acquire_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><call><name><name>rep_</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>Release_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>rep_</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  <expr_stmt><expr><specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>NoBarrier_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><call><name><name>rep_</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>NoBarrier_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>rep_</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="line">// Define MemoryBarrier() if available</comment>
<comment type="line">// Windows on x86</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>COMPILER_MSVC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCH_CPU_X86_FAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// windows.h already provides a MemoryBarrier(void) macro</comment>
<comment type="line">// http://msdn.microsoft.com/en-us/library/ms684208(v=vs.85).aspx</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<comment type="line">// Mac OS</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>MemoryBarrier</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>OSMemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<comment type="line">// Gcc on x86</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_CPU_X86_FAMILY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>MemoryBarrier</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// See http://gcc.gnu.org/ml/gcc/2003-04/msg01180.html for a discussion on</comment>
  <comment type="line">// this idiom. Also see http://en.wikipedia.org/wiki/Memory_ordering.</comment>
  <asm>__asm__ <specifier>__volatile__</specifier>("" : : : "memory");</asm>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<comment type="line">// Sun Studio</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_CPU_X86_FAMILY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>MemoryBarrier</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// See http://gcc.gnu.org/ml/gcc/2003-04/msg01180.html for a discussion on</comment>
  <comment type="line">// this idiom. Also see http://en.wikipedia.org/wiki/Memory_ordering.</comment>
  <asm>asm <specifier>volatile</specifier>("" : : : "memory");</asm>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<comment type="line">// ARM Linux</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_CPU_ARM_FAMILY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>LinuxKernelMemoryBarrierFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<comment type="line">// The Linux ARM kernel provides a highly optimized device-specific memory</comment>
<comment type="line">// barrier function at a fixed memory address that is mapped in every</comment>
<comment type="line">// user-level process.</comment>
<comment type="line">//</comment>
<comment type="line">// This beats using CPU-specific instructions which are, on single-core</comment>
<comment type="line">// devices, un-necessary and very costly (e.g. ARMv7-A "dmb" takes more</comment>
<comment type="line">// than 180ns on a Cortex-A8 like the one on a Nexus One). Benchmarking</comment>
<comment type="line">// shows that the extra function call cost is completely negligible on</comment>
<comment type="line">// multi-core devices.</comment>
<comment type="line">//</comment>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>MemoryBarrier</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>LinuxKernelMemoryBarrierFunc</name><operator>)</operator><literal type="number">0xffff0fa0</literal><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<comment type="line">// ARM64</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_CPU_ARM64_FAMILY</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>MemoryBarrier</name><parameter_list>()</parameter_list> <block>{<block_content>
  <asm>asm <specifier>volatile</specifier>("dmb sy" : : : "memory");</asm>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<comment type="line">// PPC</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_CPU_PPC_FAMILY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>MemoryBarrier</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// TODO for some powerpc expert: is there a cheaper suitable variant?</comment>
  <comment type="line">// Perhaps by having separate barriers for acquire and release ops.</comment>
  <asm>asm <specifier>volatile</specifier>("sync" : : : "memory");</asm>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<comment type="line">// MIPS</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_CPU_MIPS_FAMILY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>MemoryBarrier</name><parameter_list>()</parameter_list> <block>{<block_content>
  <asm>__asm__ <specifier>__volatile__</specifier>("sync" : : : "memory");</asm>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// AtomicPointer built using platform-specific MemoryBarrier()</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LEVELDB_HAVE_MEMORY_BARRIER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>AtomicPointer</name> <block>{<block_content>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>rep_</name></decl>;</decl_stmt>
 <label><name>public</name>:</label>
  <macro><name>AtomicPointer</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
  <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>AtomicPointer</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>rep_</name><argument_list>(<argument>p</argument>)</argument_list></macro> <block>{}</block>
  <specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>NoBarrier_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>rep_</name></expr>;</return> }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>NoBarrier_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>rep_</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>
  <expr_stmt><expr><specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>Acquire_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <expr><name>void</name><operator>*</operator> <name>result</name> <operator>=</operator> <name>rep_</name></expr>;
    <expr><call><name>MemoryBarrier</name><argument_list>()</argument_list></call></expr>;
    <return>return <expr><name>result</name></expr>;</return>
  }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>Release_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rep_</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Atomic pointer based on sparc memory barriers</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparcv9</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>class</name></type> <name>AtomicPointer</name> <block>{<block_content>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>rep_</name></decl>;</decl_stmt>
 <label><name>public</name>:</label>
  <macro><name>AtomicPointer</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
  <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>AtomicPointer</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>rep_</name><argument_list>(<argument>v</argument>)</argument_list></macro> <block>{ }</block>
  <specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>Acquire_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <expr><name>void</name><operator>*</operator> <name>val</name></expr>;
    <expr><name>__asm__</name> <specifier>__volatile__</specifier> <operator>(</operator>
        <literal type="string">"ldx [%[rep_]], %[val] \n\t"</literal>
         <literal type="string">"membar #LoadLoad|#LoadStore \n\t"</literal>
        <operator>:</operator> <index>[<expr><name>val</name></expr>]</index> <literal type="string">"=r"</literal> <operator>(</operator><name>val</name><operator>)</operator>
        <operator>:</operator> <index>[<expr><name>rep_</name></expr>]</index> <literal type="string">"r"</literal> <operator>(</operator><operator>&amp;</operator><name>rep_</name><operator>)</operator>
        <operator>:</operator> <literal type="string">"memory"</literal><operator>)</operator></expr>;
    <return>return <expr><name>val</name></expr>;</return>
  }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>Release_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <asm>__asm__ <specifier>__volatile__</specifier> (
        "membar #LoadStore|#StoreStore \n\t"
        "stx %[v], [%[rep_]] \n\t"
        :
        : [rep_] "r" (&amp;rep_), [v] "r" (v)
        : "memory");</asm>
  </block_content>}</block></function>
  <expr_stmt><expr><specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>NoBarrier_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>rep_</name></expr>;</return> }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>NoBarrier_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>rep_</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Atomic pointer based on ia64 acq/rel</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ia64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>class</name></type> <name>AtomicPointer</name> <block>{<block_content>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>rep_</name></decl>;</decl_stmt>
 <label><name>public</name>:</label>
  <macro><name>AtomicPointer</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
  <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>AtomicPointer</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>rep_</name><argument_list>(<argument>v</argument>)</argument_list></macro> <block>{ }</block>
  <specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>Acquire_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <expr><name>void</name><operator>*</operator> <name>val</name></expr>    ;
    <expr><name>__asm__</name> <specifier>__volatile__</specifier> <operator>(</operator>
        <literal type="string">"ld8.acq %[val] = [%[rep_]] \n\t"</literal>
        <operator>:</operator> <index>[<expr><name>val</name></expr>]</index> <literal type="string">"=r"</literal> <operator>(</operator><name>val</name><operator>)</operator>
        <operator>:</operator> <index>[<expr><name>rep_</name></expr>]</index> <literal type="string">"r"</literal> <operator>(</operator><operator>&amp;</operator><name>rep_</name><operator>)</operator>
        <operator>:</operator> <literal type="string">"memory"</literal>
        <operator>)</operator></expr>;
    <return>return <expr><name>val</name></expr>;</return>
  }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>Release_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <asm>__asm__ <specifier>__volatile__</specifier> (
        "st8.rel [%[rep_]] = %[v]  \n\t"
        :
        : [rep_] "r" (&amp;rep_), [v] "r" (v)
        : "memory"
        );</asm>
  </block_content>}</block></function>
  <expr_stmt><expr><specifier>inline</specifier> <name>void</name><operator>*</operator> <macro><name>NoBarrier_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>rep_</name></expr>;</return> }</block></expr></expr_stmt>
  <function><type><specifier>inline</specifier> <name>void</name></type> <name>NoBarrier_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>rep_</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// We have neither MemoryBarrier(), nor &lt;atomic&gt;</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Please implement AtomicPointer for this platform.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEVELDB_HAVE_MEMORY_BARRIER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ARCH_CPU_X86_FAMILY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ARCH_CPU_ARM_FAMILY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ARCH_CPU_ARM64_FAMILY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ARCH_CPU_PPC_FAMILY</name></cpp:undef>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace port</comment>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// PORT_ATOMIC_POINTER_H_</comment>
</unit>
