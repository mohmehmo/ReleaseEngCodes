<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/primitives/block.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>

<function><type><name>uint256</name></type> <name><name>CBlockHeader</name><operator>::</operator><name>GetHash</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>SerializeHash</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CBlock</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>stringstream</name></name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"CBlock(hash=%s, ver=0x%08x, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\n"</literal></expr></argument>,
        <argument><expr><call><name>GetHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>nVersion</name></expr></argument>,
        <argument><expr><call><name><name>hashPrevBlock</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>hashMerkleRoot</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>nBits</name></expr></argument>, <argument><expr><name>nNonce</name></expr></argument>,
        <argument><expr><call><name><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx</name> <range>: <expr><name>vtx</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"  "</literal> <operator>&lt;&lt;</operator> <call><name><name>tx</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>s</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
