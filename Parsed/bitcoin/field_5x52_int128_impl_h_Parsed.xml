<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/field_5x52_int128_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_FIELD_INNER5X52_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FIELD_INNER5X52_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERIFY_BITS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VERIFY_CHECK(((x) &gt;&gt; (n)) == 0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERIFY_BITS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul_inner</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier> <name>SECP256K1_RESTRICT</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint128_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>tx</name></decl>, <decl><type ref="prev"/><name>u0</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a3</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a4</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>M</name> <init>= <expr><literal type="number">0xFFFFFFFFFFFFFULL</literal></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><literal type="number">0x1000003D10ULL</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*  [... a b c] is a shorthand for ... + a&lt;&lt;104 + b&lt;&lt;52 + c&lt;&lt;0 mod n.
     *  for 0 &lt;= x &lt;= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).
     *  for 4 &lt;= x &lt;= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)
     *  Note that [x 0 0 0 0 0] = [x*R].
     */</comment>

    <expr_stmt><expr><name>d</name>  <operator>=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a1</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a2</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a3</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0] = [p3 0 0 0] */</comment>
    <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a4</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <name>M</name><operator>)</operator> <operator>*</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>t3</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */</comment>

    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a1</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a2</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a3</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a4</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <name>c</name> <operator>*</operator> <name>R</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">116</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>t4</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>tx</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <operator>(</operator><name>M</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4+(tx&lt;&lt;48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>

    <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4+(tx&lt;&lt;48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a1</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a2</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a3</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a4</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4+(tx&lt;&lt;48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>u0</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u0</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u0 t4+(tx&lt;&lt;48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <comment type="block">/* [d 0 t4+(tx&lt;&lt;48)+(u0&lt;&lt;52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>u0</name> <operator>=</operator> <operator>(</operator><name>u0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>tx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u0</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4+(u0&lt;&lt;48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>u0</name> <operator>*</operator> <operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a1</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a2</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a3</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a4</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>d</name> <operator>&amp;</operator> <name>M</name><operator>)</operator> <operator>*</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a1</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a2</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a3</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a4</name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>d</name> <operator>&amp;</operator> <name>M</name><operator>)</operator> <operator>*</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <comment type="block">/* [d 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name>   <operator>+=</operator> <name>d</name> <operator>*</operator> <name>R</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name>   <operator>+=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_sqr_inner</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint128_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a3</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a4</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>tx</name></decl>, <decl><type ref="prev"/><name>u0</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>M</name> <init>= <expr><literal type="number">0xFFFFFFFFFFFFFULL</literal></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><literal type="number">0x1000003D10ULL</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**  [... a b c] is a shorthand for ... + a&lt;&lt;104 + b&lt;&lt;52 + c&lt;&lt;0 mod n.
     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0] = [x*R].
     */</comment>

    <expr_stmt><expr><name>d</name>  <operator>=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><operator>(</operator><name>a0</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>a3</name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><operator>(</operator><name>a1</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>a2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0] = [p3 0 0 0] */</comment>
    <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a4</name> <operator>*</operator> <name>a4</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <name>M</name><operator>)</operator> <operator>*</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>t3</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */</comment>

    <expr_stmt><expr><name>a4</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name>a4</name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><operator>(</operator><name>a1</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>a3</name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a2</name> <operator>*</operator> <name>a2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <name>c</name> <operator>*</operator> <name>R</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">116</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>t4</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>
    <expr_stmt><expr><name>tx</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <operator>(</operator><name>M</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4+(tx&lt;&lt;48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */</comment>

    <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name>a0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4+(tx&lt;&lt;48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a1</name> <operator>*</operator> <name>a4</name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><operator>(</operator><name>a2</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>a3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t4+(tx&lt;&lt;48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>u0</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u0</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u0 t4+(tx&lt;&lt;48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <comment type="block">/* [d 0 t4+(tx&lt;&lt;48)+(u0&lt;&lt;52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>u0</name> <operator>=</operator> <operator>(</operator><name>u0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>tx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u0</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4+(u0&lt;&lt;48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>u0</name> <operator>*</operator> <operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */</comment>

    <expr_stmt><expr><name>a0</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name>a1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a2</name> <operator>*</operator> <name>a4</name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a3</name> <operator>*</operator> <name>a3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>d</name> <operator>&amp;</operator> <name>M</name><operator>)</operator> <operator>*</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a0</name> <operator>*</operator> <name>a2</name>
       <operator>+</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a1</name> <operator>*</operator> <name>a1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint128_t</name><operator>)</operator><name>a3</name> <operator>*</operator> <name>a4</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>d</name> <operator>&amp;</operator> <name>M</name><operator>)</operator> <operator>*</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name>   <operator>+=</operator> <name>d</name> <operator>*</operator> <name>R</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name>   <operator>+=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_FIELD_INNER5X52_IMPL_H */</comment>
</unit>
