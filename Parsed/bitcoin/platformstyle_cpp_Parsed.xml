<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/platformstyle.cpp"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/platformstyle.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QColor&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QImage&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPalette&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{<public type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platformId</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Show images on push buttons */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>imagesOnButtons</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Colorize single-color icons */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>colorizeIcons</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Extra padding/spacing in transactionview */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>useExtraSpacing</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>platform_styles</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"macosx"</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">true</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"windows"</literal></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>}</block></expr>,
    <comment type="block">/* Other: linux, unix, ... */</comment>
    <expr><block>{<expr><literal type="string">"other"</literal></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><literal type="boolean">false</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>platform_styles_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>platform_styles</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>platform_styles</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<namespace>namespace <block>{
<comment type="block">/* Local functions for colorizing single-color images */</comment>

<function><type><name>void</name></type> <name>MakeSingleColorImage</name><parameter_list>(<parameter><decl><type><name>QImage</name><modifier>&amp;</modifier></type> <name>img</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QColor</name><modifier>&amp;</modifier></type> <name>colorbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>img</name> <operator>=</operator> <call><name><name>img</name><operator>.</operator><name>convertToFormat</name></name><argument_list>(<argument><expr><name><name>QImage</name><operator>::</operator><name>Format_ARGB32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>x</name><operator>--</operator></expr>;</condition> <incr/>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>y</name><operator>--</operator></expr>;</condition> <incr/>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>QRgb</name></type> <name>rgb</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>pixel</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>img</name><operator>.</operator><name>setPixel</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>qRgba</name><argument_list>(<argument><expr><call><name><name>colorbase</name><operator>.</operator><name>red</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>colorbase</name><operator>.</operator><name>green</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>colorbase</name><operator>.</operator><name>blue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>qAlpha</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>QIcon</name></type> <name>ColorizeIcon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QIcon</name><modifier>&amp;</modifier></type> <name>ico</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QColor</name><modifier>&amp;</modifier></type> <name>colorbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QIcon</name></type> <name>new_ico</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>QSize</name><modifier>&amp;</modifier></type> <name>sz</name> <range>: <expr><call><name><name>ico</name><operator>.</operator><name>availableSizes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QImage</name></type> <name>img</name><argument_list>(<argument><expr><call><name><name>ico</name><operator>.</operator><name>pixmap</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toImage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>MakeSingleColorImage</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>colorbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>new_ico</name><operator>.</operator><name>addPixmap</name></name><argument_list>(<argument><expr><call><name><name>QPixmap</name><operator>::</operator><name>fromImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>new_ico</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QImage</name></type> <name>ColorizeImage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QColor</name><modifier>&amp;</modifier></type> <name>colorbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QImage</name></type> <name>img</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MakeSingleColorImage</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>colorbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>img</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QIcon</name></type> <name>ColorizeIcon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QColor</name><modifier>&amp;</modifier></type> <name>colorbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>QIcon</name><argument_list>(<argument><expr><call><name><name>QPixmap</name><operator>::</operator><name>fromImage</name></name><argument_list>(<argument><expr><call><name>ColorizeImage</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>colorbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

}</block></namespace>


<constructor><name><name>PlatformStyle</name><operator>::</operator><name>PlatformStyle</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>_imagesOnButtons</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>_colorizeIcons</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>_useExtraSpacing</name></decl></parameter>)</parameter_list><member_init_list>:
    <call><name>name</name><argument_list>(<argument><expr><name>_name</name></expr></argument>)</argument_list></call>,
    <call><name>imagesOnButtons</name><argument_list>(<argument><expr><name>_imagesOnButtons</name></expr></argument>)</argument_list></call>,
    <call><name>colorizeIcons</name><argument_list>(<argument><expr><name>_colorizeIcons</name></expr></argument>)</argument_list></call>,
    <call><name>useExtraSpacing</name><argument_list>(<argument><expr><name>_useExtraSpacing</name></expr></argument>)</argument_list></call>,
    <call><name>singleColor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>,
    <call><name>textColor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <comment type="line">// Determine icon highlighting color</comment>
    <if_stmt><if>if <condition>(<expr><name>colorizeIcons</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>QColor</name></type> <name>colorHighlightBg</name><argument_list>(<argument><expr><call><name><name>QApplication</name><operator>::</operator><name>palette</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>color</name><argument_list>(<argument><expr><name><name>QPalette</name><operator>::</operator><name>Highlight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>QColor</name></type> <name>colorHighlightFg</name><argument_list>(<argument><expr><call><name><name>QApplication</name><operator>::</operator><name>palette</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>color</name><argument_list>(<argument><expr><name><name>QPalette</name><operator>::</operator><name>HighlightedText</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>QColor</name></type> <name>colorText</name><argument_list>(<argument><expr><call><name><name>QApplication</name><operator>::</operator><name>palette</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>color</name><argument_list>(<argument><expr><name><name>QPalette</name><operator>::</operator><name>WindowText</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>colorTextLightness</name> <init>= <expr><call><name><name>colorText</name><operator>.</operator><name>lightness</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QColor</name></type> <name>colorbase</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>colorHighlightBg</name><operator>.</operator><name>lightness</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>colorTextLightness</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name><name>colorHighlightFg</name><operator>.</operator><name>lightness</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>colorTextLightness</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>colorbase</name> <operator>=</operator> <name>colorHighlightBg</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>colorbase</name> <operator>=</operator> <name>colorHighlightFg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>singleColor</name> <operator>=</operator> <name>colorbase</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Determine text color</comment>
    <expr_stmt><expr><name>textColor</name> <operator>=</operator> <call><name>QColor</name><argument_list>(<argument><expr><call><name><name>QApplication</name><operator>::</operator><name>palette</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>color</name><argument_list>(<argument><expr><name><name>QPalette</name><operator>::</operator><name>WindowText</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>QImage</name></type> <name><name>PlatformStyle</name><operator>::</operator><name>SingleColorImage</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colorizeIcons</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QImage</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>ColorizeImage</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>SingleColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QIcon</name></type> <name><name>PlatformStyle</name><operator>::</operator><name>SingleColorIcon</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colorizeIcons</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QIcon</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>ColorizeIcon</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>SingleColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QIcon</name></type> <name><name>PlatformStyle</name><operator>::</operator><name>SingleColorIcon</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QIcon</name><modifier>&amp;</modifier></type> <name>icon</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colorizeIcons</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>icon</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>ColorizeIcon</name><argument_list>(<argument><expr><name>icon</name></expr></argument>, <argument><expr><call><name>SingleColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QIcon</name></type> <name><name>PlatformStyle</name><operator>::</operator><name>TextColorIcon</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QIcon</name><modifier>&amp;</modifier></type> <name>icon</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>ColorizeIcon</name><argument_list>(<argument><expr><name>icon</name></expr></argument>, <argument><expr><call><name>TextColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>PlatformStyle</name> <modifier>*</modifier></type><name><name>PlatformStyle</name><operator>::</operator><name>instantiate</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>platformId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>platform_styles_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>platformId</name> <operator>==</operator> <name><name>platform_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>platformId</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>PlatformStyle</name><argument_list>(
                    <argument><expr><name><name>platform_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>platformId</name></expr></argument>,
                    <argument><expr><name><name>platform_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>imagesOnButtons</name></expr></argument>,
                    <argument><expr><name><name>platform_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>colorizeIcons</name></expr></argument>,
                    <argument><expr><name><name>platform_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>useExtraSpacing</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
</block_content>}</block></function>

</unit>
