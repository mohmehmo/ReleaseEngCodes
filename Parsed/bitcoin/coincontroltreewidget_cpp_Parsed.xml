<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/coincontroltreewidget.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/coincontroltreewidget.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/coincontroldialog.h&gt;</cpp:file></cpp:include>

<constructor><name><name>CoinControlTreeWidget</name><operator>::</operator><name>CoinControlTreeWidget</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QTreeWidget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>

</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>CoinControlTreeWidget</name><operator>::</operator><name>keyPressEvent</name></name><parameter_list>(<parameter><decl><type><name>QKeyEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_Space</name></name></expr>)</condition> <comment type="line">// press spacebar -&gt; select checkbox</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>-&gt;</operator><name>currentItem</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>COLUMN_CHECKBOX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>currentItem</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setCheckState</name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name><name>this</name><operator>-&gt;</operator><name>currentItem</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>checkState</name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Checked</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr> </then><else>: <expr><name><name>Qt</name><operator>::</operator><name>Checked</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_Escape</name></name></expr>)</condition> <comment type="line">// press esc -&gt; close dialog</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CoinControlDialog</name> <modifier>*</modifier></type><name>coinControlDialog</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>CoinControlDialog</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>parentWidget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>coinControlDialog</name><operator>-&gt;</operator><name>done</name></name><argument_list>(<argument><expr><name><name>QDialog</name><operator>::</operator><name>Accepted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>QTreeWidget</name><operator>::</operator><name>keyPressEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
