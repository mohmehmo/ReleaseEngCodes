<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/chainparamsbase.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparamsbase.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/memory.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name> <init>= <expr><literal type="string">"main"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name> <init>= <expr><literal type="string">"test"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name> <init>= <expr><literal type="string">"regtest"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>SetupChainParamsBaseOptions</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-chain=&lt;chain&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Use the chain &lt;chain&gt; (default: main). Allowed values: main, test, regtest"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CHAINPARAMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-regtest"</literal></expr></argument>, <argument><expr><literal type="string">"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. "</literal>
                 <literal type="string">"This is intended for regression testing tools and app development. Equivalent to -chain=regtest."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CHAINPARAMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-segwitheight=&lt;n&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Set the activation height of segwit. -1 to disable. (regtest-only)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-testnet"</literal></expr></argument>, <argument><expr><literal type="string">"Use the test chain. Equivalent to -chain=test."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CHAINPARAMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-vbparams=deployment:start:end"</literal></expr></argument>, <argument><expr><literal type="string">"Use given start/end times for specified version bits deployment (regtest-only)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CHAINPARAMS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBaseChainParams</name></expr></argument>&gt;</argument_list></name></type> <name>globalChainBaseParams</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>CBaseChainParams</name><modifier>&amp;</modifier></type> <name>BaseParams</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>globalChainBaseParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>globalChainBaseParams</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBaseChainParams</name></expr></argument>&gt;</argument_list></name></type> <name>CreateBaseChainParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CBaseChainParams</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">8332</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CBaseChainParams</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"testnet3"</literal></expr></argument>, <argument><expr><literal type="number">18332</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CBaseChainParams</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"regtest"</literal></expr></argument>, <argument><expr><literal type="number">18443</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s: Unknown chain %s."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SelectBaseParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>globalChainBaseParams</name> <operator>=</operator> <call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>SelectConfigNetwork</name></name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
