<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/contrib/lax_der_privatekey_parsing.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2014, 2015 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<comment type="block" format="doxygen">/****
 * Please do not link this file directly. It is not part of the libsecp256k1
 * project and does not promise any stability in its API, functionality or
 * presence. Projects which use this code should instead copy this header
 * and its accompanying .c file directly into their codebase.
 ****/</comment>

<comment type="block">/* This file contains code snippets that parse DER private keys with
 * various errors and violations.  This is not a part of the library
 * itself, because the allowed violations are chosen arbitrarily and
 * do not follow or establish any standard.
 *
 * It also contains code to serialize private keys in a compatible
 * manner.
 *
 * These functions are meant for compatibility with applications
 * that require BER encoded keys. When working with secp256k1-specific
 * code, the simple 32-byte private keys normally used by the
 * library are sufficient.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_CONTRIB_BER_PRIVATEKEY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_CONTRIB_BER_PRIVATEKEY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;secp256k1.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Export a private key in DER format.
 *
 *  Returns: 1 if the private key was valid.
 *  Args: ctx:        pointer to a context object, initialized for signing (cannot
 *                    be NULL)
 *  Out: privkey:     pointer to an array for storing the private key in BER.
 *                    Should have space for 279 bytes, and cannot be NULL.
 *       privkeylen:  Pointer to an int where the length of the private key in
 *                    privkey will be stored.
 *  In:  seckey:      pointer to a 32-byte secret key to export.
 *       compressed:  1 if the key should be exported in
 *                    compressed format, 0 otherwise
 *
 *  This function is purely meant for compatibility with applications that
 *  require BER encoded keys. When working with secp256k1-specific code, the
 *  simple 32-byte private keys are sufficient.
 *
 *  Note that this function does not guarantee correct DER output. It is
 *  guaranteed to be parsable by secp256k1_ec_privkey_import_der
 */</comment>
<function_decl><type><name>SECP256K1_WARN_UNUSED_RESULT</name> <name>int</name></type> <name>ec_privkey_export_der</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>privkey</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>privkeylen</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seckey</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>compressed</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>)</block_content> SECP256K1_ARG_NONNULL(2</block></extern>) <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Import a private key in DER format.
 * Returns: 1 if a private key was extracted.
 * Args: ctx:        pointer to a context object (cannot be NULL).
 * Out:  seckey:     pointer to a 32-byte array for storing the private key.
 *                   (cannot be NULL).
 * In:   privkey:    pointer to a private key in DER format (cannot be NULL).
 *       privkeylen: length of the DER private key pointed to be privkey.
 *
 * This function will accept more than just strict DER, and even allow some BER
 * violations. The public key stored inside the DER-encoded private key is not
 * verified for correctness, nor are the curve parameters. Use this function
 * only if you know in advance it is supposed to contain a secp256k1 private
 * key.
 */</comment>
<function_decl><type><name>SECP256K1_WARN_UNUSED_RESULT</name> <name>int</name></type> <name>ec_privkey_import_der</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seckey</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>privkey</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>privkeylen</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>) <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_CONTRIB_BER_PRIVATEKEY_H */</comment>
</unit>
