<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/blockfilter_index_tests.cpp"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/blockfilterindex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miner.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pow.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/blockfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_AUTO_TEST_SUITE</name><argument_list>(<argument>blockfilter_index_tests</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckFilterLookups</name><parameter_list>(<parameter><decl><type><name>BlockFilterIndex</name><modifier>&amp;</modifier></type> <name>filter_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl></parameter>,
                               <parameter><decl><type><name>uint256</name><modifier>&amp;</modifier></type> <name>last_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BlockFilter</name></type> <name>expected_filter</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ComputeFilter</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>GetFilterType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>expected_filter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"ComputeFilter failed on block "</literal> <operator>&lt;&lt;</operator> <name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>BlockFilter</name></type> <name>filter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>filter_header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BlockFilter</name></expr></argument>&gt;</argument_list></name></type> <name>filters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>filter_hashes</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>LookupFilter</name></name><argument_list>(<argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterHeader</name></name><argument_list>(<argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filter_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterRange</name></name><argument_list>(<argument><expr><name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterHashRange</name></name><argument_list>(<argument><expr><name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>,
                                                   <argument><expr><name>filter_hashes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>filters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>filter_hashes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected_filter</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>filter_header</name></expr></argument>, <argument><expr><call><name><name>expected_filter</name><operator>.</operator><name>ComputeHeader</name></name><argument_list>(<argument><expr><name>last_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected_filter</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>filter_hashes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>expected_filter</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filters</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter_hashes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_header</name> <operator>=</operator> <name>filter_header</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CBlock</name></type> <name>CreateBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>prev</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>txns</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CChainParams</name><modifier>&amp;</modifier></type> <name>chainparams</name> <init>= <expr><call><name>Params</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlockTemplate</name></expr></argument>&gt;</argument_list></name></type> <name>pblocktemplate</name> <init>= <expr><call><name>BlockAssembler</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>hashPrevBlock</name></name> <operator>=</operator> <call><name><name>prev</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>nTime</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// Replace mempool-selected txns with just coinbase plus passed-in txns:</comment>
    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name> <range>: <expr><name>txns</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// IncrementExtraNonce creates a valid coinbase and merkleRoot</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>extraNonce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IncrementExtraNonce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>extraNonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>nBits</name></name></expr></argument>, <argument><expr><call><name><name>chainparams</name><operator>.</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name><name>block</name><operator>.</operator><name>nNonce</name></name></expr>;</expr_stmt></block_content></block></while>

    <return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>BuildChain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>coinbase_script_pub_key</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlock</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>no_txns</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>chain</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>block</name> <operator>:</operator> <name>chain</name></expr></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>CBlock</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>CreateBlock</name><argument_list>(<argument><expr><name>pindex</name></expr></argument>, <argument><expr><name>no_txns</name></expr></argument>, <argument><expr><name>coinbase_script_pub_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CBlockHeader</name></type> <name>header</name> <init>= <expr><call><name><name>block</name><operator>-&gt;</operator><name>GetBlockHeader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ProcessNewBlockHeaders</name><argument_list>(<argument><expr><block>{<expr><name>header</name></expr>}</block></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>blockfilter_index_initial_sync</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>BlockFilterIndex</name></type> <name>filter_index</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>last_header</name></decl>;</decl_stmt>

    <comment type="line">// Filter should not be found in the index before it is started.</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BlockFilter</name></type> <name>filter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>filter_header</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BlockFilter</name></expr></argument>&gt;</argument_list></name></type> <name>filters</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>filter_hashes</name></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Genesis</name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><name>block_index</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>;</condition>
             <incr><expr><name>block_index</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Next</name><argument_list>(<argument><expr><name>block_index</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter_index</name><operator>.</operator><name>LookupFilter</name></name><argument_list>(<argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterHeader</name></name><argument_list>(<argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filter_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterRange</name></name><argument_list>(<argument><expr><name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterHashRange</name></name><argument_list>(<argument><expr><name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>,
                                                            <argument><expr><name>filter_hashes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <comment type="line">// BlockUntilSyncedToCurrentChain should return false before index is started.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter_index</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filter_index</name><operator>.</operator><name>Start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Allow filter index to catch up with the block index.</comment>
    <decl_stmt><decl><type><specifier>constexpr</specifier> <name>int64_t</name></type> <name>timeout_ms</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>time_start</name> <init>= <expr><call><name>GetTimeMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>filter_index</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><name>time_start</name> <operator>+</operator> <name>timeout_ms</name> <operator>&gt;</operator> <call><name>GetTimeMillis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MilliSleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// Check that filter index has all blocks that were in the chain before it started.</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>block_index</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Genesis</name><argument_list>()</argument_list></call></expr>;</init>
             <condition><expr><name>block_index</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>;</condition>
             <incr><expr><name>block_index</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Next</name><argument_list>(<argument><expr><name>block_index</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>CheckFilterLookups</name><argument_list>(<argument><expr><name>filter_index</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>last_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <comment type="line">// Create two forks.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name>CKey</name></type> <name>coinbase_key_A</name></decl>, <decl><type ref="prev"/><name>coinbase_key_B</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>coinbase_key_A</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coinbase_key_B</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>coinbase_script_pub_key_A</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name><name>coinbase_key_A</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>coinbase_script_pub_key_B</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name><name>coinbase_key_B</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlock</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>chainA</name></decl>, <decl><type ref="prev"/><name>chainB</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><call><name>BuildChain</name><argument_list>(<argument><expr><name>tip</name></expr></argument>, <argument><expr><name>coinbase_script_pub_key_A</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>chainA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><call><name>BuildChain</name><argument_list>(<argument><expr><name>tip</name></expr></argument>, <argument><expr><name>coinbase_script_pub_key_B</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>chainB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that new blocks on chain A get indexed.</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>chainA_last_header</name> <init>= <expr><name>last_header</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><name><name>chainA</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><call><name>ProcessNewBlock</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><name><name>chainA</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>block_index</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><call><name><name>block</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CheckFilterLookups</name><argument_list>(<argument><expr><name>filter_index</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>chainA_last_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Reorg to chain B.</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>chainB_last_header</name> <init>= <expr><name>last_header</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><name><name>chainB</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><call><name>ProcessNewBlock</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><name><name>chainB</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>block_index</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><call><name><name>block</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CheckFilterLookups</name><argument_list>(<argument><expr><name>filter_index</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>chainB_last_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Check that filters for stale blocks on A can be retrieved.</comment>
    <expr_stmt><expr><name>chainA_last_header</name> <operator>=</operator> <name>last_header</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><name><name>chainA</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>block_index</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><call><name><name>block</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CheckFilterLookups</name><argument_list>(<argument><expr><name>filter_index</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>chainA_last_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Reorg back to chain A.</comment>
     <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><name><name>chainA</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><call><name>ProcessNewBlock</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

     <comment type="line">// Check that chain A and B blocks can be retrieved.</comment>
     <expr_stmt><expr><name>chainA_last_header</name> <operator>=</operator> <name>last_header</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>chainB_last_header</name> <operator>=</operator> <name>last_header</name></expr>;</expr_stmt>
     <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl>;</decl_stmt>

         <block>{<block_content>
             <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>block_index</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name><name>chainA</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block>
         <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>CheckFilterLookups</name><argument_list>(<argument><expr><name>filter_index</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>chainA_last_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <block>{<block_content>
             <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>block_index</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name><name>chainB</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block>
         <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>CheckFilterLookups</name><argument_list>(<argument><expr><name>filter_index</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>chainB_last_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

    <comment type="line">// Test lookups for a range of filters/hashes.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BlockFilter</name></expr></argument>&gt;</argument_list></name></type> <name>filters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>filter_hashes</name></decl>;</decl_stmt>

    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterRange</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>.</operator><name>LookupFilterHashRange</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>filter_hashes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>filters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tip</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>filter_hashes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tip</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filters</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter_hashes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filter_index</name><operator>.</operator><name>Interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter_index</name><operator>.</operator><name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>blockfilter_index_init_destroy</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>BlockFilterIndex</name><modifier>*</modifier></type> <name>filter_index</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>filter_index</name> <operator>=</operator> <call><name>GetBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>filter_index</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>InitBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter_index</name> <operator>=</operator> <call><name>GetBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>filter_index</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter_index</name><operator>-&gt;</operator><name>GetFilterType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize returns false if index already exists.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>InitBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>iter_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ForEachBlockFilterIndex</name><argument_list>(<argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>iter_count</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>BlockFilterIndex</name><modifier>&amp;</modifier></type> <name>_index</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>iter_count</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>iter_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>DestroyBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Destroy returns false because index was already destroyed.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>DestroyBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter_index</name> <operator>=</operator> <call><name>GetBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>filter_index</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reinitialize index.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>InitBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DestroyAllBlockFilterIndexes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter_index</name> <operator>=</operator> <call><name>GetBlockFilterIndex</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>filter_index</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
