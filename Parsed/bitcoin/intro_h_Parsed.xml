<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/intro.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_INTRO_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_INTRO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDialog&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QThread&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_CHOOSE_DATADIR</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FreespaceChecker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
    <decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>Ui</name> <block>{<block_content>
    <decl_stmt><decl><type><name>class</name></type> <name>Intro</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/** Introduction screen (pre-GUI startup).
  Allows the user to choose a data directory,
  in which the wallet and block chain will be stored.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Intro</name> <range>: <expr><name>public</name> <name>QDialog</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <macro><name>Intro</name><argument_list>(<argument>QWidget *parent = nullptr</argument>,
                   <argument>uint64_t blockchain_size = <literal type="number">0</literal></argument>, <argument>uint64_t chain_state_size = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;
    <expr><operator>~</operator><call><name>Intro</name><argument_list>()</argument_list></call></expr>;

    <expr><name>QString</name> <call><name>getDataDirectory</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>setDataDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>dataDir</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/**
     * Determine data directory. Let the user choose if the current one doesn't exist.
     * Let the user configure additional preferences such as pruning.
     *
     * @returns true if a data directory was selected, false if the user cancelled the selection
     * dialog.
     *
     * @note do NOT call global GetDataDir() before calling this function, this
     * will cause the wrong path to be cached.
     */</comment>
    <expr><specifier>static</specifier> <name>bool</name> <call><name>showIfNeeded</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><name>bool</name><operator>&amp;</operator> <name>did_show_intro</name></expr></argument>, <argument><expr><name>bool</name><operator>&amp;</operator> <name>prune</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>requestCheck</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <macro><name>setStatus</name><argument_list>(<argument>int status</argument>, <argument>const QString &amp;message</argument>, <argument>quint64 bytesAvailable</argument>)</argument_list></macro></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>on_dataDirectory_textChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>arg1</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>on_ellipsisButton_clicked</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>on_dataDirDefault_clicked</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>on_dataDirCustom_clicked</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>Ui</name><operator>::</operator><name>Intro</name> <operator>*</operator><name>ui</name></expr>;
    <expr><name>QThread</name> <operator>*</operator><name>thread</name></expr>;
    <expr><name>QMutex</name> <name>mutex</name></expr>;
    <expr><name>bool</name> <name>signalled</name></expr>;
    <expr><name>QString</name> <name>pathToCheck</name></expr>;
    <expr><name>uint64_t</name> <name>m_blockchain_size</name></expr>;
    <expr><name>uint64_t</name> <name>m_chain_state_size</name></expr>;

    <expr><name>void</name> <call><name>startThread</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>checkPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>dataDir</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>QString</name> <call><name>getPathToCheck</name><argument_list>()</argument_list></call></expr>;

    <expr><name>friend</name> <name>class</name> <name>FreespaceChecker</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_INTRO_H</comment>
</unit>
