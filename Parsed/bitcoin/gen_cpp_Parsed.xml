<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/univalue/gen/gen.cpp"><comment type="line">// Copyright 2014 BitPay Inc.</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<comment type="line">//</comment>
<comment type="line">// To re-create univalue_escapes.h:</comment>
<comment type="line">// $ g++ -o gen gen.cpp</comment>
<comment type="line">// $ ./gen &gt; univalue_escapes.h</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"univalue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>initEscapes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>escapes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initJsonEscape</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Escape all lower control characters (some get overridden with smaller sequences below)</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name><init>=<expr><literal type="number">0x00</literal></expr></init></decl>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><literal type="number">0x20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ch</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>tmpbuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\u%04x"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>escapes</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'"'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\\""</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'\\'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\\\"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'\b'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\b"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'\f'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\f"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'\n'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'\r'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\r"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'\t'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\t"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>escapes</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="char">'\x7f'</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"\\u007f"</literal></expr>;</expr_stmt> <comment type="line">// U+007F DELETE</comment>

    <expr_stmt><expr><name>initEscapes</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>outputEscape</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(	<argument><expr><literal type="string">"// Automatically generated file. Do not modify.\n"</literal>
		<literal type="string">"#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n"</literal>
		<literal type="string">"#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n"</literal>
		<literal type="string">"static const char *escapes[256] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>escapes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tNULL,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>si</name></decl>;</decl_stmt>
			<for>for <control>(<init><expr><name>si</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>si</name> <operator>&lt;</operator> <name><name>escapes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>si</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>escapes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>si</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
				<case>case <expr><literal type="char">'"'</literal></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>escapes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>si</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(	<argument><expr><literal type="string">"};\n"</literal>
		<literal type="string">"#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>initJsonEscape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>outputEscape</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
