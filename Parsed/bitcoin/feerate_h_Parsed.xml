<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/policy/feerate.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_POLICY_FEERATE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_POLICY_FEERATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<extern>extern const std::string CURRENCY_UNIT;</extern>

<comment type="block" format="doxygen">/**
 * Fee rate in satoshis per kilobyte: CAmount / kB
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CFeeRate</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nSatoshisPerK</name></decl>;</decl_stmt> <comment type="line">// unit is satoshis-per-1,000-bytes</comment>

<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/** Fee rate of 0 satoshis per kB */</comment>
    <expr_stmt><expr><call><name>CFeeRate</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>nSatoshisPerK</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{ }</block>
    <name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>I</name></expr></argument>&gt;</argument_list></name>
    <name>explicit</name> <macro><name>CFeeRate</name><argument_list>(<argument>const I _nSatoshisPerK</argument>)</argument_list></macro><operator>:</operator> <macro><name>nSatoshisPerK</name><argument_list>(<argument>_nSatoshisPerK</argument>)</argument_list></macro> <block>{
        <comment type="line">// We've previously had bugs creep in from silent double-&gt;int conversion...</comment>
        <expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>I</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"CFeeRate should be used without floats"</literal></expr></argument>)</argument_list></call></expr>;
    }</block>
    <comment type="block" format="doxygen">/** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/</comment>
    <macro><name>CFeeRate</name><argument_list>(<argument>const CAmount&amp; nFeePaid</argument>, <argument>size_t nBytes</argument>)</argument_list></macro></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/**
     * Return the fee in satoshis for the given size in bytes.
     */</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>GetFee</name><argument_list>(<argument><expr><name>size_t</name> <name>nBytes</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * Return the fee in satoshis for a size of 1000 bytes
     */</comment>
    <expr_stmt><expr><name>CAmount</name> <macro><name>GetFeePerK</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>GetFee</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>nSatoshisPerK</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>nSatoshisPerK</name></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>nSatoshisPerK</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>nSatoshisPerK</name></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>nSatoshisPerK</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>nSatoshisPerK</name></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>nSatoshisPerK</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>nSatoshisPerK</name></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>nSatoshisPerK</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>nSatoshisPerK</name></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>nSatoshisPerK</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>nSatoshisPerK</name></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>CFeeRate</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>a</name><operator>)</operator> <block>{ <expr><name>nSatoshisPerK</name> <operator>+=</operator> <name><name>a</name><operator>.</operator><name>nSatoshisPerK</name></name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nSatoshisPerK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//  BITCOIN_POLICY_FEERATE_H</comment>
</unit>
