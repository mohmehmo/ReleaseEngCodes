<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/policyestimator_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>policyestimator_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>BlockPolicyEstimates</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlockPolicyEstimator</name></type> <name>feeEst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxMemPool</name></type> <name>mpool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>feeEst</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>mpool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TestMemPoolEntryHelper</name></type> <name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>basefee</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>deltaFee</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name></type> <name>feeV</name></decl>;</decl_stmt>

    <comment type="line">// Populate vectors of increasing fees</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>feeV</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>basefee</name> <operator>*</operator> <operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Store the hashes of transactions that have been</comment>
    <comment type="line">// added to the mempool by their associate fee</comment>
    <comment type="line">// txHashes[j] is populated with transactions either of</comment>
    <comment type="line">// fee = basefee * (j+1)</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name><name>txHashes</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// Create a transaction template</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>garbage</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>garbage</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <name>garbage</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name><operator>=</operator><literal type="number">0LL</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>baseRate</name><argument_list>(<argument><expr><name>basefee</name></expr></argument>, <argument><expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Create a fake block</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>blocknum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Loop through 200 blocks</comment>
    <comment type="line">// At a decay .9952 and 4 fee transactions per block</comment>
    <comment type="line">// This makes the tx count about 2.5 per bucket, well above the 0.1 threshold</comment>
    <while>while <condition>(<expr><name>blocknum</name> <operator>&lt;</operator> <literal type="number">200</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// For each fee</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// add 4 fee txs</comment>
                <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">10000</literal><operator>*</operator><name>blocknum</name><operator>+</operator><literal type="number">100</literal><operator>*</operator><name>j</name><operator>+</operator><name>k</name></expr>;</expr_stmt> <comment type="line">// make transaction unique</comment>
                <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name><name>feeV</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>(<argument><expr><name>blocknum</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txHashes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">//Create blocks where higher fee txs are included more often</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;=</operator> <name>blocknum</name><operator>%</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// 10/10 blocks add highest fee transactions</comment>
            <comment type="line">// 9/10 blocks add 2nd highest and so on until ...</comment>
            <comment type="line">// 1/10 blocks add lowest fee transactions</comment>
            <while>while <condition>(<expr><name><name>txHashes</name><index>[<expr><literal type="number">9</literal><operator>-</operator><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>ptx</name> <init>= <expr><call><name><name>mpool</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>txHashes</name><index>[<expr><literal type="number">9</literal><operator>-</operator><name>h</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ptx</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ptx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>txHashes</name><index>[<expr><literal type="number">9</literal><operator>-</operator><name>h</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>removeForBlock</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>++</operator><name>blocknum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Check after just a few txs that combining buckets works as expected</comment>
        <if_stmt><if>if <condition>(<expr><name>blocknum</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// At this point we should need to combine 3 buckets to get enough data points</comment>
            <comment type="line">// So estimateFee(1) should fail and estimateFee(2) should return somewhere around</comment>
            <comment type="line">// 9*baserate.  estimateFee(2) %'s are 100,100,90 = average 97%</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">9</literal><operator>*</operator><call><name><name>baseRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">9</literal><operator>*</operator><call><name><name>baseRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name></type> <name>origFeeEst</name></decl>;</decl_stmt>
    <comment type="line">// Highest feerate is 10*baseRate and gets in all blocks,</comment>
    <comment type="line">// second highest feerate is 9*baseRate and gets in 9/10 blocks = 90%,</comment>
    <comment type="line">// third highest feerate is 8*base rate, and gets in 8/10 blocks = 80%,</comment>
    <comment type="line">// so estimateFee(1) would return 10*baseRate but is hardcoded to return failure</comment>
    <comment type="line">// Second highest feerate has 100% chance of being included by 2 blocks,</comment>
    <comment type="line">// so estimateFee(2) should return 9*baseRate etc...</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>origFeeEst</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Fee estimates should be monotonically decreasing</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mult</name> <init>= <expr><literal type="number">11</literal><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">//At scale 2, test logic is only correct for even targets</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>mult</name><operator>*</operator><call><name><name>baseRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>mult</name><operator>*</operator><call><name><name>baseRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// Fill out rest of the original estimates</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>origFeeEst</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Mine 50 more blocks with no transactions happening, estimates shouldn't change</comment>
    <comment type="line">// We haven't decayed the moving average enough so we still have enough data points in every bucket</comment>
    <while>while <condition>(<expr><name>blocknum</name> <operator>&lt;</operator> <literal type="number">250</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>removeForBlock</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>++</operator><name>blocknum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>


    <comment type="line">// Mine 15 more blocks with lots of transactions happening and not getting mined</comment>
    <comment type="line">// Estimates should go up</comment>
    <while>while <condition>(<expr><name>blocknum</name> <operator>&lt;</operator> <literal type="number">265</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// For each fee multiple</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// add 4 fee txs</comment>
                <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">10000</literal><operator>*</operator><name>blocknum</name><operator>+</operator><literal type="number">100</literal><operator>*</operator><name>j</name><operator>+</operator><name>k</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name><name>feeV</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>(<argument><expr><name>blocknum</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txHashes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>removeForBlock</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>++</operator><name>blocknum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Mine all those transactions</comment>
    <comment type="line">// Estimates should still not be below original</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <while>while<condition>(<expr><name><name>txHashes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>ptx</name> <init>= <expr><call><name><name>mpool</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>txHashes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ptx</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ptx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>txHashes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>removeForBlock</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">266</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Mine 400 more blocks where everything is mined every block</comment>
    <comment type="line">// Estimates should be below original estimates</comment>
    <while>while <condition>(<expr><name>blocknum</name> <operator>&lt;</operator> <literal type="number">665</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// For each fee multiple</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// add 4 fee txs</comment>
                <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">10000</literal><operator>*</operator><name>blocknum</name><operator>+</operator><literal type="number">100</literal><operator>*</operator><name>j</name><operator>+</operator><name>k</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name><name>feeV</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>(<argument><expr><name>blocknum</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>ptx</name> <init>= <expr><call><name><name>mpool</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ptx</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ptx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>mpool</name><operator>.</operator><name>removeForBlock</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>++</operator><name>blocknum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// At 9, the original estimate was already at the bottom (b/c scale = 2)</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>feeEst</name><operator>.</operator><name>estimateFee</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>origFeeEst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>deltaFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
