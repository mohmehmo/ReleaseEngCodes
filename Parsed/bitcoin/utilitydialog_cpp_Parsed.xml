<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/utilitydialog.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/utilitydialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/forms/ui_helpmessagedialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoingui.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCloseEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLabel&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QRegExp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextTable&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextCursor&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVBoxLayout&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** "Help message" or "About" dialog box */</comment>
<constructor><name><name>HelpMessageDialog</name><operator>::</operator><name>HelpMessageDialog</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>about</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QDialog</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>ui</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Ui</name><operator>::</operator><name>HelpMessageDialog</name></name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>setupUi</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>version</name> <init>= <expr><call><name>QString</name><argument_list>{<argument><expr><name>PACKAGE_NAME</name></expr></argument>}</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>FormatFullVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>about</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"About %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>licenseInfo</name> <init>= <expr><call><name>LicenseInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line" format="doxygen">/// HTML-format the license message from the core</comment>
        <decl_stmt><decl><type><name>QString</name></type> <name>licenseInfoHTML</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>LicenseInfo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Make URLs clickable</comment>
        <decl_stmt><decl><type><name>QRegExp</name></type> <name>uri</name><argument_list>(<argument><expr><literal type="string">"&lt;(.*)&gt;"</literal></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>CaseSensitive</name></name></expr></argument>, <argument><expr><name><name>QRegExp</name><operator>::</operator><name>RegExp2</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>uri</name><operator>.</operator><name>setMinimal</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// use non-greedy matching</comment>
        <expr_stmt><expr><call><name><name>licenseInfoHTML</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"&lt;a href=\"\\1\"&gt;\\1&lt;/a&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Replace newlines with HTML breaks</comment>
        <expr_stmt><expr><call><name><name>licenseInfoHTML</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;br&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>aboutMessage</name><operator>-&gt;</operator><name>setTextFormat</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>RichText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>scrollArea</name><operator>-&gt;</operator><name>setVerticalScrollBarPolicy</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ScrollBarAsNeeded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <name>version</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>FormatParagraph</name><argument_list>(<argument><expr><name>licenseInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>aboutMessage</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>version</name> <operator>+</operator> <literal type="string">"&lt;br&gt;&lt;br&gt;"</literal> <operator>+</operator> <name>licenseInfoHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>aboutMessage</name><operator>-&gt;</operator><name>setWordWrap</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>helpMessage</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Command-line options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>header</name> <init>= <expr><literal type="string">"Usage:  bitcoin-qt [command-line options]                     \n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QTextCursor</name></type> <name>cursor</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>helpMessage</name><operator>-&gt;</operator><name>document</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertText</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertText</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strUsage</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetHelpMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>coreOptions</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>strUsage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <name>version</name> <operator>+</operator> <literal type="string">"\n\n"</literal> <operator>+</operator> <name>header</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <name>coreOptions</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>QTextTableFormat</name></type> <name>tf</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tf</name><operator>.</operator><name>setBorderStyle</name></name><argument_list>(<argument><expr><name><name>QTextFrameFormat</name><operator>::</operator><name>BorderStyle_None</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tf</name><operator>.</operator><name>setCellPadding</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>QVector</name><argument_list type="generic">&lt;<argument><expr><name>QTextLength</name></expr></argument>&gt;</argument_list></name></type> <name>widths</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>widths</name> <operator>&lt;&lt;</operator> <call><name>QTextLength</name><argument_list>(<argument><expr><name><name>QTextLength</name><operator>::</operator><name>PercentageLength</name></name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>widths</name> <operator>&lt;&lt;</operator> <call><name>QTextLength</name><argument_list>(<argument><expr><name><name>QTextLength</name><operator>::</operator><name>PercentageLength</name></name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tf</name><operator>.</operator><name>setColumnWidthConstraints</name></name><argument_list>(<argument><expr><name>widths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>QTextCharFormat</name></type> <name>bold</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bold</name><operator>.</operator><name>setFontWeight</name></name><argument_list>(<argument><expr><name><name>QFont</name><operator>::</operator><name>Bold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>line</name> <range>: <expr><call><name><name>coreOptions</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"  -"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>currentTable</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>appendRows</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>movePosition</name></name><argument_list>(<argument><expr><name><name>QTextCursor</name><operator>::</operator><name>PreviousCell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>movePosition</name></name><argument_list>(<argument><expr><name><name>QTextCursor</name><operator>::</operator><name>NextRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertText</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>trimmed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>movePosition</name></name><argument_list>(<argument><expr><name><name>QTextCursor</name><operator>::</operator><name>NextCell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertText</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>trimmed</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">//Title of a group</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>currentTable</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>currentTable</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>appendRows</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>movePosition</name></name><argument_list>(<argument><expr><name><name>QTextCursor</name><operator>::</operator><name>Down</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertText</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>trimmed</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>insertTable</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>helpMessage</name><operator>-&gt;</operator><name>moveCursor</name></name><argument_list>(<argument><expr><name><name>QTextCursor</name><operator>::</operator><name>Start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>scrollArea</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>aboutLogo</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>HelpMessageDialog</name><operator>::</operator><name>~HelpMessageDialog</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>delete</operator> <name>ui</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>HelpMessageDialog</name><operator>::</operator><name>printToConsole</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// On other operating systems, the expected action is to print the message to the console.</comment>
    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>qPrintable</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>HelpMessageDialog</name><operator>::</operator><name>showOrPrint</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// On Windows, show a message box, as there is no stderr/stdout in windowed applications</comment>
    <expr_stmt><expr><call><name>exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// On other operating systems, print help text to console</comment>
    <expr_stmt><expr><call><name>printToConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>HelpMessageDialog</name><operator>::</operator><name>on_okButton_accepted</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** "Shutdown" window */</comment>
<constructor><name><name>ShutdownWindow</name><operator>::</operator><name>ShutdownWindow</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>Qt</name><operator>::</operator><name>WindowFlags</name></name></type> <name>f</name></decl></parameter>)</parameter_list><member_init_list>:
    <call><name>QWidget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <decl_stmt><decl><type><name>QVBoxLayout</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><operator>new</operator> <call><name>QVBoxLayout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>layout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QLabel</name><argument_list>(
        <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1 is shutting down..."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br /&gt;&lt;br /&gt;"</literal> <operator>+</operator>
        <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Do not shut down the computer until this window disappears."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>QWidget</name> <modifier>*</modifier></type><name><name>ShutdownWindow</name><operator>::</operator><name>showShutdownWindow</name></name><parameter_list>(<parameter><decl><type><name>BitcoinGUI</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Show a simple window indicating shutdown status</comment>
    <decl_stmt><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>shutdownWindow</name> <init>= <expr><operator>new</operator> <call><name>ShutdownWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>shutdownWindow</name><operator>-&gt;</operator><name>setWindowTitle</name></name><argument_list>(<argument><expr><call><name><name>window</name><operator>-&gt;</operator><name>windowTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Center shutdown window at where main window was</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>QPoint</name></type> <name>global</name> <init>= <expr><call><name><name>window</name><operator>-&gt;</operator><name>mapToGlobal</name></name><argument_list>(<argument><expr><call><name><name>window</name><operator>-&gt;</operator><name>rect</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>center</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>shutdownWindow</name><operator>-&gt;</operator><name>move</name></name><argument_list>(<argument><expr><call><name><name>global</name><operator>.</operator><name>x</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>shutdownWindow</name><operator>-&gt;</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>global</name><operator>.</operator><name>y</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>shutdownWindow</name><operator>-&gt;</operator><name>height</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>shutdownWindow</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>shutdownWindow</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ShutdownWindow</name><operator>::</operator><name>closeEvent</name></name><parameter_list>(<parameter><decl><type><name>QCloseEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
