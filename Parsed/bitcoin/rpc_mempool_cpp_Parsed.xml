<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/rpc_mempool.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AddTx</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTransactionRef</name><operator>&amp;</operator> <name>tx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>fee</name></expr></argument>, <argument><expr><name>CTxMemPool</name><operator>&amp;</operator> <name>pool</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>LockPoints</name> <name>lp</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name>CTxMemPoolEntry</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>fee</name></expr></argument>, <comment type="block">/* time */</comment> <argument><expr><literal type="number">0</literal></expr></argument>, <comment type="block">/* height */</comment> <argument><expr><literal type="number">1</literal></expr></argument>, <comment type="block">/* spendsCoinbase */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>, <comment type="block">/* sigOpCost */</comment> <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

static <name>void</name> <name>RpcMempool</name><argument_list>(<argument><expr><name><name>benchmark</name><operator>::</operator><name>State</name></name><operator>&amp;</operator> <name>state</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>CTxMemPool</name> <name>pool</name></expr></argument>;
    <argument><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr></argument>;

    for <argument><expr><operator>(</operator><name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
        <expr><name>CMutableTransaction</name> <name>tx</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>i</name></expr>;
        <expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr>;
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx_r</name></expr></argument>, <comment type="block">/* fee */</comment> <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr></argument>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <expr_stmt><expr><block>{
        <expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MempoolToJSON</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <comment type="block">/*verbose*/</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    }</block></expr></expr_stmt></while>
}</argument_list>

<name>BENCHMARK</name><argument_list>(<argument><expr><name>RpcMempool</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
