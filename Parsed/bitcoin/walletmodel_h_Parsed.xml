<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/walletmodel.h"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_WALLETMODEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_WALLETMODEL_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodeltransaction.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OutputType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AddressTableModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OptionsModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RecentRequestsTableModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsRecipient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionTableModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModelTransaction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CCoinControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CKeyID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>COutPoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>COutput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CPubKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>uint256</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QTimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<comment type="block" format="doxygen">/** Interface to Bitcoin wallet from Qt view code. */</comment>
<name>class</name></type> <name>WalletModel</name> <range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>WalletModel</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Wallet</name></expr></argument>&gt;</argument_list></name> <name>wallet</name></expr></argument>, <argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr></argument>, <argument><expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr></argument>, <argument><expr><name>QObject</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>WalletModel</name><argument_list>()</argument_list></call></expr>;

    enum <expr><name>StatusCode</name> <comment type="line">// Returned by sendCoins</comment>
    <block>{
        <expr><name>OK</name></expr>,
        <expr><name>InvalidAmount</name></expr>,
        <expr><name>InvalidAddress</name></expr>,
        <expr><name>AmountExceedsBalance</name></expr>,
        <expr><name>AmountWithFeeExceedsBalance</name></expr>,
        <expr><name>DuplicateAddress</name></expr>,
        <expr><name>TransactionCreationFailed</name></expr>, <comment type="line">// Error returned when wallet is still locked</comment>
        <expr><name>AbsurdFee</name></expr>,
        <expr><name>PaymentRequestExpired</name></expr>
    }</block></expr>;

    enum <expr><name>EncryptionStatus</name>
    <block>{
        <expr><name>Unencrypted</name></expr>,  <comment type="line">// !wallet-&gt;IsCrypted()</comment>
        <expr><name>Locked</name></expr>,       <comment type="line">// wallet-&gt;IsCrypted() &amp;&amp; wallet-&gt;IsLocked()</comment>
        <expr><name>Unlocked</name></expr>      <comment type="line">// wallet-&gt;IsCrypted() &amp;&amp; !wallet-&gt;IsLocked()</comment>
    }</block></expr>;

    <expr><name>OptionsModel</name> <operator>*</operator><call><name>getOptionsModel</name><argument_list>()</argument_list></call></expr>;
    <expr><name>AddressTableModel</name> <operator>*</operator><call><name>getAddressTableModel</name><argument_list>()</argument_list></call></expr>;
    <expr><name>TransactionTableModel</name> <operator>*</operator><call><name>getTransactionTableModel</name><argument_list>()</argument_list></call></expr>;
    <expr><name>RecentRequestsTableModel</name> <operator>*</operator><call><name>getRecentRequestsTableModel</name><argument_list>()</argument_list></call></expr>;

    <expr><name>EncryptionStatus</name> <macro><name>getEncryptionStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="line">// Check address for validity</comment>
    <expr><name>bool</name> <call><name>validateAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Return status record for SendCoins, contains error id + information</comment>
    struct <expr><name>SendCoinsReturn</name>
    <block>{
        <macro><name>SendCoinsReturn</name><argument_list>(<argument>StatusCode _status = OK</argument>, <argument>QString _reasonCommitFailed = <literal type="string">""</literal></argument>)</argument_list></macro>
            <operator>:</operator> <expr><call><name>status</name><argument_list>(<argument><expr><name>_status</name></expr></argument>)</argument_list></call></expr>,
              <macro><name>reasonCommitFailed</name><argument_list>(<argument>_reasonCommitFailed</argument>)</argument_list></macro>
        <expr><block>{
        }</block>
        <name>StatusCode</name> <name>status</name></expr>;
        <expr><name>QString</name> <name>reasonCommitFailed</name></expr>;
    }</block></expr>;

    <comment type="line">// prepare transaction for getting txfee before sending coins</comment>
    <expr><name>SendCoinsReturn</name> <call><name>prepareTransaction</name><argument_list>(<argument><expr><name>WalletModelTransaction</name> <operator>&amp;</operator><name>transaction</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CCoinControl</name><operator>&amp;</operator> <name>coinControl</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Send coins to a list of recipients</comment>
    <expr><name>SendCoinsReturn</name> <call><name>sendCoins</name><argument_list>(<argument><expr><name>WalletModelTransaction</name> <operator>&amp;</operator><name>transaction</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Wallet encryption</comment>
    <expr><name>bool</name> <macro><name>setWalletEncrypted</name><argument_list>(<argument>bool encrypted</argument>, <argument>const SecureString &amp;passphrase</argument>)</argument_list></macro></expr>;
    <comment type="line">// Passphrase only needed when unlocking</comment>
    <expr><name>bool</name> <macro><name>setWalletLocked</name><argument_list>(<argument>bool locked</argument>, <argument>const SecureString &amp;passPhrase=SecureString()</argument>)</argument_list></macro></expr>;
    <expr><name>bool</name> <call><name>changePassphrase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SecureString</name> <operator>&amp;</operator><name>oldPass</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SecureString</name> <operator>&amp;</operator><name>newPass</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// RAI object for unlocking wallet, returned by requestUnlock()</comment>
    <expr><name>class</name> <name>UnlockContext</name>
    <block>{
    <expr><name>public</name><operator>:</operator>
        <macro><name>UnlockContext</name><argument_list>(<argument>WalletModel *wallet</argument>, <argument>bool valid</argument>, <argument>bool relock</argument>)</argument_list></macro></expr>;
        <expr><operator>~</operator><call><name>UnlockContext</name><argument_list>()</argument_list></call></expr>;

        <expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>valid</name></expr>;</return> }</block>

        <comment type="line">// Copy constructor is disabled.</comment>
        <call><name>UnlockContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnlockContext</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
        <comment type="line">// Move operator and constructor transfer the context</comment>
        <macro><name>UnlockContext</name><argument_list>(<argument>UnlockContext&amp;&amp; obj</argument>)</argument_list></macro> <expr><block>{ <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; }</block>
        <name>UnlockContext</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name>UnlockContext</name><operator>&amp;&amp;</operator> <name>rhs</name><operator>)</operator> <block>{ <expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block>
    <name>private</name><operator>:</operator>
        <name>WalletModel</name> <operator>*</operator><name>wallet</name></expr>;
        <expr><name>bool</name> <name>valid</name></expr>;
        <expr><name>mutable</name> <name>bool</name> <name>relock</name></expr>; <comment type="line">// mutable, as it can be set to false by copying</comment>

        <expr><name>UnlockContext</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>UnlockContext</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr>;
        <expr><name>void</name> <call><name>CopyFrom</name><argument_list>(<argument><expr><name>UnlockContext</name><operator>&amp;&amp;</operator> <name>rhs</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr>;

    <expr><name>UnlockContext</name> <call><name>requestUnlock</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>loadReceiveRequests</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vReceiveRequests</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>bool</name> <macro><name>saveReceiveRequest</name><argument_list>(<argument>const std::string &amp;sAddress</argument>, <argument>const int64_t nId</argument>, <argument>const std::string &amp;sRequest</argument>)</argument_list></macro></expr>;

    <expr><name>bool</name> <macro><name>bumpFee</name><argument_list>(<argument>uint256 hash</argument>, <argument>uint256&amp; new_hash</argument>)</argument_list></macro></expr>;

    <expr><specifier>static</specifier> <name>bool</name> <call><name>isWalletEnabled</name><argument_list>()</argument_list></call></expr>;
    <expr><name>bool</name> <macro><name>privateKeysDisabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>bool</name> <macro><name>canGetAddresses</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <macro><name>node</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_node</name></expr>;</return> }</block>
    <name>interfaces</name><operator>::</operator><name>Wallet</name><operator>&amp;</operator> <macro><name>wallet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>m_wallet</name></expr>;</return> }</block>

    <name>QString</name> <macro><name>getWalletName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>getDisplayName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>bool</name> <call><name>isMultiwallet</name><argument_list>()</argument_list></call></expr>;

    <expr><name>AddressTableModel</name><operator>*</operator> <macro><name>getAddressTableModel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>addressTableModel</name></expr>;</return> }</block>
<name>private</name><operator>:</operator>
    <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Wallet</name></expr></argument>&gt;</argument_list></name> <name>m_wallet</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_unload</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_status_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_address_book_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_transaction_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_show_progress</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_watch_only_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_can_get_addrs_changed</name></expr>;
    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;

    <expr><name>bool</name> <name>fHaveWatchOnly</name></expr>;
    <expr><name>bool</name> <name>fForceCheckBalanceChanged</name><block>{<expr><name>false</name></expr>}</block></expr>;

    <comment type="line">// Wallet has an options model for wallet-specific options</comment>
    <comment type="line">// (transaction fee, for example)</comment>
    <expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr>;

    <expr><name>AddressTableModel</name> <operator>*</operator><name>addressTableModel</name></expr>;
    <expr><name>TransactionTableModel</name> <operator>*</operator><name>transactionTableModel</name></expr>;
    <expr><name>RecentRequestsTableModel</name> <operator>*</operator><name>recentRequestsTableModel</name></expr>;

    <comment type="line">// Cache some values to be able to detect changes</comment>
    <expr><name>interfaces</name><operator>::</operator><name>WalletBalances</name> <name>m_cached_balances</name></expr>;
    <expr><name>EncryptionStatus</name> <name>cachedEncryptionStatus</name></expr>;
    <expr><name>int</name> <name>cachedNumBlocks</name></expr>;

    <expr><name>void</name> <call><name>subscribeToCoreSignals</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>unsubscribeFromCoreSignals</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>checkBalanceChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>interfaces</name><operator>::</operator><name>WalletBalances</name><operator>&amp;</operator> <name>new_balances</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <comment type="line">// Signal that balance in wallet changed</comment>
    <name>void</name> <call><name>balanceChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>interfaces</name><operator>::</operator><name>WalletBalances</name><operator>&amp;</operator> <name>balances</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Encryption status of wallet changed</comment>
    <expr><name>void</name> <call><name>encryptionStatusChanged</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// Signal emitted when wallet needs to be unlocked</comment>
    <comment type="line">// It is valid behaviour for listeners to keep the wallet locked after this signal;</comment>
    <comment type="line">// this means that the unlocking failed or was cancelled.</comment>
    <expr><name>void</name> <call><name>requireUnlock</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// Fired when a message should be reported to the user</comment>
    <expr><name>void</name> <macro><name>message</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>const QString &amp;message</argument>, <argument>unsigned int style</argument>)</argument_list></macro></expr>;

    <comment type="line">// Coins sent: from wallet, to recipient, in (serialized) transaction:</comment>
    <expr><name>void</name> <macro><name>coinsSent</name><argument_list>(<argument>WalletModel* wallet</argument>, <argument>SendCoinsRecipient recipient</argument>, <argument>QByteArray transaction</argument>)</argument_list></macro></expr>;

    <comment type="line">// Show progress dialog e.g. for rescan</comment>
    <expr><name>void</name> <macro><name>showProgress</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>int nProgress</argument>)</argument_list></macro></expr>;

    <comment type="line">// Watch-only address added</comment>
    <expr><name>void</name> <macro><name>notifyWatchonlyChanged</name><argument_list>(<argument>bool fHaveWatchonly</argument>)</argument_list></macro></expr>;

    <comment type="line">// Signal that wallet is about to be removed</comment>
    <expr><name>void</name> <call><name>unload</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// Notify that there are now keys in the keypool</comment>
    <expr><name>void</name> <call><name>canGetAddressesChanged</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="block">/* Starts a timer to periodically update the balance */</comment>
    <name>void</name> <call><name>startPollBalance</name><argument_list>()</argument_list></call></expr>;

    <comment type="block">/* Wallet status might have changed */</comment>
    <expr><name>void</name> <call><name>updateStatus</name><argument_list>()</argument_list></call></expr>;
    <comment type="block">/* New transaction, or transaction changed status */</comment>
    <expr><name>void</name> <call><name>updateTransaction</name><argument_list>()</argument_list></call></expr>;
    <comment type="block">/* New, updated or removed address book entry */</comment>
    <expr><name>void</name> <macro><name>updateAddressBook</name><argument_list>(<argument>const QString &amp;address</argument>, <argument>const QString &amp;label</argument>, <argument>bool isMine</argument>, <argument>const QString &amp;purpose</argument>, <argument>int status</argument>)</argument_list></macro></expr>;
    <comment type="block">/* Watch-only added */</comment>
    <expr><name>void</name> <macro><name>updateWatchOnlyFlag</name><argument_list>(<argument>bool fHaveWatchonly</argument>)</argument_list></macro></expr>;
    <comment type="block">/* Current, immature or unconfirmed balance might have changed - emit 'balanceChanged' if so */</comment>
    <expr><name>void</name> <call><name>pollBalanceChanged</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_WALLETMODEL_H</comment>
</unit>
