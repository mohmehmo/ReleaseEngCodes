<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/modaloverlay.cpp"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/modaloverlay.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/forms/ui_modaloverlay.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QResizeEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPropertyAnimation&gt;</cpp:file></cpp:include>

<constructor><name><name>ModalOverlay</name><operator>::</operator><name>ModalOverlay</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable_wallet</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
<call><name>QWidget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
<call><name>ui</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Ui</name><operator>::</operator><name>ModalOverlay</name></name></expr></argument>)</argument_list></call>,
<call><name>bestHeaderHeight</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>,
<call><name>bestHeaderDate</name><argument_list>(<argument><expr><call><name>QDateTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>,
<call><name>layerIsVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>,
<call><name>userClosed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>setupUi</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>closeButton</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ModalOverlay</name><operator>::</operator><name>closeClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>raise</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>blockProcessTime</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_wallet</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>infoText</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>infoTextStrong</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Bitcoin Core is currently syncing.  It will download headers and blocks from peers and validate them until reaching the tip of the block chain."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>ModalOverlay</name><operator>::</operator><name>~ModalOverlay</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>delete</operator> <name>ui</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>bool</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <call><name>parent</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>Resize</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>QResizeEvent</name> <modifier>*</modifier></type> <name>rev</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QResizeEvent</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>resize</name><argument_list>(<argument><expr><call><name><name>rev</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>layerIsVisible</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>setGeometry</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>width</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>height</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>ChildAdded</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>raise</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QWidget</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Tracks parent widget changes</comment>
<function><type><name>bool</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>event</name></name><parameter_list>(<parameter><decl><type><name>QEvent</name><modifier>*</modifier></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>ParentAboutToChange</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>parent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>parent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>removeEventFilter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>ParentChange</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>parent</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>installEventFilter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>raise</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QWidget</name><operator>::</operator><name>event</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>setKnownBestHeight</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QDateTime</name><modifier>&amp;</modifier></type> <name>blockDate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>bestHeaderHeight</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bestHeaderHeight</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bestHeaderDate</name> <operator>=</operator> <name>blockDate</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>UpdateHeaderSyncLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>tipUpdate</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QDateTime</name><modifier>&amp;</modifier></type> <name>blockDate</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>nVerificationProgress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QDateTime</name></type> <name>currentDate</name> <init>= <expr><call><name><name>QDateTime</name><operator>::</operator><name>currentDateTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// keep a vector of samples of verification progress at height</comment>
    <expr_stmt><expr><call><name><name>blockProcessTime</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><call><name>qMakePair</name><argument_list>(<argument><expr><call><name><name>currentDate</name><operator>.</operator><name>toMSecsSinceEpoch</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nVerificationProgress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// show progress speed if we have more than one sample</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>blockProcessTime</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>progressDelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>progressPerHour</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>qint64</name></type> <name>timeDelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>qint64</name></type> <name>remainingMSecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>remainingProgress</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name>nVerificationProgress</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>blockProcessTime</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>QPair</name><argument_list type="generic">&lt;<argument><expr><name>qint64</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>sample</name> <init>= <expr><name><name>blockProcessTime</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// take first sample after 500 seconds or last available one</comment>
            <if_stmt><if>if <condition>(<expr><name><name>sample</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <operator>(</operator><call><name><name>currentDate</name><operator>.</operator><name>toMSecsSinceEpoch</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">500</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>||</operator> <name>i</name> <operator>==</operator> <call><name><name>blockProcessTime</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>progressDelta</name> <operator>=</operator> <name><name>blockProcessTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>timeDelta</name> <operator>=</operator> <name><name>blockProcessTime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>progressPerHour</name> <operator>=</operator> <name>progressDelta</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>timeDelta</name> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>remainingMSecs</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>progressDelta</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>remainingProgress</name> <operator>/</operator> <name>progressDelta</name> <operator>*</operator> <name>timeDelta</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="line">// show progress increase per hour</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>progressIncreasePerH</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>progressPerHour</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// show expected remaining time</comment>
        <if_stmt><if>if<condition>(<expr><name>remainingMSecs</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>expectedTimeLeft</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatNiceTimeOffset</name></name><argument_list>(<argument><expr><name>remainingMSecs</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>expectedTimeLeft</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MAX_SAMPLES</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>blockProcessTime</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_SAMPLES</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>blockProcessTime</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>MAX_SAMPLES</name></expr></argument>, <argument><expr><call><name><name>blockProcessTime</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>MAX_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// show the last block date</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>newestBlockDate</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>blockDate</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// show the percentage done according to nVerificationProgress</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>percentageProgress</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>nVerificationProgress</name><operator>*</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>progressBar</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><name>nVerificationProgress</name><operator>*</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bestHeaderDate</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <comment type="line">// not syncing</comment>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// estimate the number of headers left based on nPowTargetSpacing</comment>
    <comment type="line">// and check if the gui is not aware of the best header (happens rarely)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>estimateNumHeadersLeft</name> <init>= <expr><call><name><name>bestHeaderDate</name><operator>.</operator><name>secsTo</name></name><argument_list>(<argument><expr><name>currentDate</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call><operator>.</operator><name>nPowTargetSpacing</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>hasBestHeader</name> <init>= <expr><name>bestHeaderHeight</name> <operator>&gt;=</operator> <name>count</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// show remaining number of blocks</comment>
    <if_stmt><if>if <condition>(<expr><name>estimateNumHeadersLeft</name> <operator>&lt;</operator> <name>HEADER_HEIGHT_DELTA_SYNC</name> <operator>&amp;&amp;</operator> <name>hasBestHeader</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>numberOfBlocksLeft</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>bestHeaderHeight</name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>UpdateHeaderSyncLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>expectedTimeLeft</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unknown..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>UpdateHeaderSyncLabel</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>est_headers_left</name> <init>= <expr><call><name><name>bestHeaderDate</name><operator>.</operator><name>secsTo</name></name><argument_list>(<argument><expr><call><name><name>QDateTime</name><operator>::</operator><name>currentDateTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call><operator>.</operator><name>nPowTargetSpacing</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>numberOfBlocksLeft</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unknown. Syncing Headers (%1, %2%)..."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>bestHeaderHeight</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><literal type="number">100.0</literal> <operator>/</operator> <operator>(</operator><name>bestHeaderHeight</name> <operator>+</operator> <name>est_headers_left</name><operator>)</operator> <operator>*</operator> <name>bestHeaderHeight</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>toggleVisibility</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>showHide</name><argument_list>(<argument><expr><name>layerIsVisible</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>layerIsVisible</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>userClosed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>showHide</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hide</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>userRequested</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>( <expr><operator>(</operator><name>layerIsVisible</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hide</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>layerIsVisible</name> <operator>&amp;&amp;</operator> <name>hide</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>hide</name> <operator>&amp;&amp;</operator> <name>userClosed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>userRequested</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVisible</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>hide</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>setGeometry</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>hide</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>height</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><call><name>width</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>height</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QPropertyAnimation</name><modifier>*</modifier></type> <name>animation</name> <init>= <expr><operator>new</operator> <call><name>QPropertyAnimation</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"pos"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>animation</name><operator>-&gt;</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>animation</name><operator>-&gt;</operator><name>setStartValue</name></name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>hide</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>this</name><operator>-&gt;</operator><name>height</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>animation</name><operator>-&gt;</operator><name>setEndValue</name></name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>hide</name></expr> ?</condition><then> <expr><call><name><name>this</name><operator>-&gt;</operator><name>height</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>animation</name><operator>-&gt;</operator><name>setEasingCurve</name></name><argument_list>(<argument><expr><name><name>QEasingCurve</name><operator>::</operator><name>OutQuad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>animation</name><operator>-&gt;</operator><name>start</name></name><argument_list>(<argument><expr><name><name>QAbstractAnimation</name><operator>::</operator><name>DeleteWhenStopped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>layerIsVisible</name> <operator>=</operator> <operator>!</operator><name>hide</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ModalOverlay</name><operator>::</operator><name>closeClicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>showHide</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>userClosed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
