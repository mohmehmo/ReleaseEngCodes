<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/mempool_eviction.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AddTx</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTransactionRef</name><operator>&amp;</operator> <name>tx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>nFee</name></expr></argument>, <argument><expr><name>CTxMemPool</name><operator>&amp;</operator> <name>pool</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>int64_t</name> <name>nTime</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;
    <argument><expr><name>unsigned</name> <name>int</name> <name>nHeight</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;
    <argument><expr><name>bool</name> <name>spendsCoinbase</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>;
    <argument><expr><name>unsigned</name> <name>int</name> <name>sigOpCost</name> <operator>=</operator> <literal type="number">4</literal></expr></argument>;
    <argument><expr><name>LockPoints</name> <name>lp</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name>CTxMemPoolEntry</name><argument_list>(
                                         <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>nFee</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>nHeight</name></expr></argument>,
                                         <argument><expr><name>spendsCoinbase</name></expr></argument>, <argument><expr><name>sigOpCost</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<comment type="line">// Right now this is only testing eviction performance in an extremely small</comment>
<comment type="line">// mempool. Code needs to be written to generate a much wider variety of</comment>
<comment type="line">// unique transactions for a more meaningful performance measurement.</comment>
static <name>void</name> <name>MempoolEviction</name><argument_list>(<argument><expr><name><name>benchmark</name><operator>::</operator><name>State</name></name><operator>&amp;</operator> <name>state</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>CMutableTransaction</name> <name>tx1</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx1</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx1</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name>CMutableTransaction</name> <name>tx2</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx2</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">2</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx2</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name>CMutableTransaction</name> <name>tx3</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx3</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">3</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx3</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name>CMutableTransaction</name> <name>tx4</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx4</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx4</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name>CMutableTransaction</name> <name>tx5</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx5</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">5</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx5</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name>CMutableTransaction</name> <name>tx6</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx6</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">6</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx6</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name>CMutableTransaction</name> <name>tx7</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx7</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">5</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">6</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx7</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_7</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_7</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name>CTxMemPool</name> <name>pool</name></expr></argument>;
    <argument><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <comment type="line">// Create transaction references outside the "hot loop"</comment>
    <argument><expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx1_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx1</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx2_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx2</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx3_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx3</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx4_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx4</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx5_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx5</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx6_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx6</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CTransactionRef</name> <call><name>tx7_r</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>tx7</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>;

    while <argument><expr><operator>(</operator><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx1_r</name></expr></argument>, <argument><expr><literal type="number">10000LL</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx2_r</name></expr></argument>, <argument><expr><literal type="number">5000LL</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx3_r</name></expr></argument>, <argument><expr><literal type="number">20000LL</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx4_r</name></expr></argument>, <argument><expr><literal type="number">7000LL</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx5_r</name></expr></argument>, <argument><expr><literal type="number">1000LL</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx6_r</name></expr></argument>, <argument><expr><literal type="number">1100LL</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx7_r</name></expr></argument>, <argument><expr><literal type="number">9000LL</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><operator>*</operator><name>tx1_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block></expr></argument>
}</argument_list>

<name>BENCHMARK</name><argument_list>(<argument><expr><name>MempoolEviction</name></expr></argument>, <argument><expr><literal type="number">41000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
