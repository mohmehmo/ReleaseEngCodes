<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/table/block_builder.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<struct_decl>struct <name>Options</name>;</struct_decl>

<decl_stmt><decl><type><name>class</name></type> <name>BlockBuilder</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>BlockBuilder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Reset the contents as if the BlockBuilder was just constructed.</comment>
  <function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// REQUIRES: Finish() has not been called since the last call to Reset().</comment>
  <comment type="line">// REQUIRES: key is larger than any previously added key</comment>
  <function_decl><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Finish building the block and return a slice that refers to the</comment>
  <comment type="line">// block contents.  The returned slice will remain valid for the</comment>
  <comment type="line">// lifetime of this builder or until Reset() is called.</comment>
  <function_decl><type><name>Slice</name></type> <name>Finish</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Returns an estimate of the current (uncompressed) size of the block</comment>
  <comment type="line">// we are building.</comment>
  <expr_stmt><expr><name>size_t</name> <macro><name>CurrentSizeEstimate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Return true iff no entries have been added since the last Reset()</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><call><name><name>buffer_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Options</name><modifier>*</modifier></type>        <name>options_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name>           <name>buffer_</name></expr>;</expr_stmt>      <comment type="line">// Destination buffer</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>restarts_</name></expr>;</expr_stmt>    <comment type="line">// Restart points</comment>
  <decl_stmt><decl><type><name>int</name></type>                   <name>counter_</name></decl>;</decl_stmt>     <comment type="line">// Number of entries emitted since restart</comment>
  <decl_stmt><decl><type><name>bool</name></type>                  <name>finished_</name></decl>;</decl_stmt>    <comment type="line">// Has Finish() been called?</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name>           <name>last_key_</name></expr>;</expr_stmt>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>BlockBuilder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BlockBuilder</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>BlockBuilder</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_</comment>
</unit>
