<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/core_memusage.h"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CORE_MEMUSAGE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CORE_MEMUSAGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memusage.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mem</name> <init>= <expr><call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>prevout</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>it</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>in</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <expr_stmt><expr><name>mem</name> <operator>+=</operator> <name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>mem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mem</name> <init>= <expr><name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxIn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>it</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>mem</name> <operator>+=</operator> <call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxOut</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>it</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>mem</name> <operator>+=</operator> <call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>mem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mem</name> <init>= <expr><name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxIn</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>it</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>mem</name> <operator>+=</operator> <call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxOut</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>it</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>mem</name> <operator>+=</operator> <call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>mem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mem</name> <init>= <expr><name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx</name> <range>: <expr><name><name>block</name><operator>.</operator><name>vtx</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>mem</name> <operator>+=</operator> <name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><operator>*</operator><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>mem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockLocator</name><modifier>&amp;</modifier></type> <name>locator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name><name>locator</name><operator>.</operator><name>vHave</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>p</name></expr></argument>)</argument_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>memusage</name><operator>::</operator><call><name>DynamicUsage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>RecursiveDynamicUsage</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CORE_MEMUSAGE_H</comment>
</unit>
