<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/wallet/coinselection.h"><comment type="line">// Copyright (c) 2017-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_WALLET_COINSELECTION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_WALLET_COINSELECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>

<comment type="line" format="doxygen">//! target minimum change amount</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>CAmount</name></type> <name>MIN_CHANGE</name><block>{<block_content><expr><name>COIN</name> <operator>/</operator> <literal type="number">100</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<comment type="line" format="doxygen">//! final minimum change amount after paying for fees</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CAmount</name></type> <name>MIN_FINAL_CHANGE</name> <init>= <expr><name>MIN_CHANGE</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CInputCoin</name> <block>{<block_content>
<label><name>public</name>:</label>
    <macro><name>CInputCoin</name><argument_list>(<argument>const CTransactionRef&amp; tx</argument>, <argument>unsigned int i</argument>)</argument_list></macro>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tx</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><call><name>invalid_argument</name><argument_list>(<argument><expr><literal type="string">"tx should not be null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><call><name>out_of_range</name><argument_list>(<argument><expr><literal type="string">"The output index is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>outpoint</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txout</name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>effective_value</name> <operator>=</operator> <name><name>txout</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>CInputCoin</name><argument_list>(<argument>const CTransactionRef&amp; tx</argument>, <argument>unsigned int i</argument>, <argument>int input_bytes</argument>)</argument_list></macro> : <macro><name>CInputCoin</name><argument_list>(<argument>tx</argument>, <argument>i</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>m_input_bytes</name> <operator>=</operator> <name>input_bytes</name></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>COutPoint</name></type> <name>outpoint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxOut</name></type> <name>txout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>effective_value</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Pre-computed estimated size of this output as a fully-signed input in a transaction. Can be -1 if it could not be calculated */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m_input_bytes</name><block>{<block_content><expr><operator>-</operator><literal type="number">1</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CInputCoin</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
        <return>return <expr><name>outpoint</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>outpoint</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CInputCoin</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
        <return>return <expr><name>outpoint</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>outpoint</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CInputCoin</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{
        <return>return <expr><name>outpoint</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>outpoint</name></name></expr>;</return>
    }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>CoinEligibilityFilter</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>conf_mine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>conf_theirs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>max_ancestors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>max_descendants</name></decl>;</decl_stmt>

    <macro><name>CoinEligibilityFilter</name><argument_list>(<argument>int conf_mine</argument>, <argument>int conf_theirs</argument>, <argument>uint64_t max_ancestors</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>conf_mine</name><argument_list>(<argument><expr><name>conf_mine</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>conf_theirs</name><argument_list>(<argument><expr><name>conf_theirs</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>max_ancestors</name><argument_list>(<argument><expr><name>max_ancestors</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>max_descendants</name><argument_list>(<argument>max_ancestors</argument>)</argument_list></macro> <expr><block>{}</block>
    <macro><name>CoinEligibilityFilter</name><argument_list>(<argument>int conf_mine</argument>, <argument>int conf_theirs</argument>, <argument>uint64_t max_ancestors</argument>, <argument>uint64_t max_descendants</argument>)</argument_list></macro> <operator>:</operator> <call><name>conf_mine</name><argument_list>(<argument><expr><name>conf_mine</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>conf_theirs</name><argument_list>(<argument><expr><name>conf_theirs</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>max_ancestors</name><argument_list>(<argument><expr><name>max_ancestors</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>max_descendants</name><argument_list>(<argument>max_descendants</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>OutputGroup</name>
<block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name> <name>m_outputs</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>m_from_me</name><block>{<block_content><expr><name>true</name></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>m_value</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m_depth</name><block>{<block_content><expr><literal type="number">999</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>m_ancestors</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>m_descendants</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>effective_value</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>fee</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>long_term_fee</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

    <macro><name>OutputGroup</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
    <macro><name>OutputGroup</name><argument_list>(<argument>std::vector&lt;CInputCoin&gt;&amp;&amp; outputs</argument>, <argument>bool from_me</argument>, <argument>CAmount value</argument>, <argument>int depth</argument>, <argument>size_t ancestors</argument>, <argument>size_t descendants</argument>)</argument_list></macro>
    : <expr_stmt><expr><call><name>m_outputs</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
    <operator>,</operator> <expr><call><name>m_from_me</name><argument_list>(<argument><expr><name>from_me</name></expr></argument>)</argument_list></call></expr>
    <operator>,</operator> <expr><call><name>m_value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>
    <operator>,</operator> <expr><call><name>m_depth</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>
    <operator>,</operator> <expr><call><name>m_ancestors</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>)</argument_list></call></expr>
    <operator>,</operator> <macro><name>m_descendants</name><argument_list>(<argument>descendants</argument>)</argument_list></macro>
    <expr><block>{}</block>
    <macro><name>OutputGroup</name><argument_list>(<argument>const CInputCoin&amp; output</argument>, <argument>int depth</argument>, <argument>bool from_me</argument>, <argument>size_t ancestors</argument>, <argument>size_t descendants</argument>)</argument_list></macro> <operator>:</operator> <macro><name>OutputGroup</name><argument_list>()</argument_list></macro> <block>{
        <expr><call><name>Insert</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>from_me</name></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;
    }</block>
    <name>void</name> <macro><name>Insert</name><argument_list>(<argument>const CInputCoin&amp; output</argument>, <argument>int depth</argument>, <argument>bool from_me</argument>, <argument>size_t ancestors</argument>, <argument>size_t descendants</argument>)</argument_list></macro></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <call><name>Discard</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CInputCoin</name><operator>&amp;</operator> <name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>EligibleForSpending</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CoinEligibilityFilter</name><operator>&amp;</operator> <name>eligibility_filter</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>SelectCoinsBnB</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>utxo_pool</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>target_value</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>cost_of_change</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>out_set</name></expr></argument>, <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>value_ret</name></expr></argument>, <argument><expr><name>CAmount</name> <name>not_input_fees</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Original coin selection algorithm as a fallback</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>KnapsackSolver</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>nTargetValue</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>groups</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>setCoinsRet</name></expr></argument>, <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>nValueRet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_WALLET_COINSELECTION_H</comment>
</unit>
