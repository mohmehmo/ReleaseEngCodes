<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/consensus/params.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CONSENSUS_PARAMS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CONSENSUS_PARAMS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>Consensus</name> <block>{<block_content>

<enum>enum <name>DeploymentPos</name>
<block>{
    <decl><name>DEPLOYMENT_TESTDUMMY</name></decl>,
    <comment type="line">// NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp</comment>
    <decl><name>MAX_VERSION_BITS_DEPLOYMENTS</name></decl>
}</block>;</enum>

<comment type="block" format="doxygen">/**
 * Struct for each individual consensus rule change using BIP9.
 */</comment>
<struct>struct <name>BIP9Deployment</name> <block>{
    <comment type="block" format="doxygen">/** Bit position to select the particular bit in nVersion. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Start MedianTime for version bits miner confirmation. Can be a date in the past */</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nStartTime</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Timeout/expiry MedianTime for the deployment attempt. */</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTimeout</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Constant for nTimeout very far in the future. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int64_t</name></type> <name>NO_TIMEOUT</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Special value for nStartTime indicating that the deployment is always active.
     *  This is useful for testing, as it means tests don't need to deal with the activation
     *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the
     *  behaviour during activation cannot use this. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int64_t</name></type> <name>ALWAYS_ACTIVE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * Parameters that influence chain consensus.
 */</comment>
<struct>struct <name>Params</name> <block>{
    <decl_stmt><decl><type><name>uint256</name></type> <name>hashGenesisBlock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nSubsidyHalvingInterval</name></decl>;</decl_stmt>
    <comment type="block">/* Block hash that is excepted from BIP16 enforcement */</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>BIP16Exception</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Block height and hash at which BIP34 becomes active */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>BIP34Height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>BIP34Hash</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Block height at which BIP65 becomes active */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>BIP65Height</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Block height at which BIP66 becomes active */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>BIP66Height</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>CSVHeight</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Block height at which Segwit (BIP141, BIP143 and BIP147) becomes active.
     * Note that segwit v0 script rules are enforced on all blocks except the
     * BIP 16 exception blocks. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>SegwitHeight</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Don't warn about unknown BIP 9 activations below this height.
     * This prevents us from warning about the CSV and segwit activations. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>MinBIP9WarningHeight</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,
     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.
     * Examples: 1916 for 95%, 1512 for testchains.
     */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nRuleChangeActivationThreshold</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nMinerConfirmationWindow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BIP9Deployment</name></type> <name><name>vDeployments</name><index>[<expr><name>MAX_VERSION_BITS_DEPLOYMENTS</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Proof of work parameters */</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>powLimit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fPowAllowMinDifficultyBlocks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fPowNoRetargeting</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nPowTargetSpacing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nPowTargetTimespan</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>int64_t</name> <macro><name>DifficultyAdjustmentInterval</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nPowTargetTimespan</name> <operator>/</operator> <name>nPowTargetSpacing</name></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>nMinimumChainWork</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>defaultAssumeValid</name></decl>;</decl_stmt>
}</block>;</struct>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace Consensus</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CONSENSUS_PARAMS_H</comment>
</unit>
