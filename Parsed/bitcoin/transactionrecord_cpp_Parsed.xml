<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/transactionrecord.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/transactionrecord.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/ismine.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDateTime&gt;</cpp:file></cpp:include>

<comment type="block">/* Return positive answer if transaction should be shown in list.
 */</comment>
<function><type><name>bool</name></type> <name><name>TransactionRecord</name><operator>::</operator><name>showTransaction</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// There are currently no cases where we hide transactions, but</comment>
    <comment type="line">// we may want to use this in the future for things like RBF.</comment>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decompose CWallet transaction to model transaction records.
 */</comment>
<function><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>TransactionRecord</name></expr></argument>&gt;</argument_list></name></type> <name><name>TransactionRecord</name><operator>::</operator><name>decomposeTransaction</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>interfaces</name><operator>::</operator><name>WalletTx</name></name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>TransactionRecord</name></expr></argument>&gt;</argument_list></name></type> <name>parts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTime</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>time</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nCredit</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>credit</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nDebit</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>debit</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nNet</name> <init>= <expr><name>nCredit</name> <operator>-</operator> <name>nDebit</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>mapValue</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>value_map</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nNet</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wtx</name><operator>.</operator><name>is_coinbase</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// Credit</comment>
        <comment type="line">//</comment>
        <for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>isminetype</name></type> <name>mine</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>txout_is_mine</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>mine</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TransactionRecord</name></type> <name>sub</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <comment type="line">// vout index</comment>
                <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>credit</name></name> <operator>=</operator> <name><name>txout</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>involvesWatchAddress</name></name> <operator>=</operator> <name>mine</name> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>txout_address_is_mine</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Received by Bitcoin Address</comment>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>TransactionRecord</name><operator>::</operator><name>RecvWithAddress</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>EncodeDestination</name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>txout_address</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// Received by IP connection (deprecated features), or a multisignature or other non-simple transaction</comment>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>TransactionRecord</name><operator>::</operator><name>RecvFromOther</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name><name>mapValue</name><index>[<expr><literal type="string">"from"</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>is_coinbase</name></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Generated</comment>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>TransactionRecord</name><operator>::</operator><name>Generated</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>parts</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>involvesWatchAddress</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>isminetype</name></type> <name>fAllFromMe</name> <init>= <expr><name>ISMINE_SPENDABLE</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>isminetype</name></type> <name>mine</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>txin_is_mine</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>mine</name> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>involvesWatchAddress</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>fAllFromMe</name> <operator>&gt;</operator> <name>mine</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fAllFromMe</name> <operator>=</operator> <name>mine</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>isminetype</name></type> <name>fAllToMe</name> <init>= <expr><name>ISMINE_SPENDABLE</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>isminetype</name></type> <name>mine</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>txout_is_mine</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>mine</name> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>involvesWatchAddress</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>fAllToMe</name> <operator>&gt;</operator> <name>mine</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fAllToMe</name> <operator>=</operator> <name>mine</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>fAllFromMe</name> <operator>&amp;&amp;</operator> <name>fAllToMe</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Payment to self</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>address</name></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>txout_address</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>wtx</name><operator>.</operator><name>txout_address</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>wtx</name><operator>.</operator><name>txout_address</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>address</name> <operator>+=</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>address</name> <operator>+=</operator> <call><name>EncodeDestination</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>CAmount</name></type> <name>nChange</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>change</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>parts</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>TransactionRecord</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name><name>TransactionRecord</name><operator>::</operator><name>SendToSelf</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>nDebit</name> <operator>-</operator> <name>nChange</name><operator>)</operator></expr></argument>, <argument><expr><name>nCredit</name> <operator>-</operator> <name>nChange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parts</name><operator>.</operator><name>last</name></name><argument_list>()</argument_list></call><operator>.</operator><name>involvesWatchAddress</name> <operator>=</operator> <name>involvesWatchAddress</name></expr>;</expr_stmt>   <comment type="line">// maybe pass to TransactionRecord as constructor argument</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>fAllFromMe</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">//</comment>
            <comment type="line">// Debit</comment>
            <comment type="line">//</comment>
            <decl_stmt><decl><type><name>CAmount</name></type> <name>nTxFee</name> <init>= <expr><name>nDebit</name> <operator>-</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetValueOut</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>nOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nOut</name> <operator>&lt;</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>nOut</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <init>= <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name>nOut</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TransactionRecord</name></type> <name>sub</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>nOut</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>involvesWatchAddress</name></name> <operator>=</operator> <name>involvesWatchAddress</name></expr>;</expr_stmt>

                <if_stmt><if>if<condition>(<expr><name><name>wtx</name><operator>.</operator><name>txout_is_mine</name><index>[<expr><name>nOut</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Ignore parts sent to self, as this is usually the change</comment>
                    <comment type="line">// from a transaction sent back to our own address.</comment>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>CNoDestination</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wtx</name><operator>.</operator><name>txout_address</name><index>[<expr><name>nOut</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Sent to Bitcoin Address</comment>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>TransactionRecord</name><operator>::</operator><name>SendToAddress</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name>EncodeDestination</name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>txout_address</name><index>[<expr><name>nOut</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// Sent to IP, or other non-address transaction like OP_EVAL</comment>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>TransactionRecord</name><operator>::</operator><name>SendToOther</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name><name>mapValue</name><index>[<expr><literal type="string">"to"</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <decl_stmt><decl><type><name>CAmount</name></type> <name>nValue</name> <init>= <expr><name><name>txout</name><operator>.</operator><name>nValue</name></name></expr></init></decl>;</decl_stmt>
                <comment type="block">/* Add fee to first output */</comment>
                <if_stmt><if>if <condition>(<expr><name>nTxFee</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>nValue</name> <operator>+=</operator> <name>nTxFee</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nTxFee</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>sub</name><operator>.</operator><name>debit</name></name> <operator>=</operator> <operator>-</operator><name>nValue</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>parts</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">//</comment>
            <comment type="line">// Mixed debit transaction, can't break down payees</comment>
            <comment type="line">//</comment>
            <expr_stmt><expr><call><name><name>parts</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>TransactionRecord</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name><name>TransactionRecord</name><operator>::</operator><name>Other</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>nNet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parts</name><operator>.</operator><name>last</name></name><argument_list>()</argument_list></call><operator>.</operator><name>involvesWatchAddress</name> <operator>=</operator> <name>involvesWatchAddress</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>parts</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>TransactionRecord</name><operator>::</operator><name>updateStatus</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>interfaces</name><operator>::</operator><name>WalletTxStatus</name></name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numBlocks</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>block_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Determine transaction status</comment>

    <comment type="line">// Sort order, unrecorded transactions sort to the top</comment>
    <expr_stmt><expr><name><name>status</name><operator>.</operator><name>sortKey</name></name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%010d-%01d-%010u-%03d"</literal></expr></argument>,
        <argument><expr><name><name>wtx</name><operator>.</operator><name>block_height</name></name></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name>wtx</name><operator>.</operator><name>is_coinbase</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
        <argument><expr><name><name>wtx</name><operator>.</operator><name>time_received</name></name></expr></argument>,
        <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>status</name><operator>.</operator><name>countsForBalance</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>is_trusted</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>wtx</name><operator>.</operator><name>blocks_to_maturity</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>status</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>depth_in_main_chain</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>status</name><operator>.</operator><name>cur_num_blocks</name></name> <operator>=</operator> <name>numBlocks</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>up_to_date</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>QDateTime</name><operator>::</operator><name>currentMSecsSinceEpoch</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal> <operator>-</operator> <name>block_time</name> <operator>&lt;</operator> <name>MAX_BLOCK_TIME_GAP</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>up_to_date</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wtx</name><operator>.</operator><name>is_final</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>lock_time</name></name> <operator>&lt;</operator> <name>LOCKTIME_THRESHOLD</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>OpenUntilBlock</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>open_for</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>lock_time</name></name> <operator>-</operator> <name>numBlocks</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>OpenUntilDate</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>open_for</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>lock_time</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// For generated transactions, determine maturity</comment>
    <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name><name>TransactionRecord</name><operator>::</operator><name>Generated</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>blocks_to_maturity</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>Immature</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>is_in_main_chain</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>status</name><operator>.</operator><name>matures_in</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>blocks_to_maturity</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>NotAccepted</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>Confirmed</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>status</name><operator>.</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>Conflicted</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>status</name><operator>.</operator><name>depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>Unconfirmed</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>wtx</name><operator>.</operator><name>is_abandoned</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>Abandoned</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>status</name><operator>.</operator><name>depth</name></name> <operator>&lt;</operator> <name>RecommendedNumConfirmations</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>Confirming</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>TransactionStatus</name><operator>::</operator><name>Confirmed</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>status</name><operator>.</operator><name>needsUpdate</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>TransactionRecord</name><operator>::</operator><name>statusUpdateNeeded</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numBlocks</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><name><name>status</name><operator>.</operator><name>cur_num_blocks</name></name> <operator>!=</operator> <name>numBlocks</name> <operator>||</operator> <name><name>status</name><operator>.</operator><name>needsUpdate</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>TransactionRecord</name><operator>::</operator><name>getTxHash</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>TransactionRecord</name><operator>::</operator><name>getOutputIndex</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>
</unit>
