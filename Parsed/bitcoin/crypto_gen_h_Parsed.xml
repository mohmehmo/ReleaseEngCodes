<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/test/gen/crypto_gen.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_TEST_GEN_CRYPTO_GEN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_TEST_GEN_CRYPTO_GEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/gen/Arbitrary.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/Gen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/gen/Create.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/gen/Numeric.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Generates 1 to 15 keys for OP_CHECKMULTISIG */</comment>
<expr_stmt><expr><name>rc</name><operator>::</operator><name><name>Gen</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <call><name>MultisigKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>rc</name>
<block>{<block_content>
<comment type="block" format="doxygen">/** Generator for a new CKey */</comment>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Arbitrary</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name> <block>{
    <expr><specifier>static</specifier> <name><name>Gen</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name> <macro><name>arbitrary</name><argument_list>()</argument_list></macro>
    <block>{
        <return>return <expr><name>rc</name><operator>::</operator><name>gen</name><operator>::</operator><call><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><index>[]</index><operator>(</operator><name>int</name> <name>x</name><operator>)</operator> <block>{
            <expr><name>CKey</name> <name>key</name></expr>;
            <expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
            <return>return <expr><name>key</name></expr>;</return>
        }</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr>;
}</block></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Generator for a CPrivKey */</comment>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Arbitrary</name><argument_list type="generic">&lt;<argument><expr><name>CPrivKey</name></expr></argument>&gt;</argument_list></name> <block>{
    <expr><specifier>static</specifier> <name><name>Gen</name><argument_list type="generic">&lt;<argument><expr><name>CPrivKey</name></expr></argument>&gt;</argument_list></name> <macro><name>arbitrary</name><argument_list>()</argument_list></macro>
    <block>{
        <return>return <expr><name>gen</name><operator>::</operator><call><name>map</name><argument_list>(<argument><expr><name>gen</name><operator>::</operator><call><name><name>arbitrary</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>CKey</name><operator>&amp;</operator> <name>key</name><operator>)</operator> <block>{
            <return>return <expr><call><name><name>key</name><operator>.</operator><name>GetPrivKey</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr>;
}</block></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Generator for a new CPubKey */</comment>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Arbitrary</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name> <block>{
    <expr><specifier>static</specifier> <name><name>Gen</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name> <macro><name>arbitrary</name><argument_list>()</argument_list></macro>
    <block>{
        <return>return <expr><name>gen</name><operator>::</operator><call><name>map</name><argument_list>(<argument><expr><name>gen</name><operator>::</operator><call><name><name>arbitrary</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>CKey</name><operator>&amp;</operator> <name>key</name><operator>)</operator> <block>{
            <return>return <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr>;
}</block></expr>;</expr_stmt>
<comment type="block" format="doxygen">/** Generates a arbitrary uint256 */</comment>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Arbitrary</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <block>{
    <expr><specifier>static</specifier> <name><name>Gen</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <macro><name>arbitrary</name><argument_list>()</argument_list></macro>
    <block>{
        <return>return <expr><name>rc</name><operator>::</operator><name>gen</name><operator>::</operator><call><name>just</name><argument_list>(<argument><expr><call><name>GetRandHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr>;
}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">//namespace rc</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
