<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/transactionfilterproxy.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_TRANSACTIONFILTERPROXY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_TRANSACTIONFILTERPROXY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDateTime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSortFilterProxyModel&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Filter the transaction list according to pre-specified rules. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionFilterProxy</name> <range>: <expr><name>public</name> <name>QSortFilterProxyModel</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>TransactionFilterProxy</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Earliest date that can be represented (far in the past) */</comment>
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>QDateTime</name> <name>MIN_DATE</name></expr>;
    <comment type="block" format="doxygen">/** Last date that can be represented (far in the future) */</comment>
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>QDateTime</name> <name>MAX_DATE</name></expr>;
    <comment type="block" format="doxygen">/** Type filter bit field (all types) */</comment>
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>quint32</name> <name>ALL_TYPES</name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;

    <expr><specifier>static</specifier> <name>quint32</name> <macro><name>TYPE</name><argument_list>(<argument>int type</argument>)</argument_list></macro> <block>{ <return>return <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>type</name></expr>;</return> }</block>

    enum <name>WatchOnlyFilter</name>
    <block>{
        <expr><name>WatchOnlyFilter_All</name></expr>,
        <expr><name>WatchOnlyFilter_Yes</name></expr>,
        <expr><name>WatchOnlyFilter_No</name></expr>
    }</block></expr>;

    <expr><name>void</name> <call><name>setDateRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QDateTime</name> <operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>QDateTime</name> <operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>setSearchString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/**
      @note Type filter takes a bit field created with TYPE() or ALL_TYPES
     */</comment>
    <expr><name>void</name> <macro><name>setTypeFilter</name><argument_list>(<argument>quint32 modes</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>setMinAmount</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>minimum</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>setWatchOnlyFilter</name><argument_list>(<argument>WatchOnlyFilter filter</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Set maximum number of rows returned, -1 if unlimited. */</comment>
    <expr><name>void</name> <macro><name>setLimit</name><argument_list>(<argument>int limit</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Set whether to show conflicted transactions. */</comment>
    <expr><name>void</name> <macro><name>setShowInactive</name><argument_list>(<argument>bool showInactive</argument>)</argument_list></macro></expr>;

    <expr><name>int</name> <macro><name>rowCount</name><argument_list>(<argument>const QModelIndex &amp;parent = QModelIndex()</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>bool</name> <macro><name>filterAcceptsRow</name><argument_list>(<argument>int source_row</argument>, <argument>const QModelIndex &amp; source_parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
    <name>QDateTime</name> <name>dateFrom</name></expr>;
    <expr><name>QDateTime</name> <name>dateTo</name></expr>;
    <expr><name>QString</name> <name>m_search_string</name></expr>;
    <expr><name>quint32</name> <name>typeFilter</name></expr>;
    <expr><name>WatchOnlyFilter</name> <name>watchOnlyFilter</name></expr>;
    <expr><name>CAmount</name> <name>minAmount</name></expr>;
    <expr><name>int</name> <name>limitRows</name></expr>;
    <expr><name>bool</name> <name>showInactive</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_TRANSACTIONFILTERPROXY_H</comment>
</unit>
