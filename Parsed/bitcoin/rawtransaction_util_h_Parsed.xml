<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/rpc/rawtransaction_util.h"><comment type="line">// Copyright (c) 2017-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_RPC_RAWTRANSACTION_UTIL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_RPC_RAWTRANSACTION_UTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>FillableSigningProvider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UniValue</name></decl>;</decl_stmt>
<struct_decl>struct <name>CMutableTransaction</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>Coin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>COutPoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SigningProvider</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Sign a transaction with the given keystore and previous transactions
 *
 * @param  mtx           The transaction to-be-signed
 * @param  keystore      Temporary keystore containing signing keys
 * @param  coins         Map of unspent outputs
 * @param  hashType      The signature hash type
 * @param result         JSON object where signed transaction results accumulate
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>SignTransaction</name><argument_list>(<argument><expr><name>CMutableTransaction</name><operator>&amp;</operator> <name>mtx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SigningProvider</name><operator>*</operator> <name>keystore</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>coins</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>hashType</name></expr></argument>, <argument><expr><name>UniValue</name><operator>&amp;</operator> <name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
  * Parse a prevtxs UniValue array and get the map of coins from it
  *
  * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain
  * @param  keystore      A pointer to the temporary keystore if there is one
  * @param  coins         Map of unspent outputs - coins in mempool and current chain UTXO set, may be extended by previous txns outputs after call
  */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>ParsePrevouts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>prevTxsUnival</name></expr></argument>, <argument><expr><name>FillableSigningProvider</name><operator>*</operator> <name>keystore</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>coins</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Create a transaction from univalue parameters */</comment>
<function_decl><type><name>CMutableTransaction</name></type> <name>ConstructTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>inputs_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>outputs_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>locktime</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rbf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_RPC_RAWTRANSACTION_UTIL_H</comment>
</unit>
