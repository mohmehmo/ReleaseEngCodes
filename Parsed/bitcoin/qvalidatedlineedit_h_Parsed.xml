<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/qvalidatedlineedit.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_QVALIDATEDLINEEDIT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_QVALIDATEDLINEEDIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLineEdit&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Line edit that can be marked as "invalid" to show input validation feedback. When marked as invalid,
   it will get a red background until it is focused.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>QValidatedLineEdit</name> <range>: <expr><name>public</name> <name>QLineEdit</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>QValidatedLineEdit</name><argument_list>(<argument><expr><name>QWidget</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>clear</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>setCheckValidator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QValidator</name> <operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>bool</name> <call><name>isValid</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>void</name> <call><name>focusInEvent</name><argument_list>(<argument><expr><name>QFocusEvent</name> <operator>*</operator><name>evt</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>focusOutEvent</name><argument_list>(<argument><expr><name>QFocusEvent</name> <operator>*</operator><name>evt</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>bool</name> <name>valid</name></expr>;
    <expr><specifier>const</specifier> <name>QValidator</name> <operator>*</operator><name>checkValidator</name></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <macro><name>setValid</name><argument_list>(<argument>bool valid</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <macro><name>setEnabled</name><argument_list>(<argument>bool enabled</argument>)</argument_list></macro></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>validationDidChange</name><argument_list>(<argument><expr><name>QValidatedLineEdit</name> <operator>*</operator><name>validatedLineEdit</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>markValid</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>checkValidity</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_QVALIDATEDLINEEDIT_H</comment>
</unit>
