<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/interfaces/node.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;addrdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;banman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/handler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_processing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netaddress.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/settings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shutdown.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;warnings.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<class_decl>class <name>CWallet</name>;</class_decl>
<function_decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>GetWalletDir</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>fs</name><operator>::</operator><name>path</name></name></expr></argument>&gt;</argument_list></name></type> <name>ListWalletDir</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>GetWallets</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>LoadWallet</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>warnings</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>WalletCreationStatus</name></type> <name>CreateWallet</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>wallet_creation_flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>warnings</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<namespace>namespace <name>interfaces</name> <block>{

<class_decl>class <name>Wallet</name>;</class_decl>

<namespace>namespace <block>{

<class>class <name>NodeImpl</name> <super_list>: <super><specifier>public</specifier> <name>Node</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <function><type><name>void</name></type> <name>initError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>InitError</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>parseParameters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name><name>gArgs</name><operator>.</operator><name>ParseParameters</name></name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>readConfigFiles</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>gArgs</name><operator>.</operator><name>ReadConfigFiles</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>forceSetArg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>ForceSetArg</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>softSetArg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetArg</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>softSetBoolArg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>selectParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>network</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>SelectParams</name><argument_list>(<argument><expr><name>network</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>uint64_t</name></type> <name>getAssumedBlockchainSize</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>AssumedBlockchainSize</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>uint64_t</name></type> <name>getAssumedChainStateSize</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>AssumedChainStateSize</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>getNetwork</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>NetworkIDString</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>initLogging</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>InitLogging</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>initParameterInteraction</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>InitParameterInteraction</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>getWarnings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>type</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>GetWarnings</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>uint32_t</name></type> <name>getLogCategories</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCategoryMask</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>baseInitialize</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>AppInitBasicSetup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>AppInitParameterInteraction</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>AppInitSanityChecks</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name>AppInitLockDataDirectory</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>appInitMain</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><name><name>m_context</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <call><name>MakeChain</name><argument_list>(<argument><expr><name>m_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>AppInitMain</name><argument_list>(<argument><expr><name>m_context</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>appShutdown</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Interrupt</name><argument_list>(<argument><expr><name>m_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Shutdown</name><argument_list>(<argument><expr><name>m_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>startShutdown</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>StartShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>shutdownRequested</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>mapPort</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_upnp</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>use_upnp</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>StartMapPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>InterruptMapPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>StopMapPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>setupServerArgs</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>SetupServerArgs</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getProxy</name><parameter_list>(<parameter><decl><type><name>Network</name></type> <name>net</name></decl></parameter>, <parameter><decl><type><name>proxyType</name><modifier>&amp;</modifier></type> <name>proxy_info</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>GetProxy</name><argument_list>(<argument><expr><name>net</name></expr></argument>, <argument><expr><name>proxy_info</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>size_t</name></type> <name>getNodeCount</name><parameter_list>(<parameter><decl><type><name><name>CConnman</name><operator>::</operator><name>NumConnections</name></name></type> <name>flags</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>m_context</name><operator>.</operator><name>connman</name></name></expr> ?</condition><then> <expr><call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>GetNodeCount</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getNodesStats</name><parameter_list>(<parameter><decl><type><name>NodesStats</name><modifier>&amp;</modifier></type> <name>stats</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>stats</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>m_context</name><operator>.</operator><name>connman</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CNodeStats</name></expr></argument>&gt;</argument_list></name></type> <name>stats_temp</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>GetNodeStats</name></name><argument_list>(<argument><expr><name>stats_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>stats</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>stats_temp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>node_stats_temp</name> <operator>:</operator> <name>stats_temp</name></expr></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>stats</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>node_stats_temp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>CNodeStateStats</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// Try to retrieve the CNodeStateStats for each node.</comment>
            <expr_stmt><expr><call><name>TRY_LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>, <argument><expr><name>lockMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>lockMain</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>node_stats</name> <operator>:</operator> <name>stats</name></expr></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>node_stats</name></expr></argument>)</argument_list></call> <operator>=</operator>
                        <call><name>GetNodeStateStats</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>node_stats</name></expr></argument>)</argument_list></call><operator>.</operator><name>nodeid</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>node_stats</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getBanned</name><parameter_list>(<parameter><decl><type><name>banmap_t</name><modifier>&amp;</modifier></type> <name>banmap</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m_context</name><operator>.</operator><name>banman</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_context</name><operator>.</operator><name>banman</name><operator>-&gt;</operator><name>GetBanned</name></name><argument_list>(<argument><expr><name>banmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>ban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>, <parameter><decl><type><name>BanReason</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ban_time_offset</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m_context</name><operator>.</operator><name>banman</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_context</name><operator>.</operator><name>banman</name><operator>-&gt;</operator><name>Ban</name></name><argument_list>(<argument><expr><name>net_addr</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>ban_time_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>unban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CSubNet</name><modifier>&amp;</modifier></type> <name>ip</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m_context</name><operator>.</operator><name>banman</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_context</name><operator>.</operator><name>banman</name><operator>-&gt;</operator><name>Unban</name></name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>disconnect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m_context</name><operator>.</operator><name>connman</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>DisconnectNode</name></name><argument_list>(<argument><expr><name>net_addr</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>disconnect</name><parameter_list>(<parameter><decl><type><name>NodeId</name></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m_context</name><operator>.</operator><name>connman</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>DisconnectNode</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>int64_t</name></type> <name>getTotalBytesRecv</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><ternary><condition><expr><name><name>m_context</name><operator>.</operator><name>connman</name></name></expr> ?</condition><then> <expr><call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>GetTotalBytesRecv</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
    <function><type><name>int64_t</name></type> <name>getTotalBytesSent</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><ternary><condition><expr><name><name>m_context</name><operator>.</operator><name>connman</name></name></expr> ?</condition><then> <expr><call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>GetTotalBytesSent</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
    <function><type><name>size_t</name></type> <name>getMempoolSize</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><operator>::</operator><name>mempool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>size_t</name></type> <name>getMempoolDynamicUsage</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><operator>::</operator><name>mempool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getHeaderTip</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type> <name>block_time</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><operator>::</operator><name>pindexBestHeader</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <name><operator>::</operator><name>pindexBestHeader</name><operator>-&gt;</operator><name>nHeight</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>block_time</name> <operator>=</operator> <call><name><operator>::</operator><name>pindexBestHeader</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>int</name></type> <name>getNumBlocks</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>int64_t</name></type> <name>getLastBlockTime</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockTime</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GenesisBlock</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetBlockTime</name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">// Genesis block's time of current network</comment>
    </block_content>}</block></function>
    <function><type><name>double</name></type> <name>getVerificationProgress</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <return>return <expr><call><name>GuessVerificationProgress</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TxData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>isInitialBlockDownload</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>IsInitialBlockDownload</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getReindex</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><operator>::</operator><name>fReindex</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getImporting</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><operator>::</operator><name>fImporting</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>setNetworkActive</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m_context</name><operator>.</operator><name>connman</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>SetNetworkActive</name></name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getNetworkActive</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><name>m_context</name><operator>.</operator><name>connman</name></name> <operator>&amp;&amp;</operator> <call><name><name>m_context</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>GetNetworkActive</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>CFeeRate</name></type> <name>estimateSmartFee</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_blocks</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>conservative</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>returned_target</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FeeCalculation</name></type> <name>fee_calc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CFeeRate</name></type> <name>result</name> <init>= <expr><call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>estimateSmartFee</name></name><argument_list>(<argument><expr><name>num_blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fee_calc</name></expr></argument>, <argument><expr><name>conservative</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>returned_target</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>returned_target</name> <operator>=</operator> <name><name>fee_calc</name><operator>.</operator><name>returnedTarget</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>CFeeRate</name></type> <name>getDustRelayFee</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><operator>::</operator><name>dustRelayFee</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>UniValue</name></type> <name>executeRpc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>uri</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>JSONRPCRequest</name></type> <name>req</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>req</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name><operator>.</operator><name>strMethod</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name><operator>.</operator><name>URI</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
        <return>return <expr><call><name><operator>::</operator><name>tableRPC</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>listRpcCommands</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><operator>::</operator><name>tableRPC</name><operator>.</operator><name>listCommands</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>rpcSetTimerInterfaceIfUnset</name><parameter_list>(<parameter><decl><type><name>RPCTimerInterface</name><modifier>*</modifier></type> <name>iface</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>RPCSetTimerInterfaceIfUnset</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>rpcUnsetTimerInterface</name><parameter_list>(<parameter><decl><type><name>RPCTimerInterface</name><modifier>*</modifier></type> <name>iface</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>RPCUnsetTimerInterface</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>getUnspentOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCoin</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>getWalletDir</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>GetWalletDir</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>listWalletDir</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>paths</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>path</name> <operator>:</operator> <call><name>ListWalletDir</name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>paths</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>paths</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>getWallets</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>wallets</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wallet</name> <range>: <expr><call><name>GetWallets</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>wallets</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>MakeWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>wallets</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name></type> <name>loadWallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>warnings</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeWallet</name><argument_list>(<argument><expr><call><name>LoadWallet</name><argument_list>(<argument><expr><operator>*</operator><name><name>m_context</name><operator>.</operator><name>chain</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>warnings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>WalletCreationStatus</name></type> <name>createWallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>wallet_creation_flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>warnings</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WalletCreationStatus</name></type> <name>status</name> <init>= <expr><call><name>CreateWallet</name><argument_list>(<argument><expr><operator>*</operator><name><name>m_context</name><operator>.</operator><name>chain</name></name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>wallet_creation_flags</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>warnings</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>MakeWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleInitMessage</name><parameter_list>(<parameter><decl><type><name>InitMessageFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>InitMessage_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleMessageBox</name><parameter_list>(<parameter><decl><type><name>MessageBoxFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>ThreadSafeMessageBox_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleQuestion</name><parameter_list>(<parameter><decl><type><name>QuestionFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>ThreadSafeQuestion_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleShowProgress</name><parameter_list>(<parameter><decl><type><name>ShowProgressFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>ShowProgress_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleLoadWallet</name><parameter_list>(<parameter><decl><type><name>LoadWalletFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>LoadWallet_connect</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>fn</name></argument>]</capture><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleNotifyNumConnectionsChanged</name><parameter_list>(<parameter><decl><type><name>NotifyNumConnectionsChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>NotifyNumConnectionsChanged_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleNotifyNetworkActiveChanged</name><parameter_list>(<parameter><decl><type><name>NotifyNetworkActiveChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>NotifyNetworkActiveChanged_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleNotifyAlertChanged</name><parameter_list>(<parameter><decl><type><name>NotifyAlertChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>NotifyAlertChanged_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleBannedListChanged</name><parameter_list>(<parameter><decl><type><name>BannedListChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>BannedListChanged_connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleNotifyBlockTip</name><parameter_list>(<parameter><decl><type><name>NotifyBlockTipFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>NotifyBlockTip_connect</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>fn</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>initial_download</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>initial_download</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><call><name><name>block</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>GuessVerificationProgress</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TxData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleNotifyHeaderTip</name><parameter_list>(<parameter><decl><type><name>NotifyHeaderTipFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(
            <argument><expr><call><name><operator>::</operator><name>uiInterface</name><operator>.</operator><name>NotifyHeaderTip_connect</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>fn</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>initial_download</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>initial_download</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><call><name><name>block</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="block">/* verification progress is unused when a header was received */</comment> <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>NodeContext</name><modifier>*</modifier></type> <name>context</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>m_context</name></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><name>NodeContext</name></type> <name>m_context</name></decl>;</decl_stmt>
</public>}</block>;</class>

}</block></namespace> <comment type="line">// namespace</comment>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></type> <name>MakeNode</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>NodeImpl</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace interfaces</comment>
</unit>
