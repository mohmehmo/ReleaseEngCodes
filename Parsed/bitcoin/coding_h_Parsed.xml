<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/util/coding.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// Endian-neutral encoding:</comment>
<comment type="line">// * Fixed-length numbers are encoded with least-significant byte first</comment>
<comment type="line">// * In addition we support variable length "varint" encoding</comment>
<comment type="line">// * Strings are encoded prefixed by their length in varint format</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_UTIL_CODING_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_UTIL_CODING_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<comment type="line">// Standard Put... routines append to a string</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>PutFixed32</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>PutFixed64</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>PutVarint32</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>PutVarint64</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>PutLengthPrefixedSlice</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Standard Get... routines parse a value from the beginning of a Slice</comment>
<comment type="line">// and advance the slice past the parsed value.</comment>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>GetVarint32</name><parameter_list>(<parameter><decl><type><name>Slice</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>GetVarint64</name><parameter_list>(<parameter><decl><type><name>Slice</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>GetLengthPrefixedSlice</name><parameter_list>(<parameter><decl><type><name>Slice</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>Slice</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Pointer-based variants of GetVarint...  These either store a value</comment>
<comment type="line">// in *v and return a pointer just past the parsed value, or return</comment>
<comment type="line">// NULL on error.  These routines only look at bytes in the range</comment>
<comment type="line">// [p..limit-1]</comment>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetVarint32Ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetVarint64Ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Returns the length of the varint32 or varint64 encoding of "v"</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>VarintLength</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Lower-level versions of Put... that write directly into a character buffer</comment>
<comment type="line">// REQUIRES: dst has enough space for the value being written</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>EncodeFixed32</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>EncodeFixed64</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Lower-level versions of Put... that write directly into a character buffer</comment>
<comment type="line">// and return a pointer just past the last byte written.</comment>
<comment type="line">// REQUIRES: dst has enough space for the value being written</comment>
<function_decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier></type> <name>EncodeVarint32</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier></type> <name>EncodeVarint64</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Lower-level versions of Get... that read directly from a character buffer</comment>
<comment type="line">// without any bounds checking.</comment>

<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>DecodeFixed32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>port</name><operator>::</operator><name>kLittleEndian</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Load the raw bytes</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// gcc optimizes this to a plain load</comment>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><macro><name>static_cast</name></macro><operator>&lt;</operator><name>uint32_t</name><operator>&gt;</operator><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
        <operator>|</operator> <operator>(</operator><macro><name>static_cast</name></macro><operator>&lt;</operator><name>uint32_t</name><operator>&gt;</operator><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
        <operator>|</operator> <operator>(</operator><macro><name>static_cast</name></macro><operator>&lt;</operator><name>uint32_t</name><operator>&gt;</operator><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
        <operator>|</operator> <operator>(</operator><macro><name>static_cast</name></macro><operator>&lt;</operator><name>uint32_t</name><operator>&gt;</operator><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>DecodeFixed64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>port</name><operator>::</operator><name>kLittleEndian</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Load the raw bytes</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// gcc optimizes this to a plain load</comment>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lo</name> <init>= <expr><call><name>DecodeFixed32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hi</name> <init>= <expr><call><name>DecodeFixed32</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>lo</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Internal routine for use by fallback path of GetVarint32Ptr</comment>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetVarint32PtrFallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>limit</name></decl></parameter>,
                                          <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetVarint32Ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>limit</name></decl></parameter>,
                                  <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>&amp;</operator> <literal type="number">128</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
      <return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>GetVarint32PtrFallback</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_UTIL_CODING_H_</comment>
</unit>
