<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/test/coinselector_tests.cpp"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coinselection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coincontrol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/test/wallet_test_fixture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>coinselector_tests</argument>, <argument>WalletTestingSetup</argument>)</argument_list></macro>

<comment type="line">// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_TESTS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<comment type="line">// some tests fail 1% of the time due to bad luck.</comment>
<comment type="line">// we repeat those tests this many times and only complain if all iterations of the test fail</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOM_REPEATS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>wtxn</name></decl>;</decl_stmt>

<typedef>typedef <type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name></type> <name>CoinSet</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutput</name></expr></argument>&gt;</argument_list></name></type> <name>vCoins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NodeContext</name></type> <name>testNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>auto</name></type> <name>testChain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>testNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CWallet</name></type> <name>testWallet</name><argument_list>(<argument><expr><call><name><name>testChain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CAmount</name></type> <name>balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CoinEligibilityFilter</name></type> <name>filter_standard</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CoinEligibilityFilter</name></type> <name>filter_confirmed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CoinEligibilityFilter</name></type> <name>filter_standard_extra</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CoinSelectionParams</name></type> <name>coin_selection_params</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_coin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nInput</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nInput</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>nInput</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_coin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nInput</name></decl></parameter>, <parameter><decl><type><name>CoinSet</name><modifier>&amp;</modifier></type> <name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nInput</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>nInput</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_coin</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nAge</name> <init>= <expr><literal type="number">6</literal><operator>*</operator><literal type="number">24</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fIsFromMe</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nInput</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>spendable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>balance</name> <operator>+=</operator> <name>nValue</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nextLockTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>nextLockTime</name><operator>++</operator></expr>;</expr_stmt>        <comment type="line">// so all transactions get different hashes</comment>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nInput</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>nInput</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>spendable</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>GetNewDestination</name></name><argument_list>(<argument><expr><name><name>OutputType</name><operator>::</operator><name>BECH32</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>nInput</name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fIsFromMe</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// IsFromMe() returns (GetDebit() &gt; 0), and GetDebit() is 0 if vin.empty(),</comment>
        <comment type="line">// so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()</comment>
        <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name></type> <name>wtx</name> <init>= <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>, <argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fIsFromMe</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>wtx</name><operator>-&gt;</operator><name>m_amounts</name><index>[<expr><name><name>CWalletTx</name><operator>::</operator><name>DEBIT</name></name></expr>]</index></name><operator>.</operator><call><name>Set</name><argument_list>(<argument><expr><name>ISMINE_SPENDABLE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>COutput</name></type> <name>output</name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nInput</name></expr></argument>, <argument><expr><name>nAge</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* spendable */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* solvable */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* safe */</comment>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vCoins</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>AddToWallet</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>wtx</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wtxn</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_coin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nAge</name> <init>= <expr><literal type="number">6</literal><operator>*</operator><literal type="number">24</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fIsFromMe</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nInput</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>spendable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>testWallet</name></expr></argument>, <argument><expr><name>nValue</name></expr></argument>, <argument><expr><name>nAge</name></expr></argument>, <argument><expr><name>fIsFromMe</name></expr></argument>, <argument><expr><name>nInput</name></expr></argument>, <argument><expr><name>spendable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>empty_wallet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>vCoins</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wtxn</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>balance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>equal_sets</name><parameter_list>(<parameter><decl><type><name>CoinSet</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>CoinSet</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>CoinSet</name><operator>::</operator><name>iterator</name></name></expr></argument>, <argument><expr><name><name>CoinSet</name><operator>::</operator><name>iterator</name></name></expr></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr><call><name>mismatch</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>ret</name><operator>.</operator><name>first</name></name> <operator>==</operator> <call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>.</operator><name>second</name></name> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CAmount</name></type> <name>make_hard_case</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>utxos</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>utxo_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>utxo_pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>target</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>utxos</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>target</name> <operator>+=</operator> <operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>+</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>+</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>GroupCoins</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>coins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name></type> <name>static_groups</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>static_groups</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>coin</name> <operator>:</operator> <name>coins</name></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>static_groups</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>static_groups</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>GroupCoins</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutput</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>coins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name></type> <name>static_groups</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>static_groups</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>coin</name> <operator>:</operator> <name>coins</name></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>static_groups</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>coin</name><operator>.</operator><name>GetInputCoin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>coin</name><operator>.</operator><name>nDepth</name></name></expr></argument>, <argument><expr><name><name>coin</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>m_amounts</name><index>[<expr><name><name>CWalletTx</name><operator>::</operator><name>DEBIT</name></name></expr>]</index></name><operator>.</operator><name><name>m_cached</name><index>[<expr><name>ISMINE_SPENDABLE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>coin</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>m_amounts</name><index>[<expr><name><name>CWalletTx</name><operator>::</operator><name>DEBIT</name></name></expr>]</index></name><operator>.</operator><name><name>m_value</name><index>[<expr><name>ISMINE_SPENDABLE</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument> <comment type="block">/* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */</comment>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>static_groups</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Branch and bound coin selection tests</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bnb_search_test</argument>)</argument_list></macro>
<block>{<block_content>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>testWallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Setup</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name></type> <name>utxo_pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CoinSet</name></type> <name>selection</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CoinSet</name></type> <name>actual_selection</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>value_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>not_input_fees</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">/////////////////////////</comment>
    <comment type="line">// Known Outcome tests //</comment>
    <comment type="line" format="doxygen">/////////////////////////</comment>

    <comment type="line">// Empty utxo pool</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add utxos</comment>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Select 1 Cent</comment>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>equal_sets</name><argument_list>(<argument><expr><name>selection</name></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>value_ret</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>actual_selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Select 2 Cent</comment>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>equal_sets</name><argument_list>(<argument><expr><name>selection</name></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>value_ret</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>actual_selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Select 5 Cent</comment>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>equal_sets</name><argument_list>(<argument><expr><name>selection</name></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>value_ret</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>actual_selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Select 11 Cent, not possible</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>actual_selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Select 10 Cent</comment>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>equal_sets</name><argument_list>(<argument><expr><name>selection</name></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>value_ret</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>actual_selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Negative effective value</comment>
    <comment type="line">// Select 10 Cent but have 1 Cent not be possible because too small</comment>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>value_ret</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// FIXME: this test is redundant with the above, because 1 Cent is selected, not "too small"</comment>
    <comment type="line">// BOOST_CHECK(equal_sets(selection, actual_selection));</comment>

    <comment type="line">// Select 0.25 Cent, not possible</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.25</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>actual_selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Iteration exhaustion test</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>target</name> <init>= <expr><call><name>make_hard_case</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Should exhaust</comment>
    <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>make_hard_case</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Should not exhaust</comment>

    <comment type="line">// Test same value early bailout optimization</comment>
    <expr_stmt><expr><call><name><name>utxo_pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>value_ret</name></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>equal_sets</name><argument_list>(<argument><expr><name>selection</name></expr></argument>, <argument><expr><name>actual_selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" format="doxygen">////////////////////</comment>
    <comment type="line">// Behavior tests //</comment>
    <comment type="line" format="doxygen">////////////////////</comment>
    <comment type="line">// Select 1 Cent with pool of only greater than 5 Cent</comment>
    <expr_stmt><expr><call><name><name>utxo_pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Run 100 times, to make sure it is never finding a solution</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Make sure that effective value is working in SelectCoinsMinConf when BnB is used</comment>
    <decl_stmt><decl><type><name>CoinSelectionParams</name></type> <name>coin_selection_params_bnb</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CoinSet</name></type> <name>setCoinsRet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nValueRet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>bnb_used</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vCoins</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>nInputBytes</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt> <comment type="line">// Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params_bnb</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test fees subtracted from output:</comment>
    <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vCoins</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>nInputBytes</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params_bnb</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>coin_selection_params_bnb</name><operator>.</operator><name>m_subtract_fee_outputs</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params_bnb</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure that can use BnB when there are preset inputs</comment>
    <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name> <init>= <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>m_chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateMock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>firstRun</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>LoadWallet</name></name><argument_list>(<argument><expr><name>firstRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>*</operator><name>wallet</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>*</operator><name>wallet</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>*</operator><name>wallet</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CCoinControl</name></type> <name>coin_control</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>fAllowOtherInputs</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>coin_control</name><operator>.</operator><name>Select</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>vCoins</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vCoins</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>coin_selection_params_bnb</name><operator>.</operator><name>effective_fee</name></name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SelectCoins</name></name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><name>coin_selection_params_bnb</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>coin_selection_params_bnb</name><operator>.</operator><name>use_bnb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>knapsack_solver_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CoinSet</name></type> <name>setCoinsRet</name></decl>, <decl><type ref="prev"/><name>setCoinsRet2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nValueRet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>bnb_used</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>testWallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// test multiple times to allow for differences in the shuffle order</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RUN_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// with an empty wallet we can't even pay one cent</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>*</operator><name>CENT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// add a new 1 cent coin</comment>

        <comment type="line">// with a new 1 cent coin, we still can't find a mature 1 cent</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// but we can find a new 1 cent</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// add a mature 2 cent coin</comment>

        <comment type="line">// we can't make 3 cents of mature coins</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// we can make 3 cents of new coins</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// add a mature 5 cent coin,</comment>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><name>CENT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a new 10 cent coin sent from one of our own addresses</comment>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">20</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="line">// and a mature 20 cent coin</comment>

        <comment type="line">// now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38</comment>

        <comment type="line">// we can't make 38 cents only if we disallow new coins:</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">38</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// we can't even make 37 cents if we don't allow new coins even if they're from us</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">38</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard_extra</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// but we can make 37 cents if we accept new coins from ourself</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">37</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">37</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// and we can make 38 cents if we accept all new coins</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">38</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">38</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try making 34 cents from 1,2,5,10,20 - we can't do it exactly</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">34</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">35</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">// but 35 cents is closest</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)</comment>

        <comment type="line">// when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>nValueRet</name> <operator>==</operator> <literal type="number">8</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>( <argument><expr><literal type="number">9</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// now clear out the wallet and start again to test choosing between subsets of smaller coins and the next biggest coin</comment>
        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">6</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">7</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">8</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">20</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">30</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// now we have 6+7+8+20+30 = 71 cents total</comment>

        <comment type="line">// check that we have 71 and not 72</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">71</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">72</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we should get 20 in one coin</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">5</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// now we have 5+6+7+8+20+30 = 75 cents total</comment>

        <comment type="line">// now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">18</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we should get 18 in 3 coins</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">18</literal><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// now we have 5+6+7+8+18+20+30</comment>

        <comment type="line">// and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">18</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// we should get 18 in 1 coin</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// because in the event of a tie, the biggest coin wins</comment>

        <comment type="line">// now try making 11 cents.  we should get 5+6</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">11</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check that the smallest bigger coin is used</comment>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">1</literal><operator>*</operator><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>*</operator><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">3</literal><operator>*</operator><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>( <argument><expr><literal type="number">4</literal><operator>*</operator><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">95</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// we should get 1 BTC in 1 coin</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">195</literal> <operator>*</operator> <name>CENT</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// we should get 2 BTC in 1 coin</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// empty the wallet and start again, now with fractions of a cent, to test small change avoidance</comment>

        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">1</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE</comment>
        <comment type="line">// we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>MIN_CHANGE</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// but if we add a bigger coin, small change is avoided</comment>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1111</literal><operator>*</operator><name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we should get the exact amount</comment>

        <comment type="line">// if we add more small coins:</comment>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">7</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and try again to make 1.0 * MIN_CHANGE</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we should get the exact amount</comment>

        <comment type="line">// run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)</comment>
        <comment type="line">// they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change</comment>
        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">50000</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">500000</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">500000</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we should get the exact amount</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// in ten coins</comment>

        <comment type="line">// if there's not enough in the smaller coins to make at least 1 * MIN_CHANGE change (0.5+0.6+0.7 &lt; 1.0+1.0),</comment>
        <comment type="line">// we need to try finding an exact subset anyway</comment>

        <comment type="line">// sometimes it will fail, and so we use the next biggest coin:</comment>
        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">7</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1111</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">1111</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we get the bigger coin</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)</comment>
        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1111</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>MIN_CHANGE</name></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// we should get the exact amount</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// in two coins 0.4+0.6</comment>

        <comment type="line">// test avoiding small change</comment>
        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// trying to make 100.01 from these three coins</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">10001</literal> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">10105</literal> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// we should get all coins</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>MIN_CHANGE</name> <operator>*</operator> <literal type="number">9990</literal> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">101</literal> <operator>*</operator> <name>MIN_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// test with many inputs</comment>
      <for>for <control>(<init><decl><type><name>CAmount</name></type> <name>amt</name><init>=<expr><literal type="number">1500</literal></expr></init></decl>;</init> <condition><expr><name>amt</name> <operator>&lt;</operator> <name>COIN</name></expr>;</condition> <incr><expr><name>amt</name><operator>*=</operator><literal type="number">10</literal></expr></incr>)</control> <block>{<block_content>
           <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <comment type="line">// Create 676 inputs (=  (old MAX_STANDARD_TX_SIZE == 100000)  / 148 bytes per input)</comment>
           <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">676</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
               <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

           <comment type="line">// We only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.</comment>
           <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RUN_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><name>filter_confirmed</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <if_stmt><if>if <condition>(<expr><name>amt</name> <operator>-</operator> <literal type="number">2000</literal> <operator>&lt;</operator> <name>MIN_CHANGE</name></expr>)</condition> <block>{<block_content>
                 <comment type="line">// needs more than one input:</comment>
                 <decl_stmt><decl><type><name>uint16_t</name></type> <name>returnSize</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>ceil</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2000.0</literal> <operator>+</operator> <name>MIN_CHANGE</name><operator>)</operator><operator>/</operator><name>amt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>CAmount</name></type> <name>returnValue</name> <init>= <expr><name>amt</name> <operator>*</operator> <name>returnSize</name></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>returnSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
                 <comment type="line">// one input is sufficient:</comment>
                 <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
           </block_content>}</block></for>
      </block_content>}</block></for>

      <comment type="line">// test randomness</comment>
      <block>{<block_content>
          <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i2</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

          <comment type="line">// Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.</comment>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RUN_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// picking 50 from 100 coins doesn't depend on the shuffle,</comment>
            <comment type="line">// but does depend on randomness in the stochastic approximation code</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument> , <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet2</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>equal_sets</name><argument_list>(<argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>setCoinsRet2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>fails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>RANDOM_REPEATS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time</comment>
                <comment type="line">// run the test RANDOM_REPEATS times and only complain if all of them fail</comment>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>COIN</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument> , <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>COIN</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet2</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>equal_sets</name><argument_list>(<argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>setCoinsRet2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>fails</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>BOOST_CHECK_NE</name><argument_list>(<argument><expr><name>fails</name></expr></argument>, <argument><expr><name>RANDOM_REPEATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>

          <comment type="line">// add 75 cents in small change.  not enough to make 90 cents,</comment>
          <comment type="line">// then try making 90 cents.  there are multiple competing "smallest bigger" coins,</comment>
          <comment type="line">// one of which should be picked at random</comment>
          <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">15</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">20</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">25</literal> <operator>*</operator> <name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RUN_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>fails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>RANDOM_REPEATS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time</comment>
                <comment type="line">// run the test RANDOM_REPEATS times and only complain if all of them fail</comment>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">90</literal><operator>*</operator><name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument> , <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">90</literal><operator>*</operator><name>CENT</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet2</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>equal_sets</name><argument_list>(<argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>setCoinsRet2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>fails</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>BOOST_CHECK_NE</name><argument_list>(<argument><expr><name>fails</name></expr></argument>, <argument><expr><name>RANDOM_REPEATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
      </block_content>}</block>

    <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ApproximateBestSubset</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CoinSet</name></type> <name>setCoinsRet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nValueRet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>bnb_used</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>testWallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test vValue sort order</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">1000</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">1003</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><literal type="number">1003</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>SelectCoins_test</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random generator stuff</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>default_random_engine</name></name></type> <name>generator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>exponential_distribution</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>distribution</name> <argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>rand</name></decl>;</decl_stmt>

    <comment type="line">// Run this test 100 times</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>empty_wallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make a wallet with 1000 exponentially distributed random inputs</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>(</operator><name>CAmount</name><operator>)</operator><operator>(</operator><call><name>distribution</name><argument_list>(<argument><expr><name>generator</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">10000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// Generate a random fee rate in the range of 100 - 400</comment>
        <decl_stmt><decl><type><name>CFeeRate</name></type> <name>rate</name><argument_list>(<argument><expr><call><name><name>rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

        <comment type="line">// Generate a random target value between 1000 and wallet balance</comment>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>target</name> <init>= <expr><call><name><name>rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>balance</name> <operator>-</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Perform selection</comment>
        <decl_stmt><decl><type><name>CoinSelectionParams</name></type> <name>coin_selection_params_knapsack</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">148</literal></expr></argument>, <argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoinSelectionParams</name></type> <name>coin_selection_params_bnb</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">148</literal></expr></argument>, <argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CoinSet</name></type> <name>out_set</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>out_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>bnb_used</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out_set</name></expr></argument>, <argument><expr><name>out_value</name></expr></argument>, <argument><expr><name>coin_selection_params_bnb</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name><name>testWallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><call><name>GroupCoins</name><argument_list>(<argument><expr><name>vCoins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out_set</name></expr></argument>, <argument><expr><name>out_value</name></expr></argument>, <argument><expr><name>coin_selection_params_knapsack</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_GE</name><argument_list>(<argument><expr><name>out_value</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
