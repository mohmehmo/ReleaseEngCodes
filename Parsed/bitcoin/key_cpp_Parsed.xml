<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/key.cpp"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Copyright (c) 2017 The Zcash developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/hmac_sha512.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;secp256k1.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;secp256k1_recovery.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>secp256k1_context_sign</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** These functions are taken from the libsecp256k1 distribution and are very ugly. */</comment>

<comment type="block" format="doxygen">/**
 * This parses a format loosely based on a DER encoding of the ECPrivateKey type from
 * section C.4 of SEC 1 &lt;http://www.secg.org/sec1-v2.pdf&gt;, with the following caveats:
 *
 * * The octet-length of the SEQUENCE must be encoded as 1 or 2 octets. It is not
 *   required to be encoded as one octet if it is less than 256, as DER would require.
 * * The octet-length of the SEQUENCE must not be greater than the remaining
 *   length of the key encoding, but need not match it (i.e. the encoding may contain
 *   junk after the encoded SEQUENCE).
 * * The privateKey OCTET STRING is zero-filled on the left to 32 octets.
 * * Anything after the encoding of the privateKey OCTET STRING is ignored, whether
 *   or not it is validly encoded DER.
 *
 * out32 must point to an output buffer of length at least 32 bytes.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ec_privkey_import_der</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out32</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>privkey</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>privkeylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>privkey</name> <operator>+</operator> <name>privkeylen</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* sequence header */</comment>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>privkey</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>privkey</name> <operator>!=</operator> <literal type="number">0x30u</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>privkey</name><operator>++</operator></expr>;</expr_stmt>
    <comment type="block">/* sequence length constructor */</comment>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>privkey</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>privkey</name> <operator>&amp;</operator> <literal type="number">0x80u</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>lenb</name> <init>= <expr><operator>*</operator><name>privkey</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x80u</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>privkey</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lenb</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lenb</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>privkey</name> <operator>&lt;</operator> <name>lenb</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* sequence length */</comment>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name> <init>= <expr><name><name>privkey</name><index>[<expr><name>lenb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>lenb</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>privkey</name><index>[<expr><name>lenb</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0u</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>privkey</name> <operator>+=</operator> <name>lenb</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>privkey</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* sequence element 0: version number (=1) */</comment>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>privkey</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>privkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x02u</literal> <operator>||</operator> <name><name>privkey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01u</literal> <operator>||</operator> <name><name>privkey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01u</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>privkey</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <comment type="block">/* sequence element 1: octet string, up to 32 bytes */</comment>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>privkey</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>privkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x04u</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>oslen</name> <init>= <expr><name><name>privkey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>privkey</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>oslen</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>end</name> <operator>-</operator> <name>privkey</name> <operator>&lt;</operator> <name>oslen</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out32</name> <operator>+</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>oslen</name><operator>)</operator></expr></argument>, <argument><expr><name>privkey</name></expr></argument>, <argument><expr><name>oslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>secp256k1_ec_seckey_verify</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out32</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This serializes to a DER encoding of the ECPrivateKey type from section C.4 of SEC 1
 * &lt;http://www.secg.org/sec1-v2.pdf&gt;. The optional parameters and publicKey fields are
 * included.
 *
 * privkey must point to an output buffer of length at least CKey::SIZE bytes.
 * privkeylen must initially be set to the size of the privkey buffer. Upon return it
 * will be set to the number of bytes used in the buffer.
 * key32 must point to a 32-byte raw private key.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ec_privkey_export_der</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>privkey</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>privkeylen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key32</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compressed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>privkeylen</name> <operator>&gt;=</operator> <name><name>CKey</name><operator>::</operator><name>SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>secp256k1_pubkey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pubkeylen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>secp256k1_ec_pubkey_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><name>key32</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>privkeylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>compressed</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>begin</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x20</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>middle</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x48</literal></expr>,
            <expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,
            <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,
            <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x04</literal></expr>,
            <expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x87</literal></expr>,
            <expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,
            <expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,
            <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0xBA</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xE6</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,
            <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x00</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>privkey</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>key32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkeylen</name> <operator>=</operator> <name><name>CPubKey</name><operator>::</operator><name>COMPRESSED_SIZE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_ec_pubkey_serialize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkeylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><name>SECP256K1_EC_COMPRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>pubkeylen</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>privkeylen</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>privkey</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>privkeylen</name> <operator>==</operator> <name><name>CKey</name><operator>::</operator><name>COMPRESSED_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>begin</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x20</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>middle</name><index>[]</index></name> <init>= <expr><block>{
            <expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x48</literal></expr>,
            <expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,
            <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,
            <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x04</literal></expr>,
            <expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x87</literal></expr>,
            <expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,
            <expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x11</literal></expr>,
            <expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0x10</literal></expr>,
            <expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,
            <expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0xBA</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xE6</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,
            <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x00</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>privkey</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>key32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkeylen</name> <operator>=</operator> <name><name>CPubKey</name><operator>::</operator><name>SIZE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_ec_pubkey_serialize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkeylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><name>SECP256K1_EC_UNCOMPRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>pubkeylen</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>privkeylen</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>privkey</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>privkeylen</name> <operator>==</operator> <name><name>CKey</name><operator>::</operator><name>SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CKey</name><operator>::</operator><name>Check</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>vch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>secp256k1_ec_seckey_verify</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CKey</name><operator>::</operator><name>MakeNewKey</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fCompressedIn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>GetStrongRandBytes</name><argument_list>(<argument><expr><call><name><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keydata</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>Check</name><argument_list>(<argument><expr><call><name><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    <expr_stmt><expr><name>fValid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>fCompressed</name> <operator>=</operator> <name>fCompressedIn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CKey</name><operator>::</operator><name>Negate</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fValid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>secp256k1_ec_privkey_negate</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><call><name><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CPrivKey</name></type> <name><name>CKey</name><operator>::</operator><name>GetPrivKey</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fValid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CPrivKey</name></type> <name>privkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>privkeylen</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>privkey</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>privkeylen</name> <operator>=</operator> <name>SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ec_privkey_export_der</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><call><name><name>privkey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>privkeylen</name></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fCompressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>privkey</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>privkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>privkey</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CPubKey</name></type> <name><name>CKey</name><operator>::</operator><name>GetPubKey</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fValid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>secp256k1_pubkey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><name><name>CPubKey</name><operator>::</operator><name>SIZE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>secp256k1_ec_pubkey_create</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_ec_pubkey_serialize</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>result</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fCompressed</name></expr> ?</condition><then> <expr><name>SECP256K1_EC_COMPRESSED</name></expr> </then><else>: <expr><name>SECP256K1_EC_UNCOMPRESSED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Check that the sig has a low R value and will be less than 71 bytes</comment>
<function><type><name>bool</name></type> <name>SigHasLowR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecdsa_signature</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>compact_sig</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_ecdsa_signature_serialize_compact</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><name>compact_sig</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// In DER serialization, all values are interpreted as big-endian, signed integers. The highest bit in the integer indicates</comment>
    <comment type="line">// its signed-ness; 0 is positive, 1 is negative. When the value is interpreted as a negative integer, it must be converted</comment>
    <comment type="line">// to a positive value by prepending a 0x00 byte so that the highest bit is 0. We can avoid this prepending by ensuring that</comment>
    <comment type="line">// our highest bit is always 0, and thus we must check that the first byte is less than 0x80.</comment>
    <return>return <expr><name><name>compact_sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CKey</name><operator>::</operator><name>Sign</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSig</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>grind</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>test_case</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fValid</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name><name>CPubKey</name><operator>::</operator><name>SIGNATURE_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nSigLen</name> <init>= <expr><name><name>CPubKey</name><operator>::</operator><name>SIGNATURE_SIZE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>extra_entropy</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>WriteLE32</name><argument_list>(<argument><expr><name>extra_entropy</name></expr></argument>, <argument><expr><name>test_case</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>secp256k1_ecdsa_signature</name></type> <name>sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>secp256k1_ecdsa_sign</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>secp256k1_nonce_function_rfc6979</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>grind</name> <operator>&amp;&amp;</operator> <name>test_case</name><operator>)</operator></expr> ?</condition><then> <expr><name>extra_entropy</name></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Grind for low R</comment>
    <while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SigHasLowR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>grind</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>WriteLE32</name><argument_list>(<argument><expr><name>extra_entropy</name></expr></argument>, <argument><expr><operator>++</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>secp256k1_ecdsa_sign</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>secp256k1_nonce_function_rfc6979</name></expr></argument>, <argument><expr><name>extra_entropy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_ecdsa_signature_serialize_der</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSigLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nSigLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CKey</name><operator>::</operator><name>VerifyPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>pubkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>fCompressed</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rnd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name> <init>= <expr><literal type="string">"Bitcoin key verification\n"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHash256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>str</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Sign</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>pubkey</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CKey</name><operator>::</operator><name>SignCompact</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSig</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fValid</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name><name>CPubKey</name><operator>::</operator><name>COMPACT_SIGNATURE_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rec</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_ecdsa_recoverable_signature</name></type> <name>sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>secp256k1_ecdsa_sign_recoverable</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>secp256k1_nonce_function_rfc6979</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>secp256k1_ecdsa_recoverable_signature_serialize_compact</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vchSig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rec</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">27</literal> <operator>+</operator> <name>rec</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>fCompressed</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CKey</name><operator>::</operator><name>Load</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPrivKey</name> <modifier>&amp;</modifier></type><name>privkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>vchPubKey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fSkipCheck</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ec_privkey_import_der</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>privkey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>privkey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>fCompressed</name> <operator>=</operator> <call><name><name>vchPubKey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fValid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>fSkipCheck</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>VerifyPubKey</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CKey</name><operator>::</operator><name>Derive</name></name><parameter_list>(<parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>keyChild</name></decl></parameter>, <parameter><decl><type><name>ChainCode</name> <modifier>&amp;</modifier></type><name>ccChild</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nChild</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ChainCode</name><modifier>&amp;</modifier></type> <name>cc</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsCompressed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><name><name>secure_allocator</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vout</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CPubKey</name><operator>::</operator><name>COMPRESSED_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BIP32Hash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>nChild</name></expr></argument>, <argument><expr><operator>*</operator><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BIP32Hash</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>nChild</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>ccChild</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>keyChild</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>secp256k1_ec_privkey_tweak_add</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>keyChild</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>keyChild</name><operator>.</operator><name>fCompressed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keyChild</name><operator>.</operator><name>fValid</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CExtKey</name><operator>::</operator><name>Derive</name></name><parameter_list>(<parameter><decl><type><name>CExtKey</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_nChild</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <expr_stmt><expr><name><name>out</name><operator>.</operator><name>nDepth</name></name> <operator>=</operator> <name>nDepth</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>id</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>.</operator><name>vchFingerprint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>.</operator><name>nChild</name></name> <operator>=</operator> <name>_nChild</name></expr>;</expr_stmt>
    <return>return <expr><call><name><name>key</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>chaincode</name></name></expr></argument>, <argument><expr><name>_nChild</name></expr></argument>, <argument><expr><name>chaincode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CExtKey</name><operator>::</operator><name>SetSeed</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nSeedLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>hashkey</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'B'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'d'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><name><name>secure_allocator</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vout</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHMAC_SHA512</name><argument_list>(<argument><expr><name>hashkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hashkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>nSeedLen</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>chaincode</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vout</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nChild</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vchFingerprint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vchFingerprint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>CExtPubKey</name></type> <name><name>CExtKey</name><operator>::</operator><name>Neuter</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>CExtPubKey</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>nDepth</name></name> <operator>=</operator> <name>nDepth</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>.</operator><name>vchFingerprint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vchFingerprint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>nChild</name></name> <operator>=</operator> <name>nChild</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>pubkey</name></name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>chaincode</name></name> <operator>=</operator> <name>chaincode</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CExtKey</name><operator>::</operator><name>Encode</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>code</name><index>[<expr><name>BIP32_EXTKEY_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nDepth</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>code</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vchFingerprint</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator>  <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>code</name><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><call><name><name>chaincode</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">41</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>code</name><operator>+</operator><literal type="number">42</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CExtKey</name><operator>::</operator><name>Decode</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>code</name><index>[<expr><name>BIP32_EXTKEY_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>nDepth</name> <operator>=</operator> <name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vchFingerprint</name></expr></argument>, <argument><expr><name>code</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nChild</name> <operator>=</operator> <operator>(</operator><name><name>code</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>code</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>code</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>code</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>chaincode</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>code</name><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>code</name><operator>+</operator><literal type="number">42</literal></expr></argument>, <argument><expr><name>code</name><operator>+</operator><name>BIP32_EXTKEY_SIZE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ECC_InitSanityCheck</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>key</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ECC_Start</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>secp256k1_context_sign</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>secp256k1_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>secp256k1_context_create</name><argument_list>(<argument><expr><name>SECP256K1_CONTEXT_SIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
        <comment type="line">// Pass in a random blinding seed to the secp256k1 context.</comment>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><name><name>secure_allocator</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vseed</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><call><name><name>vseed</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>secp256k1_context_randomize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name><name>vseed</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name>secp256k1_context_sign</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ECC_Stop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>secp256k1_context_sign</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>secp256k1_context_sign</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>secp256k1_context_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
