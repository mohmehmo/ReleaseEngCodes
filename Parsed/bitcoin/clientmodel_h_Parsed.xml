<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/clientmodel.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_CLIENTMODEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_CLIENTMODEL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDateTime&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BanTableModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OptionsModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PeerTableModel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CBlockIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QTimer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<name><name>enum</name> <name>class</name></name></type> <name>BlockSource</name> <block>{<block_content>
    <expr_stmt><expr><name>NONE</name></expr><operator>,</operator>
    <expr><name>REINDEX</name></expr><operator>,</operator>
    <expr><name>DISK</name></expr><operator>,</operator>
    <expr><name>NETWORK</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<enum>enum <name>NumConnections</name> <block>{
    <decl><name>CONNECTIONS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>CONNECTIONS_IN</name>   <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
    <decl><name>CONNECTIONS_OUT</name>  <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
    <decl><name>CONNECTIONS_ALL</name>  <init>= <expr><operator>(</operator><name>CONNECTIONS_IN</name> <operator>|</operator> <name>CONNECTIONS_OUT</name><operator>)</operator></expr></init></decl>,
}</block>;</enum>

<comment type="block" format="doxygen">/** Model for Bitcoin network client. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>ClientModel</name> <range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>ClientModel</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr></argument>, <argument><expr><name>QObject</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>ClientModel</name><argument_list>()</argument_list></call></expr>;

    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <macro><name>node</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_node</name></expr>;</return> }</block>
    <name>OptionsModel</name> <operator>*</operator><call><name>getOptionsModel</name><argument_list>()</argument_list></call></expr>;
    <expr><name>PeerTableModel</name> <operator>*</operator><call><name>getPeerTableModel</name><argument_list>()</argument_list></call></expr>;
    <expr><name>BanTableModel</name> <operator>*</operator><call><name>getBanTableModel</name><argument_list>()</argument_list></call></expr>;

    <comment type="line" format="doxygen">//! Return number of connections, default is in- and outbound (total)</comment>
    <expr><name>int</name> <macro><name>getNumConnections</name><argument_list>(<argument>unsigned int flags = CONNECTIONS_ALL</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>int</name> <macro><name>getHeaderTipHeight</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>int64_t</name> <macro><name>getHeaderTipTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="line" format="doxygen">//! Returns enum BlockSource of the current importing/syncing state</comment>
    enum <expr><name>BlockSource</name> <macro><name>getBlockSource</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <comment type="line" format="doxygen">//! Return warnings to be displayed in status bar</comment>
    <expr><name>QString</name> <macro><name>getStatusBarWarnings</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>QString</name> <macro><name>formatFullVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatSubVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>bool</name> <macro><name>isReleaseVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatClientStartupTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>dataDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>blocksDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>bool</name> <macro><name>getProxyInfo</name><argument_list>(<argument>std::string&amp; ip_port</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="line">// caches for the best header</comment>
    <expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>cachedBestHeaderHeight</name></expr>;
    <expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <name>cachedBestHeaderTime</name></expr>;

<expr><name>private</name><operator>:</operator>
    <name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_show_progress</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_notify_num_connections_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_notify_network_active_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_notify_alert_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_banned_list_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_notify_block_tip</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_notify_header_tip</name></expr>;
    <expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr>;
    <expr><name>PeerTableModel</name> <operator>*</operator><name>peerTableModel</name></expr>;
    <expr><name>BanTableModel</name> <operator>*</operator><name>banTableModel</name></expr>;

    <comment type="line" format="doxygen">//! A thread to interact with m_node asynchronously</comment>
    <expr><name>QThread</name><operator>*</operator> <specifier>const</specifier> <name>m_thread</name></expr>;

    <expr><name>void</name> <call><name>subscribeToCoreSignals</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>unsubscribeFromCoreSignals</name><argument_list>()</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <macro><name>numConnectionsChanged</name><argument_list>(<argument>int count</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <macro><name>numBlocksChanged</name><argument_list>(<argument>int count</argument>, <argument>const QDateTime&amp; blockDate</argument>, <argument>double nVerificationProgress</argument>, <argument>bool header</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <macro><name>mempoolSizeChanged</name><argument_list>(<argument>long count</argument>, <argument>size_t mempoolSizeInBytes</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <macro><name>networkActiveChanged</name><argument_list>(<argument>bool networkActive</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>alertsChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>warnings</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>bytesChanged</name><argument_list>(<argument>quint64 totalBytesIn</argument>, <argument>quint64 totalBytesOut</argument>)</argument_list></macro></expr>;

    <comment type="line" format="doxygen">//! Fired when a message should be reported to the user</comment>
    <expr><name>void</name> <macro><name>message</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>const QString &amp;message</argument>, <argument>unsigned int style</argument>)</argument_list></macro></expr>;

    <comment type="line">// Show progress dialog e.g. for verifychain</comment>
    <expr><name>void</name> <macro><name>showProgress</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>int nProgress</argument>)</argument_list></macro></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <macro><name>updateNumConnections</name><argument_list>(<argument>int numConnections</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <macro><name>updateNetworkActive</name><argument_list>(<argument>bool networkActive</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>updateAlert</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateBanlist</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_CLIENTMODEL_H</comment>
</unit>
