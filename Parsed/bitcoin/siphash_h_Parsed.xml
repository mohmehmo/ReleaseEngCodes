<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/crypto/siphash.h"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CRYPTO_SIPHASH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CRYPTO_SIPHASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** SipHash-2-4 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CSipHasher</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */</comment>
    <macro><name>CSipHasher</name><argument_list>(<argument>uint64_t k0</argument>, <argument>uint64_t k1</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <comment type="block" format="doxygen">/** Hash a 64-bit integer worth of data
     *  It is treated as if this was the little-endian interpretation of 8 bytes.
     *  This function can only be used when a multiple of 8 bytes have been written so far.
     */</comment>
    <function_decl><type><name>CSipHasher</name><modifier>&amp;</modifier></type> <name>Write</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="doxygen">/** Hash arbitrary bytes. */</comment>
    <function_decl><type><name>CSipHasher</name><modifier>&amp;</modifier></type> <name>Write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="doxygen">/** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */</comment>
    <expr_stmt><expr><name>uint64_t</name> <macro><name>Finalize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Optimized SipHash-2-4 implementation for uint256.
 *
 *  It is identical to:
 *    SipHasher(k0, k1)
 *      .Write(val.GetUint64(0))
 *      .Write(val.GetUint64(1))
 *      .Write(val.GetUint64(2))
 *      .Write(val.GetUint64(3))
 *      .Finalize()
 */</comment>
<function_decl><type><name>uint64_t</name></type> <name>SipHashUint256</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>SipHashUint256Extra</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>extra</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CRYPTO_SIPHASH_H</comment>
</unit>
