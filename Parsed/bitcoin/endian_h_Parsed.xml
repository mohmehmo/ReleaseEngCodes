<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/compat/endian.h"><comment type="line">// Copyright (c) 2014-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_COMPAT_ENDIAN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_COMPAT_ENDIAN_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/byteswap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifndef>
<comment type="line">// While not technically a supported configuration, defaulting to defining these</comment>
<comment type="line">// DECLs when we were compiled without autotools makes it easier for other build</comment>
<comment type="line">// systems to build things like libbitcoinconsensus for strange targets.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>htobe16</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_HTOBE16</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>htole16</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_HTOLE16</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>be16toh</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_BE16TOH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>le16toh</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_LE16TOH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>htobe32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_HTOBE32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>htole32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_HTOLE32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>be32toh</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_BE32TOH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>le32toh</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_LE32TOH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>htobe64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_HTOBE64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>htole64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_HTOLE64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>be64toh</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_BE64TOH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>le64toh</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DECL_LE64TOH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_CONFIG_H</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOBE16</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>htobe16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>host_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>host_16bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOBE16</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOLE16</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>htole16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>host_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_16</name><argument_list>(<argument><expr><name>host_16bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOLE16</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_BE16TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>be16toh</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>big_endian_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>big_endian_16bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_BE16TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_LE16TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>le16toh</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>little_endian_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_16</name><argument_list>(<argument><expr><name>little_endian_16bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_LE16TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOBE32</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>htobe32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>host_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>host_32bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOBE32</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOLE32</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>htole32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>host_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_32</name><argument_list>(<argument><expr><name>host_32bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOLE32</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_BE32TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>be32toh</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>big_endian_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>big_endian_32bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_BE32TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_LE32TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>le32toh</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>little_endian_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_32</name><argument_list>(<argument><expr><name>little_endian_32bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_LE32TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOBE64</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>htobe64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>host_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>host_64bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOBE64</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOLE64</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>htole64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>host_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_64</name><argument_list>(<argument><expr><name>host_64bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOLE64</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_BE64TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>be64toh</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>big_endian_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>big_endian_64bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_BE64TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_LE64TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>le64toh</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>little_endian_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_64</name><argument_list>(<argument><expr><name>little_endian_64bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_LE64TOH</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// WORDS_BIGENDIAN</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOBE16</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>htobe16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>host_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_16</name><argument_list>(<argument><expr><name>host_16bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOBE16</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOLE16</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>htole16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>host_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>host_16bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOLE16</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_BE16TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>be16toh</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>big_endian_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_16</name><argument_list>(<argument><expr><name>big_endian_16bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_BE16TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_LE16TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint16_t</name></type> <name>le16toh</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>little_endian_16bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>little_endian_16bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_LE16TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOBE32</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>htobe32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>host_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_32</name><argument_list>(<argument><expr><name>host_32bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOBE32</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOLE32</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>htole32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>host_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>host_32bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOLE32</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_BE32TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>be32toh</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>big_endian_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_32</name><argument_list>(<argument><expr><name>big_endian_32bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_BE32TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_LE32TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>le32toh</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>little_endian_32bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>little_endian_32bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_LE32TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOBE64</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>htobe64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>host_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_64</name><argument_list>(<argument><expr><name>host_64bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOBE64</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_HTOLE64</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>htole64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>host_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>host_64bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_HTOLE64</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_BE64TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>be64toh</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>big_endian_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bswap_64</name><argument_list>(<argument><expr><name>big_endian_64bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_BE64TOH</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_LE64TOH</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>uint64_t</name></type> <name>le64toh</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>little_endian_64bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>little_endian_64bits</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_DECL_LE64TOH</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// WORDS_BIGENDIAN</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_COMPAT_ENDIAN_H</comment>
</unit>
