<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/wallet/rpcwallet.h"><comment type="line">// Copyright (c) 2016-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_WALLET_RPCWALLET_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_WALLET_RPCWALLET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CRPCTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CWallet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JSONRPCRequest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LegacyScriptPubKeyMan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UniValue</name></decl>;</decl_stmt>
<struct_decl>struct <name>PartiallySignedTransaction</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>CTransaction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line" format="doxygen">//! Pointer to chain interface that needs to be declared as a global to be</comment>
<comment type="line" format="doxygen">//! accessible loadwallet and createwallet methods. Due to limitations of the</comment>
<comment type="line" format="doxygen">//! RPC framework, there's currently no direct way to pass in state to RPC</comment>
<comment type="line" format="doxygen">//! methods without globals.</comment>
<extern>extern interfaces::Chain* g_rpc_chain;</extern>

<decl_stmt><decl><type><name>void</name></type> <name>RegisterWalletRPCCommands</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Chain</name><operator>&amp;</operator> <name>chain</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>handlers</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Figures out what wallet, if any, to use for a JSONRPCRequest.
 *
 * @param[in] request JSONRPCRequest that wishes to access a wallet
 * @return nullptr if no wallet should be used, or a pointer to the CWallet
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JSONRPCRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CWallet</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>EnsureWalletIsUnlocked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>EnsureWalletIsAvailable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>avoidException</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LegacyScriptPubKeyMan</name><modifier>&amp;</modifier></type> <name>EnsureLegacyScriptPubKeyMan</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>UniValue</name></type> <name>getaddressinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>signrawtransactionwithwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//BITCOIN_WALLET_RPCWALLET_H</comment>
</unit>
