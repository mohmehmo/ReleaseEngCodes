<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/util/validation.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/validation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Convert ValidationState to a human-readable message for logging */</comment>
<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatStateMessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ValidationState</name> <modifier>&amp;</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
        <argument><expr><call><name><name>state</name><operator>.</operator><name>GetRejectReason</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><ternary><condition><expr><call><name><name>state</name><operator>.</operator><name>GetDebugMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal><operator>+</operator><call><name><name>state</name><operator>.</operator><name>GetDebugMessage</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMessageMagic</name> <init>= <expr><literal type="string">"Bitcoin Signed Message:\n"</literal></expr></init></decl>;</decl_stmt>
</unit>
