<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/script/sigcache.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sigcache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cuckoocache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/thread.hpp&gt;</cpp:file></cpp:include>

<namespace>namespace <block>{
<comment type="block" format="doxygen">/**
 * Valid signature cache, to avoid doing expensive ECDSA signature checking
 * twice for every transaction (once when accepted into memory pool, and
 * again when accepted into the block chain)
 */</comment>
<class>class <name>CSignatureCache</name>
<block>{<private type="default">
</private><private>private:
     <comment type="line" format="doxygen">//! Entries are SHA256(nonce || signature hash || public key || signature):</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>nonce</name></decl>;</decl_stmt>
    <typedef>typedef <type><name><name>CuckooCache</name><operator>::</operator><name>cache</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>SignatureCacheHasher</name></expr></argument>&gt;</argument_list></name></type> <name>map_type</name>;</typedef>
    <decl_stmt><decl><type><name>map_type</name></type> <name>setValid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>shared_mutex</name></name></type> <name>cs_sigcache</name></decl>;</decl_stmt>

</private><public>public:
    <constructor><name>CSignatureCache</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><call><name><name>nonce</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>void</name></type>
    <name>ComputeEntry</name><parameter_list>(<parameter><decl><type><name>uint256</name><modifier>&amp;</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>nonce</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pubkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vchSig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>bool</name></type>
    <name>Get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>erase</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>shared_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>shared_mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>cs_sigcache</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name><name>setValid</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>erase</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><name>uint256</name><modifier>&amp;</modifier></type> <name>entry</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>shared_mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>cs_sigcache</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>setValid</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><name>uint32_t</name></type> <name>setup_bytes</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>setValid</name><operator>.</operator><name>setup_bytes</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block">/* In previous versions of this code, signatureCache was a local static variable
 * in CachingTransactionSignatureChecker::VerifySignature.  We initialize
 * signatureCache outside of VerifySignature to avoid the atomic operation per
 * call overhead associated with local static variables even though
 * signatureCache could be made local to VerifySignature.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>CSignatureCache</name></type> <name>signatureCache</name></decl>;</decl_stmt>
}</block></namespace> <comment type="line">// namespace</comment>

<comment type="line">// To be called once in AppInitMain/BasicTestingSetup to initialize the</comment>
<comment type="line">// signatureCache.</comment>
<function><type><name>void</name></type> <name>InitSignatureCache</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,</comment>
    <comment type="line">// setup_bytes creates the minimum possible cache (2 elements).</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nMaxCacheSize</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxsigcachesize"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_SIG_CACHE_SIZE</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_MAX_SIG_CACHE_SIZE</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nElems</name> <init>= <expr><call><name><name>signatureCache</name><operator>.</operator><name>setup_bytes</name></name><argument_list>(<argument><expr><name>nMaxCacheSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>nElems</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint256</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">20</literal></expr></argument>, <argument><expr><operator>(</operator><name>nMaxCacheSize</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">20</literal></expr></argument>, <argument><expr><name>nElems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CachingTransactionSignatureChecker</name><operator>::</operator><name>VerifySignature</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>sighash</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>entry</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>signatureCache</name><operator>.</operator><name>ComputeEntry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sighash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>signatureCache</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>!</operator><name>store</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TransactionSignatureChecker</name><operator>::</operator><name>VerifySignature</name></name><argument_list>(<argument><expr><name>vchSig</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>sighash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>store</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>signatureCache</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
