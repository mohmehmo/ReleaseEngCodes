<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/test/test_main.cpp"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/apptests.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/rpcnestedtests.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/uritests.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/compattests.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/addressbooktests.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/wallettests.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTest&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_STATICPLUGIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtPlugin&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_QPA_PLATFORM_MINIMAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Q_IMPORT_PLUGIN</name><argument_list>(<argument><expr><name>QMinimalIntegrationPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_QPA_PLATFORM_XCB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Q_IMPORT_PLUGIN</name><argument_list>(<argument><expr><name>QXcbIntegrationPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_QPA_PLATFORM_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>Q_IMPORT_PLUGIN</name><argument_list>(<argument><expr><name>QWindowsIntegrationPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_QPA_PLATFORM_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>Q_IMPORT_PLUGIN</name><argument_list>(<argument><expr><name>QCocoaIntegrationPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// This is all you need to run all the tests</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Initialize persistent globals with the testing setup state for sanity.</comment>
    <comment type="line">// E.g. -datadir in gArgs is set to a temp directory dummy value (instead</comment>
    <comment type="line">// of defaulting to the default datadir), or globalChainParams is set to</comment>
    <comment type="line">// regtest params.</comment>
    <comment type="line">//</comment>
    <comment type="line">// All tests must use their own testing setup (if needed).</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BasicTestingSetup</name></type> <name>dummy</name><argument_list>{<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr></argument>}</argument_list></decl>;</decl_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Node</name></name></expr></argument>&gt;</argument_list></name></type> <name>node</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fInvalid</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Prefer the "minimal" platform for the test instead of the normal default</comment>
    <comment type="line">// platform ("xcb", "windows", or "cocoa") so tests can't unintentionally</comment>
    <comment type="line">// interfere with any background GUIs and don't require extra resources.</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"QT_QPA_PLATFORM"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_putenv_s</name><argument_list>(<argument><expr><literal type="string">"QT_QPA_PLATFORM"</literal></expr></argument>, <argument><expr><literal type="string">"minimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"QT_QPA_PLATFORM"</literal></expr></argument>, <argument><expr><literal type="string">"minimal"</literal></expr></argument>, <comment type="block">/* overwrite */</comment> <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Don't remove this, it's needed to access</comment>
    <comment type="line">// QApplication:: and QCoreApplication:: in the tests</comment>
    <decl_stmt><decl><type><name>BitcoinApplication</name></type> <name>app</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>setApplicationName</name></name><argument_list>(<argument><expr><literal type="string">"Bitcoin-Qt-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AppTests</name></type> <name>app_tests</name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>QTest</name><operator>::</operator><name>qExec</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>app_tests</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fInvalid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>URITests</name></type> <name>test1</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>QTest</name><operator>::</operator><name>qExec</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>test1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fInvalid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>RPCNestedTests</name></type> <name>test3</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>QTest</name><operator>::</operator><name>qExec</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>test3</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fInvalid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CompatTests</name></type> <name>test4</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>QTest</name><operator>::</operator><name>qExec</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>test4</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fInvalid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <decl_stmt><decl><type><name>WalletTests</name></type> <name>test5</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>QTest</name><operator>::</operator><name>qExec</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>test5</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fInvalid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>AddressBookTests</name></type> <name>test6</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>QTest</name><operator>::</operator><name>qExec</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>test6</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fInvalid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>fInvalid</name></expr>;</return>
</block_content>}</block></function>
</unit>
