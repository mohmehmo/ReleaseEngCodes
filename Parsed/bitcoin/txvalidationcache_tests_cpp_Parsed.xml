<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/txvalidationcache_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<function_decl><type><name>bool</name></type> <name>CheckInputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>TxValidationState</name> <modifier>&amp;</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinsViewCache</name> <modifier>&amp;</modifier></type><name>inputs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cacheSigStore</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cacheFullScriptStore</name></decl></parameter>, <parameter><decl><type><name>PrecomputedTransactionData</name><modifier>&amp;</modifier></type> <name>txdata</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>pvChecks</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>BOOST_AUTO_TEST_SUITE</name><argument_list>(<argument>tx_validationcache_tests</argument>)</argument_list></macro>

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>tx_mempool_block_doublespend</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Make sure skipping validation of transactions that were</comment>
    <comment type="line">// validated going into the memory pool does not allow</comment>
    <comment type="line">// double-spends in blocks to pass validation when they should not.</comment>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator>  <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>ToMemPool</name> <init>= <expr><lambda><capture>[<argument><name>this</name></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TxValidationState</name></type> <name>state</name></decl>;</decl_stmt>
        <return>return <expr><call><name>AcceptToMemoryPool</name><argument_list>(<argument><expr><operator>*</operator><name><name>m_node</name><operator>.</operator><name>mempool</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* plTxnReplaced */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* bypass_limits */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* nAbsurdFee */</comment>)</argument_list></call></expr>;</return>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <comment type="line">// Create a double-spend of mature coinbase txn:</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>spends</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>spends</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nVersion</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>m_coinbase_txns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>scriptPubKey</name></expr>;</expr_stmt>

        <comment type="line">// Sign:</comment>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name>SignatureHash</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spends</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>vchSig</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>

    <comment type="line">// Test 1: block with both of those transactions should be rejected.</comment>
    <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><name>spends</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Test 2: ... and should be rejected if spend1 is in the memory pool</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ToMemPool</name><argument_list>(<argument><expr><name><name>spends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><name>spends</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test 3: ... and should be rejected if spend2 is in the memory pool</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ToMemPool</name><argument_list>(<argument><expr><name><name>spends</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><name>spends</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Final sanity test: first spend in *m_node.mempool, second in block, that's OK:</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>oneSpend</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>oneSpend</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>spends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ToMemPool</name><argument_list>(<argument><expr><name><name>spends</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><name>oneSpend</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <comment type="line">// spends[1] should have been removed from the mempool when the</comment>
    <comment type="line">// block with spends[0] is accepted:</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// Run CheckInputs (using CoinsTip()) on the given transaction, for all script</comment>
<comment type="line">// flags.  Test that CheckInputs passes for all flags that don't overlap with</comment>
<comment type="line">// the failing_flags argument, but otherwise fails.</comment>
<comment type="line">// CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY (and future NOP codes that may</comment>
<comment type="line">// get reassigned) have an interaction with DISCOURAGE_UPGRADABLE_NOPS: if</comment>
<comment type="line">// the script flags used contain DISCOURAGE_UPGRADABLE_NOPS but don't contain</comment>
<comment type="line">// CHECKLOCKTIMEVERIFY (or CHECKSEQUENCEVERIFY), but the script does contain</comment>
<comment type="line">// OP_CHECKLOCKTIMEVERIFY (or OP_CHECKSEQUENCEVERIFY), then script execution</comment>
<comment type="line">// should fail.</comment>
<comment type="line">// Capture this interaction with the upgraded_nop argument: set it when evaluating</comment>
<comment type="line">// any script flag that is implemented as an upgraded NOP code.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTransaction</name> <operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>failing_flags</name></expr></argument>, <argument><expr><name>bool</name> <name>add_to_cache</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>PrecomputedTransactionData</name> <call><name>txdata</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>;
    <comment type="line">// If we add many more flags, this loop can get too expensive, but we can</comment>
    <comment type="line">// rewrite in the future to randomly pick a set of flags to evaluate.</comment>
    for <argument><expr><operator>(</operator><name>uint32_t</name> <name>test_flags</name><operator>=</operator><literal type="number">0</literal>; <name>test_flags</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>; <name>test_flags</name> <operator>+=</operator> <literal type="number">1</literal><operator>)</operator> <block>{
        <expr><name>TxValidationState</name> <name>state</name></expr>;
        <comment type="line">// Filter out incompatible flag choices</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>test_flags</name> <operator>&amp;</operator> <name>SCRIPT_VERIFY_CLEANSTACK</name><operator>)</operator></expr>)</condition> <expr_stmt><expr><block>{
            <comment type="line">// CLEANSTACK requires P2SH and WITNESS, see VerifyScript() in</comment>
            <comment type="line">// script/interpreter.cpp</comment>
            <expr><name>test_flags</name> <operator>|=</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr>;
        }</block></expr></expr_stmt></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>test_flags</name> <operator>&amp;</operator> <name>SCRIPT_VERIFY_WITNESS</name><operator>)</operator></expr>)</condition> <expr_stmt><expr><block>{
            <comment type="line">// WITNESS requires P2SH</comment>
            <expr><name>test_flags</name> <operator>|=</operator> <name>SCRIPT_VERIFY_P2SH</name></expr>;
        }</block>
        <name>bool</name> <name>ret</name> <operator>=</operator> <call><name>CheckInputs</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>test_flags</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>add_to_cache</name></expr></argument>, <argument><expr><name>txdata</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></if></if_stmt>
        <comment type="line">// CheckInputs should succeed iff test_flags doesn't intersect with</comment>
        <comment type="line">// failing_flags</comment>
        <name>bool</name> <name>expected_return_value</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>test_flags</name> <operator>&amp;</operator> <name>failing_flags</name><operator>)</operator></block></expr></argument>;
        <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>expected_return_value</name></expr></argument>)</argument_list></call></expr></argument>;

        <comment type="line">// Test the caching</comment>
        if <argument><expr><operator>(</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>add_to_cache</name><operator>)</operator> <block>{
            <comment type="line">// Check that we get a cache hit if the tx was valid</comment>
            <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name> <name>scriptchecks</name></expr>;
            <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckInputs</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>test_flags</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>add_to_cache</name></expr></argument>, <argument><expr><name>txdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scriptchecks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>scriptchecks</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        }</block></expr></argument> <if_stmt><else>else <expr_stmt><expr><block>{
            <comment type="line">// Check that we get script executions to check, if the transaction</comment>
            <comment type="line">// was invalid, or we didn't add to cache.</comment>
            <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name> <name>scriptchecks</name></expr>;
            <call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckInputs</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>test_flags</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>add_to_cache</name></expr></argument>, <argument><expr><name>txdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scriptchecks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></else></if_stmt></argument_list></decl></decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>scriptchecks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }
    }
}

BOOST_FIXTURE_TEST_CASE<expr_stmt><expr><operator>(</operator><name>checkinputs_test</name><operator>,</operator> <name>TestChain100Setup</name><operator>)</operator>
<block>{
    <comment type="line">// Test that passing CheckInputs with one set of script flags doesn't imply</comment>
    <comment type="line">// that we would pass again with a different set of flags.</comment>
    <expr><block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>InitScriptExecutionCache</name><argument_list>()</argument_list></call></expr>;
    }</block>

    <name>CScript</name> <name>p2pk_scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;
    <expr><name>CScript</name> <name>p2sh_scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>p2pk_scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>CScript</name> <name>p2pkh_scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>CScript</name> <name>p2wpkh_scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>p2pkh_scriptPubKey</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>FillableSigningProvider</name> <name>keystore</name></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKey</name></name><argument_list>(<argument><expr><name>coinbaseKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>p2pk_scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// flags to test: SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, SCRIPT_VERIFY_CHECKSEQUENCE_VERIFY, SCRIPT_VERIFY_NULLDUMMY, uncompressed pubkey thing</comment>

    <comment type="line">// Create 2 outputs that match the three scripts above, spending the first</comment>
    <comment type="line">// coinbase tx.</comment>
    <expr><name>CMutableTransaction</name> <name>spend_tx</name></expr>;

    <expr><name><name>spend_tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
    <expr><call><name><name>spend_tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>m_coinbase_txns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><call><name><name>spend_tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>p2sh_scriptPubKey</name></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>p2wpkh_scriptPubKey</name></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKLOCKTIMEVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_DROP</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
    <expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSEQUENCEVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_DROP</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;

    <comment type="line">// Sign, with a non-DER signature</comment>
    <expr><block>{
        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <name>vchSig</name></expr>;
        <expr><name>uint256</name> <name>hash</name> <operator>=</operator> <call><name>SignatureHash</name><argument_list>(<argument><expr><name>p2pk_scriptPubKey</name></expr></argument>, <argument><expr><name>spend_tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// padding byte makes this non-DER</comment>
        <expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>spend_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>vchSig</name></expr>;
    }</block>

    <comment type="line">// Test that invalidity under a set of flags doesn't preclude validity</comment>
    <comment type="line">// under other (eg consensus) flags.</comment>
    <comment type="line">// spend_tx is invalid according to DERSIG</comment>
    <block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;

        <expr><name>TxValidationState</name> <name>state</name></expr>;
        <expr><name>PrecomputedTransactionData</name> <call><name>ptd_spend_tx</name><argument_list>(<argument><expr><name>spend_tx</name></expr></argument>)</argument_list></call></expr>;

        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckInputs</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spend_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_DERSIG</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ptd_spend_tx</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// If we call again asking for scriptchecks (as happens in</comment>
        <comment type="line">// ConnectBlock), we should add a script check object for this -- we're</comment>
        <comment type="line">// not caching invalidity (if that changes, delete this test case).</comment>
        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name> <name>scriptchecks</name></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckInputs</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spend_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_DERSIG</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ptd_spend_tx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scriptchecks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>scriptchecks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// Test that CheckInputs returns true iff DERSIG-enforcing flags are</comment>
        <comment type="line">// not present.  Don't add these checks to the cache, so that we can</comment>
        <comment type="line">// test later that block validation works fine in the absence of cached</comment>
        <comment type="line">// successes.</comment>
        <expr><call><name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spend_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name> <operator>|</operator> <name>SCRIPT_VERIFY_LOW_S</name> <operator>|</operator> <name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;
    }</block>

    <comment type="line">// And if we produce a block with this tx, it should be valid (DERSIG not</comment>
    <comment type="line">// enabled yet), even though there's no cache entry.</comment>
    <name>CBlock</name> <name>block</name></expr>;

    <expr><name>block</name> <operator>=</operator> <call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{<expr><name>spend_tx</name></expr>}</block></expr></argument>, <argument><expr><name>p2pk_scriptPubKey</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetBestBlock</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Test P2SH: construct a transaction that is valid without P2SH, and</comment>
    <comment type="line">// then test validity with P2SH.</comment>
    <expr><block>{
        <expr><name>CMutableTransaction</name> <name>invalid_under_p2sh_tx</name></expr>;
        <expr><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
        <expr><call><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>spend_tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
        <expr><call><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
        <expr><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>p2pk_scriptPubKey</name></expr>;
        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <call><name>vchSig2</name><argument_list>(<argument><expr><call><name><name>p2pk_scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>p2pk_scriptPubKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_under_p2sh_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>vchSig2</name></expr>;

        <expr><call><name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>invalid_under_p2sh_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    }</block>

    <comment type="line">// Test CHECKLOCKTIMEVERIFY</comment>
    <block>{
        <expr><name>CMutableTransaction</name> <name>invalid_with_cltv_tx</name></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;
        <expr><call><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>spend_tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <literal type="number">0</literal></expr>;
        <expr><call><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>p2pk_scriptPubKey</name></expr>;

        <comment type="line">// Sign</comment>
        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <name>vchSig</name></expr>;
        <expr><name>uint256</name> <name>hash</name> <operator>=</operator> <call><name>SignatureHash</name><argument_list>(<argument><expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><name>invalid_with_cltv_tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>vchSig</name> <operator>&lt;&lt;</operator> <literal type="number">101</literal></expr>;

        <expr><call><name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>invalid_with_cltv_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// Make it valid, and check again</comment>
        <expr><name><name>invalid_with_cltv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>vchSig</name> <operator>&lt;&lt;</operator> <literal type="number">100</literal></expr>;
        <expr><name>TxValidationState</name> <name>state</name></expr>;
        <expr><name>PrecomputedTransactionData</name> <call><name>txdata</name><argument_list>(<argument><expr><name>invalid_with_cltv_tx</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckInputs</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>invalid_with_cltv_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>txdata</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    <comment type="line">// TEST CHECKSEQUENCEVERIFY</comment>
    <block>{
        <expr><name>CMutableTransaction</name> <name>invalid_with_csv_tx</name></expr>;
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;
        <expr><call><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>spend_tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <literal type="number">100</literal></expr>;
        <expr><call><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>p2pk_scriptPubKey</name></expr>;

        <comment type="line">// Sign</comment>
        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <name>vchSig</name></expr>;
        <expr><name>uint256</name> <name>hash</name> <operator>=</operator> <call><name>SignatureHash</name><argument_list>(<argument><expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><name>invalid_with_csv_tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>vchSig</name> <operator>&lt;&lt;</operator> <literal type="number">101</literal></expr>;

        <expr><call><name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>invalid_with_csv_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CHECKSEQUENCEVERIFY</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// Make it valid, and check again</comment>
        <expr><name><name>invalid_with_csv_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>vchSig</name> <operator>&lt;&lt;</operator> <literal type="number">100</literal></expr>;
        <expr><name>TxValidationState</name> <name>state</name></expr>;
        <expr><name>PrecomputedTransactionData</name> <call><name>txdata</name><argument_list>(<argument><expr><name>invalid_with_csv_tx</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckInputs</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>invalid_with_csv_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CHECKSEQUENCEVERIFY</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>txdata</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    <comment type="line">// TODO: add tests for remaining script flags</comment>

    <comment type="line">// Test that passing CheckInputs with a valid witness doesn't imply success</comment>
    <comment type="line">// for the same tx with a different witness.</comment>
    <block>{
        <expr><name>CMutableTransaction</name> <name>valid_with_witness_tx</name></expr>;
        <expr><name><name>valid_with_witness_tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
        <expr><call><name><name>valid_with_witness_tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>valid_with_witness_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>spend_tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>valid_with_witness_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
        <expr><call><name><name>valid_with_witness_tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>valid_with_witness_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;
        <expr><name><name>valid_with_witness_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>p2pk_scriptPubKey</name></expr>;

        <comment type="line">// Sign</comment>
        <expr><name>SignatureData</name> <name>sigdata</name></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ProduceSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureCreator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>valid_with_witness_tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">11</literal><operator>*</operator><name>CENT</name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>UpdateInput</name><argument_list>(<argument><expr><name><name>valid_with_witness_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// This should be valid under all script flags.</comment>
        <expr><call><name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>valid_with_witness_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// Remove the witness, and check that it is now invalid.</comment>
        <expr><name><name>valid_with_witness_tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>valid_with_witness_tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    }</block>

    <block>{
        <comment type="line">// Test a transaction with multiple inputs.</comment>
        <expr><name>CMutableTransaction</name> <name>tx</name></expr>;

        <expr><name><name>tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
        <expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>spend_tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>spend_tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
        <expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">22</literal><operator>*</operator><name>CENT</name></expr>;
        <expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>p2pk_scriptPubKey</name></expr>;

        <comment type="line">// Sign</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SignatureData</name></type> <name>sigdata</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ProduceSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureCreator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">11</literal><operator>*</operator><name>CENT</name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>spend_tx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>UpdateInput</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></for>}</block>

        <comment type="line">// This should be valid under all script flags</comment>
        <call><name>ValidateCheckInputsForAllFlags</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;

        <comment type="line">// Check that if the second input is invalid, but the first input is</comment>
        <comment type="line">// valid, the transaction is not cached.</comment>
        <comment type="line">// Invalidate vin[1]</comment>
        <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;

        <expr><name>TxValidationState</name> <name>state</name></expr>;
        <expr><name>PrecomputedTransactionData</name> <call><name>txdata</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;
        <comment type="line">// This transaction is now invalid under segwit, because of the second input.</comment>
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckInputs</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>txdata</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name> <name>scriptchecks</name></expr>;
        <comment type="line">// Make sure this transaction was not cached (ie because the first</comment>
        <comment type="line">// input was valid)</comment>
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckInputs</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>txdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scriptchecks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <comment type="line">// Should get 2 script checks back -- caching is on a whole-transaction basis.</comment>
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>scriptchecks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;
    }</block></expr></expr_stmt>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
