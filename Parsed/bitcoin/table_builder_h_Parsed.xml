<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/table_builder.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// TableBuilder provides the interface used to build a Table</comment>
<comment type="line">// (an immutable and sorted map from keys to values).</comment>
<comment type="line">//</comment>
<comment type="line">// Multiple threads can invoke const methods on a TableBuilder without</comment>
<comment type="line">// external synchronization, but if any of the threads may call a</comment>
<comment type="line">// non-const method, all threads accessing the same TableBuilder must use</comment>
<comment type="line">// external synchronization.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/status.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BlockBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockHandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WritableFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TableBuilder</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Create a builder that will store the contents of the table it is</comment>
  <comment type="line">// building in *file.  Does not close the file.  It is up to the</comment>
  <comment type="line">// caller to close the file after calling Finish().</comment>
  <expr_stmt><expr><call><name>TableBuilder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Options</name><operator>&amp;</operator> <name>options</name></expr></argument>, <argument><expr><name>WritableFile</name><operator>*</operator> <name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// REQUIRES: Either Finish() or Abandon() has been called.</comment>
  <expr_stmt><expr><operator>~</operator><call><name>TableBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Change the options used by this builder.  Note: only some of the</comment>
  <comment type="line">// option fields can be changed after construction.  If a field is</comment>
  <comment type="line">// not allowed to change dynamically and its value in the structure</comment>
  <comment type="line">// passed to the constructor is different from its value in the</comment>
  <comment type="line">// structure passed to this method, this method will return an error</comment>
  <comment type="line">// without changing any fields.</comment>
  <function_decl><type><name>Status</name></type> <name>ChangeOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Options</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Add key,value to the table being constructed.</comment>
  <comment type="line">// REQUIRES: key is after any previously added key according to comparator.</comment>
  <comment type="line">// REQUIRES: Finish(), Abandon() have not been called</comment>
  <function_decl><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Advanced operation: flush any buffered key/value pairs to file.</comment>
  <comment type="line">// Can be used to ensure that two adjacent entries never live in</comment>
  <comment type="line">// the same data block.  Most clients should not need to use this method.</comment>
  <comment type="line">// REQUIRES: Finish(), Abandon() have not been called</comment>
  <function_decl><type><name>void</name></type> <name>Flush</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Return non-ok iff some error has been detected.</comment>
  <expr_stmt><expr><name>Status</name> <macro><name>status</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Finish building the table.  Stops using the file passed to the</comment>
  <comment type="line">// constructor after this function returns.</comment>
  <comment type="line">// REQUIRES: Finish(), Abandon() have not been called</comment>
  <function_decl><type><name>Status</name></type> <name>Finish</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Indicate that the contents of this builder should be abandoned.  Stops</comment>
  <comment type="line">// using the file passed to the constructor after this function returns.</comment>
  <comment type="line">// If the caller is not going to call Finish(), it must call Abandon()</comment>
  <comment type="line">// before destroying this builder.</comment>
  <comment type="line">// REQUIRES: Finish(), Abandon() have not been called</comment>
  <function_decl><type><name>void</name></type> <name>Abandon</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Number of calls to Add() so far.</comment>
  <expr_stmt><expr><name>uint64_t</name> <macro><name>NumEntries</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Size of the file generated so far.  If invoked after a successful</comment>
  <comment type="line">// Finish() call, returns the size of the final generated file.</comment>
  <expr_stmt><expr><name>uint64_t</name> <macro><name>FileSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>bool</name> <macro><name>ok</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>status</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ok</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
  <function_decl><type><name>void</name></type> <name>WriteBlock</name><parameter_list>(<parameter><decl><type><name>BlockBuilder</name><modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>BlockHandle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>WriteRawBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>CompressionType</name></type></decl></parameter>, <parameter><decl><type><name>BlockHandle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

  <struct_decl>struct <name>Rep</name>;</struct_decl>
  <decl_stmt><decl><type><name>Rep</name><modifier>*</modifier></type> <name>rep_</name></decl>;</decl_stmt>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>TableBuilder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TableBuilder</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>TableBuilder</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_</comment>
</unit>
