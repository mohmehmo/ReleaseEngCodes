<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/table.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_TABLE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_TABLE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/iterator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockHandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Footer</name></decl>;</decl_stmt>
<struct_decl>struct <name>Options</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>RandomAccessFile</name></decl>;</decl_stmt>
<struct_decl>struct <name>ReadOptions</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>TableCache</name></decl>;</decl_stmt>

<comment type="line">// A Table is a sorted map from strings to strings.  Tables are</comment>
<comment type="line">// immutable and persistent.  A Table may be safely accessed from</comment>
<comment type="line">// multiple threads without external synchronization.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Table</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Attempt to open the table that is stored in bytes [0..file_size)</comment>
  <comment type="line">// of "file", and read the metadata entries necessary to allow</comment>
  <comment type="line">// retrieving data from the table.</comment>
  <comment type="line">//</comment>
  <comment type="line">// If successful, returns ok and sets "*table" to the newly opened</comment>
  <comment type="line">// table.  The client should delete "*table" when no longer needed.</comment>
  <comment type="line">// If there was an error while initializing the table, sets "*table"</comment>
  <comment type="line">// to NULL and returns a non-ok status.  Does not take ownership of</comment>
  <comment type="line">// "*source", but the client must ensure that "source" remains live</comment>
  <comment type="line">// for the duration of the returned table's lifetime.</comment>
  <comment type="line">//</comment>
  <comment type="line">// *file must remain live while this Table is in use.</comment>
  <function_decl><type><specifier>static</specifier> <name>Status</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Options</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>,
                     <parameter><decl><type><name>RandomAccessFile</name><modifier>*</modifier></type> <name>file</name></decl></parameter>,
                     <parameter><decl><type><name>uint64_t</name></type> <name>file_size</name></decl></parameter>,
                     <parameter><decl><type><name>Table</name><modifier>*</modifier><modifier>*</modifier></type> <name>table</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><operator>~</operator><call><name>Table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Returns a new iterator over the table contents.</comment>
  <comment type="line">// The result of NewIterator() is initially invalid (caller must</comment>
  <comment type="line">// call one of the Seek methods on the iterator before using it).</comment>
  <decl_stmt><decl><type><name>Iterator</name><modifier>*</modifier></type> <name>NewIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReadOptions</name><operator>&amp;</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>

  <comment type="line">// Given a key, return an approximate byte offset in the file where</comment>
  <comment type="line">// the data for that key begins (or would begin if the key were</comment>
  <comment type="line">// present in the file).  The returned value is in terms of file</comment>
  <comment type="line">// bytes, and so includes effects like compression of the underlying data.</comment>
  <comment type="line">// E.g., the approximate offset of the last key in the table will</comment>
  <comment type="line">// be close to the file length.</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ApproximateOffsetOf</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <struct_decl>struct <name>Rep</name>;</struct_decl>
  <decl_stmt><decl><type><name>Rep</name><modifier>*</modifier></type> <name>rep_</name></decl>;</decl_stmt>

  <function><type><name>explicit</name></type> <name>Table</name><parameter_list>(<parameter><decl><type><name>Rep</name><modifier>*</modifier></type> <name>rep</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>rep_</name> <operator>=</operator> <name>rep</name></expr>;</expr_stmt> </block_content>}</block></function>
  <function_decl><type><specifier>static</specifier> <name>Iterator</name><modifier>*</modifier></type> <name>BlockReader</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Calls (*handle_result)(arg, ...) with the entry found after a call</comment>
  <comment type="line">// to Seek(key).  May not make such a call if filter policy says</comment>
  <comment type="line">// that key is not present.</comment>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TableCache</name></decl>;</decl_stmt>
  <function_decl><type><name>Status</name></type> <name>InternalGet</name><parameter_list>(
      <parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>,
      <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
      <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handle_result</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


  <function_decl><type><name>void</name></type> <name>ReadMeta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Footer</name><modifier>&amp;</modifier></type> <name>footer</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ReadFilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>filter_handle_value</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>Table</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Table</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Table</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_TABLE_H_</comment>
</unit>
