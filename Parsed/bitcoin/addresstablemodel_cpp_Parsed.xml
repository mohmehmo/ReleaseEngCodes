<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/addresstablemodel.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/addresstablemodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFont&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDebug&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>QString</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>Send</name></name> <init>= <expr><literal type="string">"S"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>QString</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>Receive</name></name> <init>= <expr><literal type="string">"R"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>AddressTableEntry</name>
<block>{<public type="default">
    <enum>enum <name>Type</name> <block>{
        <decl><name>Sending</name></decl>,
        <decl><name>Receiving</name></decl>,
        <decl><name>Hidden</name></decl> <comment type="block">/* QSortFilterProxyModel will filter these out */</comment>
    }</block>;</enum>

    <decl_stmt><decl><type><name>Type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>label</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>address</name></decl>;</decl_stmt>

    <constructor><name>AddressTableEntry</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
    <constructor><name>AddressTableEntry</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>_label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>_address</name></decl></parameter>)</parameter_list><member_init_list>:
        <call><name>type</name><argument_list>(<argument><expr><name>_type</name></expr></argument>)</argument_list></call>, <call><name>label</name><argument_list>(<argument><expr><name>_label</name></expr></argument>)</argument_list></call>, <call><name>address</name><argument_list>(<argument><expr><name>_address</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
</public>}</block>;</struct>

<struct>struct <name>AddressTableEntryLessThan</name>
<block>{<public type="default">
    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AddressTableEntry</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AddressTableEntry</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <return>return <expr><name><name>a</name><operator>.</operator><name>address</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>address</name></name></expr>;</return>
    </block_content>}</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AddressTableEntry</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <return>return <expr><name><name>a</name><operator>.</operator><name>address</name></name> <operator>&lt;</operator> <name>b</name></expr>;</return>
    </block_content>}</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AddressTableEntry</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <return>return <expr><name>a</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>address</name></name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</struct>

<comment type="block">/* Determine address type from address purpose */</comment>
<function><type><specifier>static</specifier> <name><name>AddressTableEntry</name><operator>::</operator><name>Type</name></name></type> <name>translateTransactionType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>strPurpose</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>AddressTableEntry</name><operator>::</operator><name>Type</name></name></type> <name>addressType</name> <init>= <expr><name><name>AddressTableEntry</name><operator>::</operator><name>Hidden</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// "refund" addresses aren't shown, and change addresses aren't in mapAddressBook at all.</comment>
    <if_stmt><if>if <condition>(<expr><name>strPurpose</name> <operator>==</operator> <literal type="string">"send"</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>addressType</name> <operator>=</operator> <name><name>AddressTableEntry</name><operator>::</operator><name>Sending</name></name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>strPurpose</name> <operator>==</operator> <literal type="string">"receive"</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>addressType</name> <operator>=</operator> <name><name>AddressTableEntry</name><operator>::</operator><name>Receiving</name></name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>strPurpose</name> <operator>==</operator> <literal type="string">"unknown"</literal> <operator>||</operator> <name>strPurpose</name> <operator>==</operator> <literal type="string">""</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// if purpose not set, guess</comment>
        <expr_stmt><expr><name>addressType</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>isMine</name></expr> ?</condition><then> <expr><name><name>AddressTableEntry</name><operator>::</operator><name>Receiving</name></name></expr> </then><else>: <expr><name><name>AddressTableEntry</name><operator>::</operator><name>Sending</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>addressType</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Private implementation</comment>
<class>class <name>AddressTablePriv</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>AddressTableEntry</name></expr></argument>&gt;</argument_list></name></type> <name>cachedAddressTable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AddressTableModel</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

    <constructor><specifier>explicit</specifier> <name>AddressTablePriv</name><parameter_list>(<parameter><decl><type><name>AddressTableModel</name> <modifier>*</modifier></type><name>_parent</name></decl></parameter>)</parameter_list><member_init_list>:
        <call><name>parent</name><argument_list>(<argument><expr><name>_parent</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>void</name></type> <name>refreshAddressTable</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>address</name> <range>: <expr><call><name><name>wallet</name><operator>.</operator><name>getAddresses</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>AddressTableEntry</name><operator>::</operator><name>Type</name></name></type> <name>addressType</name> <init>= <expr><call><name>translateTransactionType</name><argument_list>(
                        <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>purpose</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>is_mine</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>AddressTableEntry</name><argument_list>(<argument><expr><name>addressType</name></expr></argument>,
                                  <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>dest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <comment type="line">// std::lower_bound() and std::upper_bound() require our cachedAddressTable list to be sorted in asc order</comment>
        <comment type="line">// Even though the map is already sorted this re-sorting step is needed because the originating map</comment>
        <comment type="line">// is sorted by binary address, not by base58() address.</comment>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>AddressTableEntryLessThan</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>updateEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>purpose</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Find address / label in model</comment>
        <decl_stmt><decl><type><name><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>AddressTableEntry</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>lower</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>lower_bound</name></name><argument_list>(
            <argument><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><call><name>AddressTableEntryLessThan</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>AddressTableEntry</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>upper</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>upper_bound</name></name><argument_list>(
            <argument><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><call><name>AddressTableEntryLessThan</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lowerIndex</name> <init>= <expr><operator>(</operator><name>lower</name> <operator>-</operator> <call><name><name>cachedAddressTable</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>upperIndex</name> <init>= <expr><operator>(</operator><name>upper</name> <operator>-</operator> <call><name><name>cachedAddressTable</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>inModel</name> <init>= <expr><operator>(</operator><name>lower</name> <operator>!=</operator> <name>upper</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AddressTableEntry</name><operator>::</operator><name>Type</name></name></type> <name>newEntryType</name> <init>= <expr><call><name>translateTransactionType</name><argument_list>(<argument><expr><name>purpose</name></expr></argument>, <argument><expr><name>isMine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch>switch<condition>(<expr><name>status</name></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name>CT_NEW</name></expr>:</case>
            <if_stmt><if>if<condition>(<expr><name>inModel</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>qWarning</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"AddressTablePriv::updateEntry: Warning: Got CT_NEW, but entry is already in model"</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>beginInsertRows</name></name><argument_list>(<argument><expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lowerIndex</name></expr></argument>, <argument><expr><name>lowerIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>lowerIndex</name></expr></argument>, <argument><expr><call><name>AddressTableEntry</name><argument_list>(<argument><expr><name>newEntryType</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>endInsertRows</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CT_UPDATED</name></expr>:</case>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>inModel</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>qWarning</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"AddressTablePriv::updateEntry: Warning: Got CT_UPDATED, but entry is not in model"</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>lower</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>newEntryType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>lower</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>emitDataChanged</name></name><argument_list>(<argument><expr><name>lowerIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CT_DELETED</name></expr>:</case>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>inModel</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>qWarning</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"AddressTablePriv::updateEntry: Warning: Got CT_DELETED, but entry is not in model"</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>beginRemoveRows</name></name><argument_list>(<argument><expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lowerIndex</name></expr></argument>, <argument><expr><name>upperIndex</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>endRemoveRows</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cachedAddressTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>AddressTableEntry</name> <modifier>*</modifier></type><name>index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <call><name><name>cachedAddressTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>&amp;</operator><name><name>cachedAddressTable</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
</public>}</block>;</class>

<constructor><name><name>AddressTableModel</name><operator>::</operator><name>AddressTableModel</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QAbstractTableModel</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>, <call><name>walletModel</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><name>columns</name> <operator>&lt;&lt;</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Label"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>priv</name> <operator>=</operator> <operator>new</operator> <call><name>AddressTablePriv</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>refreshAddressTable</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>AddressTableModel</name><operator>::</operator><name>~AddressTableModel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>delete</operator> <name>priv</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>int</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>rowCount</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>columnCount</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>columns</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QVariant</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>data</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>AddressTableEntry</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>AddressTableEntry</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>internalPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>DisplayRole</name></name> <operator>||</operator> <name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>EditRole</name></name></expr>)</condition>
    <block>{<block_content>
        <switch>switch<condition>(<expr><call><name><name>index</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name>Label</name></expr>:</case>
            <if_stmt><if>if<condition>(<expr><call><name><name>rec</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>DisplayRole</name></name></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(no label)"</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <return>return <expr><name><name>rec</name><operator>-&gt;</operator><name>label</name></name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        <case>case <expr><name>Address</name></expr>:</case>
            <return>return <expr><name><name>rec</name><operator>-&gt;</operator><name>address</name></name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>FontRole</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QFont</name></type> <name>font</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>index</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Address</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>fixedPitchFont</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>font</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>role</name> <operator>==</operator> <name>TypeRole</name></expr>)</condition>
    <block>{<block_content>
        <switch>switch<condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name><name>AddressTableEntry</name><operator>::</operator><name>Sending</name></name></expr>:</case>
            <return>return <expr><name>Send</name></expr>;</return>
        <case>case <expr><name><name>AddressTableEntry</name><operator>::</operator><name>Receiving</name></name></expr>:</case>
            <return>return <expr><name>Receive</name></expr>;</return>
        <default>default:</default> <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>setData</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QVariant</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>AddressTableEntry</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>AddressTableEntry</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>internalPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strPurpose</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>rec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>AddressTableEntry</name><operator>::</operator><name>Sending</name></name></expr> ?</condition><then> <expr><literal type="string">"send"</literal></expr> </then><else>: <expr><literal type="string">"receive"</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>EditRole</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>curAddress</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>rec</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>index</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Label</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Do nothing, if old label == new label</comment>
            <if_stmt><if>if<condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>label</name></name> <operator>==</operator> <call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>NO_CHANGES</name></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAddressBook</name><argument_list>(<argument><expr><name>curAddress</name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>strPurpose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name><name>index</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Address</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>newAddress</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Refuse to set invalid address, set error status and return false</comment>
            <if_stmt><if>if<condition>(<expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>CNoDestination</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>newAddress</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>INVALID_ADDRESS</name></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if>
            <comment type="line">// Do nothing, if old address == new address</comment>
            <if type="elseif">else if<condition>(<expr><name>newAddress</name> <operator>==</operator> <name>curAddress</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>NO_CHANGES</name></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Check for duplicate addresses to prevent accidental deletion of addresses, if you try</comment>
            <comment type="line">// to paste an existing address over another address (with a different label)</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>(
                    <argument><expr><name>newAddress</name></expr></argument>, <comment type="block">/* name= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <comment type="block">/* is_mine= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <comment type="block">/* purpose= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>DUPLICATE_ADDRESS</name></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if>
            <comment type="line">// Double-check that we're not overwriting a receiving address</comment>
            <if type="elseif">else if<condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>AddressTableEntry</name><operator>::</operator><name>Sending</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Remove old entry</comment>
                <expr_stmt><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delAddressBook</name><argument_list>(<argument><expr><name>curAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Add new entry with new address</comment>
                <expr_stmt><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAddressBook</name><argument_list>(<argument><expr><name>newAddress</name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>strPurpose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>QVariant</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>headerData</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>section</name></decl></parameter>, <parameter><decl><type><name><name>Qt</name><operator>::</operator><name>Orientation</name></name></type> <name>orientation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>orientation</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Horizontal</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>DisplayRole</name></name> <operator>&amp;&amp;</operator> <name>section</name> <operator>&lt;</operator> <call><name><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name><name>columns</name><index>[<expr><name>section</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>Qt</name><operator>::</operator><name>ItemFlags</name></name></type> <name><name>AddressTableModel</name><operator>::</operator><name>flags</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>Qt</name><operator>::</operator><name>NoItemFlags</name></name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>AddressTableEntry</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>AddressTableEntry</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>internalPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Qt</name><operator>::</operator><name>ItemFlags</name></name></type> <name>retval</name> <init>= <expr><name><name>Qt</name><operator>::</operator><name>ItemIsSelectable</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsEnabled</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// Can edit address and label for sending addresses,</comment>
    <comment type="line">// and only label for receiving addresses.</comment>
    <if_stmt><if>if<condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>AddressTableEntry</name><operator>::</operator><name>Sending</name></name> <operator>||</operator>
      <operator>(</operator><name><name>rec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>AddressTableEntry</name><operator>::</operator><name>Receiving</name></name> <operator>&amp;&amp;</operator> <call><name><name>index</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call><operator>==</operator><name>Label</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>retval</name> <operator>|=</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsEditable</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QModelIndex</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>index</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AddressTableEntry</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name><name>priv</name><operator>-&gt;</operator><name>index</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><call><name>createIndex</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><call><name><name>priv</name><operator>-&gt;</operator><name>index</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>updateEntry</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>purpose</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Update address book model from Bitcoin core</comment>
    <expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>updateEntry</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>isMine</name></expr></argument>, <argument><expr><name>purpose</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>addRow</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OutputType</name></type> <name>address_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strLabel</name> <init>= <expr><call><name><name>label</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strAddress</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>Send</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>walletModel</name><operator>-&gt;</operator><name>validateAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>INVALID_ADDRESS</name></expr>;</expr_stmt>
            <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Check for duplicate addresses</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>(
                    <argument><expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>strAddress</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="block">/* name= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <comment type="block">/* is_mine= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <comment type="block">/* purpose= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>DUPLICATE_ADDRESS</name></expr>;</expr_stmt>
                <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>

        <comment type="line">// Add entry</comment>
        <expr_stmt><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAddressBook</name><argument_list>(<argument><expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>strAddress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strLabel</name></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>Receive</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Generate a new address to associate with given label</comment>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNewDestination</name><argument_list>(<argument><expr><name>address_type</name></expr></argument>, <argument><expr><name>strLabel</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>WalletModel</name><operator>::</operator><name>UnlockContext</name></name></type> <name>ctx</name><argument_list>(<argument><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>requestUnlock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Unlock wallet failed or was cancelled</comment>
                <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>WALLET_UNLOCK_FAILURE</name></expr>;</expr_stmt>
                <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNewDestination</name><argument_list>(<argument><expr><name>address_type</name></expr></argument>, <argument><expr><name>strLabel</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>editStatus</name> <operator>=</operator> <name>KEY_GENERATION_FAILURE</name></expr>;</expr_stmt>
                <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>strAddress</name> <operator>=</operator> <call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>strAddress</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>removeRows</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AddressTableEntry</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name><name>priv</name><operator>-&gt;</operator><name>index</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>rec</name> <operator>||</operator> <name><name>rec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>AddressTableEntry</name><operator>::</operator><name>Receiving</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Can only remove one row at a time, and cannot remove rows not in model.</comment>
        <comment type="line">// Also refuse to remove receiving addresses.</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delAddressBook</name><argument_list>(<argument><expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>rec</name><operator>-&gt;</operator><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>labelForAddress</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getAddressData</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <comment type="block">/* purpose= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>purposeForAddress</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>purpose</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getAddressData</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <comment type="block">/* name= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>purpose</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>getAddressData</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>,
        <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
        <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>*</modifier></type> <name>purpose</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>destination</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <comment type="block">/* is_mine= */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>lookupAddress</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>QModelIndexList</name></type> <name>lst</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><call><name>index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Address</name></expr></argument>, <argument><expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>Qt</name><operator>::</operator><name>EditRole</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>MatchExactly</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>lst</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><call><name><name>lst</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>OutputType</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>GetDefaultAddressType</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultAddressType</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>void</name></type> <name><name>AddressTableModel</name><operator>::</operator><name>emitDataChanged</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>dataChanged</name><argument_list>(<argument><expr><call><name>index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name><name>columns</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>
</unit>
