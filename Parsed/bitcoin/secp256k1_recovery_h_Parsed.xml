<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/include/secp256k1_recovery.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_RECOVERY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_RECOVERY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"secp256k1.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Opaque data structured that holds a parsed ECDSA signature,
 *  supporting pubkey recovery.
 *
 *  The exact representation of data inside is implementation defined and not
 *  guaranteed to be portable between different platforms or versions. It is
 *  however guaranteed to be 65 bytes in size, and can be safely copied/moved.
 *  If you need to convert to a format suitable for storage or transmission, use
 *  the secp256k1_ecdsa_signature_serialize_* and
 *  secp256k1_ecdsa_signature_parse_* functions.
 *
 *  Furthermore, it is guaranteed that identical signatures (including their
 *  recoverability) will have identical representation, so they can be
 *  memcmp'ed.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>secp256k1_ecdsa_recoverable_signature</name>;</typedef>

<comment type="block" format="doxygen">/** Parse a compact ECDSA signature (64 bytes + recovery id).
 *
 *  Returns: 1 when the signature could be parsed, 0 otherwise
 *  Args: ctx:     a secp256k1 context object
 *  Out:  sig:     a pointer to a signature object
 *  In:   input64: a pointer to a 64-byte compact signature
 *        recid:   the recovery id (0, 1, 2 or 3)
 */</comment>
<function_decl><type><name>SECP256K1_API</name> <name>int</name></type> <name>secp256k1_ecdsa_recoverable_signature_parse_compact</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><name>secp256k1_ecdsa_recoverable_signature</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input64</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>recid</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>)</block_content> SECP256K1_ARG_NONNULL(2</block></extern>) <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Convert a recoverable signature into a normal signature.
 *
 *  Returns: 1
 *  Out: sig:    a pointer to a normal signature (cannot be NULL).
 *  In:  sigin:  a pointer to a recoverable signature (cannot be NULL).
 */</comment>
<function_decl><type><name>SECP256K1_API</name> <name>int</name></type> <name>secp256k1_ecdsa_recoverable_signature_convert</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><name>secp256k1_ecdsa_signature</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecdsa_recoverable_signature</name><modifier>*</modifier></type> <name>sigin</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>) <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Serialize an ECDSA signature in compact format (64 bytes + recovery id).
 *
 *  Returns: 1
 *  Args: ctx:      a secp256k1 context object
 *  Out:  output64: a pointer to a 64-byte array of the compact signature (cannot be NULL)
 *        recid:    a pointer to an integer to hold the recovery id (can be NULL).
 *  In:   sig:      a pointer to an initialized signature object (cannot be NULL)
 */</comment>
<function_decl><type><name>SECP256K1_API</name> <name>int</name></type> <name>secp256k1_ecdsa_recoverable_signature_serialize_compact</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output64</name></decl></parameter>,
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>recid</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecdsa_recoverable_signature</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>) <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Create a recoverable ECDSA signature.
 *
 *  Returns: 1: signature created
 *           0: the nonce generation function failed, or the private key was invalid.
 *  Args:    ctx:    pointer to a context object, initialized for signing (cannot be NULL)
 *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)
 *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)
 *           seckey: pointer to a 32-byte secret key (cannot be NULL)
 *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used
 *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)
 */</comment>
<function_decl><type><name>SECP256K1_API</name> <name>int</name></type> <name>secp256k1_ecdsa_sign_recoverable</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><name>secp256k1_ecdsa_recoverable_signature</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg32</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seckey</name></decl></parameter>,
    <parameter><decl><type><name>secp256k1_nonce_function</name></type> <name>noncefp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ndata</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>) <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Recover an ECDSA public key from a signature.
 *
 *  Returns: 1: public key successfully recovered (which guarantees a correct signature).
 *           0: otherwise.
 *  Args:    ctx:        pointer to a context object, initialized for verification (cannot be NULL)
 *  Out:     pubkey:     pointer to the recovered public key (cannot be NULL)
 *  In:      sig:        pointer to initialized signature that supports pubkey recovery (cannot be NULL)
 *           msg32:      the 32-byte message hash assumed to be signed (cannot be NULL)
 */</comment>
<function_decl><type><name>SECP256K1_API</name> <name>SECP256K1_WARN_UNUSED_RESULT</name> <name>int</name></type> <name>secp256k1_ecdsa_recover</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><name>secp256k1_pubkey</name> <modifier>*</modifier></type><name>pubkey</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecdsa_recoverable_signature</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg32</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>) <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_RECOVERY_H */</comment>
</unit>
