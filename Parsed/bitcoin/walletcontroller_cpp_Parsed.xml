<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/walletcontroller.cpp"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletcontroller.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/askpassphrasedialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/createwalletdialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/handler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMutexLocker&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QThread&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QWindow&gt;</cpp:file></cpp:include>

<constructor><name><name>WalletController</name><operator>::</operator><name>WalletController</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PlatformStyle</name><modifier>*</modifier></type> <name>platform_style</name></decl></parameter>, <parameter><decl><type><name>OptionsModel</name><modifier>*</modifier></type> <name>options_model</name></decl></parameter>, <parameter><decl><type><name>QObject</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>
    , <call><name>m_activity_thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>QThread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    , <call><name>m_activity_worker</name><argument_list>(<argument><expr><operator>new</operator> <name>QObject</name></expr></argument>)</argument_list></call>
    , <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call>
    , <call><name>m_platform_style</name><argument_list>(<argument><expr><name>platform_style</name></expr></argument>)</argument_list></call>
    , <call><name>m_options_model</name><argument_list>(<argument><expr><name>options_model</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><name>m_handler_load_wallet</name> <operator>=</operator> <call><name><name>m_node</name><operator>.</operator><name>handleLoadWallet</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>getOrCreateWallet</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wallet</name> <range>: <expr><call><name><name>m_node</name><operator>.</operator><name>getWallets</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>getOrCreateWallet</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>m_activity_worker</name><operator>-&gt;</operator><name>moveToThread</name></name><argument_list>(<argument><expr><name>m_activity_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_activity_thread</name><operator>-&gt;</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<comment type="line">// Not using the default destructor because not all member types definitions are</comment>
<comment type="line">// available in the header, just forward declared.</comment>
<destructor><name><name>WalletController</name><operator>::</operator><name>~WalletController</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>m_activity_thread</name><operator>-&gt;</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_activity_thread</name><operator>-&gt;</operator><name>wait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>m_activity_worker</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletModel</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name><name>WalletController</name><operator>::</operator><name>getOpenWallets</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>QMutexLocker</name></type> <name>locker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>m_wallets</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name><name>WalletController</name><operator>::</operator><name>listWalletDir</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>QMutexLocker</name></type> <name>locker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>wallets</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name> <range>: <expr><call><name><name>m_node</name><operator>.</operator><name>listWalletDir</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>wallets</name><index>[<expr><name>name</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name> <range>: <expr><name>m_wallets</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>wallets</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWalletName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>wallets</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>wallets</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>WalletController</name><operator>::</operator><name>closeWallet</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name></decl></parameter>, <parameter><decl><type><name>QWidget</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QMessageBox</name></type> <name>box</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>box</name><operator>.</operator><name>setWindowTitle</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Close wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>box</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Are you sure you wish to close the wallet &lt;i&gt;%1&lt;/i&gt;?"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>box</name><operator>.</operator><name>setInformativeText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Closing the wallet for too long can result in having to resync the entire chain if pruning is enabled."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>box</name><operator>.</operator><name>setStandardButtons</name></name><argument_list>(<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name><operator>|</operator><name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>box</name><operator>.</operator><name>setDefaultButton</name></name><argument_list>(<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>box</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// First remove wallet from node.</comment>
    <expr_stmt><expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Now release the model.</comment>
    <expr_stmt><expr><call><name>removeAndDeleteWallet</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>WalletModel</name><modifier>*</modifier></type> <name><name>WalletController</name><operator>::</operator><name>getOrCreateWallet</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QMutexLocker</name></type> <name>locker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Return model instance if exists.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_wallets</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>getWalletName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name> <range>: <expr><name>m_wallets</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWalletName</name><argument_list>()</argument_list></call> <operator>==</operator> <name>name</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>wallet_model</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Instantiate model and register it.</comment>
    <decl_stmt><decl><type><name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name> <init>= <expr><operator>new</operator> <call><name>WalletModel</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m_node</name></expr></argument>, <argument><expr><name>m_platform_style</name></expr></argument>, <argument><expr><name>m_options_model</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Handler callback runs in a different thread so fix wallet model thread affinity.</comment>
    <expr_stmt><expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>moveToThread</name></name><argument_list>(<argument><expr><call><name>thread</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>setParent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_wallets</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// WalletModel::startPollBalance needs to be called in a thread managed by</comment>
    <comment type="line">// Qt because of startTimer. Considering the current thread can be a RPC</comment>
    <comment type="line">// thread, better delegate the calling to Qt with Qt::AutoConnection.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>called</name> <init>= <expr><call><name><name>QMetaObject</name><operator>::</operator><name>invokeMethod</name></name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>, <argument><expr><literal type="string">"startPollBalance"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>called</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletModel</name><operator>::</operator><name>unload</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>, <argument><name>wallet_model</name></argument>]</capture> <block>{<block_content>
        <comment type="line">// Defer removeAndDeleteWallet when no modal widget is active.</comment>
        <comment type="line">// TODO: remove this workaround by removing usage of QDiallog::exec.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>QApplication</name><operator>::</operator><name>activeModalWidget</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>qApp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QApplication</name><operator>::</operator><name>focusWindowChanged</name></name></expr></argument>, <argument><expr><name>wallet_model</name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>, <argument><name>wallet_model</name></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>QApplication</name><operator>::</operator><name>activeModalWidget</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>removeAndDeleteWallet</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></lambda></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>QueuedConnection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>removeAndDeleteWallet</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Re-emit coinsSent signal from wallet model.</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletModel</name><operator>::</operator><name>coinsSent</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletController</name><operator>::</operator><name>coinsSent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Notify walletAdded signal on the GUI thread.</comment>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>walletAdded</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <return>return <expr><name>wallet_model</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>WalletController</name><operator>::</operator><name>removeAndDeleteWallet</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Unregister wallet model.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QMutexLocker</name></type> <name>locker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m_wallets</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>m_wallets</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_wallets</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>walletRemoved</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Currently this can trigger the unload since the model can hold the last</comment>
    <comment type="line">// CWallet shared pointer.</comment>
    <expr_stmt><expr><operator>delete</operator> <name>wallet_model</name></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>WalletControllerActivity</name><operator>::</operator><name>WalletControllerActivity</name></name><parameter_list>(<parameter><decl><type><name>WalletController</name><modifier>*</modifier></type> <name>wallet_controller</name></decl></parameter>, <parameter><decl><type><name>QWidget</name><modifier>*</modifier></type> <name>parent_widget</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>QObject</name><argument_list>(<argument><expr><name>wallet_controller</name></expr></argument>)</argument_list></call>
    , <call><name>m_wallet_controller</name><argument_list>(<argument><expr><name>wallet_controller</name></expr></argument>)</argument_list></call>
    , <call><name>m_parent_widget</name><argument_list>(<argument><expr><name>parent_widget</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<destructor><name><name>WalletControllerActivity</name><operator>::</operator><name>~WalletControllerActivity</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>delete</operator> <name>m_progress_dialog</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>WalletControllerActivity</name><operator>::</operator><name>showProgressDialog</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>label_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>m_progress_dialog</name> <operator>=</operator> <operator>new</operator> <call><name>QProgressDialog</name><argument_list>(<argument><expr><name>m_parent_widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m_progress_dialog</name><operator>-&gt;</operator><name>setLabelText</name></name><argument_list>(<argument><expr><name>label_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_progress_dialog</name><operator>-&gt;</operator><name>setRange</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_progress_dialog</name><operator>-&gt;</operator><name>setCancelButton</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_progress_dialog</name><operator>-&gt;</operator><name>setWindowModality</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ApplicationModal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>PolishProgressDialog</name></name><argument_list>(<argument><expr><name>m_progress_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>CreateWalletActivity</name><operator>::</operator><name>CreateWalletActivity</name></name><parameter_list>(<parameter><decl><type><name>WalletController</name><modifier>*</modifier></type> <name>wallet_controller</name></decl></parameter>, <parameter><decl><type><name>QWidget</name><modifier>*</modifier></type> <name>parent_widget</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>WalletControllerActivity</name><argument_list>(<argument><expr><name>wallet_controller</name></expr></argument>, <argument><expr><name>parent_widget</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>m_passphrase</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>MAX_PASSPHRASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>CreateWalletActivity</name><operator>::</operator><name>~CreateWalletActivity</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>delete</operator> <name>m_create_wallet_dialog</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>m_passphrase_dialog</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>CreateWalletActivity</name><operator>::</operator><name>askPassphrase</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>m_passphrase_dialog</name> <operator>=</operator> <operator>new</operator> <call><name>AskPassphraseDialog</name><argument_list>(<argument><expr><name><name>AskPassphraseDialog</name><operator>::</operator><name>Encrypt</name></name></expr></argument>, <argument><expr><name>m_parent_widget</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_passphrase_dialog</name><operator>-&gt;</operator><name>setWindowModality</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ApplicationModal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_passphrase_dialog</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_passphrase_dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QObject</name><operator>::</operator><name>destroyed</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><name>m_passphrase_dialog</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_passphrase_dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QDialog</name><operator>::</operator><name>accepted</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name>createWallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_passphrase_dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QDialog</name><operator>::</operator><name>rejected</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <decl_stmt><decl><type><name>Q_EMIT</name> <name>finished</name>(</type></decl>);</decl_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CreateWalletActivity</name><operator>::</operator><name>createWallet</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>showProgressDialog</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Creating Wallet &lt;b&gt;%1&lt;/b&gt;..."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>m_create_wallet_dialog</name><operator>-&gt;</operator><name>walletName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toHtmlEscaped</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name> <init>= <expr><call><name><name>m_create_wallet_dialog</name><operator>-&gt;</operator><name>walletName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_create_wallet_dialog</name><operator>-&gt;</operator><name>isDisablePrivateKeysChecked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_create_wallet_dialog</name><operator>-&gt;</operator><name>isMakeBlankWalletChecked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WALLET_FLAG_BLANK_WALLET</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><call><name>worker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>, <argument><name>name</name></argument>, <argument><name>flags</name></argument>]</capture> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name> <name>wallet</name></type></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WalletCreationStatus</name> <name>status</name> = <name>node</name>(</type></decl>).createWallet(m_passphrase<operator>,</operator> flags<operator>,</operator> name<operator>,</operator> m_error_message<operator>,</operator> m_warning_message<operator>,</operator> wallet</decl_stmt>)</block_content></block></lambda></expr></argument>;

        if <argument><expr><operator>(</operator><name>status</name> <operator>==</operator> <name><name>WalletCreationStatus</name><operator>::</operator><name>SUCCESS</name></name><operator>)</operator> <name>m_wallet_model</name> <operator>=</operator> <call><name><name>m_wallet_controller</name><operator>-&gt;</operator><name>getOrCreateWallet</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

        <argument><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CreateWalletActivity</name><operator>::</operator><name>finish</name></name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
    </block_content>}</block></function>)<empty_stmt>;</empty_stmt>
}

void <macro><name>CreateWalletActivity</name></macro><expr_stmt><expr><name><operator>::</operator><name>finish</name></name><operator>(</operator><operator>)</operator>
<block>{
    <expr><call><name><name>m_progress_dialog</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_error_message</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>m_parent_widget</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Create wallet failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>m_error_message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>m_warning_message</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>warning</name></name><argument_list>(<argument><expr><name>m_parent_widget</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Create wallet warning"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>Join</name><argument_list>(<argument><expr><name>m_warning_message</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>m_wallet_model</name></expr>)</condition><block type="pseudo"><block_content> <function_decl><type><name>Q_EMIT</name></type> <name>created</name><parameter_list>(<parameter><decl><type><name>m_wallet_model</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if></if_stmt>

    <function_decl><type><name>Q_EMIT</name></type> <name>finished</name><parameter_list>()</parameter_list>;</function_decl>
}

void <macro><name>CreateWalletActivity</name></macro><expr_stmt><expr><name><operator>::</operator><name>create</name></name><operator>(</operator><operator>)</operator>
<block>{
    <expr><name>m_create_wallet_dialog</name> <operator>=</operator> <operator>new</operator> <call><name>CreateWalletDialog</name><argument_list>(<argument><expr><name>m_parent_widget</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>m_create_wallet_dialog</name><operator>-&gt;</operator><name>setWindowModality</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ApplicationModal</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>m_create_wallet_dialog</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;

    <expr><call><name>connect</name><argument_list>(<argument><expr><name>m_create_wallet_dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QObject</name><operator>::</operator><name>destroyed</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><name>m_create_wallet_dialog</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    <expr_stmt/>}</block_content></block></lambda></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>connect</name><argument_list>(<argument><expr><name>m_create_wallet_dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QDialog</name><operator>::</operator><name>rejected</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <decl_stmt><decl><type><name>Q_EMIT</name> <name>finished</name>(</type></decl>);</decl_stmt>
    <expr_stmt/>}</block_content></block></lambda></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>connect</name><argument_list>(<argument><expr><name>m_create_wallet_dialog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QDialog</name><operator>::</operator><name>accepted</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>m_create_wallet_dialog</name><operator>-&gt;</operator><name>isEncryptWalletChecked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>askPassphrase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content> else <block>{<block_content>
            <expr_stmt><expr><call><name>createWallet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
    }</block></block></if></if_stmt>)</block_content></block></lambda></expr></argument>;
}</argument_list></call>

<call><name><name>OpenWalletActivity</name><operator>::</operator><name>OpenWalletActivity</name></name><argument_list>(<argument><expr><name>WalletController</name><operator>*</operator> <name>wallet_controller</name></expr></argument>, <argument><expr><name>QWidget</name><operator>*</operator> <name>parent_widget</name></expr></argument>)</argument_list></call>
    <operator>:</operator> <macro><name>WalletControllerActivity</name><argument_list>(<argument>wallet_controller</argument>, <argument>parent_widget</argument>)</argument_list></macro>
<block>{
}</block>

<name>void</name> <macro><name>OpenWalletActivity</name></macro><name><operator>::</operator><name>finish</name></name><operator>(</operator><operator>)</operator>
<block>{
    <expr><call><name><name>m_progress_dialog</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_error_message</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>m_parent_widget</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open wallet failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>m_error_message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr> <if_stmt><if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>m_warning_message</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>warning</name></name><argument_list>(<argument><expr><name>m_parent_widget</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open wallet warning"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>Join</name><argument_list>(<argument><expr><name>m_warning_message</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>m_wallet_model</name></expr>)</condition><block type="pseudo"><block_content> <function_decl><type><name>Q_EMIT</name></type> <name>opened</name><parameter_list>(<parameter><decl><type><name>m_wallet_model</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if></if_stmt>

    <function_decl><type><name>Q_EMIT</name></type> <name>finished</name><parameter_list>()</parameter_list>;</function_decl>
}

void <macro><name>OpenWalletActivity</name></macro><expr_stmt><expr><name><operator>::</operator><name>open</name></name><operator>(</operator><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>path</name><operator>)</operator>
<block>{
    <expr><name>QString</name> <name>name</name> <operator>=</operator> <call><name><name>path</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"["</literal><operator>+</operator><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"default wallet"</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"]"</literal></expr></argument>)</argument_list></call> <operator>:</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>showProgressDialog</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Opening Wallet &lt;b&gt;%1&lt;/b&gt;..."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>toHtmlEscaped</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>worker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>, <argument><name>path</name></argument>]</capture> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name> <name>wallet</name> = <name>node</name>(</type></decl>).loadWallet(path<operator>,</operator> m_error_message<operator>,</operator> m_warning_message</decl_stmt>)</block_content></block></lambda></expr></argument>;

        if <argument><expr><operator>(</operator><name>wallet</name><operator>)</operator> <name>m_wallet_model</name> <operator>=</operator> <call><name><name>m_wallet_controller</name><operator>-&gt;</operator><name>getOrCreateWallet</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

        <argument><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OpenWalletActivity</name><operator>::</operator><name>finish</name></name></expr></argument>)</argument_list></call></expr></argument>;
    }</argument_list></call></expr>)</block></expr>;</expr_stmt>
}
</unit>
