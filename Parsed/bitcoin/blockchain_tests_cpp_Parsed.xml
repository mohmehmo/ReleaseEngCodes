<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/blockchain_tests.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Equality between doubles is imprecise. Comparison should be done
 * with a small threshold of tolerance, rather than exact equality.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>DoubleEquals</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>epsilon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>abs</name></name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>epsilon</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>CreateBlockIndexWithNbits</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name> <init>= <expr><operator>new</operator> <call><name>CBlockIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">46367</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block_index</name><operator>-&gt;</operator><name>nTime</name></name> <operator>=</operator> <literal type="number">1269211443</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block_index</name><operator>-&gt;</operator><name>nBits</name></name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
    <return>return <expr><name>block_index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RejectDifficultyMismatch</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>difficulty</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>expected_difficulty</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(
        <argument><expr><call><name>DoubleEquals</name><argument_list>(<argument><expr><name>difficulty</name></expr></argument>, <argument><expr><name>expected_difficulty</name></expr></argument>, <argument><expr><literal type="number">0.00001</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"Difficulty was "</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>difficulty</name></expr></argument>)</argument_list></call>
            <operator>+</operator> <literal type="string">" but was expected to be "</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>expected_difficulty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Given a BlockIndex with the provided nbits,
 * verify that the expected difficulty results.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>TestDifficulty</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>expected_difficulty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name> <init>= <expr><call><name>CreateBlockIndexWithNbits</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>difficulty</name> <init>= <expr><call><name>GetDifficulty</name><argument_list>(<argument><expr><name>block_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>block_index</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RejectDifficultyMismatch</name><argument_list>(<argument><expr><name>difficulty</name></expr></argument>, <argument><expr><name>expected_difficulty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>blockchain_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_difficulty_for_very_low_target</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>TestDifficulty</name><argument_list>(<argument><expr><literal type="number">0x1f111111</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_difficulty_for_low_target</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>TestDifficulty</name><argument_list>(<argument><expr><literal type="number">0x1ef88f6f</literal></expr></argument>, <argument><expr><literal type="number">0.000016</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_difficulty_for_mid_target</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>TestDifficulty</name><argument_list>(<argument><expr><literal type="number">0x1df88f6f</literal></expr></argument>, <argument><expr><literal type="number">0.004023</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_difficulty_for_high_target</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>TestDifficulty</name><argument_list>(<argument><expr><literal type="number">0x1cf88f6f</literal></expr></argument>, <argument><expr><literal type="number">1.029916</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_difficulty_for_very_high_target</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>TestDifficulty</name><argument_list>(<argument><expr><literal type="number">0x12345678</literal></expr></argument>, <argument><expr><literal type="number">5913134931067755359633408.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
