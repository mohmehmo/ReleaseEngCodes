<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/univalue/lib/univalue.cpp"><comment type="line">// Copyright 2014 BitPay Inc.</comment>
<comment type="line">// Copyright 2015 Bitcoin Core Developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"univalue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name></type> <name>NullUniValue</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name><name>UniValue</name><operator>::</operator><name>clear</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VNULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setNull</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setBool</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VBOOL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val_</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validNumStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>tokenVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>consumed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>jtokentype</name></name></type> <name>tt</name> <init>= <expr><call><name>getJsonToken</name><argument_list>(<argument><expr><name>tokenVal</name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>tt</name> <operator>==</operator> <name>JTOK_NUMBER</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setNumStr</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validNumStr</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VNUM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>val_</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setInt</name></name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostringstream</name></name></type> <name>oss</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <name>val_</name></expr>;</expr_stmt>

    <return>return <expr><call><name>setNumStr</name><argument_list>(<argument><expr><call><name><name>oss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setInt</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostringstream</name></name></type> <name>oss</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <name>val_</name></expr>;</expr_stmt>

    <return>return <expr><call><name>setNumStr</name><argument_list>(<argument><expr><call><name><name>oss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setFloat</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostringstream</name></name></type> <name>oss</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>setprecision</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>val_</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>setNumStr</name><argument_list>(<argument><expr><call><name><name>oss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VNUM</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setStr</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VSTR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>val_</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setArray</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VARR</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>setObject</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VOBJ</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>push_back</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VARR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>push_backV</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VARR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>UniValue</name><operator>::</operator><name>__pushKV</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>pushKV</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>val_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>findKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>val_</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>__pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>pushKVs</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name> <operator>||</operator> <name><name>obj</name><operator>.</operator><name>typ</name></name> <operator>!=</operator> <name>VOBJ</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>obj</name><operator>.</operator><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>__pushKV</name><argument_list>(<argument><expr><name><name>obj</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>obj</name><operator>.</operator><name>values</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>UniValue</name><operator>::</operator><name>getObjMap</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>,<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>kv</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>kv</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>kv</name><index>[<expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>findKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>&amp;</modifier></type> <name>retIdx</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>retIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>checkObject</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>,<argument><expr><name><name>UniValue</name><operator>::</operator><name>VType</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>,<argument><expr><name><name>UniValue</name><operator>::</operator><name>VType</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
         <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>t</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>findKey</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>values</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name><name>UniValue</name><operator>::</operator><name>operator<name>[]</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>findKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name><name>values</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name><name>UniValue</name><operator>::</operator><name>operator<name>[]</name></name></name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name> <operator>&amp;&amp;</operator> <name>typ</name> <operator>!=</operator> <name>VARR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name><name>values</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uvTypeName</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VType</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>UniValue</name><operator>::</operator><name>VNULL</name></name></expr>:</case> <return>return <expr><literal type="string">"null"</literal></expr>;</return>
    <case>case <expr><name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr>:</case> <return>return <expr><literal type="string">"bool"</literal></expr>;</return>
    <case>case <expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr>:</case> <return>return <expr><literal type="string">"object"</literal></expr>;</return>
    <case>case <expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr>:</case> <return>return <expr><literal type="string">"array"</literal></expr>;</return>
    <case>case <expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr>:</case> <return>return <expr><literal type="string">"string"</literal></expr>;</return>
    <case>case <expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>:</case> <return>return <expr><literal type="string">"number"</literal></expr>;</return>
    </block_content>}</block></switch>

    <comment type="line">// not reached</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>find_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>obj</name><operator>.</operator><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>values</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

</unit>
