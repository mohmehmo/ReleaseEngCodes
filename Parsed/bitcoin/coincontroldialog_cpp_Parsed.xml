<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/coincontroldialog.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/coincontroldialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/forms/ui_coincontroldialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/addresstablemodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/platformstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coincontrol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCheckBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCursor&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDialogButtonBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFlags&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QIcon&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSettings&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTreeWidget&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>payAmounts</name></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

<function type="operator"><type><name>bool</name></type> <name><name>CCoinControlWidgetItem</name><operator>::</operator><name>operator<name>&lt;</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QTreeWidgetItem</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>column</name> <init>= <expr><call><name>treeWidget</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>sortColumn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <name><name>CoinControlDialog</name><operator>::</operator><name>COLUMN_AMOUNT</name></name> <operator>||</operator> <name>column</name> <operator>==</operator> <name><name>CoinControlDialog</name><operator>::</operator><name>COLUMN_DATE</name></name> <operator>||</operator> <name>column</name> <operator>==</operator> <name><name>CoinControlDialog</name><operator>::</operator><name>COLUMN_CONFIRMATIONS</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>data</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>UserRole</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>other</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>UserRole</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>QTreeWidgetItem</name><operator>::</operator><name>operator<name>&lt;</name></name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>CoinControlDialog</name><operator>::</operator><name>CoinControlDialog</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlatformStyle</name> <modifier>*</modifier></type><name>_platformStyle</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QDialog</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>ui</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Ui</name><operator>::</operator><name>CoinControlDialog</name></name></expr></argument>)</argument_list></call>,
    <call><name>model</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>platformStyle</name><argument_list>(<argument><expr><name>_platformStyle</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>setupUi</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// context menu actions</comment>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>copyAddressAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy address"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>copyLabelAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy label"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>copyAmountAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy amount"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><name>copyTransactionHashAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy transaction ID"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// we need to enable/disable this</comment>
             <expr_stmt><expr><name>lockAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Lock unspent"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                        <comment type="line">// we need to enable/disable this</comment>
             <expr_stmt><expr><name>unlockAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unlock unspent"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// we need to enable/disable this</comment>

    <comment type="line">// context menu</comment>
    <expr_stmt><expr><name>contextMenu</name> <operator>=</operator> <operator>new</operator> <call><name>QMenu</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>copyAddressAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>copyLabelAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>copyAmountAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>copyTransactionHashAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>lockAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>unlockAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// context menu signals</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>customContextMenuRequested</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>showMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>copyAddressAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>copyAddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>copyLabelAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>copyLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>copyAmountAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>copyAmount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>copyTransactionHashAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>copyTransactionHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>lockAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>lockCoin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>unlockAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>unlockCoin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// clipboard actions</comment>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardQuantityAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy quantity"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardAmountAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy amount"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardFeeAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy fee"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardAfterFeeAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy after fee"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardBytesAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy bytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardLowOutputAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy dust"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardChangeAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy change"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardQuantityAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>clipboardQuantity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardAmountAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>clipboardAmount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardFeeAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>clipboardFee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardAfterFeeAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>clipboardAfterFee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardBytesAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>clipboardBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardLowOutputAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>clipboardLowOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardChangeAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>clipboardChange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlQuantity</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardQuantityAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAmount</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardAmountAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlFee</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardFeeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAfterFee</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardAfterFeeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlBytes</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardBytesAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlLowOutput</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardLowOutputAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChange</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardChangeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// toggle tree/list mode</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>radioTreeMode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QRadioButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>radioTreeMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>radioListMode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QRadioButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>radioListMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// click on checkbox</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTreeWidget</name><operator>::</operator><name>itemChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>viewItemChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// click on header</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>header</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setSectionsClickable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>header</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QHeaderView</name><operator>::</operator><name>sectionClicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>headerSectionClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ok button</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>buttonBox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QDialogButtonBox</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>buttonBoxClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// (un)select all</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>pushButtonSelectAll</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CoinControlDialog</name><operator>::</operator><name>buttonSelectAllClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name>COLUMN_AMOUNT</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>, <argument><expr><literal type="number">190</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name>COLUMN_DATE</name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name>COLUMN_CONFIRMATIONS</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// default view is sorted by amount desc</comment>
    <expr_stmt><expr><call><name>sortView</name><argument_list>(<argument><expr><name>COLUMN_AMOUNT</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>DescendingOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// restore list mode and sortorder as a convenience feature</comment>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlMode"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlMode"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBool</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioTreeMode</name><operator>-&gt;</operator><name>click</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlSortColumn"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlSortOrder"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sortView</name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlSortColumn"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>Qt</name><operator>::</operator><name>SortOrder</name></name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlSortOrder"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>CoinControlDialog</name><operator>::</operator><name>~CoinControlDialog</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlMode"</literal></expr></argument>, <argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioListMode</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlSortColumn"</literal></expr></argument>, <argument><expr><name>sortColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nCoinControlSortOrder"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>delete</operator> <name>ui</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>setModel</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name> <modifier>*</modifier></type><name>_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>_model</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>_model</name> <operator>&amp;&amp;</operator> <call><name><name>_model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>_model</name><operator>-&gt;</operator><name>getAddressTableModel</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateLabelLocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>updateLabels</name></name><argument_list>(<argument><expr><name>_model</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// ok button</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>buttonBoxClicked</name></name><parameter_list>(<parameter><decl><type><name>QAbstractButton</name><modifier>*</modifier></type> <name>button</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>buttonBox</name><operator>-&gt;</operator><name>buttonRole</name></name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>QDialogButtonBox</name><operator>::</operator><name>AcceptRole</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>done</name><argument_list>(<argument><expr><name><name>QDialog</name><operator>::</operator><name>Accepted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// closes the dialog</comment>
</block_content>}</block></function>

<comment type="line">// (un)select all</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>buttonSelectAllClicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>Qt</name><operator>::</operator><name>CheckState</name></name></type> <name>state</name> <init>= <expr><name><name>Qt</name><operator>::</operator><name>Checked</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>checkState</name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>checkState</name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setCheckState</name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>coinControl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>UnSelectAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// just to be sure</comment>
    <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>updateLabels</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// context menu</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>showMenu</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QPoint</name> <modifier>&amp;</modifier></type><name>point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QTreeWidgetItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>item</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>contextMenuItem</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

        <comment type="line">// disable some items (like Copy Transaction ID, lock, unlock) for tree roots in context menu</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>item</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <comment type="line">// transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>copyTransactionHashAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isLockedCoin</name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><call><name><name>item</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>VOutRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>lockAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>unlockAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>lockAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>unlockAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// this means click on parent node in tree mode -&gt; disable all</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>copyTransactionHashAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lockAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unlockAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// show context menu</comment>
        <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>exec</name></name><argument_list>(<argument><expr><call><name><name>QCursor</name><operator>::</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// context menu action: copy amount</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>copyAmount</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>removeSpaces</name></name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>text</name></name><argument_list>(<argument><expr><name>COLUMN_AMOUNT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// context menu action: copy label</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>copyLabel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioTreeMode</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>text</name></name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>parent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>parent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>text</name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>text</name></name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// context menu action: copy address</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>copyAddress</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioTreeMode</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>text</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>parent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>parent</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>text</name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>text</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// context menu action: copy transaction id</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>copyTransactionHash</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// context menu action: lock coin</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>lockCoin</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>checkState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Checked</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>COutPoint</name></type> <name>outpt</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>VOutRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lockCoin</name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>setDisabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/lock_closed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateLabelLocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// context menu action: unlock coin</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>unlockCoin</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>COutPoint</name></type> <name>outpt</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>VOutRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unlockCoin</name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>setDisabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenuItem</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><call><name>QIcon</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateLabelLocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy label "Quantity" to clipboard</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>clipboardQuantity</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlQuantity</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy label "Amount" to clipboard</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>clipboardAmount</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAmount</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAmount</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy label "Fee" to clipboard</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>clipboardFee</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy label "After fee" to clipboard</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>clipboardAfterFee</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAfterFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAfterFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy label "Bytes" to clipboard</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>clipboardBytes</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlBytes</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy label "Dust" to clipboard</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>clipboardLowOutput</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlLowOutput</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// copy label "Change" to clipboard</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>clipboardChange</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChange</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChange</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// treeview: sort</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>sortView</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Qt</name><operator>::</operator><name>SortOrder</name></name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>sortColumn</name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sortOrder</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>sortItems</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>header</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setSortIndicator</name><argument_list>(<argument><expr><name>sortColumn</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// treeview: clicked on header</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>headerSectionClicked</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logicalIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>logicalIndex</name> <operator>==</operator> <name>COLUMN_CHECKBOX</name></expr>)</condition> <comment type="line">// click on most left column -&gt; do nothing</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>header</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setSortIndicator</name><argument_list>(<argument><expr><name>sortColumn</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sortColumn</name> <operator>==</operator> <name>logicalIndex</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sortOrder</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>sortOrder</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>AscendingOrder</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Qt</name><operator>::</operator><name>DescendingOrder</name></name></expr> </then><else>: <expr><name><name>Qt</name><operator>::</operator><name>AscendingOrder</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>sortColumn</name> <operator>=</operator> <name>logicalIndex</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sortOrder</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>sortColumn</name> <operator>==</operator> <name>COLUMN_LABEL</name> <operator>||</operator> <name>sortColumn</name> <operator>==</operator> <name>COLUMN_ADDRESS</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Qt</name><operator>::</operator><name>AscendingOrder</name></name></expr> </then><else>: <expr><name><name>Qt</name><operator>::</operator><name>DescendingOrder</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> <comment type="line">// if label or address then default =&gt; asc, else default =&gt; desc</comment>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>sortView</name><argument_list>(<argument><expr><name>sortColumn</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// toggle tree mode</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>radioTreeMode</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>checked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>checked</name> <operator>&amp;&amp;</operator> <name>model</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// toggle list mode</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>radioListMode</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>checked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>checked</name> <operator>&amp;&amp;</operator> <name>model</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>updateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// checkbox clicked by user</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>viewItemChanged</name></name><parameter_list>(<parameter><decl><type><name>QTreeWidgetItem</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <name>COLUMN_CHECKBOX</name> <operator>&amp;&amp;</operator> <call><name><name>item</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <comment type="line">// transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>COutPoint</name></type> <name>outpt</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><call><name><name>item</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>-&gt;</operator><name>data</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>VOutRole</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>item</name><operator>-&gt;</operator><name>checkState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>coinControl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>UnSelect</name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>item</name><operator>-&gt;</operator><name>isDisabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// locked (this happens if "check all" through parent node)</comment>
            <expr_stmt><expr><call><name><name>item</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>coinControl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Select</name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// selection changed -&gt; update labels</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// do not update on every click for (un)select all</comment>
            <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>updateLabels</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>

    <comment type="line">// TODO: Remove this temporary qt5 fix after Qt5.3 and Qt5.4 are no longer used.</comment>
    <comment type="line">//       Fixed in Qt5.5 and above: https://bugreports.qt.io/browse/QTBUG-43473</comment>
    <if type="elseif">else if <condition>(<expr><name>column</name> <operator>==</operator> <name>COLUMN_CHECKBOX</name> <operator>&amp;&amp;</operator> <call><name><name>item</name><operator>-&gt;</operator><name>childCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>item</name><operator>-&gt;</operator><name>checkState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>PartiallyChecked</name></name> <operator>&amp;&amp;</operator> <call><name><name>item</name><operator>-&gt;</operator><name>child</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>checkState</name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>PartiallyChecked</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>item</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Checked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// shows count of locked unspent outputs</comment>
<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>updateLabelLocked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>vOutpts</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>listLockedCoins</name><argument_list>(<argument><expr><name>vOutpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>vOutpts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
       <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelLocked</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(%1 locked)"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>vOutpts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelLocked</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelLocked</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>updateLabels</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>QDialog</name><modifier>*</modifier></type> <name>dialog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>model</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// nPayAmount</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nPayAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fDust</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txDummy</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CAmount</name> <modifier>&amp;</modifier></type><name>amount</name> <range>: <expr><name><name>CoinControlDialog</name><operator>::</operator><name>payAmounts</name></name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>nPayAmount</name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Assumes a p2pkh script size</comment>
            <decl_stmt><decl><type><name>CTxOut</name></type> <name>txout</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>txDummy</name><operator>.</operator><name>vout</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fDust</name> <operator>|=</operator> <call><name>IsDust</name><argument_list>(<argument><expr><name>txout</name></expr></argument>, <argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDustRelayFee</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nPayFee</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAfterFee</name>           <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nChange</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBytes</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBytesInputs</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nQuantity</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fWitness</name>               <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>vCoinControl</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>coinControl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ListSelected</name><argument_list>(<argument><expr><name>vCoinControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>out</name> <range>: <expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCoins</name><argument_list>(<argument><expr><name>vCoinControl</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>depth_in_main_chain</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// unselect already spent, very unlikely scenario, this could happen</comment>
        <comment type="line">// when selected are spent elsewhere, like rpc or another computer</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>outpt</name> <init>= <expr><name><name>vCoinControl</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>is_spent</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>coinControl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>UnSelect</name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Quantity</comment>
        <expr_stmt><expr><name>nQuantity</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// Amount</comment>
        <expr_stmt><expr><name>nAmount</name> <operator>+=</operator> <name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>

        <comment type="line">// Bytes</comment>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>witnessversion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>witnessprogram</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>IsWitnessProgram</name></name><argument_list>(<argument><expr><name>witnessversion</name></expr></argument>, <argument><expr><name>witnessprogram</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nBytesInputs</name> <operator>+=</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><literal type="number">107</literal> <operator>/</operator> <name>WITNESS_SCALE_FACTOR</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>fWitness</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PKHash</name> <modifier>*</modifier></type><name>pkhash</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pkhash</name> <operator>&amp;&amp;</operator> <call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPubKey</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><call><name>CKeyID</name><argument_list>(<argument><expr><operator>*</operator><name>pkhash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nBytesInputs</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>pubkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">148</literal></expr> </then><else>: <expr><literal type="number">180</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>nBytesInputs</name> <operator>+=</operator> <literal type="number">148</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line">// in all error cases, simply assume 148 here</comment>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nBytesInputs</name> <operator>+=</operator> <literal type="number">148</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// calculation</comment>
    <if_stmt><if>if <condition>(<expr><name>nQuantity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Bytes</comment>
        <expr_stmt><expr><name>nBytes</name> <operator>=</operator> <name>nBytesInputs</name> <operator>+</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>payAmounts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>payAmounts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <literal type="number">34</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt> <comment type="line">// always assume +1 output for change here</comment>
        <if_stmt><if>if <condition>(<expr><name>fWitness</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// there is some fudging in these numbers related to the actual virtual transaction size calculation that will keep this estimate from being exact.</comment>
            <comment type="line">// usually, the result will be an overestimate within a couple of satoshis so that the confirmation dialog ends up displaying a slightly smaller fee.</comment>
            <comment type="line">// also, the witness stack size value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.</comment>
            <expr_stmt><expr><name>nBytes</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// account for the serialized marker and flag bytes</comment>
            <expr_stmt><expr><name>nBytes</name> <operator>+=</operator> <name>nQuantity</name></expr>;</expr_stmt> <comment type="line">// account for the witness byte that holds the number of stack items for each input.</comment>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// in the subtract fee from amount case, we can tell if zero change already and subtract the bytes, so that fee calculation afterwards is accurate</comment>
        <if_stmt><if>if <condition>(<expr><name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name>nAmount</name> <operator>-</operator> <name>nPayAmount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>nBytes</name> <operator>-=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Fee</comment>
        <expr_stmt><expr><name>nPayFee</name> <operator>=</operator> <call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMinimumFee</name><argument_list>(<argument><expr><name>nBytes</name></expr></argument>, <argument><expr><operator>*</operator><call><name>coinControl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* returned_target */</comment>, <argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* reason */</comment>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>nPayAmount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nChange</name> <operator>=</operator> <name>nAmount</name> <operator>-</operator> <name>nPayAmount</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>nChange</name> <operator>-=</operator> <name>nPayFee</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Never create dust outputs; if we would, just add the dust to the fee.</comment>
            <if_stmt><if>if <condition>(<expr><name>nChange</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nChange</name> <operator>&lt;</operator> <name>MIN_CHANGE</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Assumes a p2pkh script size</comment>
                <decl_stmt><decl><type><name>CTxOut</name></type> <name>txout</name><argument_list>(<argument><expr><name>nChange</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>IsDust</name><argument_list>(<argument><expr><name>txout</name></expr></argument>, <argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDustRelayFee</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>nPayFee</name> <operator>+=</operator> <name>nChange</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nChange</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>nBytes</name> <operator>-=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// we didn't detect lack of change above</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>nChange</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>nBytes</name> <operator>-=</operator> <literal type="number">34</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// after fee</comment>
        <expr_stmt><expr><name>nAfterFee</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nAmount</name> <operator>-</operator> <name>nPayFee</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// actually update labels</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nDisplayUnit</name> <init>= <expr><name><name>BitcoinUnits</name><operator>::</operator><name>BTC</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>model</name> <operator>&amp;&amp;</operator> <call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nDisplayUnit</name> <operator>=</operator> <call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>l1</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlQuantity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>l2</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlAmount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>l3</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlFee"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>l4</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlAfterFee"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>l5</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlBytes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>l7</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlLowOutput"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>l8</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlChange"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// enable/disable "dust" and "change"</comment>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlLowOutputText"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>nPayAmount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlLowOutput"</literal></expr></argument>)</argument_list></call>    <operator>-&gt;</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>nPayAmount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlChangeText"</literal></expr></argument>)</argument_list></call>   <operator>-&gt;</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>nPayAmount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlChange"</literal></expr></argument>)</argument_list></call>       <operator>-&gt;</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>nPayAmount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// stats</comment>
    <expr_stmt><expr><call><name><name>l1</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>nQuantity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                 <comment type="line">// Quantity</comment>
    <expr_stmt><expr><call><name><name>l2</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><name>nDisplayUnit</name></expr></argument>, <argument><expr><name>nAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// Amount</comment>
    <expr_stmt><expr><call><name><name>l3</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><name>nDisplayUnit</name></expr></argument>, <argument><expr><name>nPayFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// Fee</comment>
    <expr_stmt><expr><call><name><name>l4</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><name>nDisplayUnit</name></expr></argument>, <argument><expr><name>nAfterFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line">// After Fee</comment>
    <expr_stmt><expr><call><name><name>l5</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>nBytes</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ASYMP_UTF8</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// Bytes</comment>
    <expr_stmt><expr><call><name><name>l7</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>fDust</name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>                               <comment type="line">// Dust</comment>
    <expr_stmt><expr><call><name><name>l8</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><name>nDisplayUnit</name></expr></argument>, <argument><expr><name>nChange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// Change</comment>
    <if_stmt><if>if <condition>(<expr><name>nPayFee</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>l3</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>ASYMP_UTF8</name> <operator>+</operator> <call><name><name>l3</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l4</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>ASYMP_UTF8</name> <operator>+</operator> <call><name><name>l4</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nChange</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>l8</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>ASYMP_UTF8</name> <operator>+</operator> <call><name><name>l8</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// turn label red when dust</comment>
    <expr_stmt><expr><call><name><name>l7</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>fDust</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"color:red;"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// tool tips</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>toolTipDust</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"This label turns red if any recipient receives an amount smaller than the current dust threshold."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// how many satoshis the estimated fee can vary per byte we guess wrong</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>dFeeVary</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nBytes</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>double</name><operator>)</operator><name>nPayFee</name> <operator>/</operator> <name>nBytes</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>toolTip4</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Can vary +/- %1 satoshi(s) per input."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>dFeeVary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>l3</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>toolTip4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>l4</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>toolTip4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>l7</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>toolTipDust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>l8</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>toolTip4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlFeeText"</literal></expr></argument>)</argument_list></call>      <operator>-&gt;</operator><call><name>setToolTip</name><argument_list>(<argument><expr><call><name><name>l3</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlAfterFeeText"</literal></expr></argument>)</argument_list></call> <operator>-&gt;</operator><call><name>setToolTip</name><argument_list>(<argument><expr><call><name><name>l4</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlBytesText"</literal></expr></argument>)</argument_list></call>    <operator>-&gt;</operator><call><name>setToolTip</name><argument_list>(<argument><expr><call><name><name>l5</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlLowOutputText"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setToolTip</name><argument_list>(<argument><expr><call><name><name>l7</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlChangeText"</literal></expr></argument>)</argument_list></call>   <operator>-&gt;</operator><call><name>setToolTip</name><argument_list>(<argument><expr><call><name><name>l8</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Insufficient funds</comment>
    <decl_stmt><decl><type><name>QLabel</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelCoinControlInsuffFunds"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>label</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>label</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>nChange</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>CCoinControl</name><modifier>*</modifier></type> <name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>CCoinControl</name></type> <name>coin_control</name></decl>;</decl_stmt>
    <return>return <expr><operator>&amp;</operator><name>coin_control</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CoinControlDialog</name><operator>::</operator><name>updateView</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>model</name> <operator>||</operator> <operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>getAddressTableModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>treeMode</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioTreeMode</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// performance, otherwise updateLabels would be called for every checked checkbox</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setAlternatingRowColors</name></name><argument_list>(<argument><expr><operator>!</operator><name>treeMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>QFlags</name><argument_list type="generic">&lt;<argument><expr><name><name>Qt</name><operator>::</operator><name>ItemFlag</name></name></expr></argument>&gt;</argument_list></name></type> <name>flgCheckbox</name> <init>= <expr><name><name>Qt</name><operator>::</operator><name>ItemIsSelectable</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsEnabled</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsUserCheckable</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QFlags</name><argument_list type="generic">&lt;<argument><expr><name><name>Qt</name><operator>::</operator><name>ItemFlag</name></name></expr></argument>&gt;</argument_list></name></type> <name>flgTristate</name> <init>= <expr><name><name>Qt</name><operator>::</operator><name>ItemIsSelectable</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsEnabled</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsUserCheckable</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsTristate</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nDisplayUnit</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>coins</name> <range>: <expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>listCoins</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CCoinControlWidgetItem</name> <modifier>*</modifier></type><name>itemWalletAddress</name> <init>= <expr><operator>new</operator> <call><name>CCoinControlWidgetItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>sWalletAddress</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name><name>coins</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>sWalletLabel</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>getAddressTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>labelForAddress</name><argument_list>(<argument><expr><name>sWalletAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>sWalletLabel</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sWalletLabel</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(no label)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>treeMode</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// wallet address</comment>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>addTopLevelItem</name></name><argument_list>(<argument><expr><name>itemWalletAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setFlags</name></name><argument_list>(<argument><expr><name>flgTristate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// label</comment>
            <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>, <argument><expr><name>sWalletLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// address</comment>
            <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>sWalletAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>CAmount</name></type> <name>nSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nChildren</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>outpair</name> <range>: <expr><name><name>coins</name><operator>.</operator><name>second</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>outpair</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name><name>interfaces</name><operator>::</operator><name>WalletTxOut</name></name><modifier>&amp;</modifier></type> <name>out</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>outpair</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nSum</name> <operator>+=</operator> <name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nChildren</name><operator>++</operator></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>CCoinControlWidgetItem</name> <modifier>*</modifier></type><name>itemOutput</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>treeMode</name></expr>)</condition><block type="pseudo"><block_content>    <expr_stmt><expr><name>itemOutput</name> <operator>=</operator> <operator>new</operator> <call><name>CCoinControlWidgetItem</name><argument_list>(<argument><expr><name>itemWalletAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>             <expr_stmt><expr><name>itemOutput</name> <operator>=</operator> <operator>new</operator> <call><name>CCoinControlWidgetItem</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setFlags</name></name><argument_list>(<argument><expr><name>flgCheckbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>,<argument><expr><name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// address</comment>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>outputAddress</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QString</name></type> <name>sAddress</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>outputAddress</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>sAddress</name> <operator>=</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>outputAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// if listMode or change =&gt; show bitcoin address. In tree mode, address is not shown again for direct wallet address outputs</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>treeMode</name> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>sAddress</name> <operator>==</operator> <name>sWalletAddress</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>sAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// label</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sAddress</name> <operator>==</operator> <name>sWalletAddress</name><operator>)</operator></expr>)</condition> <comment type="line">// change</comment>
            <block>{<block_content>
                <comment type="line">// tooltip from where the change comes from</comment>
                <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"change from %1 (%2)"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>sWalletLabel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>sWalletAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(change)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><name>treeMode</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>QString</name></type> <name>sLabel</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>getAddressTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>labelForAddress</name><argument_list>(<argument><expr><name>sAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>sLabel</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>sLabel</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(no label)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_LABEL</name></expr></argument>, <argument><expr><name>sLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// amount</comment>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_AMOUNT</name></expr></argument>, <argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>nDisplayUnit</name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><name>COLUMN_AMOUNT</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>UserRole</name></name></expr></argument>, <argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><operator>(</operator><name>qlonglong</name><operator>)</operator><name><name>out</name><operator>.</operator><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// padding so that sorting works correctly</comment>

            <comment type="line">// date</comment>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_DATE</name></expr></argument>, <argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>dateTimeStr</name></name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><name>COLUMN_DATE</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>UserRole</name></name></expr></argument>, <argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><operator>(</operator><name>qlonglong</name><operator>)</operator><name><name>out</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// confirmations</comment>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_CONFIRMATIONS</name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>depth_in_main_chain</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><name>COLUMN_CONFIRMATIONS</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>UserRole</name></name></expr></argument>, <argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><operator>(</operator><name>qlonglong</name><operator>)</operator><name><name>out</name><operator>.</operator><name>depth_in_main_chain</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// transaction hash</comment>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>TxHashRole</name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// vout index</comment>
            <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><name>COLUMN_ADDRESS</name></expr></argument>, <argument><expr><name>VOutRole</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <comment type="line">// disable locked coins</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isLockedCoin</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>coinControl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>UnSelect</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// just to be sure</comment>
                <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setDisabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/lock_closed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// set checkbox</comment>
            <if_stmt><if>if <condition>(<expr><call><name>coinControl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>IsSelected</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>itemOutput</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Checked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// amount</comment>
        <if_stmt><if>if <condition>(<expr><name>treeMode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>, <argument><expr><literal type="string">"("</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>nChildren</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>COLUMN_AMOUNT</name></expr></argument>, <argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>nDisplayUnit</name></expr></argument>, <argument><expr><name>nSum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>itemWalletAddress</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><name>COLUMN_AMOUNT</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>UserRole</name></name></expr></argument>, <argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><operator>(</operator><name>qlonglong</name><operator>)</operator><name>nSum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// expand all partially selected</comment>
    <if_stmt><if>if <condition>(<expr><name>treeMode</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>checkState</name><argument_list>(<argument><expr><name>COLUMN_CHECKBOX</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>PartiallyChecked</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>topLevelItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setExpanded</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// sort view</comment>
    <expr_stmt><expr><call><name>sortView</name><argument_list>(<argument><expr><name>sortColumn</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>treeWidget</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
