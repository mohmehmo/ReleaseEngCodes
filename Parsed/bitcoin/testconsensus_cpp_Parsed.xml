<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/build_msvc/testconsensus/testconsensus.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<comment type="line">// bitcoin includes.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;..\src\script\bitcoinconsensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;..\src\primitives\transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;..\src\script\script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;..\src\streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;..\src\version.h&gt;</cpp:file></cpp:include>

<function><type><name>CMutableTransaction</name></type> <name>BuildSpendingTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScriptWitness</name><modifier>&amp;</modifier></type> <name>scriptWitness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txSpend</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txSpend</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txSpend</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptWitness</name> <operator>=</operator> <name>scriptWitness</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name>uint256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <name>scriptSig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <name><name>CTxIn</name><operator>::</operator><name>SEQUENCE_FINAL</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txSpend</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt>

    <return>return <expr><name>txSpend</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"bitcoinconsensus version: "</literal> <operator>&lt;&lt;</operator> <call><name>bitcoinconsensus_version</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>pubKeyScript</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pubKeyScript</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 600000000;</comment>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>scriptWitness</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>vanillaSpendTx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>vanillaSpendTx</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bitcoinconsensus_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>op0Result</name> <init>= <expr><call><name>bitcoinconsensus_verify_script_with_amount</name><argument_list>(<argument><expr><call><name><name>pubKeyScript</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubKeyScript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Op0 result: "</literal> <operator>&lt;&lt;</operator> <name>op0Result</name> <operator>&lt;&lt;</operator> <literal type="string">", error code "</literal> <operator>&lt;&lt;</operator> <name>err</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
