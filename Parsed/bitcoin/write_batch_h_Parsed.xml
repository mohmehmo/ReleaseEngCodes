<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/write_batch.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// WriteBatch holds a collection of updates to apply atomically to a DB.</comment>
<comment type="line">//</comment>
<comment type="line">// The updates are applied in the order in which they are added</comment>
<comment type="line">// to the WriteBatch.  For example, the value of "key" will be "v3"</comment>
<comment type="line">// after the following batch is written:</comment>
<comment type="line">//</comment>
<comment type="line">//    batch.Put("key", "v1");</comment>
<comment type="line">//    batch.Delete("key");</comment>
<comment type="line">//    batch.Put("key", "v2");</comment>
<comment type="line">//    batch.Put("key", "v3");</comment>
<comment type="line">//</comment>
<comment type="line">// Multiple threads can invoke const methods on a WriteBatch without</comment>
<comment type="line">// external synchronization, but if any of the threads may call a</comment>
<comment type="line">// non-const method, all threads accessing the same WriteBatch must use</comment>
<comment type="line">// external synchronization.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/status.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>WriteBatch</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>WriteBatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>WriteBatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Store the mapping "key-&gt;value" in the database.</comment>
  <function_decl><type><name>void</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// If the database contains a mapping for "key", erase it.  Else do nothing.</comment>
  <function_decl><type><name>void</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Clear all updates buffered in this batch.</comment>
  <function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Support for iterating over the contents of a batch.</comment>
  <decl_stmt><decl><type><name>class</name></type> <name>Handler</name> <block>{<block_content>
   <label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
  <decl_stmt><decl><type><name>Status</name></type> <name>Iterate</name><argument_list>(<argument><expr><name>Handler</name><operator>*</operator> <name>handler</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>WriteBatchInternal</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>rep_</name></expr>;</expr_stmt>  <comment type="line">// See comment in write_batch.cc for the format of rep_</comment>

  <comment type="line">// Intentionally copyable</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_</comment>
</unit>
