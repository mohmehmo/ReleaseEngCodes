<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/base58.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<comment type="block" format="doxygen">/**
 * Why base-58 instead of standard base-64 encoding?
 * - Don't want 0OIl characters that look the same in some fonts and
 *      could be used to create visually identical looking data.
 * - A string with non-alphanumeric characters is not as easily accepted as input.
 * - E-mail usually won't line-break if there's no punctuation to break at.
 * - Double-clicking selects the whole string as one word if it's all alphanumeric.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_BASE58_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_BASE58_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attributes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Encode a byte sequence as a base58-encoded string.
 * pbegin and pend cannot be nullptr, unless both are.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>EncodeBase58</name><argument_list>(<argument>const unsigned char* pbegin</argument>, <argument>const unsigned char* pend</argument>)</argument_list></macro></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Encode a byte vector as a base58-encoded string
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>EncodeBase58</name><argument_list>(<argument>const std::vector&lt;unsigned char&gt;&amp; vch</argument>)</argument_list></macro></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Decode a base58-encoded string (psz) into a byte vector (vchRet).
 * return true if decoding is successful.
 * psz cannot be nullptr.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>DecodeBase58</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>psz</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchRet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Decode a base58-encoded string (str) into a byte vector (vchRet).
 * return true if decoding is successful.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>DecodeBase58</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchRet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Encode a byte vector into a base58-encoded string, including checksum
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>EncodeBase58Check</name><argument_list>(<argument>const std::vector&lt;unsigned char&gt;&amp; vchIn</argument>)</argument_list></macro></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Decode a base58-encoded string (psz) that includes a checksum into a byte
 * vector (vchRet), return true if decoding is successful
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>DecodeBase58Check</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>psz</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchRet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Decode a base58-encoded string (str) that includes a checksum into a byte
 * vector (vchRet), return true if decoding is successful
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>DecodeBase58Check</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchRet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_BASE58_H</comment>
</unit>
