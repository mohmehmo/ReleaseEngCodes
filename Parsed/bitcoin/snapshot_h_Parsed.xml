<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/snapshot.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_SNAPSHOT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_SNAPSHOT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/dbformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/db.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SnapshotList</name></decl>;</decl_stmt>

<comment type="line">// Snapshots are kept in a doubly-linked list in the DB.</comment>
<comment type="line">// Each SnapshotImpl corresponds to a particular sequence number.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SnapshotImpl</name> <range>: <expr><name>public</name> <name>Snapshot</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>SequenceNumber</name> <name>number_</name></expr>;  <comment type="line">// const after creation</comment>

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> <name>class</name> <name>SnapshotList</name></expr>;

  <comment type="line">// SnapshotImpl is kept in a doubly-linked circular list</comment>
  <expr><name>SnapshotImpl</name><operator>*</operator> <name>prev_</name></expr>;
  <expr><name>SnapshotImpl</name><operator>*</operator> <name>next_</name></expr>;

  <expr><name>SnapshotList</name><operator>*</operator> <name>list_</name></expr>;                 <comment type="line">// just for sanity checks</comment>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SnapshotList</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>SnapshotList</name><argument_list>()</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><name><name>list_</name><operator>.</operator><name>prev_</name></name> <operator>=</operator> <operator>&amp;</operator><name>list_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list_</name><operator>.</operator><name>next_</name></name> <operator>=</operator> <operator>&amp;</operator><name>list_</name></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>list_</name><operator>.</operator><name>next_</name></name> <operator>==</operator> <operator>&amp;</operator><name>list_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>SnapshotImpl</name><operator>*</operator> <macro><name>oldest</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><name><name>list_</name><operator>.</operator><name>next_</name></name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>SnapshotImpl</name><operator>*</operator> <macro><name>newest</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><name><name>list_</name><operator>.</operator><name>prev_</name></name></expr>;</return> }</block></expr></expr_stmt>

  <function><type><specifier>const</specifier> <name>SnapshotImpl</name><modifier>*</modifier></type> <name>New</name><parameter_list>(<parameter><decl><type><name>SequenceNumber</name></type> <name>seq</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SnapshotImpl</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name>new</name> <name>SnapshotImpl</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>number_</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>list_</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <operator>&amp;</operator><name>list_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_</name></name> <operator>=</operator> <name><name>list_</name><operator>.</operator><name>prev_</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_</name><operator>-&gt;</operator><name>prev_</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SnapshotImpl</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>list_</name></name> <operator>==</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_</name><operator>-&gt;</operator><name>next_</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_</name><operator>-&gt;</operator><name>prev_</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>delete</name></type> <name>s</name></decl>;</decl_stmt>
  </block_content>}</block></function>

 <label><name>private</name>:</label>
  <comment type="line">// Dummy head of doubly-linked list of snapshots</comment>
  <decl_stmt><decl><type><name>SnapshotImpl</name></type> <name>list_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_SNAPSHOT_H_</comment>
</unit>
