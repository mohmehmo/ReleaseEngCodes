<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/ecmult_gen_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell      *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_ECMULT_GEN_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_ECMULT_GEN_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecmult_gen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash_impl.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ECMULT_STATIC_PRECOMPUTATION</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecmult_static_context.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_init</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_build</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name><modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ECMULT_STATIC_PRECOMPUTATION</name></cpp:ifndef>
    <decl_stmt><decl><type><name>secp256k1_ge</name></type> <name><name>prec</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>gj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>nums_gej</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ECMULT_STATIC_PRECOMPUTATION</name></cpp:ifndef>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <operator>(</operator><call><name>secp256k1_ge_storage</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index><operator>)</operator><call><name>checked_malloc</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* get the generator */</comment>
    <expr_stmt><expr><call><name>secp256k1_gej_set_ge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secp256k1_ge_const_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Construct a group element with no known corresponding scalar (nothing up my sleeve). */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nums_b32</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>= <expr><literal type="string">"The scalar for this x is unknown"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>nums_x</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>secp256k1_ge</name></type> <name>nums_ge</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>secp256k1_fe_set_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nums_x</name></expr></argument>, <argument><expr><name>nums_b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>secp256k1_ge_set_xo_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nums_ge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nums_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_gej_set_ge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nums_gej</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nums_ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Add G to make the bits in x uniformly distributed. */</comment>
        <expr_stmt><expr><call><name>secp256k1_gej_add_ge_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nums_gej</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nums_gej</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secp256k1_ge_const_g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* compute prec. */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name><name>precj</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* Jacobian versions of prec. */</comment>
        <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>gbase</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>numsbase</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>gbase</name> <operator>=</operator> <name>gj</name></expr>;</expr_stmt> <comment type="block">/* 16^j * G */</comment>
        <expr_stmt><expr><name>numsbase</name> <operator>=</operator> <name>nums_gej</name></expr>;</expr_stmt> <comment type="block">/* 2^j * nums. */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="block">/* Set precj[j*16 .. j*16+15] to (numsbase, numsbase + gbase, ..., numsbase + 15*gbase). */</comment>
            <expr_stmt><expr><name><name>precj</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>numsbase</name></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>secp256k1_gej_add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>precj</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>precj</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbase</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <comment type="block">/* Multiply gbase by 16. */</comment>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>secp256k1_gej_double_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbase</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <comment type="block">/* Multiply numbase by 2. */</comment>
            <expr_stmt><expr><call><name>secp256k1_gej_double_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numsbase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numsbase</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">62</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* In the last iteration, numsbase is (1 - 2^j) * nums instead. */</comment>
                <expr_stmt><expr><call><name>secp256k1_gej_neg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numsbase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numsbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>secp256k1_gej_add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numsbase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numsbase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nums_gej</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>secp256k1_ge_set_all_gej_var</name><argument_list>(<argument><expr><name>prec</name></expr></argument>, <argument><expr><name>precj</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_ge_to_storage</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prec</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <operator>(</operator><call><name>secp256k1_ge_storage</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index><operator>)</operator><name>secp256k1_ecmult_static_context</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>secp256k1_ecmult_gen_blind</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ecmult_gen_context_is_built</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_gen_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_clone</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                                               <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name><modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>prec</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ECMULT_STATIC_PRECOMPUTATION</name></cpp:ifndef>
        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <operator>(</operator><call><name>secp256k1_ge_storage</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index><operator>)</operator><call><name>checked_malloc</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>prec</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>initial</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>initial</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>blind</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>blind</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ECMULT_STATIC_PRECOMPUTATION</name></cpp:ifndef>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>secp256k1_scalar_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>blind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_gej_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>initial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_ge</name></type> <name>add</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_ge_storage</name></type> <name>adds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>gnb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>adds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial</name></name></expr>;</expr_stmt>
    <comment type="block">/* Blind scalar/point multiplication by computing (n-b)G + bG instead of nG. */</comment>
    <expr_stmt><expr><call><name>secp256k1_scalar_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gnb</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>blind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>add</name><operator>.</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>secp256k1_scalar_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gnb</name></expr></argument>, <argument><expr><name>j</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="block" format="doxygen">/** This uses a conditional move to avoid any secret data in array indexes.
             *   _Any_ use of secret indexes has been demonstrated to result in timing
             *   sidechannels, even when the cache-line access patterns are uniform.
             *  See also:
             *   "A word of warning", CHES 2013 Rump Session, by Daniel J. Bernstein and Peter Schwabe
             *    (https://cryptojedi.org/peter/data/chesrump-20130822.pdf) and
             *   "Cache Attacks and Countermeasures: the Case of AES", RSA 2006,
             *    by Dag Arne Osvik, Adi Shamir, and Eran Tromer
             *    (http://www.tau.ac.il/~tromer/papers/cache.pdf)
             */</comment>
            <expr_stmt><expr><call><name>secp256k1_ge_storage_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adds</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>prec</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>secp256k1_ge_from_storage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_gej_add_ge</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_ge_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gnb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Setup blinding values for secp256k1_ecmult_gen. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_blind</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seed32</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>gb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nonce32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_rfc6979_hmac_sha256</name></type> <name>rng</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>keydata</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>seed32</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* When seed is NULL, reset the initial point and blinding value. */</comment>
        <expr_stmt><expr><call><name>secp256k1_gej_set_ge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>initial</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secp256k1_ge_const_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_gej_neg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>initial</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>initial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_scalar_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>blind</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* The prior blinding value (if not reset) is chained forward by including it in the hash. */</comment>
    <expr_stmt><expr><call><name>secp256k1_scalar_get_b32</name><argument_list>(<argument><expr><name>nonce32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>blind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/** Using a CSPRNG allows a failure free interface, avoids needing large amounts of random data,
     *   and guards against weak or adversarial seeds.  This is a simpler and safer interface than
     *   asking the caller for blinding values directly and expecting them to retry on failure.
     */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keydata</name></expr></argument>, <argument><expr><name>nonce32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>seed32</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keydata</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>seed32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_rfc6979_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>, <argument><expr><name>keydata</name></expr></argument>, <argument><expr><ternary><condition><expr><name>seed32</name></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>keydata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keydata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Retry for out of range results to achieve uniformity. */</comment>
    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>secp256k1_rfc6979_hmac_sha256_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>, <argument><expr><name>nonce32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retry</name> <operator>=</operator> <operator>!</operator><call><name>secp256k1_fe_set_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>nonce32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retry</name> <operator>|=</operator> <call><name>secp256k1_fe_is_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>retry</name></expr>)</condition>;</do> <comment type="block">/* This branch true is cryptographically unreachable. Requires sha256_hmac output &gt; Fp. */</comment>
    <comment type="block">/* Randomize the projection to defend against multiplier sidechannels. */</comment>
    <expr_stmt><expr><call><name>secp256k1_gej_rescale</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>initial</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>secp256k1_rfc6979_hmac_sha256_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>, <argument><expr><name>nonce32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_scalar_set_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>nonce32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* A blinding value of 0 works, but would undermine the projection hardening. */</comment>
        <expr_stmt><expr><name>retry</name> <operator>|=</operator> <call><name>secp256k1_scalar_is_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>retry</name></expr>)</condition>;</do> <comment type="block">/* This branch true is cryptographically unreachable. Requires sha256_hmac output &gt; order. */</comment>
    <expr_stmt><expr><call><name>secp256k1_rfc6979_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nonce32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_ecmult_gen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>blind</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial</name></name> <operator>=</operator> <name>gb</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_gej_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_ECMULT_GEN_IMPL_H */</comment>
</unit>
