<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/warnings.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;warnings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RecursiveMutex</name></type> <name>cs_warnings</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <name>strMiscWarning</name></type> <name>GUARDED_BY</name><parameter_list>(<parameter><decl><type><name>cs_warnings</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name> <name>fLargeWorkForkFound</name></type> <name>GUARDED_BY</name><parameter_list>(<parameter><decl><type><name>cs_warnings</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="boolean">false</literal></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name> <name>fLargeWorkInvalidChainFound</name></type> <name>GUARDED_BY</name><parameter_list>(<parameter><decl><type><name>cs_warnings</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="boolean">false</literal></expr></init>;</function_decl>

<function><type><name>void</name></type> <name>SetMiscWarning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strWarning</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_warnings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strMiscWarning</name> <operator>=</operator> <name>strWarning</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetfLargeWorkForkFound</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_warnings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fLargeWorkForkFound</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetfLargeWorkForkFound</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_warnings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fLargeWorkForkFound</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetfLargeWorkInvalidChainFound</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_warnings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fLargeWorkInvalidChainFound</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>GetWarnings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strFor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strStatusBar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strGUI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>uiAlertSeperator</name> <init>= <expr><literal type="string">"&lt;hr /&gt;"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_warnings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>CLIENT_VERSION_IS_RELEASE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>strStatusBar</name> <operator>=</operator> <literal type="string">"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>strGUI</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Misc warnings like out of disk space and clock is wrong</comment>
    <if_stmt><if>if <condition>(<expr><name>strMiscWarning</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>strStatusBar</name> <operator>=</operator> <name>strMiscWarning</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>strGUI</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>strGUI</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>uiAlertSeperator</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>strMiscWarning</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>fLargeWorkForkFound</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>strStatusBar</name> <operator>=</operator> <literal type="string">"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues."</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>strGUI</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>strGUI</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>uiAlertSeperator</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>fLargeWorkInvalidChainFound</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>strStatusBar</name> <operator>=</operator> <literal type="string">"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade."</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>strGUI</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>strGUI</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>uiAlertSeperator</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>strFor</name> <operator>==</operator> <literal type="string">"gui"</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>strGUI</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>strFor</name> <operator>==</operator> <literal type="string">"statusbar"</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>strStatusBar</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"GetWarnings(): invalid parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="string">"error"</literal></expr>;</return>
</block_content>}</block></function>
</unit>
