<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/interfaces/wallet.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_INTERFACES_WALLET_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_INTERFACES_WALLET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>                    <comment type="line">// For CAmount</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>                    <comment type="line">// For CKeyID and CScriptID (definitions needed in CTxDestination instantiation)</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>           <comment type="line">// For CTxDestination</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include> <comment type="line">// For SecureString</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>              <comment type="line">// For ChangeType</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psbt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CCoinControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFeeRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CWallet</name></decl>;</decl_stmt>
<enum_decl>enum <name>isminetype</name> : <type><name>unsigned</name> <name>int</name></type>;</enum_decl>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>FeeReason</name></decl>;</decl_stmt>
<typedef>typedef <type><name>uint8_t</name></type> <name>isminefilter</name>;</typedef>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OutputType</name></decl>;</decl_stmt>
<struct_decl>struct <name>CRecipient</name>;</struct_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
<struct_decl>struct <name>WalletAddress</name>;</struct_decl>
<struct_decl>struct <name>WalletBalances</name>;</struct_decl>
<struct_decl>struct <name>WalletTx</name>;</struct_decl>
<struct_decl>struct <name>WalletTxOut</name>;</struct_decl>
<struct_decl>struct <name>WalletTxStatus</name>;</struct_decl>

<decl_stmt><decl><type><name>using</name></type> <name>WalletOrderForm</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>WalletValueMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! Interface for accessing a wallet.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Wallet</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>Wallet</name><argument_list>()</argument_list></macro> <block>{}</block>

    <comment type="line" format="doxygen">//! Encrypt wallet.</comment>
    <name>virtual</name> <name>bool</name> <call><name>encryptWallet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SecureString</name><operator>&amp;</operator> <name>wallet_passphrase</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Return whether wallet is encrypted.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isCrypted</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Lock wallet.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>lock</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Unlock wallet.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>wallet_passphrase</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether wallet is locked.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isLocked</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Change wallet passphrase.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>changeWalletPassphrase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>old_wallet_passphrase</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>new_wallet_passphrase</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Abort a rescan.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>abortRescan</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Back up wallet.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>backupWallet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>filename</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get wallet name.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>getWalletName</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// Get a new address.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>getNewDestination</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OutputType</name> <name>type</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>label</name></expr></argument>, <argument><expr><name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get public key.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getPubKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>pub_key</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get private key.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getPrivKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether wallet has private key.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isSpendable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether wallet has watch only keys.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>haveWatchOnly</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Add or update address.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>setAddressBook</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>purpose</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Remove address.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>delAddressBook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Look up address in wallet, return whether exists.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>getAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>,
        <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>name</name></expr></argument>,
        <argument><expr><name>isminetype</name><operator>*</operator> <name>is_mine</name></expr></argument>,
        <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>purpose</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get wallet address list.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletAddress</name></expr></argument>&gt;</argument_list></name> <call><name>getAddresses</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Add scripts to key store so old so software versions opening the wallet</comment>
    <comment type="line" format="doxygen">//! database can detect payments to newer address types.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>learnRelatedScripts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>OutputType</name></type> <name>type</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Add dest data.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>addDestData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Erase dest data.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>eraseDestData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get dest values with prefix.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>getDestValues</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>prefix</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Lock coin.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>lockCoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Unlock coin.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>unlockCoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether coin is locked.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isLockedCoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! List locked coins.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>listLockedCoins</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>outputs</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Create transaction.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>CTransactionRef</name></type> <name>createTransaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CRecipient</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>recipients</name></expr></argument>,
        <argument><expr><specifier>const</specifier> <name>CCoinControl</name><operator>&amp;</operator> <name>coin_control</name></expr></argument>,
        <argument><expr><name>bool</name> <name>sign</name></expr></argument>,
        <argument><expr><name>int</name><operator>&amp;</operator> <name>change_pos</name></expr></argument>,
        <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>fee</name></expr></argument>,
        <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>fail_reason</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Commit transaction.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>commitTransaction</name><parameter_list>(<parameter><decl><type><name>CTransactionRef</name></type> <name>tx</name></decl></parameter>,
        <parameter><decl><type><name>WalletValueMap</name></type> <name>value_map</name></decl></parameter>,
        <parameter><decl><type><name>WalletOrderForm</name></type> <name>order_form</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether transaction can be abandoned.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>transactionCanBeAbandoned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Abandon transaction.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>abandonTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether transaction can be bumped.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>transactionCanBeBumped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Create bump transaction.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>createBumpTransaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>,
        <argument><expr><specifier>const</specifier> <name>CCoinControl</name><operator>&amp;</operator> <name>coin_control</name></expr></argument>,
        <argument><expr><name>CAmount</name> <name>total_fee</name></expr></argument>,
        <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>errors</name></expr></argument>,
        <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>old_fee</name></expr></argument>,
        <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>new_fee</name></expr></argument>,
        <argument><expr><name>CMutableTransaction</name><operator>&amp;</operator> <name>mtx</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Sign bump transaction.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>signBumpTransaction</name><parameter_list>(<parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>mtx</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Commit bump transaction.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>commitBumpTransaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>,
        <argument><expr><name>CMutableTransaction</name><operator>&amp;&amp;</operator> <name>mtx</name></expr></argument>,
        <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>errors</name></expr></argument>,
        <argument><expr><name>uint256</name><operator>&amp;</operator> <name>bumped_txid</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get a transaction.</comment>
    <function_decl><type><name>virtual</name> <name>CTransactionRef</name></type> <name>getTx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get transaction information.</comment>
    <function_decl><type><name>virtual</name> <name>WalletTx</name></type> <name>getWalletTx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get list of all wallet transactions.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletTx</name></expr></argument>&gt;</argument_list></name> <call><name>getWalletTxs</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Try to get updated status for a particular transaction, if possible without blocking.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>tryGetTxStatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>,
        <parameter><decl><type><name>WalletTxStatus</name><modifier>&amp;</modifier></type> <name>tx_status</name></decl></parameter>,
        <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>num_blocks</name></decl></parameter>,
        <parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type> <name>block_time</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get transaction details.</comment>
    <function_decl><type><name>virtual</name> <name>WalletTx</name></type> <name>getWalletTxDetails</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>,
        <parameter><decl><type><name>WalletTxStatus</name><modifier>&amp;</modifier></type> <name>tx_status</name></decl></parameter>,
        <parameter><decl><type><name>WalletOrderForm</name><modifier>&amp;</modifier></type> <name>order_form</name></decl></parameter>,
        <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>in_mempool</name></decl></parameter>,
        <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>num_blocks</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Fill PSBT.</comment>
    <function_decl><type><name>virtual</name> <name>TransactionError</name></type> <name>fillPSBT</name><parameter_list>(<parameter><decl><type><name>PartiallySignedTransaction</name><modifier>&amp;</modifier></type> <name>psbtx</name></decl></parameter>,
        <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>complete</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>sighash_type</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter> <comment type="block">/* SIGHASH_ALL */</comment>,
        <parameter><decl><type><name>bool</name></type> <name>sign</name> <init>= <expr><name>true</name></expr></init></decl></parameter>,
        <parameter><decl><type><name>bool</name></type> <name>bip32derivs</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get balances.</comment>
    <function_decl><type><name>virtual</name> <name>WalletBalances</name></type> <name>getBalances</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get balances if possible without blocking.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>tryGetBalances</name><parameter_list>(<parameter><decl><type><name>WalletBalances</name><modifier>&amp;</modifier></type> <name>balances</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>num_blocks</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get balance.</comment>
    <function_decl><type><name>virtual</name> <name>CAmount</name></type> <name>getBalance</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get available balance.</comment>
    <function_decl><type><name>virtual</name> <name>CAmount</name></type> <name>getAvailableBalance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether transaction input belongs to wallet.</comment>
    <function_decl><type><name>virtual</name> <name>isminetype</name></type> <name>txinIsMine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether transaction output belongs to wallet.</comment>
    <function_decl><type><name>virtual</name> <name>isminetype</name></type> <name>txoutIsMine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return debit amount if transaction input belongs to wallet.</comment>
    <function_decl><type><name>virtual</name> <name>CAmount</name></type> <name>getDebit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name></decl></parameter>, <parameter><decl><type><name>isminefilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return credit amount if transaction input belongs to wallet.</comment>
    <function_decl><type><name>virtual</name> <name>CAmount</name></type> <name>getCredit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>, <parameter><decl><type><name>isminefilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return AvailableCoins + LockedCoins grouped by wallet address.</comment>
    <comment type="line" format="doxygen">//! (put change in one group with wallet address)</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>CoinsList</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>WalletTxOut</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>virtual</name> <name>CoinsList</name></type> <name>listCoins</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return wallet transaction output information.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletTxOut</name></expr></argument>&gt;</argument_list></name> <call><name>getCoins</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>outputs</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Get required fee.</comment>
    <function_decl><type><name>virtual</name> <name>CAmount</name></type> <name>getRequiredFee</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tx_bytes</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get minimum fee.</comment>
    <function_decl><type><name>virtual</name> <name>CAmount</name></type> <name>getMinimumFee</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tx_bytes</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>,
        <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>returned_target</name></decl></parameter>,
        <parameter><decl><type><name>FeeReason</name><modifier>*</modifier></type> <name>reason</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get tx confirm target.</comment>
    <function_decl><type><name>virtual</name> <name>unsigned</name> <name>int</name></type> <name>getConfirmTarget</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line">// Return whether HD enabled.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>hdEnabled</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line">// Return whether the wallet is blank.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>canGetAddresses</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line">// check if a certain wallet flag is set.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsWalletFlagSet</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>flag</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line">// Get default address type.</comment>
    <function_decl><type><name>virtual</name> <name>OutputType</name></type> <name>getDefaultAddressType</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line">// Get default change type.</comment>
    <function_decl><type><name>virtual</name> <name>OutputType</name></type> <name>getDefaultChangeType</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get max tx fee.</comment>
    <function_decl><type><name>virtual</name> <name>CAmount</name></type> <name>getDefaultMaxTxFee</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line">// Remove wallet.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Register handler for unload message.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>UnloadFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleUnload</name><argument_list>(<argument>UnloadFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for show progress messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>ShowProgressFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name>, <name>int</name> <name>progress</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleShowProgress</name><argument_list>(<argument>ShowProgressFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for status changed messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>StatusChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleStatusChanged</name><argument_list>(<argument>StatusChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for address book changed messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>AddressBookChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>address</name>,
        <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>label</name>,
        <name>bool</name> <name>is_mine</name>,
        <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>purpose</name>,
        <name>ChangeType</name> <name>status</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleAddressBookChanged</name><argument_list>(<argument>AddressBookChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for transaction changed messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>TransactionChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name>, <name>ChangeType</name> <name>status</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleTransactionChanged</name><argument_list>(<argument>TransactionChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for watchonly changed messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>WatchOnlyChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name> <name>have_watch_only</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleWatchOnlyChanged</name><argument_list>(<argument>WatchOnlyChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for keypool changed messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>CanGetAddressesChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleCanGetAddressesChanged</name><argument_list>(<argument>CanGetAddressesChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line" format="doxygen">//! Information about one wallet address.</comment>
<struct>struct <name>WalletAddress</name>
<block>{
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isminetype</name></type> <name>is_mine</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>purpose</name></expr>;</expr_stmt>

    <macro><name>WalletAddress</name><argument_list>(<argument>CTxDestination dest</argument>, <argument>isminetype is_mine</argument>, <argument>std::string name</argument>, <argument>std::string purpose</argument>)</argument_list></macro>
        : <expr_stmt><expr><call><name>dest</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>is_mine</name><argument_list>(<argument><expr><name>is_mine</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>name</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>purpose</name><argument_list>(<argument>std::move(purpose)</argument>)</argument_list></macro>
    <expr><block>{
    }</block></expr></expr_stmt>
}</block>;</struct>

<comment type="line" format="doxygen">//! Collection of wallet balances.</comment>
<struct>struct <name>WalletBalances</name>
<block>{
    <decl_stmt><decl><type><name>CAmount</name></type> <name>balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>unconfirmed_balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>immature_balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>have_watch_only</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>watch_only_balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>unconfirmed_watch_only_balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>immature_watch_only_balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>balanceChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WalletBalances</name><operator>&amp;</operator> <name>prev</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <return>return <expr><name>balance</name> <operator>!=</operator> <name><name>prev</name><operator>.</operator><name>balance</name></name> <operator>||</operator> <name>unconfirmed_balance</name> <operator>!=</operator> <name><name>prev</name><operator>.</operator><name>unconfirmed_balance</name></name> <operator>||</operator>
               <name>immature_balance</name> <operator>!=</operator> <name><name>prev</name><operator>.</operator><name>immature_balance</name></name> <operator>||</operator> <name>watch_only_balance</name> <operator>!=</operator> <name><name>prev</name><operator>.</operator><name>watch_only_balance</name></name> <operator>||</operator>
               <name>unconfirmed_watch_only_balance</name> <operator>!=</operator> <name><name>prev</name><operator>.</operator><name>unconfirmed_watch_only_balance</name></name> <operator>||</operator>
               <name>immature_watch_only_balance</name> <operator>!=</operator> <name><name>prev</name><operator>.</operator><name>immature_watch_only_balance</name></name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
}</block>;</struct>

<comment type="line">// Wallet transaction information.</comment>
<struct>struct <name>WalletTx</name>
<block>{
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>isminetype</name></expr></argument>&gt;</argument_list></name> <name>txin_is_mine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>isminetype</name></expr></argument>&gt;</argument_list></name> <name>txout_is_mine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name> <name>txout_address</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>isminetype</name></expr></argument>&gt;</argument_list></name> <name>txout_address_is_mine</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>credit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>debit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>change</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>time</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>value_map</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_coinbase</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line" format="doxygen">//! Updated transaction status.</comment>
<struct>struct <name>WalletTxStatus</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>block_height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>blocks_to_maturity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth_in_main_chain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>time_received</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lock_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_final</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_trusted</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_abandoned</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_coinbase</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_in_main_chain</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line" format="doxygen">//! Wallet transaction output.</comment>
<struct>struct <name>WalletTxOut</name>
<block>{
    <decl_stmt><decl><type><name>CTxOut</name></type> <name>txout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth_in_main_chain</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_spent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line" format="doxygen">//! Return implementation of Wallet interface. This function is defined in</comment>
<comment type="line" format="doxygen">//! dummywallet.cpp and throws if the wallet component is not compiled.</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name> <call><name>MakeWallet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_INTERFACES_WALLET_H</comment>
</unit>
