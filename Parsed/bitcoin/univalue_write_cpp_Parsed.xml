<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/univalue/lib/univalue_write.cpp"><comment type="line">// Copyright 2014 BitPay Inc.</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"univalue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"univalue_escapes.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>json_escape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>inS</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>outS</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>outS</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>inS</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>inS</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name> <init>= <expr><name><name>inS</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escStr</name> <init>= <expr><name><name>escapes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>escStr</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>outS</name> <operator>+=</operator> <name>escStr</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>outS</name> <operator>+=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>outS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>UniValue</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prettyIndent</name></decl></parameter>,
                            <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>indentLevel</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>modIndent</name> <init>= <expr><name>indentLevel</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>modIndent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>modIndent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><name>typ</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VNULL</name></expr>:</case>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VOBJ</name></expr>:</case>
        <expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>modIndent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VARR</name></expr>:</case>
        <expr_stmt><expr><call><name>writeArray</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>modIndent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VSTR</name></expr>:</case>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"\""</literal> <operator>+</operator> <call><name>json_escape</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\""</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VNUM</name></expr>:</case>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>VBOOL</name></expr>:</case>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>val</name> <operator>==</operator> <literal type="string">"1"</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>indentStr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prettyIndent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>indentLevel</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>prettyIndent</name> <operator>*</operator> <name>indentLevel</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>UniValue</name><operator>::</operator><name>writeArray</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prettyIndent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>indentLevel</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>indentStr</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>indentLevel</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>indentLevel</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>(</operator><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>indentStr</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>indentLevel</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>UniValue</name><operator>::</operator><name>writeObject</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>prettyIndent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>indentLevel</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>indentStr</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>indentLevel</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"\""</literal> <operator>+</operator> <call><name>json_escape</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\":"</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name><name>values</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>indentLevel</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>(</operator><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">","</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>prettyIndent</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>indentStr</name><argument_list>(<argument><expr><name>prettyIndent</name></expr></argument>, <argument><expr><name>indentLevel</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
