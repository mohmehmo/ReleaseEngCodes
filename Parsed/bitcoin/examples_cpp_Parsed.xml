<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/examples.cpp"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>

<comment type="line">// Sanity test: this should loop ten times, and</comment>
<comment type="line">// min/max/average should be close to 100ms.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Sleep100ms</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>MilliSleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>Sleep100ms</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Extremely fast-running benchmark:</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// volatile, global so not optimized away</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Trig</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">0.000001</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>Trig</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
