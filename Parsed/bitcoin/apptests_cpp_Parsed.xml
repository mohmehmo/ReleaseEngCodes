<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/test/apptests.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/apptests.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoingui.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/networkstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/rpcconsole.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shutdown.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAction&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QEventLoop&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLineEdit&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QScopedPointer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTest&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextEdit&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtGlobal&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtTest/QtTestWidgets&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtTest/QtTestGui&gt;</cpp:file></cpp:include>

<namespace>namespace <block>{
<comment type="line" format="doxygen">//! Call getblockchaininfo RPC and check first field of JSON output.</comment>
<function><type><name>void</name></type> <name>TestRpcCommand</name><parameter_list>(<parameter><decl><type><name>RPCConsole</name><modifier>*</modifier></type> <name>console</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QEventLoop</name></type> <name>loop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QTextEdit</name><modifier>*</modifier></type> <name>messagesWidget</name> <init>= <expr><call><name><name>console</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QTextEdit</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"messagesWidget"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>QObject</name><operator>::</operator><name>connect</name></name><argument_list>(<argument><expr><name>messagesWidget</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTextEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QEventLoop</name><operator>::</operator><name>quit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QLineEdit</name><modifier>*</modifier></type> <name>lineEdit</name> <init>= <expr><call><name><name>console</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLineEdit</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"lineEdit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>QTest</name><operator>::</operator><name>keyClicks</name></name><argument_list>(<argument><expr><name>lineEdit</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QTest</name><operator>::</operator><name>keyClick</name></name><argument_list>(<argument><expr><name>lineEdit</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Key_Return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>loop</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>output</name> <init>= <expr><call><name><name>messagesWidget</name><operator>-&gt;</operator><name>toPlainText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>value</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>value</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>right</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>output</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>QChar</name><operator>::</operator><name>ObjectReplacementCharacter</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><literal type="string">"chain"</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"regtest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
}</block></namespace> <comment type="line">// namespace</comment>

<comment type="line" format="doxygen">//! Entry point for BitcoinApplication tests.</comment>
<function><type><name>void</name></type> <name><name>AppTests</name><operator>::</operator><name>appTests</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name><name>QApplication</name><operator>::</operator><name>platformName</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"minimal"</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Disable for mac on "minimal" platform to avoid crashes inside the Qt</comment>
        <comment type="line">// framework when it tries to look up unimplemented cocoa functions,</comment>
        <comment type="line">// and fails to handle returned nulls</comment>
        <comment type="line">// (https://bugreports.qt.io/browse/QTBUG-49686).</comment>
        <expr_stmt><expr><call><name>QWARN</name><argument_list>(<argument><expr><literal type="string">"Skipping AppTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke "</literal>
              <literal type="string">"with 'QT_QPA_PLATFORM=cocoa test_bitcoin-qt' on mac, or else use a linux or windows build."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>BasicTestingSetup</name></type> <name>test</name><argument_list>{<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr></argument>}</argument_list></decl>;</decl_stmt> <comment type="line">// Create a temp data directory to backup the gui settings to</comment>
    <expr_stmt><expr><call><name>ECC_Stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Already started by the common test setup, so stop it to avoid interference</comment>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DisconnectTestLogger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>parameterSetup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>createOptionsModel</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* reset settings */</comment>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>QScopedPointer</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>NetworkStyle</name></expr></argument>&gt;</argument_list></name></type> <name>style</name><argument_list>(<argument><expr><call><name><name>NetworkStyle</name><operator>::</operator><name>instantiate</name></name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>NetworkIDString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>setupPlatformStyle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>createWindow</name></name><argument_list>(<argument><expr><call><name><name>style</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>windowShown</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AppTests</name><operator>::</operator><name>guiTests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectCallback</name><argument_list>(<argument><expr><literal type="string">"guiTests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>baseInitialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>requestInitialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>requestShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_app</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reset global state to avoid interfering with later tests.</comment>
    <expr_stmt><expr><call><name>AbortShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UnloadBlockIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Entry point for BitcoinGUI tests.</comment>
<function><type><name>void</name></type> <name><name>AppTests</name><operator>::</operator><name>guiTests</name></name><parameter_list>(<parameter><decl><type><name>BitcoinGUI</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HandleCallback</name></type> <name>callback</name><argument_list>{<argument><expr><literal type="string">"guiTests"</literal></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>consoleShown</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AppTests</name><operator>::</operator><name>consoleTests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expectCallback</name><argument_list>(<argument><expr><literal type="string">"consoleTests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>action</name> <init>= <expr><call><name><name>window</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QAction</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"openRPCConsoleAction"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>activate</name></name><argument_list>(<argument><expr><name><name>QAction</name><operator>::</operator><name>Trigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Entry point for RPCConsole tests.</comment>
<function><type><name>void</name></type> <name><name>AppTests</name><operator>::</operator><name>consoleTests</name></name><parameter_list>(<parameter><decl><type><name>RPCConsole</name><modifier>*</modifier></type> <name>console</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HandleCallback</name></type> <name>callback</name><argument_list>{<argument><expr><literal type="string">"consoleTests"</literal></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TestRpcCommand</name><argument_list>(<argument><expr><name>console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Destructor to shut down after the last expected callback completes.</comment>
<destructor><name><name>AppTests</name><operator>::</operator><name>HandleCallback</name><operator>::</operator><name>~HandleCallback</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>callbacks</name> <operator>=</operator> <name><name>m_app_tests</name><operator>.</operator><name>m_callbacks</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>callbacks</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>m_callback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>it</name> <operator>!=</operator> <call><name><name>callbacks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>callbacks</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>callbacks</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_app_tests</name><operator>.</operator><name>m_app</name><operator>.</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></destructor>
</unit>
