<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/sigopcount_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/tx_verify.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<comment type="line">// Helpers:</comment>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type>
<name>Serialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sSerialized</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>sSerialized</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>sigopcount_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>GetSigOpCount</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test CScript::GetSigOpCount()</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>s1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint160</name></type> <name>dummy</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s1</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>&lt;&lt;</operator> <name>OP_IF</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_ENDIF</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">21U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>p2sh</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>Serialize</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>p2sh</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CKey</name></type> <name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>k</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>CScript</name></type> <name>s2</name> <init>= <expr><call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>s2</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>s2</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p2sh</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>p2sh</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>p2sh</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptSig2</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>Serialize</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>p2sh</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><name>scriptSig2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block" format="doxygen">/**
 * Verifies script execution of the zeroth scriptPubKey of tx output and
 * zeroth scriptSig and witness of tx input.
 */</comment>
<function><type><specifier>static</specifier> <name>ScriptError</name></type> <name>VerifyWithFlag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>inputi</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>inputi</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inputi</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptWitness</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>TransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="boolean">true</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>error</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Builds a creationTx from scriptPubKey and a spendingTx from scriptSig
 * and witness such that spendingTx spends output zero of creationTx.
 * Also inserts creationTx's output into the coins view.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>BuildTxs</name><parameter_list>(<parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>spendingTx</name></decl></parameter>, <parameter><decl><type><name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>coins</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>creationTx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScriptWitness</name><modifier>&amp;</modifier></type> <name>witness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>creationTx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>creationTx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>creationTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>creationTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>creationTx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>creationTx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>creationTx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>scriptPubKey</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spendingTx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>creationTx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <name>scriptSig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptWitness</name> <operator>=</operator> <name>witness</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spendingTx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AddCoins</name><argument_list>(<argument><expr><name>coins</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>GetTxSigOpCost</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Transaction creates outputs</comment>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>creationTx</name></decl>;</decl_stmt>
    <comment type="line">// Transaction that spends outputs and whose</comment>
    <comment type="line">// sig op cost is going to be tested</comment>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>spendingTx</name></decl>;</decl_stmt>

    <comment type="line">// Create utxo set</comment>
    <decl_stmt><decl><type><name>CCoinsView</name></type> <name>coinsDummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCache</name></type> <name>coins</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coinsDummy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Create key</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Default flags</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Multisig script (legacy counting)</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIGVERIFY</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Do not use a valid signature to avoid using wallet operations.</comment>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><call><name>CScriptWitness</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Legacy counting only includes signature operations in scriptSigs and scriptPubKeys</comment>
        <comment type="line">// of a transaction and does not take the actual executed sig operations into account.</comment>
        <comment type="line">// spendingTx in itself does not contain a signature operation.</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// creationTx contains two signature operations in its scriptPubKey, but legacy counting</comment>
        <comment type="line">// is not accurate.</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MAX_PUBKEYS_PER_MULTISIG</name> <operator>*</operator> <name>WITNESS_SCALE_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Sanity check: script verification fails because of an invalid signature.</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VerifyWithFlag</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCRIPT_ERR_CHECKMULTISIGVERIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Multisig nested in P2SH</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>redeemScript</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIGVERIFY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><call><name>CScriptWitness</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <name>WITNESS_SCALE_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VerifyWithFlag</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCRIPT_ERR_CHECKMULTISIGVERIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// P2WPKH witness program</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>p2pk</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>p2pk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>scriptWitness</name></decl>;</decl_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>


        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// No signature operations if we don't verify the witness.</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>SCRIPT_VERIFY_WITNESS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VerifyWithFlag</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCRIPT_ERR_EQUALVERIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// The sig op cost for witness version != 0 is zero.</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>scriptPubKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scriptPubKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x51</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scriptPubKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// The witness of a coinbase transaction is not taken into account.</comment>
        <expr_stmt><expr><name><name>spendingTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// P2WPKH nested in P2SH</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>p2pk</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name> <init>= <expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>p2pk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>scriptWitness</name></decl>;</decl_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VerifyWithFlag</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCRIPT_ERR_EQUALVERIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// P2WSH witness program</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witnessScript</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIGVERIFY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>witnessScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>scriptWitness</name></decl>;</decl_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(witnessScript.begin(), witnessScript.end())</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>SCRIPT_VERIFY_WITNESS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VerifyWithFlag</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCRIPT_ERR_CHECKMULTISIGVERIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// P2WSH nested in P2SH</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witnessScript</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIGVERIFY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>redeemScript</name> <init>= <expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>witnessScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>scriptWitness</name></decl>;</decl_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
        <macro><name>scriptWitness</name></macro><expr_stmt><expr><operator>.</operator><macro><name>stack</name></macro><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(witnessScript.begin(), witnessScript.end())</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BuildTxs</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>creationTx</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetTransactionSigOpCost</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>VerifyWithFlag</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>creationTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spendingTx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCRIPT_ERR_CHECKMULTISIGVERIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
