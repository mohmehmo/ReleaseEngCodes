<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/reverse_iterator.h"><comment type="line">// Taken from https://gist.github.com/arvidsson/7231973</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_REVERSE_ITERATOR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_REVERSE_ITERATOR_H</name></cpp:macro></cpp:define>

<comment type="block" format="doxygen">/**
 * Template used for reverse iteration in C++11 range-based for loops.
 *
 *   std::vector&lt;int&gt; v = {1, 2, 3, 4, 5};
 *   for (auto x : reverse_iterate(v))
 *       std::cout &lt;&lt; x &lt;&lt; " ";
 */</comment>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>reverse_range</name>
<block>{<block_content>
    <decl_stmt><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>m_x</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>reverse_range</name><argument_list>(<argument><expr><name>T</name> <operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_x</name><argument_list>(<argument>x</argument>)</argument_list></macro> <block>{}</block>

    <name>auto</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>-&gt;</operator> <macro><name>decltype</name><argument_list>(<argument>this-&gt;m_x.rbegin()</argument>)</argument_list></macro>
    <block>{
        <return>return <expr><call><name><name>m_x</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>auto</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>-&gt;</operator> <macro><name>decltype</name><argument_list>(<argument>this-&gt;m_x.rend()</argument>)</argument_list></macro>
    <block>{
        <return>return <expr><call><name><name>m_x</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>reverse_range</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>reverse_iterate</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>reverse_range</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_REVERSE_ITERATOR_H</comment>
</unit>
