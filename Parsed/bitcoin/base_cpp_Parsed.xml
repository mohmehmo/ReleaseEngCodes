<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/index/base.cpp"><comment type="line">// Copyright (c) 2017-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/base.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shutdown.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;warnings.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>constexpr</specifier> <name>char</name></type> <name>DB_BEST_BLOCK</name> <init>= <expr><literal type="char">'B'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>constexpr</specifier> <name>int64_t</name></type> <name>SYNC_LOG_INTERVAL</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt> <comment type="line">// seconds</comment>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>int64_t</name></type> <name>SYNC_LOCATOR_WRITE_INTERVAL</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt> <comment type="line">// seconds</comment>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>void</name></type> <name>FatalError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMessage</name> <init>= <expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SetMiscWarning</name><argument_list>(<argument><expr><name>strMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"*** %s\n"</literal></expr></argument>, <argument><expr><name>strMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeMessageBox</name></name><argument_list>(
        <argument><expr><literal type="string">"Error: A fatal internal error occurred, see debug.log for details"</literal></expr></argument>,
        <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>StartShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>BaseIndex</name><operator>::</operator><name>DB</name><operator>::</operator><name>DB</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_cache_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_memory</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_wipe</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_obfuscate</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>CDBWrapper</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>n_cache_size</name></expr></argument>, <argument><expr><name>f_memory</name></expr></argument>, <argument><expr><name>f_wipe</name></expr></argument>, <argument><expr><name>f_obfuscate</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>bool</name></type> <name><name>BaseIndex</name><operator>::</operator><name>DB</name><operator>::</operator><name>ReadBestBlock</name></name><parameter_list>(<parameter><decl><type><name>CBlockLocator</name><modifier>&amp;</modifier></type> <name>locator</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>Read</name><argument_list>(<argument><expr><name>DB_BEST_BLOCK</name></expr></argument>, <argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>locator</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BaseIndex</name><operator>::</operator><name>DB</name><operator>::</operator><name>WriteBestBlock</name></name><parameter_list>(<parameter><decl><type><name>CDBBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockLocator</name><modifier>&amp;</modifier></type> <name>locator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>DB_BEST_BLOCK</name></expr></argument>, <argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<destructor><name><name>BaseIndex</name><operator>::</operator><name>~BaseIndex</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Interrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>bool</name></type> <name><name>BaseIndex</name><operator>::</operator><name>Init</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlockLocator</name></type> <name>locator</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ReadBestBlock</name><argument_list>(<argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>locator</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>locator</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <call><name>FindForkInGlobalIndex</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>m_synced</name> <operator>=</operator> <call><name><name>m_best_block_index</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>NextSyncBlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator> <name>pindex_prev</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr></argument>;

    if <argument><expr><operator>(</operator><operator>!</operator><name>pindex_prev</name><operator>)</operator> <block>{
        <return>return <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Genesis</name><argument_list>()</argument_list></call></expr>;</return>
    }</block>

    <specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator> <name>pindex</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Next</name><argument_list>(<argument><expr><name>pindex_prev</name></expr></argument>)</argument_list></call></expr></argument>;
    if <argument><expr><operator>(</operator><name>pindex</name><operator>)</operator> <block>{
        <return>return <expr><name>pindex</name></expr>;</return>
    }</block></expr></argument>

    <return>return <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Next</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>FindFork</name><argument_list>(<argument><expr><name>pindex_prev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></argument_list></decl></decl_stmt>
}

void <macro><name>BaseIndex</name></macro><expr_stmt><expr><name><operator>::</operator><name>ThreadSync</name></name><operator>(</operator><operator>)</operator>
<block>{
    <expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator> <name>pindex</name> <operator>=</operator> <call><name><name>m_best_block_index</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_synced</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>consensus_params</name> <operator>=</operator> <call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>last_log_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>last_locator_write_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>m_interrupt</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <name>pindex</name></expr>;</expr_stmt>
                <comment type="line">// No need to handle errors in Commit. If it fails, the error will be already be</comment>
                <comment type="line">// logged. The best way to recover is to continue, as index cannot be corrupted by</comment>
                <comment type="line">// a missed commit to disk for an advanced index state.</comment>
                <expr_stmt><expr><call><name>Commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            <expr_stmt/></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>}</block>

            <block>{
                <expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;
                <expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator> <name>pindex_next</name> <operator>=</operator> <call><name>NextSyncBlock</name><argument_list>(<argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>;
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pindex_next</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <name>pindex</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>m_synced</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <comment type="line">// No need to handle errors in Commit. See rationale above.</comment>
                    <expr_stmt><expr><call><name>Commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>pindex_next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>!=</operator> <name>pindex</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Rewind</name><argument_list>(<argument><expr><name>pindex</name></expr></argument>, <argument><expr><name><name>pindex_next</name><operator>-&gt;</operator><name>pprev</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to rewind index %s to a previous chain tip"</literal></expr></argument>,
                               <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>pindex</name> <operator>=</operator> <name>pindex_next</name></expr>;</expr_stmt>
            }

            int64_t <expr_stmt><expr><name>current_time</name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>last_log_time</name> <operator>+</operator> <name>SYNC_LOG_INTERVAL</name> <operator>&lt;</operator> <name>current_time</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Syncing %s with block chain from height %d\n"</literal></expr></argument>,
                          <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>last_log_time</name> <operator>=</operator> <name>current_time</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>last_locator_write_time</name> <operator>+</operator> <name>SYNC_LOCATOR_WRITE_INTERVAL</name> <operator>&lt;</operator> <name>current_time</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <name>pindex</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>last_locator_write_time</name> <operator>=</operator> <name>current_time</name></expr>;</expr_stmt>
                <comment type="line">// No need to handle errors in Commit. See rationale above.</comment>
                <expr_stmt><expr><call><name>Commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadBlockFromDisk</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pindex</name></expr></argument>, <argument><expr><name>consensus_params</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to read block %s from disk"</literal></expr></argument>,
                           <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to write block %s to index database"</literal></expr></argument>,
                           <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        }
    }

    <if_stmt><if>if <condition>(<expr><name>pindex</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s is enabled at height %d\n"</literal></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s is enabled\n"</literal></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
}

bool <macro><name>BaseIndex</name></macro><expr_stmt><expr><name><operator>::</operator><name>Commit</name></name><operator>(</operator><operator>)</operator>
<block>{
    <expr><name>CDBBatch</name> <call><name>batch</name><argument_list>(<argument><expr><call><name>GetDB</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CommitInternal</name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>GetDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>WriteBatch</name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to commit latest %s state"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}

bool <macro><name>BaseIndex</name></macro><expr_stmt><expr><name><operator>::</operator><name>CommitInternal</name></name><operator>(</operator><name>CDBBatch</name><operator>&amp;</operator> <name>batch</name><operator>)</operator>
<block>{
    <expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>GetDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>WriteBestBlock</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetLocator</name><argument_list>(<argument><expr><name>m_best_block_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>bool</name></type> <name><name>BaseIndex</name><operator>::</operator><name>Rewind</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>current_tip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>new_tip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>current_tip</name> <operator>==</operator> <name>m_best_block_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>current_tip</name><operator>-&gt;</operator><name>GetAncestor</name></name><argument_list>(<argument><expr><name><name>new_tip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>new_tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// In the case of a reorg, ensure persisted block locator is not stale.</comment>
    <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <name>new_tip</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Commit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// If commit fails, revert the best block index to avoid corruption.</comment>
        <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <name>current_tip</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BaseIndex</name><operator>::</operator><name>BlockConnected</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>txn_conflicted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_synced</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>best_block_index</name> <init>= <expr><call><name><name>m_best_block_index</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>best_block_index</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: First block connected is not the genesis block (height=%d)"</literal></expr></argument>,
                       <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Ensure block connects to an ancestor of the current best block. This should be the case</comment>
        <comment type="line">// most of the time, but may not be immediately after the sync thread catches up and sets</comment>
        <comment type="line">// m_synced. Consider the case where there is a reorg and the blocks on the stale branch are</comment>
        <comment type="line">// in the ValidationInterface queue backlog even after the sync thread has caught up to the</comment>
        <comment type="line">// new chain tip. In this unlikely event, log a warning and let the queue clear.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>best_block_index</name><operator>-&gt;</operator><name>GetAncestor</name></name><argument_list>(<argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>pindex</name><operator>-&gt;</operator><name>pprev</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: WARNING: Block %s does not connect to an ancestor of "</literal> <comment type="block">/* Continued */</comment>
                      <literal type="string">"known best chain (tip=%s); not updating index\n"</literal></expr></argument>,
                      <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>best_block_index</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>best_block_index</name> <operator>!=</operator> <name><name>pindex</name><operator>-&gt;</operator><name>pprev</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Rewind</name><argument_list>(<argument><expr><name>best_block_index</name></expr></argument>, <argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>pprev</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to rewind index %s to a previous chain tip"</literal></expr></argument>,
                       <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>WriteBlock</name><argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>, <argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>m_best_block_index</name> <operator>=</operator> <name>pindex</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to write block %s to index"</literal></expr></argument>,
                   <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BaseIndex</name><operator>::</operator><name>ChainStateFlushed</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockLocator</name><modifier>&amp;</modifier></type> <name>locator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_synced</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>locator_tip_hash</name> <init>= <expr><call><name><name>locator</name><operator>.</operator><name>vHave</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>locator_tip_index</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>locator_tip_index</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>locator_tip_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locator_tip_index</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: First block (hash=%s) in locator was not found"</literal></expr></argument>,
                   <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>locator_tip_hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// This checks that ChainStateFlushed callbacks are received after BlockConnected. The check may fail</comment>
    <comment type="line">// immediately after the sync thread catches up and sets m_synced. Consider the case where</comment>
    <comment type="line">// there is a reorg and the blocks on the stale branch are in the ValidationInterface queue</comment>
    <comment type="line">// backlog even after the sync thread has caught up to the new chain tip. In this unlikely</comment>
    <comment type="line">// event, log a warning and let the queue clear.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>best_block_index</name> <init>= <expr><call><name><name>m_best_block_index</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>best_block_index</name><operator>-&gt;</operator><name>GetAncestor</name></name><argument_list>(<argument><expr><name><name>locator_tip_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>locator_tip_index</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: WARNING: Locator contains block (hash=%s) not on known best "</literal> <comment type="block">/* Continued */</comment>
                  <literal type="string">"chain (tip=%s); not writing index locator\n"</literal></expr></argument>,
                  <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>locator_tip_hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name><name>best_block_index</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// No need to handle errors in Commit. If it fails, the error will be already be logged. The</comment>
    <comment type="line">// best way to recover is to continue, as index cannot be corrupted by a missed commit to disk</comment>
    <comment type="line">// for an advanced index state.</comment>
    <expr_stmt><expr><call><name>Commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BaseIndex</name><operator>::</operator><name>BlockUntilSyncedToCurrentChain</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockNotHeld</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_synced</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <block>{<block_content>
        <comment type="line">// Skip the queue-draining stuff if we know we're caught up with</comment>
        <comment type="line">// ::ChainActive().Tip().</comment>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>chain_tip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>best_block_index</name> <init>= <expr><call><name><name>m_best_block_index</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>best_block_index</name><operator>-&gt;</operator><name>GetAncestor</name></name><argument_list>(<argument><expr><name><name>chain_tip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>chain_tip</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: %s is catching up on block notifications\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SyncWithValidationInterfaceQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BaseIndex</name><operator>::</operator><name>Interrupt</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>m_interrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BaseIndex</name><operator>::</operator><name>Start</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Need to register this ValidationInterface before running Init(), so that</comment>
    <comment type="line">// callbacks are not missed if Init sets m_synced to true.</comment>
    <expr_stmt><expr><call><name>RegisterValidationInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FatalError</name><argument_list>(<argument><expr><literal type="string">"%s: %s failed to initialize"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>m_thread_sync</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>thread</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TraceThread</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BaseIndex</name><operator>::</operator><name>ThreadSync</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BaseIndex</name><operator>::</operator><name>Stop</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>UnregisterValidationInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>m_thread_sync</name><operator>.</operator><name>joinable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_thread_sync</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
