<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/filename.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// File names used by DB code</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_FILENAME_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_FILENAME_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Env</name></decl>;</decl_stmt>

<enum>enum <name>FileType</name> <block>{
  <decl><name>kLogFile</name></decl>,
  <decl><name>kDBLockFile</name></decl>,
  <decl><name>kTableFile</name></decl>,
  <decl><name>kDescriptorFile</name></decl>,
  <decl><name>kCurrentFile</name></decl>,
  <decl><name>kTempFile</name></decl>,
  <decl><name>kInfoLogFile</name></decl>  <comment type="line">// Either the current one, or an old one</comment>
}</block>;</enum>

<comment type="line">// Return the name of the log file with the specified number</comment>
<comment type="line">// in the db named by "dbname".  The result will be prefixed with</comment>
<comment type="line">// "dbname".</comment>
<extern>extern std::string LogFileName(const std::string&amp; dbname<operator>,</operator> uint64_t number</extern>)</block_content></block></decl>;</decl_stmt>

<comment type="line">// Return the name of the sstable with the specified number</comment>
<comment type="line">// in the db named by "dbname".  The result will be prefixed with</comment>
<comment type="line">// "dbname".</comment>
<extern>extern std::string TableFileName(const std::string&amp; dbname<operator>,</operator> uint64_t number</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// Return the legacy file name for an sstable with the specified number</comment>
<comment type="line">// in the db named by "dbname". The result will be prefixed with</comment>
<comment type="line">// "dbname".</comment>
<extern>extern std::string SSTTableFileName(const std::string&amp; dbname<operator>,</operator> uint64_t number</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// Return the name of the descriptor file for the db named by</comment>
<comment type="line">// "dbname" and the specified incarnation number.  The result will be</comment>
<comment type="line">// prefixed with "dbname".</comment>
<extern>extern std::string DescriptorFileName(const std::string&amp; dbname<operator>,</operator>
                                      uint64_t number</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// Return the name of the current file.  This file contains the name</comment>
<comment type="line">// of the current manifest file.  The result will be prefixed with</comment>
<comment type="line">// "dbname".</comment>
<extern>extern std::string CurrentFileName(const std::string&amp; dbname</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// Return the name of the lock file for the db named by</comment>
<comment type="line">// "dbname".  The result will be prefixed with "dbname".</comment>
<extern>extern std::string LockFileName(const std::string&amp; dbname</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// Return the name of a temporary file owned by the db named "dbname".</comment>
<comment type="line">// The result will be prefixed with "dbname".</comment>
<extern>extern std::string TempFileName(const std::string&amp; dbname<operator>,</operator> uint64_t number</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// Return the name of the info log file for "dbname".</comment>
<extern>extern std::string InfoLogFileName(const std::string&amp; dbname</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// Return the name of the old info log file for "dbname".</comment>
<extern>extern std::string OldInfoLogFileName(const std::string&amp; dbname</extern>)<empty_stmt>;</empty_stmt>

<comment type="line">// If filename is a leveldb file, store the type of the file in *type.</comment>
<comment type="line">// The number encoded in the filename is stored in *number.  If the</comment>
<comment type="line">// filename was successfully parsed, returns true.  Else return false.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>ParseFileName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>filename</name></expr></argument>,
                          <argument><expr><name>uint64_t</name><operator>*</operator> <name>number</name></expr></argument>,
                          <argument><expr><name>FileType</name><operator>*</operator> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Make the CURRENT file point to the descriptor file with the</comment>
<comment type="line">// specified number.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Status</name></type> <name>SetCurrentFile</name><argument_list>(<argument><expr><name>Env</name><operator>*</operator> <name>env</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>dbname</name></expr></argument>,
                             <argument><expr><name>uint64_t</name> <name>descriptor_number</name></expr></argument>)</argument_list></decl>;</decl_stmt>


}  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_FILENAME_H_</comment>
</unit>
