<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/script/bitcoinconsensus.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SCRIPT_BITCOINCONSENSUS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SCRIPT_BITCOINCONSENSUS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_BITCOIN_INTERNAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DLL_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FUNC_ATTRIBUTE_DLLEXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
      <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL</name></cpp:macro></cpp:define>
      <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FUNC_ATTRIBUTE_VISIBILITY</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default")))</cpp:value></cpp:define>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STATIC_LIBBITCOINCONSENSUS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EXPORT_SYMBOL</name></cpp:ifndef>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_SYMBOL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOINCONSENSUS_API_VER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>bitcoinconsensus_error_t</name>
<block>{
    <decl><name>bitcoinconsensus_ERR_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>bitcoinconsensus_ERR_TX_INDEX</name></decl>,
    <decl><name>bitcoinconsensus_ERR_TX_SIZE_MISMATCH</name></decl>,
    <decl><name>bitcoinconsensus_ERR_TX_DESERIALIZE</name></decl>,
    <decl><name>bitcoinconsensus_ERR_AMOUNT_REQUIRED</name></decl>,
    <decl><name>bitcoinconsensus_ERR_INVALID_FLAGS</name></decl>,
}</block></enum></type> <name>bitcoinconsensus_error</name>;</typedef>

<comment type="block" format="doxygen">/** Script verification flags */</comment>
<enum>enum
<block>{
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE</name>                <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH</name>                <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>, <comment type="line">// evaluate P2SH (BIP16) subscripts</comment>
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG</name>              <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>, <comment type="line">// enforce strict DER (BIP66) compliance</comment>
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY</name>           <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>, <comment type="line">// enforce NULLDUMMY (BIP147)</comment>
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr></init></decl>, <comment type="line">// enable CHECKLOCKTIMEVERIFY (BIP65)</comment>
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></init></decl>, <comment type="line">// enable CHECKSEQUENCEVERIFY (BIP112)</comment>
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS</name>             <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></init></decl>, <comment type="line">// enable WITNESS (BIP141)</comment>
    <decl><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL</name>                 <init>= <expr><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH</name> <operator>|</operator> <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG</name> <operator>|</operator>
                                                               <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY</name> <operator>|</operator> <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY</name> <operator>|</operator>
                                                               <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY</name> <operator>|</operator> <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS</name></expr></init></decl>
}</block>;</enum>

<comment type="line" format="doxygen">/// Returns 1 if the input nIn of the serialized transaction pointed to by</comment>
<comment type="line" format="doxygen">/// txTo correctly spends the scriptPubKey pointed to by scriptPubKey under</comment>
<comment type="line" format="doxygen">/// the additional constraints specified by flags.</comment>
<comment type="line" format="doxygen">/// If not nullptr, err will contain an error/success code for the operation</comment>
<function_decl><type><name>EXPORT_SYMBOL</name> <name>int</name></type> <name>bitcoinconsensus_verify_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>scriptPubKeyLen</name></decl></parameter>,
                                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>txTo</name></decl></parameter>        , <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>txToLen</name></decl></parameter>,
                                                 <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bitcoinconsensus_error</name><modifier>*</modifier></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT_SYMBOL</name> <name>int</name></type> <name>bitcoinconsensus_verify_script_with_amount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>scriptPubKeyLen</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>amount</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>txTo</name></decl></parameter>        , <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>txToLen</name></decl></parameter>,
                                    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bitcoinconsensus_error</name><modifier>*</modifier></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXPORT_SYMBOL</name> <name>unsigned</name> <name>int</name></type> <name>bitcoinconsensus_version</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern> <comment type="line">// extern "C"</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXPORT_SYMBOL</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SCRIPT_BITCOINCONSENSUS_H</comment>
</unit>
