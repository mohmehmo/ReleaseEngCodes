<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/flatfile.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flatfile.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;logging.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<constructor><name><name>FlatFileSeq</name><operator>::</operator><name>FlatFileSeq</name></name><parameter_list>(<parameter><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chunk_size</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>m_dir</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>,
    <call><name>m_prefix</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call>,
    <call><name>m_chunk_size</name><argument_list>(<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>invalid_argument</name></name><argument_list>(<argument><expr><literal type="string">"chunk_size must be positive"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></constructor>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>FlatFilePos</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"FlatFilePos(nFile=%i, nPos=%i)"</literal></expr></argument>, <argument><expr><name>nFile</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name><name>FlatFileSeq</name><operator>::</operator><name>FileName</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><name>m_dir</name> <operator>/</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s%05u.dat"</literal></expr></argument>, <argument><expr><name>m_prefix</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FILE</name><modifier>*</modifier></type> <name><name>FlatFileSeq</name><operator>::</operator><name>Open</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>read_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>pos</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>path</name> <init>= <expr><call><name>FileName</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fs</name><operator>::</operator><name>create_directories</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>parent_path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><ternary><condition><expr><name>read_only</name></expr> ?</condition><then> <expr><literal type="string">"rb"</literal></expr></then><else>: <expr><literal type="string">"rb+"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>read_only</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"wb+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Unable to open file %s\n"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>nPos</name></name> <operator>&amp;&amp;</operator> <call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nPos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Unable to seek to position %u of %s\n"</literal></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nPos</name></name></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>FlatFileSeq</name><operator>::</operator><name>Allocate</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_size</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>out_of_space</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>out_of_space</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_old_chunks</name> <init>= <expr><operator>(</operator><name><name>pos</name><operator>.</operator><name>nPos</name></name> <operator>+</operator> <name>m_chunk_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>m_chunk_size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_new_chunks</name> <init>= <expr><operator>(</operator><name><name>pos</name><operator>.</operator><name>nPos</name></name> <operator>+</operator> <name>add_size</name> <operator>+</operator> <name>m_chunk_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>m_chunk_size</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>n_new_chunks</name> <operator>&gt;</operator> <name>n_old_chunks</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>old_size</name> <init>= <expr><name><name>pos</name><operator>.</operator><name>nPos</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><name>n_new_chunks</name> <operator>*</operator> <name>m_chunk_size</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>inc_size</name> <init>= <expr><name>new_size</name> <operator>-</operator> <name>old_size</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>CheckDiskSpace</name><argument_list>(<argument><expr><name>m_dir</name></expr></argument>, <argument><expr><name>inc_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>Open</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Pre-allocating up to position 0x%x in %s%05u.dat\n"</literal></expr></argument>, <argument><expr><name>new_size</name></expr></argument>, <argument><expr><name>m_prefix</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>AllocateFileRange</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nPos</name></name></expr></argument>, <argument><expr><name>inc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>inc_size</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>out_of_space</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FlatFileSeq</name><operator>::</operator><name>Flush</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>finalize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>Open</name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Avoid fseek to nPos</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: failed to open file %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>finalize</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TruncateFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nPos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: failed to truncate file %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FileCommit</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: failed to commit file %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
