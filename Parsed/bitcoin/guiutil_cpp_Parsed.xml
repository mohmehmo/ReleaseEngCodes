<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/guiutil.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinaddressvalidator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/qvalidatedlineedit.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/sendcoinsrecipient.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;base58.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_IE</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_IE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_IE</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NOMINMAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMINMAX</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlwapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractItemView&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QClipboard&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDateTime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDesktopServices&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDoubleValidator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFileDialog&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFont&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFontDatabase&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFontMetrics&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QKeyEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLineEdit&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMouseEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QProgressDialog&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSettings&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextDocument&gt;</cpp:file></cpp:include> <comment type="line">// for Qt::mightBeRichText</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QThread&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QUrlQuery&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Q_OS_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QProcess&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ForceActivation</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<namespace>namespace <name>GUIUtil</name> <block>{

<function><type><name>QString</name></type> <name>dateTimeStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QDateTime</name> <modifier>&amp;</modifier></type><name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>date</name><operator>.</operator><name>date</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>SystemLocaleShortDate</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>date</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="string">"hh:mm"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>dateTimeStr</name><parameter_list>(<parameter><decl><type><name>qint64</name></type> <name>nTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>dateTimeStr</name><argument_list>(<argument><expr><call><name><name>QDateTime</name><operator>::</operator><name>fromTime_t</name></name><argument_list>(<argument><expr><operator>(</operator><name>qint32</name><operator>)</operator><name>nTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QFont</name></type> <name>fixedPitchFont</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>QFontDatabase</name><operator>::</operator><name>systemFont</name></name><argument_list>(<argument><expr><name><name>QFontDatabase</name><operator>::</operator><name>FixedFont</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Just some dummy data to generate a convincing random-looking (but consistent) address</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dummydata</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xeb</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x1d</literal></expr>,<expr><literal type="number">0xfc</literal></expr>,<expr><literal type="number">0xeb</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0xb6</literal></expr>,<expr><literal type="number">0x7d</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xae</literal></expr>,<expr><literal type="number">0xb1</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x47</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// Generate a dummy address with invalid CRC, starting with the network prefix.</comment>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>DummyAddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CChainParams</name> <modifier>&amp;</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sourcedata</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>Base58Prefix</name></name><argument_list>(<argument><expr><name><name>CChainParams</name><operator>::</operator><name>PUBKEY_ADDRESS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sourcedata</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sourcedata</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dummydata</name></expr></argument>, <argument><expr><name>dummydata</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummydata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <comment type="line">// Try every trailing byte</comment>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name> <init>= <expr><call><name>EncodeBase58</name><argument_list>(<argument><expr><call><name><name>sourcedata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sourcedata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>sourcedata</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestinationString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>s</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>sourcedata</name><index>[<expr><call><name><name>sourcedata</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setupAddressWidget</name><parameter_list>(<parameter><decl><type><name>QValidatedLineEdit</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>setFocusProxy</name></name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>widget</name><operator>-&gt;</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name>fixedPitchFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// We don't want translators to use own addresses in translations</comment>
    <comment type="line">// and this is the only place, where this address is supplied.</comment>
    <expr_stmt><expr><call><name><name>widget</name><operator>-&gt;</operator><name>setPlaceholderText</name></name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"Enter a Bitcoin address (e.g. %1)"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(
        <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>DummyAddress</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>widget</name><operator>-&gt;</operator><name>setValidator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BitcoinAddressEntryValidator</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>widget</name><operator>-&gt;</operator><name>setCheckValidator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BitcoinAddressCheckValidator</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>parseBitcoinURI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QUrl</name> <modifier>&amp;</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>SendCoinsRecipient</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// return if URI is not valid or is no bitcoin: URI</comment>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>uri</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>uri</name><operator>.</operator><name>scheme</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"bitcoin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SendCoinsRecipient</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>address</name></name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Trim any following forward slash which may have been added by the OS</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>rv</name><operator>.</operator><name>address</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>address</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><call><name><name>rv</name><operator>.</operator><name>address</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>amount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QUrlQuery</name></type> <name>uriQuery</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name><name>QPair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>, <argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>items</name> <init>= <expr><call><name><name>uriQuery</name><operator>.</operator><name>queryItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name><name>QPair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>, <argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>i</name> <init>= <expr><call><name><name>items</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>items</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>fShouldReturnFalse</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>i</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"req-"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>i</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fShouldReturnFalse</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <literal type="string">"label"</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>fShouldReturnFalse</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <literal type="string">"message"</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>fShouldReturnFalse</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <literal type="string">"amount"</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>i</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>BitcoinUnits</name><operator>::</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>BTC</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rv</name><operator>.</operator><name>amount</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>fShouldReturnFalse</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>fShouldReturnFalse</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>(<expr><name>out</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>parseBitcoinURI</name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>SendCoinsRecipient</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QUrl</name></type> <name>uriInstance</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name>parseBitcoinURI</name><argument_list>(<argument><expr><name>uriInstance</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>formatBitcoinURI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SendCoinsRecipient</name> <modifier>&amp;</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>bech_32</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>address</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Bech32HRP</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>ret</name> <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"bitcoin:%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><ternary><condition><expr><name>bech_32</name></expr> ?</condition><then> <expr><call><name><name>info</name><operator>.</operator><name>address</name><operator>.</operator><name>toUpper</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>info</name><operator>.</operator><name>address</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>paramCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>amount</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"?amount=%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>BTC</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>amount</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>separatorNever</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>paramCount</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>info</name><operator>.</operator><name>label</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>lbl</name><argument_list>(<argument><expr><call><name><name>QUrl</name><operator>::</operator><name>toPercentEncoding</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1label=%2"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><ternary><condition><expr><name>paramCount</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><literal type="string">"&amp;"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>lbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>paramCount</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>info</name><operator>.</operator><name>message</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>msg</name><argument_list>(<argument><expr><call><name><name>QUrl</name><operator>::</operator><name>toPercentEncoding</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1message=%2"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><ternary><condition><expr><name>paramCount</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><literal type="string">"&amp;"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>paramCount</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isDust</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxOut</name></type> <name>txOut</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name>IsDust</name><argument_list>(<argument><expr><name>txOut</name></expr></argument>, <argument><expr><call><name><name>node</name><operator>.</operator><name>getDustRelayFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>HtmlEscape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fMultiLine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>escaped</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>toHtmlEscaped</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>fMultiLine</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name><name>escaped</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;br&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>escaped</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>HtmlEscape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fMultiLine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>HtmlEscape</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fMultiLine</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>copyEntryData</name><parameter_list>(<parameter><decl><type><name>QAbstractItemView</name> <modifier>*</modifier></type><name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>view</name> <operator>||</operator> <operator>!</operator><call><name><name>view</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>QModelIndexList</name></type> <name>selection</name> <init>= <expr><call><name><name>view</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>selectedRows</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>selection</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Copy first item</comment>
        <expr_stmt><expr><call><name>setClipboard</name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>data</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>QModelIndex</name></expr></argument>&gt;</argument_list></name></type> <name>getEntryData</name><parameter_list>(<parameter><decl><type><name>QAbstractItemView</name> <modifier>*</modifier></type><name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>view</name> <operator>||</operator> <operator>!</operator><call><name><name>view</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>QModelIndex</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>view</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>selectedRows</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>getDefaultDataDirectory</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>boostPathToQString</name><argument_list>(<argument><expr><call><name>GetDefaultDataDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>getSaveFileName</name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>caption</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>dir</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>filter</name></decl></parameter>,
    <parameter><decl><type><name>QString</name> <modifier>*</modifier></type><name>selectedSuffixOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>selectedFilter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>myDir</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>dir</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <comment type="line">// Default to user documents location</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>myDir</name> <operator>=</operator> <call><name><name>QStandardPaths</name><operator>::</operator><name>writableLocation</name></name><argument_list>(<argument><expr><name><name>QStandardPaths</name><operator>::</operator><name>DocumentsLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>myDir</name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Directly convert path to native OS path separators */</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>result</name> <init>= <expr><call><name><name>QDir</name><operator>::</operator><name>toNativeSeparators</name></name><argument_list>(<argument><expr><call><name><name>QFileDialog</name><operator>::</operator><name>getSaveFileName</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>myDir</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selectedFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Extract first suffix from filter pattern "Description (*.foo)" or "Description (*.foo *.bar ...) */</comment>
    <decl_stmt><decl><type><name>QRegExp</name></type> <name>filter_re</name><argument_list>(<argument><expr><literal type="string">".* \\(\\*\\.(.*)[ \\)]"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>selectedSuffix</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>filter_re</name><operator>.</operator><name>exactMatch</name></name><argument_list>(<argument><expr><name>selectedFilter</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>selectedSuffix</name> <operator>=</operator> <call><name><name>filter_re</name><operator>.</operator><name>cap</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Add suffix if needed */</comment>
    <decl_stmt><decl><type><name>QFileInfo</name></type> <name>info</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>info</name><operator>.</operator><name>suffix</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>selectedSuffix</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* No suffix specified, add selected suffix */</comment>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>selectedSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Return selected suffix if asked to */</comment>
    <if_stmt><if>if<condition>(<expr><name>selectedSuffixOut</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>selectedSuffixOut</name> <operator>=</operator> <name>selectedSuffix</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>getOpenFileName</name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>caption</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>dir</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>filter</name></decl></parameter>,
    <parameter><decl><type><name>QString</name> <modifier>*</modifier></type><name>selectedSuffixOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>selectedFilter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>myDir</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>dir</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <comment type="line">// Default to user documents location</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>myDir</name> <operator>=</operator> <call><name><name>QStandardPaths</name><operator>::</operator><name>writableLocation</name></name><argument_list>(<argument><expr><name><name>QStandardPaths</name><operator>::</operator><name>DocumentsLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>myDir</name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Directly convert path to native OS path separators */</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>result</name> <init>= <expr><call><name><name>QDir</name><operator>::</operator><name>toNativeSeparators</name></name><argument_list>(<argument><expr><call><name><name>QFileDialog</name><operator>::</operator><name>getOpenFileName</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>myDir</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selectedFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>selectedSuffixOut</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Extract first suffix from filter pattern "Description (*.foo)" or "Description (*.foo *.bar ...) */</comment>
        <decl_stmt><decl><type><name>QRegExp</name></type> <name>filter_re</name><argument_list>(<argument><expr><literal type="string">".* \\(\\*\\.(.*)[ \\)]"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>selectedSuffix</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>filter_re</name><operator>.</operator><name>exactMatch</name></name><argument_list>(<argument><expr><name>selectedFilter</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>selectedSuffix</name> <operator>=</operator> <call><name><name>filter_re</name><operator>.</operator><name>cap</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>selectedSuffixOut</name> <operator>=</operator> <name>selectedSuffix</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>Qt</name><operator>::</operator><name>ConnectionType</name></name></type> <name>blockingGUIThreadConnection</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>QThread</name><operator>::</operator><name>currentThread</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>qApp</name><operator>-&gt;</operator><name>thread</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name><name>Qt</name><operator>::</operator><name>BlockingQueuedConnection</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name><name>Qt</name><operator>::</operator><name>DirectConnection</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>checkPoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QPoint</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QWidget</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>atW</name> <init>= <expr><call><name><name>QApplication</name><operator>::</operator><name>widgetAt</name></name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>mapToGlobal</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>atW</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>atW</name><operator>-&gt;</operator><name>window</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>w</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isObscured</name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>!</operator><operator>(</operator><call><name>checkPoint</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <call><name>checkPoint</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <call><name>checkPoint</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>height</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <call><name>checkPoint</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>height</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call>
        <operator>&amp;&amp;</operator> <call><name>checkPoint</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>height</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bringToFront</name><parameter_list>(<parameter><decl><type><name>QWidget</name><modifier>*</modifier></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ForceActivation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>w</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// activateWindow() (sometimes) helps with keyboard focus on Windows</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>w</name><operator>-&gt;</operator><name>isMinimized</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>showNormal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>activateWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>raise</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>openDebugLogfile</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>pathDebug</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"debug.log"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Open debug.log with the associated application */</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><name>pathDebug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>QDesktopServices</name><operator>::</operator><name>openUrl</name></name><argument_list>(<argument><expr><call><name><name>QUrl</name><operator>::</operator><name>fromLocalFile</name></name><argument_list>(<argument><expr><call><name>boostPathToQString</name><argument_list>(<argument><expr><name>pathDebug</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>openBitcoinConf</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>pathConfig</name> <init>= <expr><call><name>GetConfigFile</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-conf"</literal></expr></argument>, <argument><expr><name>BITCOIN_CONF_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Create the file */</comment>
    <decl_stmt><decl><type><name><name>fsbridge</name><operator>::</operator><name>ofstream</name></name></type> <name>configFile</name><argument_list>(<argument><expr><name>pathConfig</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>configFile</name><operator>.</operator><name>good</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>configFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Open bitcoin.conf with the associated application */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name><name>QDesktopServices</name><operator>::</operator><name>openUrl</name></name><argument_list>(<argument><expr><call><name><name>QUrl</name><operator>::</operator><name>fromLocalFile</name></name><argument_list>(<argument><expr><call><name>boostPathToQString</name><argument_list>(<argument><expr><name>pathConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <comment type="line">// Workaround for macOS-specific behavior; see #15409.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>QProcess</name><operator>::</operator><name>startDetached</name></name><argument_list>(<argument><expr><literal type="string">"/usr/bin/open"</literal></expr></argument>, <argument><expr><call><name>QStringList</name><argument_list>{<argument><expr><literal type="string">"-t"</literal></expr></argument>, <argument><expr><macro><name>boostPathToQString</name><argument_list>(<argument>pathConfig</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>ToolTipToRichTextFilter</name><operator>::</operator><name>ToolTipToRichTextFilter</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_size_threshold</name></decl></parameter>, <parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>size_threshold</name><argument_list>(<argument><expr><name>_size_threshold</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>

</block_content>}</block></constructor>

<function><type><name>bool</name></type> <name><name>ToolTipToRichTextFilter</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>evt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>evt</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>ToolTipChange</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>widget</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QWidget</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>tooltip</name> <init>= <expr><call><name><name>widget</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>tooltip</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>size_threshold</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tooltip</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"&lt;qt"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Qt</name><operator>::</operator><name>mightBeRichText</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Envelop with &lt;qt&gt;&lt;/qt&gt; to make sure Qt detects this as rich text</comment>
            <comment type="line">// Escape the current message as HTML and replace \n by &lt;br&gt;</comment>
            <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <literal type="string">"&lt;qt&gt;"</literal> <operator>+</operator> <call><name>HtmlEscape</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;/qt&gt;"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>widget</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QObject</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>connectViewHeadersSignals</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QHeaderView</name><operator>::</operator><name>sectionResized</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>on_sectionResized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QHeaderView</name><operator>::</operator><name>geometriesChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>on_geometriesChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// We need to disconnect these while handling the resize events, otherwise we can enter infinite loops.</comment>
<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>disconnectViewHeadersSignals</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QHeaderView</name><operator>::</operator><name>sectionResized</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>on_sectionResized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QHeaderView</name><operator>::</operator><name>geometriesChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>on_geometriesChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Setup the resize mode, handles compatibility for Qt5 and below as the method signatures changed.</comment>
<comment type="line">// Refactored here for readability.</comment>
<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>setViewHeaderResizeMode</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logicalIndex</name></decl></parameter>, <parameter><decl><type><name><name>QHeaderView</name><operator>::</operator><name>ResizeMode</name></name></type> <name>resizeMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setSectionResizeMode</name><argument_list>(<argument><expr><name>logicalIndex</name></expr></argument>, <argument><expr><name>resizeMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>resizeColumn</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nColumnIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name>nColumnIndex</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>resizeSection</name><argument_list>(<argument><expr><name>nColumnIndex</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>getColumnsWidth</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nColumnsWidthSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>nColumnsWidthSum</name> <operator>+=</operator> <call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>sectionSize</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>nColumnsWidthSum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>getAvailableWidthForColumn</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nResult</name> <init>= <expr><name>lastColumnMinimumWidth</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nTableWidth</name> <init>= <expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>width</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nTableWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nOtherColsWidth</name> <init>= <expr><call><name>getColumnsWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>sectionSize</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nResult</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>nResult</name></expr></argument>, <argument><expr><name>nTableWidth</name> <operator>-</operator> <name>nOtherColsWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>nResult</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Make sure we don't make the columns wider than the table's viewport width.</comment>
<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>adjustTableColumnsWidth</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>disconnectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resizeColumn</name><argument_list>(<argument><expr><name>lastColumnIndex</name></expr></argument>, <argument><expr><call><name>getAvailableWidthForColumn</name><argument_list>(<argument><expr><name>lastColumnIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nTableWidth</name> <init>= <expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>width</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nColsWidth</name> <init>= <expr><call><name>getColumnsWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nColsWidth</name> <operator>&gt;</operator> <name>nTableWidth</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>resizeColumn</name><argument_list>(<argument><expr><name>secondToLastColumnIndex</name></expr></argument>,<argument><expr><call><name>getAvailableWidthForColumn</name><argument_list>(<argument><expr><name>secondToLastColumnIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Make column use all the space available, useful during window resizing.</comment>
<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>stretchColumnWidth</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>disconnectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resizeColumn</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getAvailableWidthForColumn</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// When a section is resized this is a slot-proxy for ajustAmountColumnWidth().</comment>
<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>on_sectionResized</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logicalIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>adjustTableColumnsWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remainingWidth</name> <init>= <expr><call><name>getAvailableWidthForColumn</name><argument_list>(<argument><expr><name>logicalIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>newSize</name> <operator>&gt;</operator> <name>remainingWidth</name></expr>)</condition>
    <block>{<block_content>
       <expr_stmt><expr><call><name>resizeColumn</name><argument_list>(<argument><expr><name>logicalIndex</name></expr></argument>, <argument><expr><name>remainingWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// When the table's geometry is ready, we manually perform the stretch of the "Message" column,</comment>
<comment type="line">// as the "Stretch" resize mode does not allow for interactive resizing.</comment>
<function><type><name>void</name></type> <name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>on_geometriesChanged</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>getColumnsWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>this</name><operator>-&gt;</operator><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>width</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>disconnectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resizeColumn</name><argument_list>(<argument><expr><name>secondToLastColumnIndex</name></expr></argument>, <argument><expr><call><name>getAvailableWidthForColumn</name><argument_list>(<argument><expr><name>secondToLastColumnIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Initializes all internal variables and prepares the
 * the resize modes of the last 2 columns of the table and
 */</comment>
<constructor><name><name>TableViewLastColumnResizingFixer</name><operator>::</operator><name>TableViewLastColumnResizingFixer</name></name><parameter_list>(<parameter><decl><type><name>QTableView</name><modifier>*</modifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastColMinimumWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allColsMinimumWidth</name></decl></parameter>, <parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>tableView</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>,
    <call><name>lastColumnMinimumWidth</name><argument_list>(<argument><expr><name>lastColMinimumWidth</name></expr></argument>)</argument_list></call>,
    <call><name>allColumnsMinimumWidth</name><argument_list>(<argument><expr><name>allColsMinimumWidth</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><name>columnCount</name> <operator>=</operator> <call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastColumnIndex</name> <operator>=</operator> <name>columnCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>secondToLastColumnIndex</name> <operator>=</operator> <name>columnCount</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tableView</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setMinimumSectionSize</name><argument_list>(<argument><expr><name>allColumnsMinimumWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setViewHeaderResizeMode</name><argument_list>(<argument><expr><name>secondToLastColumnIndex</name></expr></argument>, <argument><expr><name><name>QHeaderView</name><operator>::</operator><name>Interactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setViewHeaderResizeMode</name><argument_list>(<argument><expr><name>lastColumnIndex</name></expr></argument>, <argument><expr><name><name>QHeaderView</name><operator>::</operator><name>Interactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function><type><name><name>fs</name><operator>::</operator><name>path</name></name> <specifier>static</specifier></type> <name>StartupShortcutPath</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>chain</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetChainName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>GetSpecialFolderPath</name><argument_list>(<argument><expr><name>CSIDL_STARTUP</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="string">"Bitcoin.lnk"</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Remove this special case when CBaseChainParams::TESTNET = "testnet4"</comment>
        <return>return <expr><call><name>GetSpecialFolderPath</name><argument_list>(<argument><expr><name>CSIDL_STARTUP</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="string">"Bitcoin (testnet).lnk"</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>GetSpecialFolderPath</name><argument_list>(<argument><expr><name>CSIDL_STARTUP</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Bitcoin (%s).lnk"</literal></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetStartOnSystemStartup</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// check for Bitcoin*.lnk</comment>
    <return>return <expr><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><call><name>StartupShortcutPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SetStartOnSystemStartup</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fAutoStart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// If the shortcut exists already, remove it for updating</comment>
    <expr_stmt><expr><call><name><name>fs</name><operator>::</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>StartupShortcutPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>fAutoStart</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CoInitialize</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get a pointer to the IShellLink interface.</comment>
        <decl_stmt><decl><type><name>IShellLinkW</name><modifier>*</modifier></type> <name>psl</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HRESULT</name></type> <name>hres</name> <init>= <expr><call><name>CoCreateInstance</name><argument_list>(<argument><expr><name>CLSID_ShellLink</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>,
            <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>, <argument><expr><name>IID_IShellLinkW</name></expr></argument>,
            <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>psl</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hres</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Get the current executable path</comment>
            <decl_stmt><decl><type><name>WCHAR</name></type> <name><name>pszExePath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>pszExePath</name></expr></argument>, <argument><expr><call><name>ARRAYSIZE</name><argument_list>(<argument><expr><name>pszExePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Start client minimized</comment>
            <decl_stmt><decl><type><name>QString</name></type> <name>strArgs</name> <init>= <expr><literal type="string">"-min"</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">// Set -testnet /-regtest options</comment>
            <expr_stmt><expr><name>strArgs</name> <operator>+=</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">" -chain=%s"</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetChainName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set the path to the shortcut target</comment>
            <expr_stmt><expr><call><name><name>psl</name><operator>-&gt;</operator><name>SetPath</name></name><argument_list>(<argument><expr><name>pszExePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PathRemoveFileSpecW</name><argument_list>(<argument><expr><name>pszExePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>psl</name><operator>-&gt;</operator><name>SetWorkingDirectory</name></name><argument_list>(<argument><expr><name>pszExePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>psl</name><operator>-&gt;</operator><name>SetShowCmd</name></name><argument_list>(<argument><expr><name>SW_SHOWMINNOACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>psl</name><operator>-&gt;</operator><name>SetArguments</name></name><argument_list>(<argument><expr><call><name><name>strArgs</name><operator>.</operator><name>toStdWString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Query IShellLink for the IPersistFile interface for</comment>
            <comment type="line">// saving the shortcut in persistent storage.</comment>
            <decl_stmt><decl><type><name>IPersistFile</name><modifier>*</modifier></type> <name>ppf</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>hres</name> <operator>=</operator> <call><name><name>psl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>IID_IPersistFile</name></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>ppf</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hres</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Save the link by calling IPersistFile::Save.</comment>
                <expr_stmt><expr><name>hres</name> <operator>=</operator> <call><name><name>ppf</name><operator>-&gt;</operator><name>Save</name></name><argument_list>(<argument><expr><call><name>StartupShortcutPath</name><argument_list>()</argument_list></call><operator>.</operator><call><name>wstring</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ppf</name><operator>-&gt;</operator><name>Release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>psl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>psl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Q_OS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<comment type="line">// Follow the Desktop Application Autostart Spec:</comment>
<comment type="line">// http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html</comment>

<function><type><name><name>fs</name><operator>::</operator><name>path</name></name> <specifier>static</specifier></type> <name>GetAutostartDir</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pszConfigHome</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"XDG_CONFIG_HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pszConfigHome</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>(<argument><expr><name>pszConfigHome</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="string">"autostart"</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pszHome</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pszHome</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>(<argument><expr><name>pszHome</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="string">".config"</literal> <operator>/</operator> <literal type="string">"autostart"</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>fs</name><operator>::</operator><name>path</name></name> <specifier>static</specifier></type> <name>GetAutostartFilePath</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>chain</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetChainName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>GetAutostartDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"bitcoin.desktop"</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>GetAutostartDir</name><argument_list>()</argument_list></call> <operator>/</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"bitcoin-%s.desktop"</literal></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetStartOnSystemStartup</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fsbridge</name><operator>::</operator><name>ifstream</name></name></type> <name>optionFile</name><argument_list>(<argument><expr><call><name>GetAutostartFilePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>optionFile</name><operator>.</operator><name>good</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// Scan through file for "Hidden=true":</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>line</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>optionFile</name><operator>.</operator><name>eof</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name>optionFile</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"Hidden"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name> <operator>&amp;&amp;</operator>
            <call><name><name>line</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name><name>optionFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SetStartOnSystemStartup</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fAutoStart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fAutoStart</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>fs</name><operator>::</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>GetAutostartFilePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>pszExePath</name><index>[<expr><name>MAX_PATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name>readlink</name><argument_list>(<argument><expr><literal type="string">"/proc/self/exe"</literal></expr></argument>, <argument><expr><name>pszExePath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pszExePath</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pszExePath</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fs</name><operator>::</operator><name>create_directories</name></name><argument_list>(<argument><expr><call><name>GetAutostartDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>fsbridge</name><operator>::</operator><name>ofstream</name></name></type> <name>optionFile</name><argument_list>(<argument><expr><call><name>GetAutostartFilePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>trunc</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>optionFile</name><operator>.</operator><name>good</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>chain</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetChainName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Write a bitcoin.desktop file to the autostart directory:</comment>
        <expr_stmt><expr><name>optionFile</name> <operator>&lt;&lt;</operator> <literal type="string">"[Desktop Entry]\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>optionFile</name> <operator>&lt;&lt;</operator> <literal type="string">"Type=Application\n"</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>optionFile</name> <operator>&lt;&lt;</operator> <literal type="string">"Name=Bitcoin\n"</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>optionFile</name> <operator>&lt;&lt;</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Name=Bitcoin (%s)\n"</literal></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>optionFile</name> <operator>&lt;&lt;</operator> <literal type="string">"Exec="</literal> <operator>&lt;&lt;</operator> <name>pszExePath</name> <operator>&lt;&lt;</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">" -min -chain=%s\n"</literal></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>optionFile</name> <operator>&lt;&lt;</operator> <literal type="string">"Terminal=false\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>optionFile</name> <operator>&lt;&lt;</operator> <literal type="string">"Hidden=false\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>optionFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>bool</name></type> <name>GetStartOnSystemStartup</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>SetStartOnSystemStartup</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fAutoStart</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>setClipboard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>clipboard</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setText</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>QClipboard</name><operator>::</operator><name>Clipboard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>clipboard</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setText</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>QClipboard</name><operator>::</operator><name>Selection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>qstringToBoostPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>boostPathToQString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name> <modifier>&amp;</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>formatDurationStr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>secs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QStringList</name></type> <name>strList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><name>secs</name> <operator>/</operator> <literal type="number">86400</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hours</name> <init>= <expr><operator>(</operator><name>secs</name> <operator>%</operator> <literal type="number">86400</literal><operator>)</operator> <operator>/</operator> <literal type="number">3600</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mins</name> <init>= <expr><operator>(</operator><name>secs</name> <operator>%</operator> <literal type="number">3600</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><name>secs</name> <operator>%</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>days</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>days</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hours</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 h"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mins</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 m"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>mins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>seconds</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>days</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hours</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mins</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name><name>strList</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>formatServicesStr</name><parameter_list>(<parameter><decl><type><name>quint64</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QStringList</name></type> <name>strList</name></decl>;</decl_stmt>

    <comment type="line">// Just scan the last 8 bits for now.</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>check</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>check</name></expr>)</condition>
        <block>{<block_content>
            <switch>switch <condition>(<expr><name>check</name></expr>)</condition>
            <block>{<block_content>
            <case>case <expr><name>NODE_NETWORK</name></expr>:</case>
                <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"NETWORK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NODE_GETUTXO</name></expr>:</case>
                <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"GETUTXO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NODE_BLOOM</name></expr>:</case>
                <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"BLOOM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NODE_WITNESS</name></expr>:</case>
                <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"WITNESS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name><name>strList</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1[%2]"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>strList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>strList</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">" &amp; "</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>formatPingTime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>dPingTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>dPingTime</name> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">1e6</literal> <operator>||</operator> <name>dPingTime</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 ms"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dPingTime</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>formatTimeOffset</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nTimeOffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nTimeOffset</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>formatNiceTimeOffset</name><parameter_list>(<parameter><decl><type><name>qint64</name></type> <name>secs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Represent time from last generated block in human readable text</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>timeBehindText</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>HOUR_IN_SECONDS</name> <init>= <expr><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>DAY_IN_SECONDS</name> <init>= <expr><literal type="number">24</literal><operator>*</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>WEEK_IN_SECONDS</name> <init>= <expr><literal type="number">7</literal><operator>*</operator><literal type="number">24</literal><operator>*</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>YEAR_IN_SECONDS</name> <init>= <expr><literal type="number">31556952</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Average length of year in Gregorian calendar</comment>
    <if_stmt><if>if<condition>(<expr><name>secs</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>timeBehindText</name> <operator>=</operator> <call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%n second(s)"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>secs</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>HOUR_IN_SECONDS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>timeBehindText</name> <operator>=</operator> <call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%n minute(s)"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><name>secs</name><operator>/</operator><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>secs</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>DAY_IN_SECONDS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>timeBehindText</name> <operator>=</operator> <call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%n hour(s)"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><name>secs</name><operator>/</operator><name>HOUR_IN_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>secs</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>WEEK_IN_SECONDS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>timeBehindText</name> <operator>=</operator> <call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%n day(s)"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><name>secs</name><operator>/</operator><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>secs</name> <operator>&lt;</operator> <name>YEAR_IN_SECONDS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>timeBehindText</name> <operator>=</operator> <call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%n week(s)"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><name>secs</name><operator>/</operator><name>WEEK_IN_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>qint64</name></type> <name>years</name> <init>= <expr><name>secs</name> <operator>/</operator> <name>YEAR_IN_SECONDS</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>qint64</name></type> <name>remainder</name> <init>= <expr><name>secs</name> <operator>%</operator> <name>YEAR_IN_SECONDS</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>timeBehindText</name> <operator>=</operator> <call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 and %2"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%n year(s)"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>years</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%n week(s)"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>remainder</name><operator>/</operator><name>WEEK_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>timeBehindText</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name>formatBytes</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 B"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 KB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>bytes</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 MB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>bytes</name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 GB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>bytes</name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>qreal</name></type> <name>calculateIdealFontSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>QFont</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>qreal</name></type> <name>minPointSize</name></decl></parameter>, <parameter><decl><type><name>qreal</name></type> <name>font_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while<condition>(<expr><name>font_size</name> <operator>&gt;=</operator> <name>minPointSize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>font</name><operator>.</operator><name>setPointSizeF</name></name><argument_list>(<argument><expr><name>font_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QFontMetrics</name></type> <name>fm</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>TextWidth</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>font_size</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>font_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ClickableLabel</name><operator>::</operator><name>mouseReleaseEvent</name></name><parameter_list>(<parameter><decl><type><name>QMouseEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>clicked</name><argument_list>(<argument><expr><call><name><name>event</name><operator>-&gt;</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ClickableProgressBar</name><operator>::</operator><name>mouseReleaseEvent</name></name><parameter_list>(<parameter><decl><type><name>QMouseEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>clicked</name><argument_list>(<argument><expr><call><name><name>event</name><operator>-&gt;</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>ItemDelegate</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>KeyPress</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QKeyEvent</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></cast><operator>-&gt;</operator><call><name>key</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_Escape</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>keyEscapePressed</name><argument_list>()</argument_list></decl>;</decl_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QItemDelegate</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PolishProgressDialog</name><parameter_list>(<parameter><decl><type><name>QProgressDialog</name><modifier>*</modifier></type> <name>dialog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <comment type="line">// Workaround for macOS-only Qt bug; see: QTBUG-65750, QTBUG-70357.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>margin</name> <init>= <expr><call><name>TextWidth</name><argument_list>(<argument><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>fontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"X"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>margin</name></expr></argument>, <argument><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>height</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>TextWidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QFontMetrics</name><modifier>&amp;</modifier></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>QT_VERSION</name> <operator>&gt;=</operator> <call><name>QT_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator> <literal type="number">11</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <return>return <expr><call><name><name>fm</name><operator>.</operator><name>horizontalAdvance</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><call><name><name>fm</name><operator>.</operator><name>width</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace GUIUtil</comment>
</unit>
