<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/skiplist_tests.cpp"><comment type="line">// Copyright (c) 2014-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPLIST_LENGTH</name></cpp:macro> <cpp:value>300000</cpp:value></cpp:define>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>skiplist_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>skiplist_test</argument>)</argument_list></macro>
<block>{<block_content>
    <function_decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CBlockIndex</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name><parameter_list>(<parameter><decl><type><name>SKIPLIST_LENGTH</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SKIPLIST_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>vIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pprev</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><operator>&amp;</operator><name><name>vIndex</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>BuildSkip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SKIPLIST_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pskip</name> <operator>==</operator> <operator>&amp;</operator><name><name>vIndex</name><index>[<expr><name><name>vIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pskip</name><operator>-&gt;</operator><name>nHeight</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pskip</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pskip</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>from</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><name>SKIPLIST_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><name>from</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><name>SKIPLIST_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetAncestor</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name><name>vIndex</name><index>[<expr><name>from</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>GetAncestor</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name><name>vIndex</name><index>[<expr><name>to</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>GetAncestor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>vIndex</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>getlocator_test</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Build a main chain 100000 blocks long.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vHashMain</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CBlockIndex</name></expr></argument>&gt;</argument_list></name></type> <name>vBlocksMain</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vBlocksMain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>vHashMain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ArithToUint256</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Set the hash equal to the height, so we can quickly check the distances.</comment>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pprev</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vBlocksMain</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phashBlock</name> <operator>=</operator> <operator>&amp;</operator><name><name>vHashMain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>BuildSkip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetLow64</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pprev</name> <operator>==</operator> <literal type="null">nullptr</literal> <operator>||</operator> <name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name> <operator>==</operator> <name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pprev</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Build a branch that splits off at block 49999, 50000 blocks long.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vHashSide</name><argument_list>(<argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CBlockIndex</name></expr></argument>&gt;</argument_list></name></type> <name>vBlocksSide</name><argument_list>(<argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vBlocksSide</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>vHashSide</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ArithToUint256</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">50000</literal> <operator>+</operator> <operator>(</operator><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">128</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Add 1&lt;&lt;128 to the hashes, so GetLow64() still returns the height.</comment>
        <expr_stmt><expr><name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">50000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pprev</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vBlocksSide</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><call><name><name>vBlocksMain</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">49999</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phashBlock</name> <operator>=</operator> <operator>&amp;</operator><name><name>vHashSide</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>BuildSkip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetLow64</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pprev</name> <operator>==</operator> <literal type="null">nullptr</literal> <operator>||</operator> <name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name> <operator>==</operator> <name><name>vBlocksSide</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pprev</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Build a CChain for the main branch.</comment>
    <decl_stmt><decl><type><name>CChain</name></type> <name>chain</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>chain</name><operator>.</operator><name>SetTip</name></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>vBlocksMain</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test 100 random starting points for locators.</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">150000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">100000</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vBlocksMain</name><index>[<expr><name>r</name></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>vBlocksSide</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">100000</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockLocator</name></type> <name>locator</name> <init>= <expr><call><name><name>chain</name><operator>.</operator><name>GetLocator</name></name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The first result must be the block itself, the last one must be genesis.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>locator</name><operator>.</operator><name>vHave</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>tip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>locator</name><operator>.</operator><name>vHave</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>vBlocksMain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Entries 1 through 11 (inclusive) go back one step each.</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name><name>locator</name><operator>.</operator><name>vHave</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>locator</name><operator>.</operator><name>vHave</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetLow64</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>tip</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// The further ones (excluding the last one) go back with exponential steps.</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dist</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>locator</name><operator>.</operator><name>vHave</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>locator</name><operator>.</operator><name>vHave</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetLow64</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>locator</name><operator>.</operator><name>vHave</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetLow64</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dist</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>findearliestatleast_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vHashMain</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CBlockIndex</name></expr></argument>&gt;</argument_list></name></type> <name>vBlocksMain</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vBlocksMain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>vHashMain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ArithToUint256</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Set the hash equal to the height</comment>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pprev</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vBlocksMain</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phashBlock</name> <operator>=</operator> <operator>&amp;</operator><name><name>vHashMain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>BuildSkip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTime</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTimeMax</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// randomly choose something in the range [MTP, MTP*2]</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>medianTimePast</name> <init>= <expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><name>medianTimePast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTime</name> <operator>=</operator> <name>r</name> <operator>+</operator> <name>medianTimePast</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTimeMax</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTime</name></expr></argument>, <argument><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nTimeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// Check that we set nTimeMax up correctly.</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>curTimeMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vBlocksMain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>curTimeMax</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>curTimeMax</name></expr></argument>, <argument><expr><name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>curTimeMax</name> <operator>==</operator> <name><name>vBlocksMain</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTimeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Build a CChain for the main branch.</comment>
    <decl_stmt><decl><type><name>CChain</name></type> <name>chain</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>chain</name><operator>.</operator><name>SetTip</name></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>vBlocksMain</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify that FindEarliestAtLeast is correct.</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// Pick a random element in vBlocksMain.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>vBlocksMain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>test_time</name> <init>= <expr><name><name>vBlocksMain</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>nTime</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><name>test_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>nTimeMax</name></name> <operator>&gt;=</operator> <name>test_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>pprev</name></name><operator>==</operator><literal type="null">nullptr</literal><operator>)</operator> <operator>||</operator> <name><name>ret</name><operator>-&gt;</operator><name>pprev</name><operator>-&gt;</operator><name>nTimeMax</name></name> <operator>&lt;</operator> <name>test_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vBlocksMain</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>GetAncestor</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>findearliestatleast_edge_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CBlockIndex</name></expr></argument>&gt;</argument_list></name></type> <name>blocks</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>timeMax</name> <range>: <expr><block>{<expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><literal type="number">300</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><ternary><condition><expr><call><name><name>blocks</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">nullptr</literal></expr> </then><else>: <expr><operator>&amp;</operator><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nHeight</name> <operator>=</operator> <ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name><name>prev</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pprev</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>BuildSkip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nTimeMax</name> <operator>=</operator> <name>timeMax</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CChain</name></type> <name>chain</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>chain</name><operator>.</operator><name>SetTip</name></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>blocks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">350</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><operator>-</operator><macro><name>int64_t</name><argument_list>(<argument>std::numeric_limits&lt;unsigned int&gt;::max()</argument>)</argument_list></macro> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><macro><name>chain</name></macro><operator>.</operator><macro><name>FindEarliestAtLeast</name><argument_list>(<argument>std::numeric_limits&lt;unsigned int&gt;::max()</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><macro><name>int64_t</name><argument_list>(<argument>std::numeric_limits&lt;unsigned int&gt;::max()</argument>)</argument_list></macro> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>ret1</name> <init>= <expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>ret1</name><operator>-&gt;</operator><name>nTimeMax</name></name> <operator>&gt;=</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name><name>ret1</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>ret2</name> <init>= <expr><call><name><name>chain</name><operator>.</operator><name>FindEarliestAtLeast</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>ret2</name><operator>-&gt;</operator><name>nTimeMax</name></name> <operator>&gt;=</operator> <literal type="number">200</literal> <operator>&amp;&amp;</operator> <name><name>ret2</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
