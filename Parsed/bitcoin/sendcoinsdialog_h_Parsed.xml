<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/sendcoinsdialog.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_SENDCOINSDIALOG_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_SENDCOINSDIALOG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDialog&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>ClientModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsRecipient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>Ui</name> <block>{<block_content>
    <decl_stmt><decl><type><name>class</name></type> <name>SendCoinsDialog</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QUrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<comment type="block" format="doxygen">/** Dialog for sending bitcoins */</comment>
<name>class</name></type> <name>SendCoinsDialog</name> <range>: <expr><name>public</name> <name>QDialog</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>SendCoinsDialog</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr></argument>, <argument><expr><name>QWidget</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>SendCoinsDialog</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>setClientModel</name><argument_list>(<argument><expr><name>ClientModel</name> <operator>*</operator><name>clientModel</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>setModel</name><argument_list>(<argument><expr><name>WalletModel</name> <operator>*</operator><name>model</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Set up the tab chain manually, as Qt messes up the tab chain by default in some cases (issue https://bugreports.qt-project.org/browse/QTBUG-10907).
     */</comment>
    <expr><name>QWidget</name> <operator>*</operator><call><name>setupTabChain</name><argument_list>(<argument><expr><name>QWidget</name> <operator>*</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>void</name> <call><name>setAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>pasteEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SendCoinsRecipient</name> <operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>bool</name> <call><name>handlePaymentRequest</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SendCoinsRecipient</name> <operator>&amp;</operator><name>recipient</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>clear</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>reject</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>accept</name><argument_list>()</argument_list></call></expr>;
    <expr><name>SendCoinsEntry</name> <operator>*</operator><call><name>addEntry</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateTabsAndLabels</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>setBalance</name><argument_list>(<argument><expr><specifier>const</specifier> <name>interfaces</name><operator>::</operator><name>WalletBalances</name><operator>&amp;</operator> <name>balances</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>coinsSent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>Ui</name><operator>::</operator><name>SendCoinsDialog</name> <operator>*</operator><name>ui</name></expr>;
    <expr><name>ClientModel</name> <operator>*</operator><name>clientModel</name></expr>;
    <expr><name>WalletModel</name> <operator>*</operator><name>model</name></expr>;
    <expr><name>bool</name> <name>fNewRecipientAllowed</name></expr>;
    <expr><name>bool</name> <name>fFeeMinimized</name></expr>;
    <expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr>;

    <comment type="line">// Process WalletModel::SendCoinsReturn and generate a pair consisting</comment>
    <comment type="line">// of a message and message flags for use in Q_EMIT message().</comment>
    <comment type="line">// Additional parameter msgArg can be used via .arg(msgArg).</comment>
    <expr><name>void</name> <call><name>processSendCoinsReturn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WalletModel</name><operator>::</operator><name>SendCoinsReturn</name> <operator>&amp;</operator><name>sendCoinsReturn</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>msgArg</name> <operator>=</operator> <call><name>QString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>minimizeFeeSection</name><argument_list>(<argument>bool fMinimize</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>updateFeeMinimizedLabel</name><argument_list>()</argument_list></call></expr>;
    <comment type="line">// Update the passed in CCoinControl with state from the GUI</comment>
    <expr><name>void</name> <call><name>updateCoinControlState</name><argument_list>(<argument><expr><name>CCoinControl</name><operator>&amp;</operator> <name>ctrl</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>on_sendButton_clicked</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>on_buttonChooseFee_clicked</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>on_buttonMinimizeFee_clicked</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>removeEntry</name><argument_list>(<argument><expr><name>SendCoinsEntry</name><operator>*</operator> <name>entry</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>useAvailableBalance</name><argument_list>(<argument><expr><name>SendCoinsEntry</name><operator>*</operator> <name>entry</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateDisplayUnit</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlFeatureChanged</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlButtonClicked</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlChangeChecked</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlChangeEdited</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlUpdateLabels</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlClipboardQuantity</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlClipboardAmount</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlClipboardFee</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlClipboardAfterFee</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlClipboardBytes</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlClipboardLowOutput</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>coinControlClipboardChange</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateFeeSectionControls</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateSmartFeeLabel</name><argument_list>()</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <comment type="line">// Fired when a message should be reported to the user</comment>
    <name>void</name> <macro><name>message</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>const QString &amp;message</argument>, <argument>unsigned int style</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_CONFIRM_DELAY</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>class</name></type> <name>SendConfirmationDialog</name> <range>: <expr><name>public</name> <name>QMessageBox</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <macro><name>SendConfirmationDialog</name><argument_list>(<argument>const QString&amp; title</argument>, <argument>const QString&amp; text</argument>, <argument>const QString&amp; informative_text = <literal type="string">""</literal></argument>, <argument>const QString&amp; detailed_text = <literal type="string">""</literal></argument>, <argument>int secDelay = SEND_CONFIRM_DELAY</argument>, <argument>const QString&amp; confirmText = <literal type="string">"Send"</literal></argument>, <argument>QWidget* parent = nullptr</argument>)</argument_list></macro></expr>;
    <expr><name>int</name> <call><name>exec</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>countDown</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateYesButton</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>QAbstractButton</name> <operator>*</operator><name>yesButton</name></expr>;
    <expr><name>QTimer</name> <name>countDownTimer</name></expr>;
    <expr><name>int</name> <name>secDelay</name></expr>;
    <expr><name>QString</name> <name>confirmButtonText</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_SENDCOINSDIALOG_H</comment>
</unit>
