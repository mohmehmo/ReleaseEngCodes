<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/system.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<comment type="block" format="doxygen">/**
 * Server/client environment: argument handling, config file parsing,
 * thread wrappers, startup time
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_SYSTEM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_SYSTEM_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attributes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/assumptions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;logging.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/settings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threadnames.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;exception&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/thread/condition_variable.hpp&gt;</cpp:file></cpp:include> <comment type="line">// for boost::thread_interrupted</comment>

<comment type="line">// Application startup time (used for uptime calculation)</comment>
<function_decl><type><name>int64_t</name></type> <name>GetStartupTime</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>BITCOIN_CONF_FILENAME</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>SetupEnvironment</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SetupNetworking</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"ERROR: %s\n"</literal></expr></argument>, <argument><expr><name>tfm</name><operator>::</operator><call><name>format</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>PrintExceptionContinue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>exception</name> <operator>*</operator><name>pex</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>pszThread</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>FileCommit</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>TruncateFile</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>RaiseFileDescriptorLimit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMinFD</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AllocateFileRange</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>RenameOver</name><argument_list>(<argument><expr><name>fs</name><operator>::</operator><name>path</name> <name>src</name></expr></argument>, <argument><expr><name>fs</name><operator>::</operator><name>path</name> <name>dest</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>LockDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name><operator>&amp;</operator> <name>directory</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>lockfile_name</name></expr></argument>, <argument><expr><name>bool</name> <name>probe_only</name><operator>=</operator><name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>UnlockDirectory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name><operator>&amp;</operator> <name>directory</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>lockfile_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>DirIsWritable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name><operator>&amp;</operator> <name>directory</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CheckDiskSpace</name><argument_list>(<argument><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name><operator>&amp;</operator> <name>dir</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>additional_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Release all directory locks. This is used for unit testing only, at runtime
 * the global destructor will take care of the locks.
 */</comment>
<function_decl><type><name>void</name></type> <name>ReleaseDirectoryLocks</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>TryCreateDirectories</name><argument_list>(<argument><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name><operator>&amp;</operator> <name>p</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <call><name>GetDefaultDataDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">// The blocks directory is always net specific.</comment>
<expr_stmt><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name> <operator>&amp;</operator><call><name>GetBlocksDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name> <operator>&amp;</operator><macro><name>GetDataDir</name><argument_list>(<argument>bool fNetSpecific = true</argument>)</argument_list></macro></expr>;</expr_stmt>
<comment type="line">// Return true if -datadir option points to a valid directory or is not specified.</comment>
<function_decl><type><name>bool</name></type> <name>CheckDataDirOption</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Tests only */</comment>
<function_decl><type><name>void</name></type> <name>ClearDatadirCache</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <call><name>GetConfigFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>confPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <macro><name>GetSpecialFolderPath</name><argument_list>(<argument>int nFolder</argument>, <argument>bool fCreate = true</argument>)</argument_list></macro></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name></type> <name>runCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strCommand</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * Most paths passed as configuration arguments are treated as relative to
 * the datadir if they are not absolute.
 *
 * @param path The path to be conditionally prefixed with datadir.
 * @param net_specific Forwarded to GetDataDir().
 * @return The normalized path.
 */</comment>
<expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <macro><name>AbsPathForConfigVal</name><argument_list>(<argument>const fs::path&amp; path</argument>, <argument>bool net_specific = true</argument>)</argument_list></macro></expr>;</expr_stmt>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>IsSwitchChar</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OptionsCategory</name> <block>{<block_content>
    <expr_stmt><expr><name>OPTIONS</name></expr><operator>,</operator>
    <expr><name>CONNECTION</name></expr><operator>,</operator>
    <expr><name>WALLET</name></expr><operator>,</operator>
    <expr><name>WALLET_DEBUG_TEST</name></expr><operator>,</operator>
    <expr><name>ZMQ</name></expr><operator>,</operator>
    <expr><name>DEBUG_TEST</name></expr><operator>,</operator>
    <expr><name>CHAINPARAMS</name></expr><operator>,</operator>
    <expr><name>NODE_RELAY</name></expr><operator>,</operator>
    <expr><name>BLOCK_CREATION</name></expr><operator>,</operator>
    <expr><name>RPC</name></expr><operator>,</operator>
    <expr><name>GUI</name></expr><operator>,</operator>
    <expr><name>COMMANDS</name></expr><operator>,</operator>
    <expr><name>REGISTER_COMMANDS</name></expr><operator>,</operator>

    <expr><name>HIDDEN</name></expr></expr_stmt> <comment type="line">// Always the last option to avoid printing these in the help</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>SectionInfo</name>
<block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_file</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m_line</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ArgsManager</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <enum>enum <name>Flags</name> <block>{
        <decl><name>NONE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
        <comment type="line">// Boolean options can accept negation syntax -noOPTION or -noOPTION=1</comment>
        <decl><name>ALLOW_BOOL</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
        <decl><name>ALLOW_INT</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
        <decl><name>ALLOW_STRING</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
        <decl><name>ALLOW_ANY</name> <init>= <expr><name>ALLOW_BOOL</name> <operator>|</operator> <name>ALLOW_INT</name> <operator>|</operator> <name>ALLOW_STRING</name></expr></init></decl>,
        <decl><name>DEBUG_ONLY</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
        <comment type="block">/* Some options would cause cross-contamination if values for
         * mainnet were used while running on regtest/testnet (or vice-versa).
         * Setting them as NETWORK_ONLY ensures that sharing a config file
         * between mainnet and regtest/testnet won't cause problems due to these
         * parameters by accident. */</comment>
        <decl><name>NETWORK_ONLY</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,
    }</block>;</enum>

<label><name>protected</name>:</label>
    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ArgsManagerHelper</name></decl>;</decl_stmt>

    <struct>struct <name>Arg</name>
    <block>{
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_help_param</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_help_text</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m_flags</name></decl>;</decl_stmt>
    }</block>;</struct>

    <decl_stmt><decl><type><name>mutable</name> <name>CCriticalSection</name></type> <name>cs_args</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>util</name><operator>::</operator><name>Settings</name> <name>m_settings</name> <call><name>GUARDED_BY</name><argument_list>(<argument><expr><name>cs_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_network</name> <call><name>GUARDED_BY</name><argument_list>(<argument><expr><name>cs_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_network_only_args</name> <call><name>GUARDED_BY</name><argument_list>(<argument><expr><name>cs_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>OptionsCategory</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>Arg</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_available_args</name> <call><name>GUARDED_BY</name><argument_list>(<argument><expr><name>cs_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>SectionInfo</name></expr></argument>&gt;</argument_list></name> <name>m_config_sections</name> <call><name>GUARDED_BY</name><argument_list>(<argument><expr><name>cs_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ReadConfigStream</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>stream</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>filepath</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>, <argument><expr><name>bool</name> <name>ignore_invalid_keys</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>ArgsManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Select the network in use
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>SelectConfigNetwork</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>network</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseParameters</name><argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <specifier>const</specifier> <name><name>argv</name><index>[]</index></name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ReadConfigFiles</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>, <argument><expr><name>bool</name> <name>ignore_invalid_keys</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Log warnings for options in m_section_only_args when
     * they are specified in the default section but not overridden
     * on the command line or in a network-specific section in the
     * config file.
     */</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>GetUnsuitableSectionOnlyArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Log warnings for unrecognized section names in the config file.
     */</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>SectionInfo</name></expr></argument>&gt;</argument_list></name> <macro><name>GetUnrecognizedSections</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Return a vector of strings of the given argument
     *
     * @param strArg Argument to get (e.g. "-foo")
     * @return command-line arguments
     */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>GetArgs</name><argument_list>(<argument>const std::string&amp; strArg</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Return true if the given argument has been manually set
     *
     * @param strArg Argument to get (e.g. "-foo")
     * @return true if the argument has been set
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>IsArgSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strArg</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Return true if the argument was originally passed as a negated option,
     * i.e. -nofoo.
     *
     * @param strArg Argument to get (e.g. "-foo")
     * @return true if the argument was passed negated
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>IsArgNegated</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strArg</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Return string argument or default value
     *
     * @param strArg Argument to get (e.g. "-foo")
     * @param strDefault (e.g. "1")
     * @return command-line argument or default value
     */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetArg</name><argument_list>(<argument>const std::string&amp; strArg</argument>, <argument>const std::string&amp; strDefault</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Return integer argument or default value
     *
     * @param strArg Argument to get (e.g. "-foo")
     * @param nDefault (e.g. 1)
     * @return command-line argument (0 if invalid number) or default value
     */</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>GetArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strArg</name></expr></argument>, <argument><expr><name>int64_t</name> <name>nDefault</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Return boolean argument or default value
     *
     * @param strArg Argument to get (e.g. "-foo")
     * @param fDefault (true or false)
     * @return command-line argument or default value
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>GetBoolArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strArg</name></expr></argument>, <argument><expr><name>bool</name> <name>fDefault</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Set an argument if it doesn't already have a value
     *
     * @param strArg Argument to set (e.g. "-foo")
     * @param strValue Value (e.g. "1")
     * @return true if argument gets set, false if it already had a value
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>SoftSetArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strArg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strValue</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Set a boolean argument if it doesn't already have a value
     *
     * @param strArg Argument to set (e.g. "-foo")
     * @param fValue Value (e.g. false)
     * @return true if argument gets set, false if it already had a value
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>SoftSetBoolArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strArg</name></expr></argument>, <argument><expr><name>bool</name> <name>fValue</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Forces an arg setting. Called by SoftSetArg() if the arg hasn't already</comment>
    <comment type="line">// been set. Also called directly in testing.</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>ForceSetArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strArg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strValue</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Returns the appropriate chain name from the program arguments.
     * @return CBaseChainParams::MAIN by default; raises runtime error if an invalid combination is given.
     */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetChainName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Add argument
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>AddArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>help</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>OptionsCategory</name><operator>&amp;</operator> <name>cat</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Add many hidden arguments
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>AddHiddenArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Clear available arguments
     */</comment>
    <function><type><name>void</name></type> <name>ClearArgs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_available_args</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_network_only_args</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="doxygen">/**
     * Get the help string
     */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetHelpMessage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Return Flags for known arg.
     * Return ArgsManager::NONE for unknown arg.
     */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>FlagsOfKnownArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ArgsManager</name></type> <name>gArgs</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * @return true if help has been requested via a command-line arg
 */</comment>
<function_decl><type><name>bool</name></type> <name>HelpRequested</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgsManager</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Add help options to the args manager */</comment>
<function_decl><type><name>void</name></type> <name>SetupHelpOptions</name><parameter_list>(<parameter><decl><type><name>ArgsManager</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Format a string to be used as group of options in help messages
 *
 * @param message Group name (e.g. "RPC server options:")
 * @return the formatted string
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>HelpMessageGroup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Format a string to be used as option description in help messages
 *
 * @param option Option message (e.g. "-rpcuser=&lt;user&gt;")
 * @param message Option description (e.g. "Username for JSON-RPC connections")
 * @return the formatted string
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>HelpMessageOpt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>option</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Return the number of cores available on the current system.
 * @note This does count virtual cores, such as those provided by HyperThreading.
 */</comment>
<function_decl><type><name>int</name></type> <name>GetNumCores</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * .. and a wrapper that just calls func once
 */</comment>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Callable</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>TraceThread</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,  <parameter><decl><type><name>Callable</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>util</name><operator>::</operator><call><name>ThreadRename</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>try</name></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s thread start\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s thread exit\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>catch</name> <argument_list>(<argument>const boost::thread_interrupted&amp;</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s thread interrupt\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>catch</name> <argument_list>(<argument>const std::exception&amp; e</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>catch</name> <argument_list>(<argument>...</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>throw</name></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>CopyrightHolders</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * On platforms that support it, tell the kernel the calling thread is
 * CPU-intensive and non-interactive. See SCHED_BATCH in sched(7) for details.
 *
 */</comment>
<function_decl><type><name>void</name></type> <name>ScheduleBatchPriority</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>namespace</name></type> <name>util</name> <block>{<block_content>

<comment type="line" format="doxygen">//! Simplification of std insertion</comment>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Tdst</name></expr></argument>, <argument><expr><name>typename</name> <name>Tsrc</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>Tdst</name><modifier>&amp;</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Tsrc</name><modifier>&amp;</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>dst</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>dst</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>TsetT</name></expr></argument>, <argument><expr><name>typename</name> <name>Tsrc</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>void</name></type> <name>insert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>TsetT</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>dst</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Tsrc</name><operator>&amp;</operator> <name>src</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>dst</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>src</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>src</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<decl_stmt><decl><type><name>class</name></type> <name>WinCmdLineArgs</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>WinCmdLineArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>WinCmdLineArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>args</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace util</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_SYSTEM_H</comment>
</unit>
