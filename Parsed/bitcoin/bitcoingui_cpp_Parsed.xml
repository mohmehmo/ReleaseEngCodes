<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoingui.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoingui.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/clientmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/createwalletdialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/modaloverlay.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/networkstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/notificator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/openuridialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsdialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/platformstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/rpcconsole.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/utilitydialog.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletcontroller.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletframe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletview.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/macdockiconhandler.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/handler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAction&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QComboBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDateTime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDragEnterEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QListWidget&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMenu&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMenuBar&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMimeData&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QProgressDialog&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QScreen&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSettings&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QShortcut&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStackedWidget&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStatusBar&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStyle&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSystemTrayIcon&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QToolBar&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QUrlQuery&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVBoxLayout&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QWindow&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>DEFAULT_UIPLATFORM</name></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Q_OS_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr><literal type="string">"macosx"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Q_OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <literal type="string">"windows"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <literal type="string">"other"</literal></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        ;</decl_stmt>

<constructor><name><name>BitcoinGUI</name><operator>::</operator><name>BitcoinGUI</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PlatformStyle</name> <modifier>*</modifier></type><name>_platformStyle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NetworkStyle</name> <modifier>*</modifier></type><name>networkStyle</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QMainWindow</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call>,
    <call><name>trayIconMenu</name><argument_list>{<argument><expr><operator>new</operator> <macro><name>QMenu</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></call>,
    <call><name>platformStyle</name><argument_list>(<argument><expr><name>_platformStyle</name></expr></argument>)</argument_list></call>,
    <call><name>m_network_style</name><argument_list>(<argument><expr><name>networkStyle</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>restoreGeometry</name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"MainWindowGeometry"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Restore failed (perhaps missing setting), center the window</comment>
        <expr_stmt><expr><call><name>move</name><argument_list>(<argument><expr><call><name><name>QGuiApplication</name><operator>::</operator><name>primaryScreen</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>availableGeometry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>center</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>frameGeometry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>center</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr_stmt><expr><name>enableWallet</name> <operator>=</operator> <call><name><name>WalletModel</name><operator>::</operator><name>isWalletEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>setWindowIcon</name></name><argument_list>(<argument><expr><call><name><name>m_network_style</name><operator>-&gt;</operator><name>getTrayAndWindowIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setWindowIcon</name><argument_list>(<argument><expr><call><name><name>m_network_style</name><operator>-&gt;</operator><name>getTrayAndWindowIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateWindowTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rpcConsole</name> <operator>=</operator> <operator>new</operator> <call><name>RPCConsole</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>_platformStyle</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>helpMessageDialog</name> <operator>=</operator> <operator>new</operator> <call><name>HelpMessageDialog</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <if_stmt><if>if<condition>(<expr><name>enableWallet</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block" format="doxygen">/** Create wallet frame and make it the central widget */</comment>
        <expr_stmt><expr><name>walletFrame</name> <operator>=</operator> <operator>new</operator> <call><name>WalletFrame</name><argument_list>(<argument><expr><name>_platformStyle</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCentralWidget</name><argument_list>(<argument><expr><name>walletFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>
    <block>{<block_content>
        <comment type="block">/* When compiled without wallet or -disablewallet is provided,
         * the central widget is the rpc console.
         */</comment>
        <expr_stmt><expr><call><name>setCentralWidget</name><argument_list>(<argument><expr><name>rpcConsole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>consoleShown</name><argument_list>(<argument><expr><name>rpcConsole</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Accept D&amp;D of URIs</comment>
    <expr_stmt><expr><call><name>setAcceptDrops</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create actions for the toolbar, menu bar and tray/dock icon</comment>
    <comment type="line">// Needs walletFrame to be initialized</comment>
    <expr_stmt><expr><call><name>createActions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create application menu bar</comment>
    <expr_stmt><expr><call><name>createMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create the toolbars</comment>
    <expr_stmt><expr><call><name>createToolBars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create system tray icon and notification</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>QSystemTrayIcon</name><operator>::</operator><name>isSystemTrayAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>createTrayIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>notificator</name> <operator>=</operator> <operator>new</operator> <call><name>Notificator</name><argument_list>(<argument><expr><call><name><name>QApplication</name><operator>::</operator><name>applicationName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>trayIcon</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create status bar</comment>
    <expr_stmt><expr><call><name>statusBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Disable size grip because it looks ugly and nobody needs it</comment>
    <expr_stmt><expr><call><name>statusBar</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setSizeGripEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Status bar notification icons</comment>
    <decl_stmt><decl><type><name>QFrame</name> <modifier>*</modifier></type><name>frameBlocks</name> <init>= <expr><operator>new</operator> <call><name>QFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>frameBlocks</name><operator>-&gt;</operator><name>setContentsMargins</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>frameBlocks</name><operator>-&gt;</operator><name>setSizePolicy</name></name><argument_list>(<argument><expr><name><name>QSizePolicy</name><operator>::</operator><name>Fixed</name></name></expr></argument>, <argument><expr><name><name>QSizePolicy</name><operator>::</operator><name>Preferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QHBoxLayout</name> <modifier>*</modifier></type><name>frameBlocksLayout</name> <init>= <expr><operator>new</operator> <call><name>QHBoxLayout</name><argument_list>(<argument><expr><name>frameBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>setContentsMargins</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>setSpacing</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>unitDisplayControl</name> <operator>=</operator> <operator>new</operator> <call><name>UnitDisplayStatusBarControl</name><argument_list>(<argument><expr><name>platformStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>labelWalletEncryptionIcon</name> <operator>=</operator> <operator>new</operator> <call><name>QLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>labelWalletHDStatusIcon</name> <operator>=</operator> <operator>new</operator> <call><name>QLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>labelProxyIcon</name> <operator>=</operator> <operator>new</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>connectionsControl</name> <operator>=</operator> <operator>new</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>labelBlocksIcon</name> <operator>=</operator> <operator>new</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>enableWallet</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addStretch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>unitDisplayControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addStretch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>labelWalletEncryptionIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>labelWalletHDStatusIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>labelProxyIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addStretch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>connectionsControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addStretch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>labelBlocksIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>frameBlocksLayout</name><operator>-&gt;</operator><name>addStretch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Progress bar and label for blocks download</comment>
    <expr_stmt><expr><name>progressBarLabel</name> <operator>=</operator> <operator>new</operator> <call><name>QLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>progressBar</name> <operator>=</operator> <operator>new</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>ProgressBar</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setAlignment</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>AlignCenter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Override style sheet for progress bar for styles that have a segmented progress bar,</comment>
    <comment type="line">// as they make the text unreadable (workaround for issue #1071)</comment>
    <comment type="line">// See https://doc.qt.io/qt-5/gallery.html</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>curStyle</name> <init>= <expr><call><name><name>QApplication</name><operator>::</operator><name>style</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>metaObject</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>className</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>curStyle</name> <operator>==</operator> <literal type="string">"QWindowsStyle"</literal> <operator>||</operator> <name>curStyle</name> <operator>==</operator> <literal type="string">"QWindowsXPStyle"</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QProgressBar { background-color: #e8e8e8; border: 1px solid grey; border-radius: 7px; padding: 1px; text-align: center; } QProgressBar::chunk { background: QLinearGradient(x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #FF8000, stop: 1 orange); border-radius: 7px; margin: 0px; }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>statusBar</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>addWidget</name><argument_list>(<argument><expr><name>progressBarLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>statusBar</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>addWidget</name><argument_list>(<argument><expr><name>progressBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>statusBar</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>addPermanentWidget</name><argument_list>(<argument><expr><name>frameBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Install event filter to be able to catch status tip events (QEvent::StatusTip)</comment>
    <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initially wallet actions should be disabled</comment>
    <expr_stmt><expr><call><name>setWalletActionsEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Subscribe to notifications from core</comment>
    <expr_stmt><expr><call><name>subscribeToCoreSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>connectionsControl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>setNetworkActive</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>m_node</name><operator>.</operator><name>getNetworkActive</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>labelProxyIcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name>openOptionsDialogWithTab</name><argument_list>(<argument><expr><name><name>OptionsDialog</name><operator>::</operator><name>TAB_NETWORK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>modalOverlay</name> <operator>=</operator> <operator>new</operator> <call><name>ModalOverlay</name><argument_list>(<argument><expr><name>enableWallet</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>centralWidget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>labelBlocksIcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showModalOverlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>progressBar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GUIUtil</name><operator>::</operator><name>ClickableProgressBar</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showModalOverlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <if_stmt><if>if<condition>(<expr><name>enableWallet</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>walletFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletFrame</name><operator>::</operator><name>requestedSyncWarningInfo</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showModalOverlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <expr_stmt><expr><name>m_app_nap_inhibitor</name> <operator>=</operator> <operator>new</operator> <name>CAppNapInhibitor</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></constructor>

<destructor><name><name>BitcoinGUI</name><operator>::</operator><name>~BitcoinGUI</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Unsubscribe from notifications from core</comment>
    <expr_stmt><expr><call><name>unsubscribeFromCoreSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"MainWindowGeometry"</literal></expr></argument>, <argument><expr><call><name>saveGeometry</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>trayIcon</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Hide tray icon, as deleting will let it linger until quit (on Ubuntu)</comment>
        <expr_stmt><expr><call><name><name>trayIcon</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <expr_stmt><expr><operator>delete</operator> <name>m_app_nap_inhibitor</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>appMenuBar</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MacDockIconHandler</name><operator>::</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><operator>delete</operator> <name>rpcConsole</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>createActions</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QActionGroup</name> <modifier>*</modifier></type><name>tabGroup</name> <init>= <expr><operator>new</operator> <call><name>QActionGroup</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>overviewAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/overview"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Overview"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show general overview of wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>setCheckable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>setShortcut</name></name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ALT</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tabGroup</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>overviewAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sendCoinsAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/send"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Send"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Send coins to a Bitcoin address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>setCheckable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>setShortcut</name></name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ALT</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tabGroup</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>sendCoinsAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sendCoinsMenuAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsMenuAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsMenuAction</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>sendCoinsMenuAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>receiveCoinsAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/receiving_addresses"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Receive"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Request payments (generates QR codes and bitcoin: URIs)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>setCheckable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>setShortcut</name></name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ALT</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tabGroup</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>receiveCoinsAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>receiveCoinsMenuAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsMenuAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsMenuAction</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>receiveCoinsMenuAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>historyAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/history"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Transactions"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>historyAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Browse transaction history"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>historyAction</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>historyAction</name><operator>-&gt;</operator><name>statusTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>historyAction</name><operator>-&gt;</operator><name>setCheckable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>historyAction</name><operator>-&gt;</operator><name>setShortcut</name></name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ALT</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_4</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tabGroup</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>historyAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <comment type="line">// These showNormalIfMinimized are needed because Send Coins and Receive Coins</comment>
    <comment type="line">// can be triggered from the tray menu, and need to show the GUI to be useful.</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>overviewAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>overviewAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>gotoOverviewPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>sendCoinsAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>sendCoinsAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>gotoSendCoinsPage</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>sendCoinsMenuAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>sendCoinsMenuAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>gotoSendCoinsPage</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>receiveCoinsAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>receiveCoinsAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>gotoReceiveCoinsPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>receiveCoinsMenuAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>receiveCoinsMenuAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>gotoReceiveCoinsPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>historyAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>historyAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>gotoHistoryPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

    <expr_stmt><expr><name>quitAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"E&amp;xit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>quitAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Quit application"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>quitAction</name><operator>-&gt;</operator><name>setShortcut</name></name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_Q</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>quitAction</name><operator>-&gt;</operator><name>setMenuRole</name></name><argument_list>(<argument><expr><name><name>QAction</name><operator>::</operator><name>QuitRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aboutAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;About %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aboutAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show information about %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aboutAction</name><operator>-&gt;</operator><name>setMenuRole</name></name><argument_list>(<argument><expr><name><name>QAction</name><operator>::</operator><name>AboutRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aboutAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aboutQtAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"About &amp;Qt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aboutQtAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show information about Qt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aboutQtAction</name><operator>-&gt;</operator><name>setMenuRole</name></name><argument_list>(<argument><expr><name><name>QAction</name><operator>::</operator><name>AboutQtRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>optionsAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Options..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>optionsAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Modify configuration options for %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>optionsAction</name><operator>-&gt;</operator><name>setMenuRole</name></name><argument_list>(<argument><expr><name><name>QAction</name><operator>::</operator><name>PreferencesRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>optionsAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>toggleHideAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Show / Hide"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toggleHideAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show or hide the main Window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>encryptWalletAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Encrypt Wallet..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Encrypt the private keys that belong to your wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setCheckable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>backupWalletAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Backup Wallet..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>backupWalletAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Backup wallet to another location"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>changePassphraseAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Change Passphrase..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>changePassphraseAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Change the passphrase used for wallet encryption"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>signMessageAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sign &amp;message..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>signMessageAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sign messages with your Bitcoin addresses to prove you own them"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>verifyMessageAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Verify message..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>verifyMessageAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Verify messages to ensure they were signed with specified Bitcoin addresses"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>openRPCConsoleAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Debug window"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>openRPCConsoleAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open debugging and diagnostic console"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// initially disable the debug window menu item</comment>
    <expr_stmt><expr><call><name><name>openRPCConsoleAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>openRPCConsoleAction</name><operator>-&gt;</operator><name>setObjectName</name></name><argument_list>(<argument><expr><literal type="string">"openRPCConsoleAction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>usedSendingAddressesAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Sending addresses"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>usedSendingAddressesAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show the list of used sending addresses and labels"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>usedReceivingAddressesAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Receiving addresses"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>usedReceivingAddressesAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show the list of used receiving addresses and labels"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>openAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open &amp;URI..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>openAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open a bitcoin: URI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>m_open_wallet_action</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open Wallet"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_open_wallet_action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_open_wallet_action</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open a wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_open_wallet_menu</name> <operator>=</operator> <operator>new</operator> <call><name>QMenu</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>m_close_wallet_action</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Close Wallet..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_close_wallet_action</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Close wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>m_create_wallet_action</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Create Wallet..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_create_wallet_action</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Create a new wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>showHelpMessageAction</name> <operator>=</operator> <operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Command-line options"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>showHelpMessageAction</name><operator>-&gt;</operator><name>setMenuRole</name></name><argument_list>(<argument><expr><name><name>QAction</name><operator>::</operator><name>NoRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>showHelpMessageAction</name><operator>-&gt;</operator><name>setStatusTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show the %1 help message to get a list with possible Bitcoin command-line options"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>quitAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>qApp</name></expr></argument>, <argument><expr><name><name>QApplication</name><operator>::</operator><name>quit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>aboutAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>aboutClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>aboutQtAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>qApp</name></expr></argument>, <argument><expr><name><name>QApplication</name><operator>::</operator><name>aboutQt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>optionsAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>optionsClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>toggleHideAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>toggleHidden</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>showHelpMessageAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showHelpMessageClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>openRPCConsoleAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showDebugWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// prevents an open debug window from becoming stuck/unusable on client shutdown</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>quitAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>rpcConsole</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>hide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <if_stmt><if>if<condition>(<expr><name>walletFrame</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>encryptWalletAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>walletFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletFrame</name><operator>::</operator><name>encryptWallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>backupWalletAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>walletFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletFrame</name><operator>::</operator><name>backupWallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>changePassphraseAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>walletFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletFrame</name><operator>::</operator><name>changePassphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>signMessageAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>signMessageAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>gotoSignMessageTab</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>verifyMessageAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>verifyMessageAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>gotoVerifyMessageTab</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>usedSendingAddressesAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>walletFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletFrame</name><operator>::</operator><name>usedSendingAddresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>usedReceivingAddressesAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>walletFrame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletFrame</name><operator>::</operator><name>usedReceivingAddresses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>openAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>openClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_open_wallet_menu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QMenu</name><operator>::</operator><name>aboutToShow</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_open_wallet_menu</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier> <name>i</name> : <name><name>m_wallet_controller</name><operator>-&gt;</operator><name>listWalletDir</name></name>(</type></decl></init>)</control><block type="pseudo"><block_content><expr_stmt><expr/></expr_stmt></block_content></block></for></block_content></block></lambda></expr></argument>)</argument_list></call> <block>{
                <expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>path</name> <operator>=</operator> <name><name>i</name><operator>.</operator><name>first</name></name></expr>;
                <name>QString</name> <name>name</name> <operator>=</operator> <ternary><condition><expr><call><name><name>path</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"["</literal><operator>+</operator><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"default wallet"</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></else></ternary></block></expr>;</expr_stmt>
                <comment type="line">// Menu items remove single &amp;. Single &amp; are shown when &amp;&amp; is in</comment>
                <comment type="line">// the string, but only the first occurrence. So replace only</comment>
                <comment type="line">// the first &amp; with &amp;&amp;.</comment>
                <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name>QChar</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>action</name> <init>= <expr><call><name><name>m_open_wallet_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>i</name><operator>.</operator><name>second</name></name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// This wallet is already loaded</comment>
                    <expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>, <argument><name>path</name></argument>]</capture> <block>{<block_content>
                    <decl_stmt><decl><type><name>auto</name> <name>activity</name> = <specifier/>new <name>OpenWalletActivity</name>(<name>m_wallet_controller</name></type></decl>, <decl><type ref="prev"/><name>this</name></decl>);</decl_stmt>
                    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OpenWalletActivity</name><operator>::</operator><name>opened</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>setCurrentWallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OpenWalletActivity</name><operator>::</operator><name>finished</name></name></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QObject</name><operator>::</operator><name>deleteLater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>activity</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>m_open_wallet_menu</name><operator>-&gt;</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>action</name> <init>= <expr><call><name><name>m_open_wallet_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No wallets available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>)<empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_close_wallet_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_wallet_controller</name><operator>-&gt;</operator><name>closeWallet</name></name><argument_list>(<argument><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>currentWalletModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>m_create_wallet_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name> <name>activity</name> = <specifier/>new <name>CreateWalletActivity</name>(<name>m_wallet_controller</name></type></decl>, <decl><type ref="prev"/><name>this</name></decl>);</decl_stmt>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CreateWalletActivity</name><operator>::</operator><name>created</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>setCurrentWallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CreateWalletActivity</name><operator>::</operator><name>finished</name></name></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QObject</name><operator>::</operator><name>deleteLater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>activity</name><operator>-&gt;</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

    connect<expr_stmt><expr><operator>(</operator><operator>new</operator> <call><name>QShortcut</name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>SHIFT</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_C</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>&amp;</operator><name><name>QShortcut</name><operator>::</operator><name>activated</name></name><operator>,</operator> <name>this</name><operator>,</operator> <operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showDebugWindowActivateConsole</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><operator>new</operator> <call><name>QShortcut</name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>SHIFT</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_D</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QShortcut</name><operator>::</operator><name>activated</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showDebugWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>createMenuBar</name></name><operator>(</operator><operator>)</operator>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <comment type="line">// Create a decoupled menu bar on Mac which stays even if the window is closed</comment>
    <expr><name>appMenuBar</name> <operator>=</operator> <operator>new</operator> <call><name>QMenuBar</name><argument_list>()</argument_list></call></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// Get the main window's menu bar on other platforms</comment>
    <expr><name>appMenuBar</name> <operator>=</operator> <call><name>menuBar</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Configure the menus</comment>
    <expr><name>QMenu</name> <operator>*</operator><name>file</name> <operator>=</operator> <call><name><name>appMenuBar</name><operator>-&gt;</operator><name>addMenu</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;File"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if<condition>(<expr><name>walletFrame</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>m_create_wallet_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>m_open_wallet_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>m_close_wallet_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>openAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>backupWalletAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>signMessageAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>verifyMessageAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block>
    <call><name><name>file</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>quitAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QMenu</name> <modifier>*</modifier></type><name>settings</name> <init>= <expr><call><name><name>appMenuBar</name><operator>-&gt;</operator><name>addMenu</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Settings"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>walletFrame</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>settings</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>encryptWalletAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>settings</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>changePassphraseAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>settings</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>optionsAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QMenu</name><modifier>*</modifier></type> <name>window_menu</name> <init>= <expr><call><name><name>appMenuBar</name><operator>-&gt;</operator><name>addMenu</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>minimize_action</name> <init>= <expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Minimize"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>minimize_action</name><operator>-&gt;</operator><name>setShortcut</name></name><argument_list>(<argument><expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_M</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>minimize_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
        <expr_stmt><expr><call><name><name>qApp</name><operator>-&gt;</operator><name>focusWindow</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>showMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>qApp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QApplication</name><operator>::</operator><name>focusWindowChanged</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>minimize_action</name></argument>]</capture> <parameter_list>(<parameter><decl><type><name>QWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>minimize_action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <literal type="null">nullptr</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>window</name><operator>-&gt;</operator><name>flags</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>Qt</name><operator>::</operator><name>Dialog</name></name><operator>)</operator> <operator>!=</operator> <name><name>Qt</name><operator>::</operator><name>Dialog</name></name> <operator>&amp;&amp;</operator> <call><name><name>window</name><operator>-&gt;</operator><name>windowState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Qt</name><operator>::</operator><name>WindowMinimized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>zoom_action</name> <init>= <expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Zoom"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>zoom_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
        <decl_stmt><decl><type><name>QWindow</name><modifier>*</modifier> <name>window</name> = <name><name>qApp</name><operator>-&gt;</operator><name>focusWindow</name></name>(</type></decl>);</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>window</name><operator>-&gt;</operator><name>windowState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Qt</name><operator>::</operator><name>WindowMaximized</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>showMaximized</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>showNormal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>qApp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QApplication</name><operator>::</operator><name>focusWindowChanged</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>zoom_action</name></argument>]</capture> <parameter_list>(<parameter><decl><type><name>QWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>zoom_action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>window</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
        <expr_stmt><expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>main_window_action</name> <init>= <expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Main Window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>main_window_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content>
            <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>bringToFront</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>usedSendingAddressesAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>usedReceivingAddressesAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>RPCConsole</name><operator>::</operator><name>TabTypes</name></name></type> <name>tab_type</name> <range>: <expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>tabs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>tab_action</name> <init>= <expr><call><name><name>window_menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>tabTitle</name></name><argument_list>(<argument><expr><name>tab_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tab_action</name><operator>-&gt;</operator><name>setShortcut</name></name><argument_list>(<argument><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>tabShortcut</name></name><argument_list>(<argument><expr><name>tab_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>tab_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>, <argument><name>tab_type</name></argument>]</capture> <block>{<block_content>
            <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>setTabFocus</name></name><argument_list>(<argument><expr><name>tab_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showDebugWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>QMenu</name> <modifier>*</modifier></type><name>help</name> <init>= <expr><call><name><name>appMenuBar</name><operator>-&gt;</operator><name>addMenu</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Help"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>help</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>showHelpMessageAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>help</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>help</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>aboutAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>help</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>aboutQtAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>createToolBars</name></name><operator>(</operator><operator>)</operator>
<block>{
    <if_stmt><if>if<condition>(<expr><name>walletFrame</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QToolBar</name> <modifier>*</modifier></type><name>toolbar</name> <init>= <expr><call><name>addToolBar</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Tabs toolbar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>appToolBar</name> <operator>=</operator> <name>toolbar</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>setContextMenuPolicy</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>PreventContextMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>setMovable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>setToolButtonStyle</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ToolButtonTextBesideIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>overviewAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>sendCoinsAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>receiveCoinsAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>historyAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <decl_stmt><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>spacer</name> <init>= <expr><operator>new</operator> <call><name>QWidget</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>spacer</name><operator>-&gt;</operator><name>setSizePolicy</name></name><argument_list>(<argument><expr><name><name>QSizePolicy</name><operator>::</operator><name>Expanding</name></name></expr></argument>, <argument><expr><name><name>QSizePolicy</name><operator>::</operator><name>Expanding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>spacer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>m_wallet_selector</name> <operator>=</operator> <operator>new</operator> <call><name>QComboBox</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>setSizeAdjustPolicy</name></name><argument_list>(<argument><expr><name><name>QComboBox</name><operator>::</operator><name>AdjustToContents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>connect</name><argument_list>(<argument>m_wallet_selector</argument>, <argument>static_cast&lt;void (QComboBox::*)(int)&gt;(&amp;QComboBox::currentIndexChanged)</argument>, <argument>this</argument>, <argument>&amp;BitcoinGUI::setCurrentWalletBySelectorIndex</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name>m_wallet_selector_label</name> <operator>=</operator> <operator>new</operator> <call><name>QLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_wallet_selector_label</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet:"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_wallet_selector_label</name><operator>-&gt;</operator><name>setBuddy</name></name><argument_list>(<argument><expr><name>m_wallet_selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>m_wallet_selector_label_action</name> <operator>=</operator> <call><name><name>appToolBar</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>m_wallet_selector_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_wallet_selector_action</name> <operator>=</operator> <call><name><name>appToolBar</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>m_wallet_selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>m_wallet_selector_label_action</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_wallet_selector_action</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
}

void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>setClientModel</name></name><operator>(</operator><name>ClientModel</name> <operator>*</operator><name>_clientModel</name><operator>)</operator>
<block>{
    <expr><name><name>this</name><operator>-&gt;</operator><name>clientModel</name></name> <operator>=</operator> <name>_clientModel</name></expr>;
    <if_stmt><if>if<condition>(<expr><name>_clientModel</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Create system tray menu (or setup the dock menu) that late to prevent users from calling actions,</comment>
        <comment type="line">// while the client has not yet fully loaded</comment>
        <expr_stmt><expr><call><name>createTrayIconMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Keep up to date with client</comment>
        <expr_stmt><expr><call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>numConnectionsChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>setNumConnections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>networkActiveChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>setNetworkActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>modalOverlay</name><operator>-&gt;</operator><name>setKnownBestHeight</name></name><argument_list>(<argument><expr><call><name><name>_clientModel</name><operator>-&gt;</operator><name>getHeaderTipHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>QDateTime</name><operator>::</operator><name>fromTime_t</name></name><argument_list>(<argument><expr><call><name><name>_clientModel</name><operator>-&gt;</operator><name>getHeaderTipTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNumBlocks</name><argument_list>(<argument><expr><call><name><name>m_node</name><operator>.</operator><name>getNumBlocks</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>QDateTime</name><operator>::</operator><name>fromTime_t</name></name><argument_list>(<argument><expr><call><name><name>m_node</name><operator>.</operator><name>getLastBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_node</name><operator>.</operator><name>getVerificationProgress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>numBlocksChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>setNumBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Receive and report messages from client model</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>message</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>message</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Show progress dialog</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>showProgress</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>showProgress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>setClientModel</name></name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateProxyIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <if_stmt><if>if<condition>(<expr><name>walletFrame</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>setClientModel</name></name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>
        <call><name><name>unitDisplayControl</name><operator>-&gt;</operator><name>setOptionsModel</name></name><argument_list>(<argument><expr><call><name><name>_clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OptionsModel</name><modifier>*</modifier></type> <name>optionsModel</name> <init>= <expr><call><name><name>_clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>optionsModel</name> <operator>&amp;&amp;</operator> <name>trayIcon</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// be aware of the tray icon disable state change reported by the OptionsModel object.</comment>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>optionsModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsModel</name><operator>::</operator><name>hideTrayIconChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>setTrayIconVisible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// initialize the disable state of the tray icon with the current value in the model.</comment>
            <expr_stmt><expr><call><name>setTrayIconVisible</name><argument_list>(<argument><expr><call><name><name>optionsModel</name><operator>-&gt;</operator><name>getHideTrayIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    } else <block>{<block_content>
        <comment type="line">// Disable possibility to show main window via action</comment>
        <expr_stmt><expr><call><name><name>toggleHideAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>trayIconMenu</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Disable context menu on tray icon</comment>
            <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Propagate cleared model to child objects</comment>
        <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>setClientModel</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>setClientModel</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>
        <expr_stmt><expr><call><name><name>unitDisplayControl</name><operator>-&gt;</operator><name>setOptionsModel</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
}

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>setWalletController</name></name><operator>(</operator><name>WalletController</name><operator>*</operator> <name>wallet_controller</name><operator>)</operator>
<block>{
    <expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>m_wallet_controller</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assert</name><argument_list>(<argument><expr><name>wallet_controller</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>m_wallet_controller</name> <operator>=</operator> <name>wallet_controller</name></expr>;

    <expr><call><name><name>m_open_wallet_action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>m_open_wallet_action</name><operator>-&gt;</operator><name>setMenu</name></name><argument_list>(<argument><expr><name>m_open_wallet_menu</name></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>connect</name><argument_list>(<argument><expr><name>wallet_controller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletController</name><operator>::</operator><name>walletAdded</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>addWallet</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>connect</name><argument_list>(<argument><expr><name>wallet_controller</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletController</name><operator>::</operator><name>walletRemoved</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>removeWallet</name></name></expr></argument>)</argument_list></call></expr>;

    <for>for <control>(<init><decl><type><name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name> <range>: <expr><call><name><name>m_wallet_controller</name><operator>-&gt;</operator><name>getOpenWallets</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addWallet</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}

void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>addWallet</name></name><operator>(</operator><name>WalletModel</name><operator>*</operator> <name>walletModel</name><operator>)</operator>
<block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <specifier>const</specifier> <name>QString</name> <name>display_name</name> <operator>=</operator> <call><name><name>walletModel</name><operator>-&gt;</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setWalletActionsEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>addWallet</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>addWallet</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>addItem</name></name><argument_list>(<argument><expr><name>display_name</name></expr></argument>, <argument><expr><call><name><name>QVariant</name><operator>::</operator><name>fromValue</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_wallet_selector_label_action</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_wallet_selector_action</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
}

void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>removeWallet</name></name><operator>(</operator><name>WalletModel</name><operator>*</operator> <name>walletModel</name><operator>)</operator>
<block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <name>int</name> <name>index</name> <operator>=</operator> <call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>findData</name></name><argument_list>(<argument><expr><call><name><name>QVariant</name><operator>::</operator><name>fromValue</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>removeItem</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setWalletActionsEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_wallet_selector_label_action</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_wallet_selector_action</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>removeWallet</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>removeWallet</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateWindowTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}

void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>setCurrentWallet</name></name><operator>(</operator><name>WalletModel</name><operator>*</operator> <name>wallet_model</name><operator>)</operator>
<block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <call><name><name>walletFrame</name><operator>-&gt;</operator><name>setCurrentWallet</name></name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>itemData</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>value</name><argument_list type="generic">&lt;<argument><expr><name>WalletModel</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>==</operator> <name>wallet_model</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>setCurrentIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>updateWindowTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}

void <macro><name>BitcoinGUI</name></macro><expr_stmt><expr><name><operator>::</operator><name>setCurrentWalletBySelectorIndex</name></name><operator>(</operator><name>int</name> <name>index</name><operator>)</operator>
<block>{
    <expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name> <operator>=</operator> <call><name><name>m_wallet_selector</name><operator>-&gt;</operator><name>itemData</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>value</name><argument_list type="generic">&lt;<argument><expr><name>WalletModel</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><name>wallet_model</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setCurrentWallet</name><argument_list>(<argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>removeAllWallets</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>setWalletActionsEnabled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>removeAllWallets</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>setWalletActionsEnabled</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsMenuAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsMenuAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>historyAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>backupWalletAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>changePassphraseAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>signMessageAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>verifyMessageAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>usedSendingAddressesAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>usedReceivingAddressesAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>openAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_close_wallet_action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>createTrayIcon</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>QSystemTrayIcon</name><operator>::</operator><name>isSystemTrayAvailable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><call><name><name>QSystemTrayIcon</name><operator>::</operator><name>isSystemTrayAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>trayIcon</name> <operator>=</operator> <operator>new</operator> <call><name>QSystemTrayIcon</name><argument_list>(<argument><expr><call><name><name>m_network_style</name><operator>-&gt;</operator><name>getTrayAndWindowIcon</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>toolTip</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1 client"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>m_network_style</name><operator>-&gt;</operator><name>getTitleAddText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>trayIcon</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>toolTip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>createTrayIconMenu</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef>
    <comment type="line">// return if trayIcon is unset (only on non-macOSes)</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>trayIcon</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>trayIcon</name><operator>-&gt;</operator><name>setContextMenu</name></name><argument_list>(<argument><expr><call><name><name>trayIconMenu</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>trayIcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QSystemTrayIcon</name><operator>::</operator><name>activated</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>trayIconActivated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// Note: On macOS, the Dock icon is used to provide the tray's functionality.</comment>
    <decl_stmt><decl><type><name>MacDockIconHandler</name> <modifier>*</modifier></type><name>dockIconHandler</name> <init>= <expr><call><name><name>MacDockIconHandler</name><operator>::</operator><name>instance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>dockIconHandler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>MacDockIconHandler</name><operator>::</operator><name>dockIconClicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>macosDockIconActivated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>setAsDockMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Configuration of the tray icon (or Dock icon) menu</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef>
    <comment type="line">// Note: On macOS, the Dock icon's menu already has Show / Hide action.</comment>
    <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>toggleHideAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>enableWallet</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>sendCoinsMenuAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>receiveCoinsMenuAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>signMessageAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>verifyMessageAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>optionsAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>openRPCConsoleAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef> <comment type="line">// This is built-in on macOS</comment>
    <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>trayIconMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>quitAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef>
<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>trayIconActivated</name></name><parameter_list>(<parameter><decl><type><name><name>QSystemTrayIcon</name><operator>::</operator><name>ActivationReason</name></name></type> <name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>reason</name> <operator>==</operator> <name><name>QSystemTrayIcon</name><operator>::</operator><name>Trigger</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Click on system tray icon triggers show/hide of the main window</comment>
        <expr_stmt><expr><call><name>toggleHidden</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>macosDockIconActivated</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>activateWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>optionsClicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>openOptionsDialogWithTab</name><argument_list>(<argument><expr><name><name>OptionsDialog</name><operator>::</operator><name>TAB_MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>aboutClicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>clientModel</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>HelpMessageDialog</name></type> <name>dlg</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dlg</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>showDebugWindow</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>bringToFront</name></name><argument_list>(<argument><expr><name>rpcConsole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>consoleShown</name><argument_list>(<argument><expr><name>rpcConsole</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>showDebugWindowActivateConsole</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>setTabFocus</name></name><argument_list>(<argument><expr><name><name>RPCConsole</name><operator>::</operator><name>TabTypes</name><operator>::</operator><name>CONSOLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>showDebugWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>showHelpMessageClicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>helpMessageDialog</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>openClicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OpenURIDialog</name></type> <name>dlg</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>dlg</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>receivedURI</name><argument_list>(<argument><expr><call><name><name>dlg</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>gotoOverviewPage</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>overviewAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>gotoOverviewPage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>gotoHistoryPage</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>historyAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>gotoHistoryPage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>gotoReceiveCoinsPage</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>receiveCoinsAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>gotoReceiveCoinsPage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>gotoSendCoinsPage</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>sendCoinsAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>gotoSendCoinsPage</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>gotoSignMessageTab</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>gotoSignMessageTab</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>gotoVerifyMessageTab</name></name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>gotoVerifyMessageTab</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>updateNetworkState</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getNumConnections</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>icon</name></decl>;</decl_stmt>
    <switch>switch<condition>(<expr><name>count</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>icon</name> <operator>=</operator> <literal type="string">":/icons/connect_0"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case> <case>case <expr><literal type="number">2</literal></expr>:</case> <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>icon</name> <operator>=</operator> <literal type="string">":/icons/connect_1"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case> <case>case <expr><literal type="number">5</literal></expr>:</case> <case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>icon</name> <operator>=</operator> <literal type="string">":/icons/connect_2"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="number">7</literal></expr>:</case> <case>case <expr><literal type="number">8</literal></expr>:</case> <case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>icon</name> <operator>=</operator> <literal type="string">":/icons/connect_3"</literal></expr>;</expr_stmt> <break>break;</break>
    <default>default:</default> <expr_stmt><expr><name>icon</name> <operator>=</operator> <literal type="string">":/icons/connect_4"</literal></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block></switch>

    <decl_stmt><decl><type><name>QString</name></type> <name>tooltip</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>m_node</name><operator>.</operator><name>getNetworkActive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%n active connection(s) to Bitcoin network"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">".&lt;br&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Click to disable network activity."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Network activity disabled."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;br&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Click to enable network activity again."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>icon</name> <operator>=</operator> <literal type="string">":/icons/network_disabled"</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Don't word-wrap this (fixed-width) tooltip</comment>
    <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;nobr&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tooltip</name> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;/nobr&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>connectionsControl</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>connectionsControl</name><operator>-&gt;</operator><name>setPixmap</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>,<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>setNumConnections</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>setNetworkActive</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>networkActive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>updateHeadersSyncProgressLabel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>headersTipTime</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getHeaderTipTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>headersTipHeight</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getHeaderTipHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>estHeadersLeft</name> <init>= <expr><operator>(</operator><call><name>GetTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>headersTipTime</name><operator>)</operator> <operator>/</operator> <call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call><operator>.</operator><name>nPowTargetSpacing</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>estHeadersLeft</name> <operator>&gt;</operator> <name>HEADER_HEIGHT_DELTA_SYNC</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Syncing Headers (%1%)..."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><literal type="number">100.0</literal> <operator>/</operator> <operator>(</operator><name>headersTipHeight</name><operator>+</operator><name>estHeadersLeft</name><operator>)</operator><operator>*</operator><name>headersTipHeight</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>openOptionsDialogWithTab</name></name><parameter_list>(<parameter><decl><type><name><name>OptionsDialog</name><operator>::</operator><name>Tab</name></name></type> <name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name> <operator>||</operator> <operator>!</operator><call><name><name>clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>OptionsDialog</name></type> <name>dlg</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>enableWallet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dlg</name><operator>.</operator><name>setCurrentTab</name></name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dlg</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dlg</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>setNumBlocks</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QDateTime</name><modifier>&amp;</modifier></type> <name>blockDate</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>nVerificationProgress</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="line">// Disabling macOS App Nap on initial sync, disk and reindex operations.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <expr_stmt><expr><ternary><condition><expr><operator>(</operator><call><name><name>m_node</name><operator>.</operator><name>isInitialBlockDownload</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>m_node</name><operator>.</operator><name>getReindex</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>m_node</name><operator>.</operator><name>getImporting</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>m_app_nap_inhibitor</name><operator>-&gt;</operator><name>disableAppNap</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>m_app_nap_inhibitor</name><operator>-&gt;</operator><name>enableAppNap</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>modalOverlay</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>header</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>modalOverlay</name><operator>-&gt;</operator><name>setKnownBestHeight</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>blockDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>modalOverlay</name><operator>-&gt;</operator><name>tipUpdate</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>blockDate</name></expr></argument>, <argument><expr><name>nVerificationProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -&gt; garbled text)</comment>
    <expr_stmt><expr><call><name>statusBar</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>clearMessage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Acquire current block source</comment>
    <decl_stmt><decl><type><name><name>enum</name> <name>BlockSource</name></name></type> <name>blockSource</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getBlockSource</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>blockSource</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>BlockSource</name><operator>::</operator><name>NETWORK</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>header</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>updateHeadersSyncProgressLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Synchronizing with network..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateHeadersSyncProgressLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>BlockSource</name><operator>::</operator><name>DISK</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>header</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Indexing blocks on disk..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Processing blocks on disk..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>BlockSource</name><operator>::</operator><name>REINDEX</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Reindexing blocks on disk..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>BlockSource</name><operator>::</operator><name>NONE</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>header</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Connecting to peers..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <decl_stmt><decl><type><name>QString</name></type> <name>tooltip</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QDateTime</name></type> <name>currentDate</name> <init>= <expr><call><name><name>QDateTime</name><operator>::</operator><name>currentDateTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qint64</name></type> <name>secs</name> <init>= <expr><call><name><name>blockDate</name><operator>.</operator><name>secsTo</name></name><argument_list>(<argument><expr><name>currentDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Processed %n block(s) of transaction history."</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set icon state: spinning if catching up, tick otherwise</comment>
    <if_stmt><if>if <condition>(<expr><name>secs</name> <operator>&lt;</operator> <name>MAX_BLOCK_TIME_GAP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Up to date"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">".&lt;br&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tooltip</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelBlocksIcon</name><operator>-&gt;</operator><name>setPixmap</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/synced"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>, <argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <if_stmt><if>if<condition>(<expr><name>walletFrame</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>showOutOfSyncWarning</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modalOverlay</name><operator>-&gt;</operator><name>showHide</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

        <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>timeBehindText</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatNiceTimeOffset</name></name><argument_list>(<argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setFormat</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1 behind"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>timeBehindText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setMaximum</name></name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><name>nVerificationProgress</name> <operator>*</operator> <literal type="number">1000000000.0</literal> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Catching up..."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;br&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tooltip</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>count</name> <operator>!=</operator> <name>prevBlocks</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>labelBlocksIcon</name><operator>-&gt;</operator><name>setPixmap</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(
                <argument><expr><literal type="string">":/movies/spinner-%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>spinnerFrame</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>QChar</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>, <argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>spinnerFrame</name> <operator>=</operator> <operator>(</operator><name>spinnerFrame</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SPINNER_FRAMES</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>prevBlocks</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <if_stmt><if>if<condition>(<expr><name>walletFrame</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>showOutOfSyncWarning</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>modalOverlay</name><operator>-&gt;</operator><name>showHide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

        <expr_stmt><expr><name>tooltip</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;br&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tooltip</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Last received block was generated %1 ago."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>timeBehindText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tooltip</name> <operator>+=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;br&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tooltip</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transactions after this will not yet be visible."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Don't word-wrap this (fixed-width) tooltip</comment>
    <expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;nobr&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>tooltip</name> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;/nobr&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>labelBlocksIcon</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>message</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>QString</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Default title. On macOS, the window title is ignored (as required by the macOS Guidelines).</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>strTitle</name><argument_list>{<argument><expr><name>PACKAGE_NAME</name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <comment type="line">// Default to information icon</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nMBoxIcon</name> <init>= <expr><name><name>QMessageBox</name><operator>::</operator><name>Information</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nNotifyIcon</name> <init>= <expr><name><name>Notificator</name><operator>::</operator><name>Information</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>prefix</name> <init>= <expr><operator>!</operator><operator>(</operator><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>MSG_NOPREFIX</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_NOPREFIX</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>msgType</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>title</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>msgType</name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <switch>switch <condition>(<expr><name>style</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr>:</case>
            <expr_stmt><expr><name>msgType</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error: %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_WARNING</name></name></expr>:</case>
            <expr_stmt><expr><name>msgType</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_INFORMATION</name></name></expr>:</case>
            <expr_stmt><expr><name>msgType</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// No need to prepend the prefix here.</comment>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>msgType</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>strTitle</name> <operator>+=</operator> <literal type="string">" - "</literal> <operator>+</operator> <name>msgType</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>ICON_ERROR</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nMBoxIcon</name> <operator>=</operator> <name><name>QMessageBox</name><operator>::</operator><name>Critical</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nNotifyIcon</name> <operator>=</operator> <name><name>Notificator</name><operator>::</operator><name>Critical</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>ICON_WARNING</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nMBoxIcon</name> <operator>=</operator> <name><name>QMessageBox</name><operator>::</operator><name>Warning</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nNotifyIcon</name> <operator>=</operator> <name><name>Notificator</name><operator>::</operator><name>Warning</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>MODAL</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Check for buttons, use OK as default, if none was supplied</comment>
        <decl_stmt><decl><type><name><name>QMessageBox</name><operator>::</operator><name>StandardButton</name></name></type> <name>buttons</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buttons</name> <operator>=</operator> <operator>(</operator><name><name>QMessageBox</name><operator>::</operator><name>StandardButton</name></name><operator>)</operator><operator>(</operator><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>BTN_MASK</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>buttons</name> <operator>=</operator> <name><name>QMessageBox</name><operator>::</operator><name>Ok</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QMessageBox</name></type> <name>mBox</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Icon</name></name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>nMBoxIcon</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name>strTitle</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mBox</name><operator>.</operator><name>setTextFormat</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>PlainText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>mBox</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>r</name> <operator>==</operator> <name><name>QMessageBox</name><operator>::</operator><name>Ok</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>notificator</name><operator>-&gt;</operator><name>notify</name></name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>Notificator</name><operator>::</operator><name>Class</name></name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>nNotifyIcon</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name>strTitle</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>changeEvent</name></name><parameter_list>(<parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QMainWindow</name><operator>::</operator><name>changeEvent</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef> <comment type="line">// Ignored on Mac</comment>
    <if_stmt><if>if<condition>(<expr><call><name><name>e</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>WindowStateChange</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>clientModel</name> <operator>&amp;&amp;</operator> <call><name><name>clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getMinimizeToTray</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>QWindowStateChangeEvent</name> <modifier>*</modifier></type><name>wsevt</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QWindowStateChangeEvent</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>wsevt</name><operator>-&gt;</operator><name>oldState</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>Qt</name><operator>::</operator><name>WindowMinimized</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isMinimized</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>hide</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><operator>(</operator><call><name><name>wsevt</name><operator>-&gt;</operator><name>oldState</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>Qt</name><operator>::</operator><name>WindowMinimized</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isMinimized</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>closeEvent</name></name><parameter_list>(<parameter><decl><type><name>QCloseEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef> <comment type="line">// Ignored on Mac</comment>
    <if_stmt><if>if<condition>(<expr><name>clientModel</name> <operator>&amp;&amp;</operator> <call><name><name>clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getMinimizeOnClose</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// close rpcConsole in case it was open to make some space for the shutdown window</comment>
            <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>QMainWindow</name><operator>::</operator><name>showMinimized</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>QMainWindow</name><operator>::</operator><name>closeEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>showEvent</name></name><parameter_list>(<parameter><decl><type><name>QShowEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// enable the debug window when the main window shows up</comment>
    <expr_stmt><expr><call><name><name>openRPCConsoleAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aboutAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>optionsAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>incomingTransaction</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>walletName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// On new transaction, make an info balloon</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>msg</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Date: %1\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> <operator>+</operator>
                  <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Amount: %1\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_node</name><operator>.</operator><name>getWallets</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>walletName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>msg</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet: %1\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>walletName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>msg</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Type: %1\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>label</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>msg</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Label: %1\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>address</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>msg</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Address: %1\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>amount</name><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sent transaction"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Incoming transaction"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
             <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_INFORMATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>dragEnterEvent</name></name><parameter_list>(<parameter><decl><type><name>QDragEnterEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Accept only URIs</comment>
    <if_stmt><if>if<condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>mimeData</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hasUrls</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>acceptProposedAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>dropEvent</name></name><parameter_list>(<parameter><decl><type><name>QDropEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>mimeData</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hasUrls</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>QUrl</name> <modifier>&amp;</modifier></type><name>uri</name> <range>: <expr><call><name><name>event</name><operator>-&gt;</operator><name>mimeData</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>urls</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>receivedURI</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>acceptProposedAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Catch status tip events</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>StatusTip</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Prevent adding text from setStatusTip(), if we currently use the status bar for displaying other stuff</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>progressBarLabel</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>progressBar</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QMainWindow</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<function><type><name>bool</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>handlePaymentRequest</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SendCoinsRecipient</name><modifier>&amp;</modifier></type> <name>recipient</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// URI has to be valid</comment>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name> <operator>&amp;&amp;</operator> <call><name><name>walletFrame</name><operator>-&gt;</operator><name>handlePaymentRequest</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>gotoSendCoinsPage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>setHDStatus</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>privkeyDisabled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hdEnabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>labelWalletHDStatusIcon</name><operator>-&gt;</operator><name>setPixmap</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>privkeyDisabled</name></expr> ?</condition><then> <expr><literal type="string">":/icons/eye"</literal></expr> </then><else>: <expr><ternary><condition><expr><name>hdEnabled</name></expr> ?</condition><then> <expr><literal type="string">":/icons/hd_enabled"</literal></expr> </then><else>: <expr><literal type="string">":/icons/hd_disabled"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>,<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>labelWalletHDStatusIcon</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>privkeyDisabled</name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Private key &lt;b&gt;disabled&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><ternary><condition><expr><name>hdEnabled</name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"HD key generation is &lt;b&gt;enabled&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"HD key generation is &lt;b&gt;disabled&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// eventually disable the QLabel to set its opacity to 50%</comment>
    <expr_stmt><expr><call><name><name>labelWalletHDStatusIcon</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>hdEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>setEncryptionStatus</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>status</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>Unencrypted</name></name></expr>:</case>
        <expr_stmt><expr><call><name><name>labelWalletEncryptionIcon</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>changePassphraseAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>Unlocked</name></name></expr>:</case>
        <expr_stmt><expr><call><name><name>labelWalletEncryptionIcon</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelWalletEncryptionIcon</name><operator>-&gt;</operator><name>setPixmap</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/lock_open"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>,<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelWalletEncryptionIcon</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>changePassphraseAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO: decrypt currently not supported</comment>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>Locked</name></name></expr>:</case>
        <expr_stmt><expr><call><name><name>labelWalletEncryptionIcon</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelWalletEncryptionIcon</name><operator>-&gt;</operator><name>setPixmap</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/lock_closed"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>,<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelWalletEncryptionIcon</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>changePassphraseAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encryptWalletAction</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO: decrypt currently not supported</comment>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>updateWalletStatus</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>walletFrame</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>WalletView</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>walletView</name> <init>= <expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>currentWalletView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>walletView</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>WalletModel</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>walletModel</name> <init>= <expr><call><name><name>walletView</name><operator>-&gt;</operator><name>getWalletModel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setEncryptionStatus</name><argument_list>(<argument><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>getEncryptionStatus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setHDStatus</name><argument_list>(<argument><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hdEnabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>updateProxyIcon</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ip_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>proxy_enabled</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getProxyInfo</name></name><argument_list>(<argument><expr><name>ip_port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>proxy_enabled</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>labelProxyIcon</name><operator>-&gt;</operator><name>pixmap</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>QString</name></type> <name>ip_port_q</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>ip_port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>labelProxyIcon</name><operator>-&gt;</operator><name>setPixmap</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/proxy"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>, <argument><expr><name>STATUSBAR_ICONSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>labelProxyIcon</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>ip_port_q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>labelProxyIcon</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>labelProxyIcon</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>updateWindowTitle</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>window_title</name> <init>= <expr><name>PACKAGE_NAME</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>walletFrame</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>WalletModel</name><modifier>*</modifier> <specifier>const</specifier></type> <name>wallet_model</name> <init>= <expr><call><name><name>walletFrame</name><operator>-&gt;</operator><name>currentWalletModel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>wallet_model</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>wallet_model</name><operator>-&gt;</operator><name>getWalletName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>window_title</name> <operator>+=</operator> <literal type="string">" - "</literal> <operator>+</operator> <call><name><name>wallet_model</name><operator>-&gt;</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_network_style</name><operator>-&gt;</operator><name>getTitleAddText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>window_title</name> <operator>+=</operator> <literal type="string">" - "</literal> <operator>+</operator> <call><name><name>m_network_style</name><operator>-&gt;</operator><name>getTitleAddText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>showNormalIfMinimized</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fToggleHidden</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>clientModel</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isHidden</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isMinimized</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>GUIUtil</name><operator>::</operator><name>isObscured</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>fToggleHidden</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>hide</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>bringToFront</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>toggleHidden</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>showNormalIfMinimized</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>detectShutdown</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_node</name><operator>.</operator><name>shutdownRequested</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>rpcConsole</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>rpcConsole</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>qApp</name><operator>-&gt;</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>showProgress</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nProgress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nProgress</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <operator>new</operator> <call><name>QProgressDialog</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>QString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>PolishProgressDialog</name></name><argument_list>(<argument><expr><name>progressDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressDialog</name><operator>-&gt;</operator><name>setWindowModality</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>ApplicationModal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressDialog</name><operator>-&gt;</operator><name>setMinimumDuration</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressDialog</name><operator>-&gt;</operator><name>setAutoClose</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressDialog</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nProgress</name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>progressDialog</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>-&gt;</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>-&gt;</operator><name>deleteLater</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>progressDialog</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>progressDialog</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><name>nProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>setTrayIconVisible</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fHideTrayIcon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>trayIcon</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>trayIcon</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><name>fHideTrayIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>showModalOverlay</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>modalOverlay</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>progressBar</name><operator>-&gt;</operator><name>isVisible</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>modalOverlay</name><operator>-&gt;</operator><name>isLayerVisible</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>modalOverlay</name><operator>-&gt;</operator><name>toggleVisibility</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ThreadSafeMessageBox</name><parameter_list>(<parameter><decl><type><name>BitcoinGUI</name><modifier>*</modifier></type> <name>gui</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>caption</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>modal</name> <init>= <expr><operator>(</operator><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>MODAL</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <comment type="line">// The SECURE flag has no effect in the Qt GUI.</comment>
    <comment type="line">// bool secure = (style &amp; CClientUIInterface::SECURE);</comment>
    <expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><name><name>CClientUIInterface</name><operator>::</operator><name>SECURE</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// In case of modal message, use blocking connection to wait for user to click a button</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>invoked</name> <init>= <expr><call><name><name>QMetaObject</name><operator>::</operator><name>invokeMethod</name></name><argument_list>(<argument><expr><name>gui</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>,
                               <argument><expr><ternary><condition><expr><name>modal</name></expr> ?</condition><then> <expr><call><name><name>GUIUtil</name><operator>::</operator><name>blockingGUIThreadConnection</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>Qt</name><operator>::</operator><name>QueuedConnection</name></name></expr></else></ternary></expr></argument>,
                               <argument><expr><call><name>Q_ARG</name><argument_list>(<argument><expr><name>QString</name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>caption</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>Q_ARG</name><argument_list>(<argument><expr><name>QString</name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><macro><name>Q_ARG</name><argument_list>(<argument>unsigned int</argument>, <argument>style</argument>)</argument_list></macro></expr></argument>,
                               <argument><expr><call><name>Q_ARG</name><argument_list>(<argument><expr><name>bool</name><operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>invoked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>subscribeToCoreSignals</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Connect signals to client</comment>
    <expr_stmt><expr><name>m_handler_message_box</name> <operator>=</operator> <call><name><name>m_node</name><operator>.</operator><name>handleMessageBox</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><name>ThreadSafeMessageBox</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_handler_question</name> <operator>=</operator> <call><name><name>m_node</name><operator>.</operator><name>handleQuestion</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><name>ThreadSafeMessageBox</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_3</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_4</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinGUI</name><operator>::</operator><name>unsubscribeFromCoreSignals</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Disconnect signals from client</comment>
    <expr_stmt><expr><call><name><name>m_handler_message_box</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_handler_question</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>UnitDisplayStatusBarControl</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlatformStyle</name> <modifier>*</modifier></type><name>platformStyle</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>optionsModel</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>menu</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>createContextMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setToolTip</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unit to show amounts in. Click to select another unit."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>Unit</name></name></expr></argument>&gt;</argument_list></name></type> <name>units</name> <init>= <expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>availableUnits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>QFontMetrics</name></type> <name>fm</name><argument_list>(<argument><expr><call><name>font</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>BitcoinUnits</name><operator>::</operator><name>Unit</name></name></type> <name>unit</name> <range>: <expr><name>units</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>max_width</name> <operator>=</operator> <call><name>qMax</name><argument_list>(<argument><expr><name>max_width</name></expr></argument>, <argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>TextWidth</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>longName</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>setMinimumSize</name><argument_list>(<argument><expr><name>max_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setAlignment</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>AlignRight</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>AlignVCenter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setStyleSheet</name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"QLabel { color : %1 }"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<comment type="block" format="doxygen">/** So that it responds to button clicks */</comment>
<function><type><name>void</name></type> <name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>mousePressEvent</name></name><parameter_list>(<parameter><decl><type><name>QMouseEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>onDisplayUnitsClicked</name><argument_list>(<argument><expr><call><name><name>event</name><operator>-&gt;</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */</comment>
<function><type><name>void</name></type> <name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>createContextMenu</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>new</operator> <call><name>QMenu</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>BitcoinUnits</name><operator>::</operator><name>Unit</name></name></type> <name>u</name> <range>: <expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>availableUnits</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>menuAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>longName</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menuAction</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><call><name>QVariant</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>menuAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QMenu</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>onMenuSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Lets the control know about the Options Model (and its signals) */</comment>
<function><type><name>void</name></type> <name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>setOptionsModel</name></name><parameter_list>(<parameter><decl><type><name>OptionsModel</name> <modifier>*</modifier></type><name>_optionsModel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>_optionsModel</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>optionsModel</name></name> <operator>=</operator> <name>_optionsModel</name></expr>;</expr_stmt>

        <comment type="line">// be aware of a display unit change reported by the OptionsModel object.</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_optionsModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsModel</name><operator>::</operator><name>displayUnitChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>updateDisplayUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// initialize the display units label with the current value in the model.</comment>
        <expr_stmt><expr><call><name>updateDisplayUnit</name><argument_list>(<argument><expr><call><name><name>_optionsModel</name><operator>-&gt;</operator><name>getDisplayUnit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */</comment>
<function><type><name>void</name></type> <name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>updateDisplayUnit</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newUnits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>longName</name></name><argument_list>(<argument><expr><name>newUnits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Shows context menu with Display Unit options by the mouse coordinates */</comment>
<function><type><name>void</name></type> <name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>onDisplayUnitsClicked</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QPoint</name><modifier>&amp;</modifier></type> <name>point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QPoint</name></type> <name>globalPos</name> <init>= <expr><call><name>mapToGlobal</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>-&gt;</operator><name>exec</name></name><argument_list>(<argument><expr><name>globalPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Tells underlying optionsModel to update its current display unit. */</comment>
<function><type><name>void</name></type> <name><name>UnitDisplayStatusBarControl</name><operator>::</operator><name>onMenuSelection</name></name><parameter_list>(<parameter><decl><type><name>QAction</name><modifier>*</modifier></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>action</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>optionsModel</name><operator>-&gt;</operator><name>setDisplayUnit</name></name><argument_list>(<argument><expr><call><name><name>action</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
