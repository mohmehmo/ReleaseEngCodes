<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/vector.h"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_VECTOR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_VECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Construct a vector with the specified elements.
 *
 * This is preferable over the list initializing constructor of std::vector:
 * - It automatically infers the element type from its arguments.
 * - If any arguments are rvalue references, they will be moved into the vector
 *   (list initialization always copies).
 */</comment>
<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>common_type</name><argument_list type="generic">&lt;<argument><expr><name>Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <macro><name>Vector</name><argument_list>(<argument>Args&amp;&amp;... args</argument>)</argument_list></macro>
<block>{
    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>common_type</name><argument_list type="generic">&lt;<argument><expr><name>Args</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name> <name>ret</name></expr>;
    <expr><call><name><name>ret</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
    <comment type="line">// The line below uses the trick from https://www.experts-exchange.com/articles/32502/None-recursive-variadic-templates-with-std-initializer-list.html</comment>
    <expr><operator>(</operator><name>void</name><operator>)</operator><name>std</name><operator>::</operator><name><name>initializer_list</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><block>{<expr><operator>(</operator><call><name><name>ret</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator> <literal type="number">0</literal><operator>)</operator><operator>...</operator></expr>}</block></expr>;
    <return>return <expr><name>ret</name></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block" format="doxygen">/** Concatenate two vectors, moving elements. */</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>V</name></type> <name>Cat</name><argument_list>(<argument><expr><name>V</name> <name>v1</name></expr></argument>, <argument><expr><name>V</name><operator>&amp;&amp;</operator> <name>v2</name></expr></argument>)</argument_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>arg</name> <operator>:</operator> <name>v2</name></expr></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>v1</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/** Concatenate two vectors. */</comment>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>V</name></type> <name>Cat</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name><modifier>&amp;</modifier></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>arg</name> <range>: <expr><name>v2</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>v1</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_VECTOR_H</comment>
</unit>
