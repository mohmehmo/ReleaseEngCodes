<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/wallet/feebumper.h"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_WALLET_FEEBUMPER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_WALLET_FEEBUMPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CWallet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CWalletTx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>uint256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CCoinControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>FeeEstimateMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>feebumper</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Result</name>
<block>{<block_content>
    <expr_stmt><expr><name>OK</name></expr><operator>,</operator>
    <expr><name>INVALID_ADDRESS_OR_KEY</name></expr><operator>,</operator>
    <expr><name>INVALID_REQUEST</name></expr><operator>,</operator>
    <expr><name>INVALID_PARAMETER</name></expr><operator>,</operator>
    <expr><name>WALLET_ERROR</name></expr><operator>,</operator>
    <expr><name>MISC_ERROR</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line" format="doxygen">//! Return whether transaction can be bumped.</comment>
<function_decl><type><name>bool</name></type> <name>TransactionCanBeBumped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line" format="doxygen">//! Create bumpfee transaction based on total amount.</comment>
<decl_stmt><decl><type><name>Result</name></type> <name>CreateTotalBumpTransaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CWallet</name><operator>*</operator> <name>wallet</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>CCoinControl</name><operator>&amp;</operator> <name>coin_control</name></expr></argument>,
                         <argument><expr><name>CAmount</name> <name>total_fee</name></expr></argument>,
                         <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>errors</name></expr></argument>,
                         <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>old_fee</name></expr></argument>,
                         <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>new_fee</name></expr></argument>,
                         <argument><expr><name>CMutableTransaction</name><operator>&amp;</operator> <name>mtx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! Create bumpfee transaction based on feerate estimates.</comment>
<decl_stmt><decl><type><name>Result</name></type> <name>CreateRateBumpTransaction</name><argument_list>(<argument><expr><name>CWallet</name><operator>&amp;</operator> <name>wallet</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>CCoinControl</name><operator>&amp;</operator> <name>coin_control</name></expr></argument>,
                         <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>errors</name></expr></argument>,
                         <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>old_fee</name></expr></argument>,
                         <argument><expr><name>CAmount</name><operator>&amp;</operator> <name>new_fee</name></expr></argument>,
                         <argument><expr><name>CMutableTransaction</name><operator>&amp;</operator> <name>mtx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! Sign the new transaction,</comment>
<comment type="line" format="doxygen">//! @return false if the tx couldn't be found or if it was</comment>
<comment type="line" format="doxygen">//! impossible to create the signature(s)</comment>
<function_decl><type><name>bool</name></type> <name>SignTransaction</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>mtx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line" format="doxygen">//! Commit the bumpfee transaction.</comment>
<comment type="line" format="doxygen">//! @return success in case of CWallet::CommitTransaction was successful,</comment>
<comment type="line" format="doxygen">//! but sets errors if the tx could not be added to the mempool (will try later)</comment>
<comment type="line" format="doxygen">//! or if the old transaction could not be marked as replaced.</comment>
<decl_stmt><decl><type><name>Result</name></type> <name>CommitTransaction</name><argument_list>(<argument><expr><name>CWallet</name><operator>&amp;</operator> <name>wallet</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>,
                         <argument><expr><name>CMutableTransaction</name><operator>&amp;&amp;</operator> <name>mtx</name></expr></argument>,
                         <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>errors</name></expr></argument>,
                         <argument><expr><name>uint256</name><operator>&amp;</operator> <name>bumped_txid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace feebumper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_WALLET_FEEBUMPER_H</comment>
</unit>
