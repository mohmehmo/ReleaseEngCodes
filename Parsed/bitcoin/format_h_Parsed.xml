<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/table/format.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_TABLE_FORMAT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_TABLE_FORMAT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/table_builder.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RandomAccessFile</name></decl>;</decl_stmt>
<struct_decl>struct <name>ReadOptions</name>;</struct_decl>

<comment type="line">// BlockHandle is a pointer to the extent of a file that stores a data</comment>
<comment type="line">// block or a meta block.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BlockHandle</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>BlockHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// The offset of the block in the file.</comment>
  <expr_stmt><expr><name>uint64_t</name> <macro><name>offset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>offset_</name></expr>;</return> }</block></expr></expr_stmt>
  <function><type><name>void</name></type> <name>set_offset</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>offset_</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt> </block_content>}</block></function>

  <comment type="line">// The size of the stored block</comment>
  <expr_stmt><expr><name>uint64_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size_</name></expr>;</return> }</block></expr></expr_stmt>
  <function><type><name>void</name></type> <name>set_size</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>size_</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> </block_content>}</block></function>

  <decl_stmt><decl><type><name>void</name></type> <name>EncodeTo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <function_decl><type><name>Status</name></type> <name>DecodeFrom</name><parameter_list>(<parameter><decl><type><name>Slice</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Maximum encoding length of a BlockHandle</comment>
  <enum>enum <block>{ <decl><name>kMaxEncodedLength</name> <init>= <expr><literal type="number">10</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> }</block>;</enum>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>size_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Footer encapsulates the fixed information stored at the tail</comment>
<comment type="line">// end of every table file.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Footer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>Footer</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>

  <comment type="line">// The block handle for the metaindex block of the table</comment>
  <expr_stmt><expr><specifier>const</specifier> <name>BlockHandle</name><operator>&amp;</operator> <macro><name>metaindex_handle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>metaindex_handle_</name></expr>;</return> }</block></expr></expr_stmt>
  <function><type><name>void</name></type> <name>set_metaindex_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockHandle</name><modifier>&amp;</modifier></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>metaindex_handle_</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> </block_content>}</block></function>

  <comment type="line">// The block handle for the index block of the table</comment>
  <expr_stmt><expr><specifier>const</specifier> <name>BlockHandle</name><operator>&amp;</operator> <macro><name>index_handle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>index_handle_</name></expr>;</return>
  }</block></expr></expr_stmt>
  <function><type><name>void</name></type> <name>set_index_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockHandle</name><modifier>&amp;</modifier></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>index_handle_</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name>void</name></type> <name>EncodeTo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <function_decl><type><name>Status</name></type> <name>DecodeFrom</name><parameter_list>(<parameter><decl><type><name>Slice</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Encoded length of a Footer.  Note that the serialization of a</comment>
  <comment type="line">// Footer will always occupy exactly this many bytes.  It consists</comment>
  <comment type="line">// of two block handles and a magic number.</comment>
  <enum>enum <block>{
    <decl><name>kEncodedLength</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>BlockHandle</name><operator>::</operator><name>kMaxEncodedLength</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>
  }</block>;</enum>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>BlockHandle</name></type> <name>metaindex_handle_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BlockHandle</name></type> <name>index_handle_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// kTableMagicNumber was picked by running</comment>
<comment type="line">//    echo http://code.google.com/p/leveldb/ | sha1sum</comment>
<comment type="line">// and taking the leading 64 bits.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>kTableMagicNumber</name> <init>= <expr><literal type="number">0xdb4775248b80fb57ull</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// 1-byte type + 32-bit crc</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>kBlockTrailerSize</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>BlockContents</name> <block>{
  <decl_stmt><decl><type><name>Slice</name></type> <name>data</name></decl>;</decl_stmt>           <comment type="line">// Actual contents of data</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>cachable</name></decl>;</decl_stmt>        <comment type="line">// True iff data can be cached</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>heap_allocated</name></decl>;</decl_stmt>  <comment type="line">// True iff caller should delete[] data.data()</comment>
}</block>;</struct>

<comment type="line">// Read the block identified by "handle" from "file".  On failure</comment>
<comment type="line">// return non-OK.  On success fill *result and return OK.</comment>
<function_decl><type><specifier>extern</specifier> <name>Status</name></type> <name>ReadBlock</name><parameter_list>(<parameter><decl><type><name>RandomAccessFile</name><modifier>*</modifier></type> <name>file</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>BlockHandle</name><modifier>&amp;</modifier></type> <name>handle</name></decl></parameter>,
                        <parameter><decl><type><name>BlockContents</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Implementation details follow.  Clients should ignore,</comment>

<expr_stmt><expr><specifier>inline</specifier> <name>BlockHandle</name><operator>::</operator><call><name>BlockHandle</name><argument_list>()</argument_list></call>
    <operator>:</operator> <call><name>offset_</name><argument_list>(<argument><expr><operator>~</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
      <macro><name>size_</name><argument_list>(<argument>~static_cast&lt;uint64_t&gt;(<literal type="number">0</literal>)</argument>)</argument_list></macro> <expr><block>{
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_TABLE_FORMAT_H_</comment>
</unit>
