<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/coins_tests.cpp"><comment type="line">// Copyright (c) 2014-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attributes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;undo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>ApplyTxInUndo</name><parameter_list>(<parameter><decl><type><name>Coin</name><modifier>&amp;&amp;</modifier></type> <name>undo</name></decl></parameter>, <parameter><decl><type><name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>UpdateCoins</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>inputs</name></decl></parameter>, <parameter><decl><type><name>CTxUndo</name> <modifier>&amp;</modifier></type><name>txundo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHeight</name></decl></parameter>)</parameter_list>;</function_decl>

<namespace>namespace
<block>{
<comment type="line" format="doxygen">//! equality test</comment>
<function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Coin</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Coin</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Empty Coin objects are always equal.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>b</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>a</name><operator>.</operator><name>fCoinBase</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>fCoinBase</name></name> <operator>&amp;&amp;</operator>
           <name><name>a</name><operator>.</operator><name>nHeight</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>nHeight</name></name> <operator>&amp;&amp;</operator>
           <name><name>a</name><operator>.</operator><name>out</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>out</name></name></expr>;</return>
</block_content>}</block></function>

<class>class <name>CCoinsViewTest</name> <super_list>: <super><specifier>public</specifier> <name>CCoinsView</name></super></super_list>
<block>{<private type="default">
    <decl_stmt><decl><type><name>uint256</name></type> <name>hashBestBlock_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>map_</name></decl>;</decl_stmt>

</private><public>public:
    <function><type><name>NODISCARD</name> <name>bool</name></type> <name>GetCoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>outpoint</name></decl></parameter>, <parameter><decl><type><name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>map_</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>map_</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>coin</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Randomly return false in case of an empty entry.</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>uint256</name></type> <name>GetBestBlock</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name>hashBestBlock_</name></expr>;</return> </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>BatchWrite</name><parameter_list>(<parameter><decl><type><name>CCoinsMap</name><modifier>&amp;</modifier></type> <name>mapCoins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hashBlock</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>mapCoins</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>mapCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Same optimization used in CCoinsViewDB is to only write dirty entries.</comment>
                <expr_stmt><expr><name><name>map_</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Randomly delete empty entries on write.</comment>
                    <expr_stmt><expr><call><name><name>map_</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mapCoins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>hashBlock</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>hashBestBlock_</name> <operator>=</operator> <name>hashBlock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<class>class <name>CCoinsViewCacheTest</name> <super_list>: <super><specifier>public</specifier> <name>CCoinsViewCache</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>CCoinsViewCacheTest</name><parameter_list>(<parameter><decl><type><name>CCoinsView</name><modifier>*</modifier></type> <name>_base</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>CCoinsViewCache</name><argument_list>(<argument><expr><name>_base</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>void</name></type> <name>SelfTest</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <comment type="line">// Manually recompute the dynamic usage of the whole data, and compare it.</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name><name>memusage</name><operator>::</operator><name>DynamicUsage</name></name><argument_list>(<argument><expr><name>cacheCoins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>cacheCoins</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetCacheSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>DynamicMemoryUsage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>CCoinsMap</name><modifier>&amp;</modifier></type> <name>map</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><name>cacheCoins</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>size_t</name><modifier>&amp;</modifier></type> <name>usage</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><name>cachedCoinsUsage</name></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>

}</block></namespace> <comment type="line">// namespace</comment>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>coins_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>NUM_SIMULATION_ITERATIONS</name> <init>= <expr><literal type="number">40000</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// This is a large randomized insert/remove simulation test on a variable-size</comment>
<comment type="line">// stack of caches on top of CCoinsViewTest.</comment>
<comment type="line">//</comment>
<comment type="line">// It will randomly create/update/delete Coin entries to a tip of caches, with</comment>
<comment type="line">// txids picked from a limited list of random 256-bit hashes. Occasionally, a</comment>
<comment type="line">// new tip is added to the stack of caches, or the tip is flushed and removed.</comment>
<comment type="line">//</comment>
<comment type="line">// During the process, booleans are kept to make sure that the randomized</comment>
<comment type="line">// operation hits all branches.</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>coins_cache_simulation_test</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Various coverage trackers.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>removed_all_caches</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>reached_4_caches</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>added_an_entry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>added_an_unspendable_entry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>removed_an_entry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>updated_an_entry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found_an_entry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>missed_an_entry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>uncached_an_entry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// A simple map to track what we expect the cache stack to represent.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>

    <comment type="line">// The cache stack.</comment>
    <decl_stmt><decl><type><name>CCoinsViewTest</name></type> <name>base</name></decl>;</decl_stmt> <comment type="line">// A CCoinsViewTest at the bottom.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CCoinsViewCacheTest</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt> <comment type="line">// A stack of CCoinsViewCaches on top.</comment>
    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CCoinsViewCacheTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Start with one cache.</comment>

    <comment type="line">// Use a limited set of random transaction ids, so we do test overwriting entries.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>txids</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txids</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>NUM_SIMULATION_ITERATIONS</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>txids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>txids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SIMULATION_ITERATIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// Do a random modification.</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint256</name></type> <name>txid</name> <init>= <expr><name><name>txids</name><index>[<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>txids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// txid we're going to modify in this iteration.</comment>
            <decl_stmt><decl><type><name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name> <init>= <expr><name><name>result</name><index>[<expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Determine whether to test HaveCoin before or after Access* (or both). As these functions</comment>
            <comment type="line">// can influence each other's behaviour by pulling things into the cache, all combinations</comment>
            <comment type="line">// are tested.</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>test_havecoin_before</name> <init>= <expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>test_havecoin_after</name> <init>= <expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>bool</name></type> <name>result_havecoin</name> <init>= <expr><ternary><condition><expr><name>test_havecoin_before</name></expr> ?</condition><then> <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>HaveCoin</name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name>entry</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>AccessByTxid</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>AccessCoin</name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>coin</name> <operator>==</operator> <name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>test_havecoin_before</name> <operator>||</operator> <name>result_havecoin</name> <operator>==</operator> <operator>!</operator><call><name><name>entry</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>test_havecoin_after</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>HaveCoin</name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>!</operator><call><name><name>entry</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Coin</name></type> <name>newcoin</name></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>newcoin</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name> <operator>=</operator> <call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>newcoin</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>newcoin</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OP_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>newcoin</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>IsUnspendable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>added_an_unspendable_entry</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>newcoin</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Random sizes so we can test memory usage accounting</comment>
                    <expr_stmt><expr><operator>(</operator><ternary><condition><expr><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>added_an_entry</name></expr> </then><else>: <expr><name>updated_an_entry</name></expr></else></ternary><operator>)</operator> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>coin</name> <operator>=</operator> <name>newcoin</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>AddCoin</name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>newcoin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>InsecureRand32</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>removed_an_entry</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>coin</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SpendCoin</name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>

        <comment type="line">// One every 10 iterations, remove a random entry from the cache</comment>
        <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>COutPoint</name></type> <name>out</name><argument_list>(<argument><expr><name><name>txids</name><index>[<expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name><name>txids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cacheid</name> <init>= <expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>cacheid</name></expr>]</index></name><operator>-&gt;</operator><call><name>Uncache</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>uncached_an_entry</name> <operator>|=</operator> <operator>!</operator><name><name>stack</name><index>[<expr><name>cacheid</name></expr>]</index></name><operator>-&gt;</operator><call><name>HaveCoinInCache</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Once every 1000 iterations and at the end, verify the full cache.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>NUM_SIMULATION_ITERATIONS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>result</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>have</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>HaveCoin</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>AccessCoin</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>have</name> <operator>==</operator> <operator>!</operator><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>coin</name> <operator>==</operator> <name><name>entry</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>missed_an_entry</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>HaveCoinInCache</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>found_an_entry</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CCoinsViewCacheTest</name> <modifier>*</modifier></type><name>test</name> <range>: <expr><name>stack</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>-&gt;</operator><name>SelfTest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Every 100 iterations, flush an intermediate cache</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flushIndex</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>flushIndex</name></expr>]</index></name><operator>-&gt;</operator><call><name>Flush</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Every 100 iterations, change the cache stack.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">//Remove the top cache</comment>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Flush</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>delete</operator> <call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <comment type="line">//Add a new cache</comment>
                <decl_stmt><decl><type><name>CCoinsView</name><modifier>*</modifier></type> <name>tip</name> <init>= <expr><operator>&amp;</operator><name>base</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>removed_all_caches</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CCoinsViewCacheTest</name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reached_4_caches</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Clean up the stack.</comment>
    <while>while <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>delete</operator> <call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// Verify coverage.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>removed_all_caches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>reached_4_caches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>added_an_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>added_an_unspendable_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>removed_an_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>updated_an_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>found_an_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>missed_an_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>uncached_an_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// Store of all necessary tx and undo data for next test</comment>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>CTransaction</name></expr></argument>,<argument><expr><name>CTxUndo</name></expr></argument>,<argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>UtxoData</name>;</typedef>
<decl_stmt><decl><type><name>UtxoData</name></type> <name>utxoData</name></decl>;</decl_stmt>

<function><type><name><name>UtxoData</name><operator>::</operator><name>iterator</name></name></type> <name>FindRandomFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>utxoSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>utxoSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>utxoSetIt</name> <init>= <expr><call><name><name>utxoSet</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>utxoSetIt</name> <operator>==</operator> <call><name><name>utxoSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>utxoSetIt</name> <operator>=</operator> <call><name><name>utxoSet</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>utxoDataIt</name> <init>= <expr><call><name><name>utxoData</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>*</operator><name>utxoSetIt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>utxoDataIt</name> <operator>!=</operator> <call><name><name>utxoData</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>utxoDataIt</name></expr>;</return>
</block_content>}</block></function>


<comment type="line">// This test is similar to the previous test</comment>
<comment type="line">// except the emphasis is on testing the functionality of UpdateCoins</comment>
<comment type="line">// random txs are created and UpdateCoins is used to update the cache stack</comment>
<comment type="line">// In particular it is tested that spending a duplicate coinbase tx</comment>
<comment type="line">// has the expected effect (the other duplicate is overwritten at all cache levels)</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>updatecoins_simulation_test</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>SeedInsecureRand</name><argument_list>(<argument><expr><name><name>SeedRand</name><operator>::</operator><name>ZEROS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_mock_deterministic_tests</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>spent_a_duplicate_coinbase</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// A simple map to track what we expect the cache stack to represent.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>

    <comment type="line">// The cache stack.</comment>
    <decl_stmt><decl><type><name>CCoinsViewTest</name></type> <name>base</name></decl>;</decl_stmt> <comment type="line">// A CCoinsViewTest at the bottom.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CCoinsViewCacheTest</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt> <comment type="line">// A stack of CCoinsViewCaches on top.</comment>
    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CCoinsViewCacheTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Start with one cache.</comment>

    <comment type="line">// Track the txids we've used in various sets</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>coinbase_coins</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>disconnected_coins</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>duplicate_coins</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>utxoset</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SIMULATION_ITERATIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>randiter</name> <init>= <expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// 19/20 txs add a new transaction</comment>
        <if_stmt><if>if <condition>(<expr><name>randiter</name> <operator>%</operator> <literal type="number">20</literal> <operator>&lt;</operator> <literal type="number">19</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <comment type="line">//Keep txs unique unless intended to duplicate</comment>
            <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptPubKey</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Random sizes so we can test memory usage accounting</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name> <init>= <expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Coin</name></type> <name>old_coin</name></decl>;</decl_stmt>

            <comment type="line">// 2/20 times create a new coinbase</comment>
            <if_stmt><if>if <condition>(<expr><name>randiter</name> <operator>%</operator> <literal type="number">20</literal> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name><name>coinbase_coins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// 1/10 of those times create a duplicate coinbase</comment>
                <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>coinbase_coins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>auto</name></type> <name>utxod</name> <init>= <expr><call><name>FindRandomFrom</name><argument_list>(<argument><expr><name>coinbase_coins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// Reuse the exact same coinbase</comment>
                    <expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>{<argument><expr><macro><name>std</name></macro><name><operator>::</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></name><operator>(</operator><name><name>utxod</name><operator>-&gt;</operator><name>second</name></name><operator>)</operator></expr></argument>}</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// shouldn't be available for reconnection if it's been duplicated</comment>
                    <expr_stmt><expr><call><name><name>disconnected_coins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>duplicate_coins</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>coinbase_coins</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsCoinBase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>

            <comment type="line">// 17/20 times reconnect previous or add a regular tx</comment>
            <else>else <block>{<block_content>

                <decl_stmt><decl><type><name>COutPoint</name></type> <name>prevout</name></decl>;</decl_stmt>
                <comment type="line">// 1/20 times reconnect a previously disconnected tx</comment>
                <if_stmt><if>if <condition>(<expr><name>randiter</name> <operator>%</operator> <literal type="number">20</literal> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name><name>disconnected_coins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>auto</name></type> <name>utxod</name> <init>= <expr><call><name>FindRandomFrom</name><argument_list>(<argument><expr><name>disconnected_coins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>{<argument><expr><macro><name>std</name></macro><name><operator>::</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></name><operator>(</operator><name><name>utxod</name><operator>-&gt;</operator><name>second</name></name><operator>)</operator></expr></argument>}</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>prevout</name> <operator>=</operator> <name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsCoinBase</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>utxoset</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>prevout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>disconnected_coins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>utxoset</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsCoinBase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>duplicate_coins</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>disconnected_coins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>

                <comment type="line">// 16/20 times create a regular tx</comment>
                <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>auto</name></type> <name>utxod</name> <init>= <expr><call><name>FindRandomFrom</name><argument_list>(<argument><expr><name>utxoset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>prevout</name> <operator>=</operator> <name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

                    <comment type="line">// Construct the tx to spend the coins of prevouthash</comment>
                    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <name>prevout</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsCoinBase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <comment type="line">// In this simple test coins only have two states, spent or unspent, save the unspent state to restore</comment>
                <expr_stmt><expr><name>old_coin</name> <operator>=</operator> <name><name>result</name><index>[<expr><name>prevout</name></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// Update the expected result of prevouthash to know these coins are spent</comment>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>prevout</name></expr>]</index></name><operator>.</operator><call><name>Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>utxoset</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>prevout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// The test is designed to ensure spending a duplicate coinbase will work properly</comment>
                <comment type="line">// if that ever happens and not resurrect the previously overwritten coinbase</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>duplicate_coins</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>prevout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>spent_a_duplicate_coinbase</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>
            <comment type="line">// Update the expected result to know about the new output coins</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>COutPoint</name></type> <name>outpoint</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>outpoint</name></expr>]</index></name> <operator>=</operator> <call><name>Coin</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsCoinBase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Call UpdateCoins on the top cache</comment>
            <decl_stmt><decl><type><name>CTxUndo</name></type> <name>undo</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>UpdateCoins</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>undo</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update the utxo set for future spends</comment>
            <expr_stmt><expr><call><name><name>utxoset</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Track this tx and undo info to use later</comment>
            <expr_stmt><expr><call><name><name>utxoData</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>,<argument><expr><name>undo</name></expr></argument>,<argument><expr><name>old_coin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>utxoset</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">//1/20 times undo a previous transaction</comment>
            <decl_stmt><decl><type><name>auto</name></type> <name>utxod</name> <init>= <expr><call><name>FindRandomFrom</name><argument_list>(<argument><expr><name>utxoset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>CTransaction</name> <modifier>&amp;</modifier></type><name>tx</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CTxUndo</name> <modifier>&amp;</modifier></type><name>undo</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Coin</name> <modifier>&amp;</modifier></type><name>orig_coin</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Update the expected result</comment>
            <comment type="line">// Remove new outputs</comment>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name><operator>.</operator><call><name>Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// If not coinbase restore prevout</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name></expr>]</index></name> <operator>=</operator> <name>orig_coin</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Disconnect the tx from the current UTXO</comment>
            <comment type="line">// See code in DisconnectBlock</comment>
            <comment type="line">// remove outputs</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SpendCoin</name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// restore inputs</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>out</name> <init>= <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name> <init>= <expr><name><name>undo</name><operator>.</operator><name>vprevout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ApplyTxInUndo</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Store as a candidate for reconnection</comment>
            <expr_stmt><expr><call><name><name>disconnected_coins</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update the utxoset</comment>
            <expr_stmt><expr><call><name><name>utxoset</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>utxod</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>utxoset</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Once every 1000 iterations and at the end, verify the full cache.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>NUM_SIMULATION_ITERATIONS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>result</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>have</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>HaveCoin</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>AccessCoin</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>have</name> <operator>==</operator> <operator>!</operator><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>coin</name> <operator>==</operator> <name><name>entry</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// One every 10 iterations, remove a random entry from the cache</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>utxoset</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>-&gt;</operator><call><name>Uncache</name><argument_list>(<argument><expr><call><name>FindRandomFrom</name><argument_list>(<argument><expr><name>utxoset</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>disconnected_coins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>-&gt;</operator><call><name>Uncache</name><argument_list>(<argument><expr><call><name>FindRandomFrom</name><argument_list>(<argument><expr><name>disconnected_coins</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>duplicate_coins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>-&gt;</operator><call><name>Uncache</name><argument_list>(<argument><expr><call><name>FindRandomFrom</name><argument_list>(<argument><expr><name>duplicate_coins</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Every 100 iterations, flush an intermediate cache</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flushIndex</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>flushIndex</name></expr>]</index></name><operator>-&gt;</operator><call><name>Flush</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Every 100 iterations, change the cache stack.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Flush</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>delete</operator> <call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>CCoinsView</name><modifier>*</modifier></type> <name>tip</name> <init>= <expr><operator>&amp;</operator><name>base</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CCoinsViewCacheTest</name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Clean up the stack.</comment>
    <while>while <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>delete</operator> <call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// Verify coverage.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>spent_a_duplicate_coinbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>g_mock_deterministic_tests</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ccoins_serialization</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Good example</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss1</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"97f23c835800816115944e077fe7c803cfa57f29b36bf87c1d35"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Coin</name></type> <name>cc1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss1</name> <operator>&gt;&gt;</operator> <name>cc1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc1</name><operator>.</operator><name>fCoinBase</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc1</name><operator>.</operator><name>nHeight</name></name></expr></argument>, <argument><expr><literal type="number">203998U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc1</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>{<argument><expr><literal type="number">60000000000</literal></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name><name>cc1</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"816115944e077fe7c803cfa57f29b36bf87c1d35"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Good example</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss2</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"8ddf77bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Coin</name></type> <name>cc2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss2</name> <operator>&gt;&gt;</operator> <name>cc2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc2</name><operator>.</operator><name>fCoinBase</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc2</name><operator>.</operator><name>nHeight</name></name></expr></argument>, <argument><expr><literal type="number">120891U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc2</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name></expr></argument>, <argument><expr><literal type="number">110397</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name><name>cc2</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"8c988f1a4a4de2161e0f50aac7f17e7f9555caa4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Smallest possible example</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss3</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"000006"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Coin</name></type> <name>cc3</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss3</name> <operator>&gt;&gt;</operator> <name>cc3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc3</name><operator>.</operator><name>fCoinBase</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc3</name><operator>.</operator><name>nHeight</name></name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>cc3</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>cc3</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// scriptPubKey that ends beyond the end of the stream</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss4</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"000007"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>Coin</name></type> <name>cc4</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss4</name> <operator>&gt;&gt;</operator> <name>cc4</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"We should have thrown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>

    <comment type="line">// Very large scriptPubKey (3*10^9 bytes) past the end of the stream</comment>
    <function_decl><type><name>CDataStream</name></type> <name>tmp</name><parameter_list>(<parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>CLIENT_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><literal type="number">3000000000ULL</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>tmp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tmp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"8a95c0bb00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss5</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"00008a95c0bb00"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>Coin</name></type> <name>cc5</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss5</name> <operator>&gt;&gt;</operator> <name>cc5</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"We should have thrown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
</block_content>}</block>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>COutPoint</name></type> <name>OUTPOINT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>CAmount</name></type> <name>PRUNED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>CAmount</name></type> <name>ABSENT</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>CAmount</name></type> <name>FAIL</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>CAmount</name></type> <name>VALUE1</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>CAmount</name></type> <name>VALUE2</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>CAmount</name></type> <name>VALUE3</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>char</name></type> <name>DIRTY</name> <init>= <expr><name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>char</name></type> <name>FRESH</name> <init>= <expr><name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>char</name></type> <name>NO_ENTRY</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <specifier>auto</specifier></type> <name>FLAGS</name> <init>= <expr><block>{<expr><call><name>char</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FRESH</name></expr>, <expr><name>DIRTY</name></expr>, <macro><name>char</name><argument_list>(<argument>DIRTY | FRESH</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <specifier>auto</specifier></type> <name>CLEAN_FLAGS</name> <init>= <expr><block>{<expr><call><name>char</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FRESH</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <specifier>auto</specifier></type> <name>ABSENT_FLAGS</name> <init>= <expr><block>{<expr><name>NO_ENTRY</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetCoinsValue</name><parameter_list>(<parameter><decl><type><name>CAmount</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>ABSENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coin</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>PRUNED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>coin</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>InsertCoinsMapEntry</name><parameter_list>(<parameter><decl><type><name>CCoinsMap</name><modifier>&amp;</modifier></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>ABSENT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>flags</name> <operator>==</operator> <name>NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>flags</name> <operator>!=</operator> <name>NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CCoinsCacheEntry</name></type> <name>entry</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetCoinsValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>coin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>inserted</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>OUTPOINT</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>inserted</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>inserted</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GetCoinsMapEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCoinsMap</name><modifier>&amp;</modifier></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>&amp;</modifier></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>OUTPOINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <name>ABSENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>NO_ENTRY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <name>PRUNED</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>flags</name> <operator>!=</operator> <name>NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>WriteCoinsViewEntry</name><parameter_list>(<parameter><decl><type><name>CCoinsView</name><modifier>&amp;</modifier></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CCoinsMap</name></type> <name>map</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>InsertCoinsMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>BatchWrite</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block></function>)<empty_stmt>;</empty_stmt>
}

class <macro><name>SingleEntryCacheTest</name></macro>
<block>{<block_content>
<public>public:
    <macro><name>SingleEntryCacheTest</name><argument_list>(<argument>CAmount base_value</argument>, <argument>CAmount cache_value</argument>, <argument>char cache_flags</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>WriteCoinsViewEntry</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>base_value</name></expr></argument>, <argument><expr><ternary><condition><expr><name>base_value</name> <operator>==</operator> <name>ABSENT</name></expr> ?</condition><then> <expr><name>NO_ENTRY</name></expr> </then><else>: <expr><name>DIRTY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>usage</name></name><argument_list>()</argument_list></call> <operator>+=</operator> <call><name>InsertCoinsMapEntry</name><argument_list>(<argument><expr><call><name><name>cache</name><operator>.</operator><name>map</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cache_value</name></expr></argument>, <argument><expr><name>cache_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>CCoinsView</name></type> <name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCacheTest</name></type> <name>base</name><argument_list>{<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCacheTest</name></type> <name>cache</name><argument_list>{<argument><expr><operator>&amp;</operator><name>base</name></expr></argument>}</argument_list></decl>;</decl_stmt>
</public></block_content>}</block><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckAccessCoin</name><parameter_list>(<parameter><decl><type><name>CAmount</name></type> <name>base_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>cache_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>expected_value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>cache_flags</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>expected_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SingleEntryCacheTest</name></type> <name>test</name><argument_list>(<argument><expr><name>base_value</name></expr></argument>, <argument><expr><name>cache_value</name></expr></argument>, <argument><expr><name>cache_flags</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>AccessCoin</name></name><argument_list>(<argument><expr><name>OUTPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>SelfTest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>result_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>result_flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetCoinsMapEntry</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>map</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>result_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>expected_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_flags</name></expr></argument>, <argument><expr><name>expected_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ccoins_access</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="block">/* Check AccessCoin behavior, requesting a coin from a cache view layered on
     * top of a base view, and checking the resulting entry in the cache after
     * the access.
     *
     *               Base    Cache   Result  Cache        Result
     *               Value   Value   Value   Flags        Flags
     */</comment>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAccessCoin</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckSpendCoins</name><parameter_list>(<parameter><decl><type><name>CAmount</name></type> <name>base_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>cache_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>expected_value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>cache_flags</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>expected_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SingleEntryCacheTest</name></type> <name>test</name><argument_list>(<argument><expr><name>base_value</name></expr></argument>, <argument><expr><name>cache_value</name></expr></argument>, <argument><expr><name>cache_flags</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>SpendCoin</name></name><argument_list>(<argument><expr><name>OUTPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>SelfTest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>result_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>result_flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetCoinsMapEntry</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>map</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>result_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>expected_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_flags</name></expr></argument>, <argument><expr><name>expected_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ccoins_spend</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="block">/* Check SpendCoin behavior, requesting a coin from a cache view layered on
     * top of a base view, spending, and then checking
     * the resulting entry in the cache after the modification.
     *
     *              Base    Cache   Result  Cache        Result
     *              Value   Value   Value   Flags        Flags
     */</comment>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSpendCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckAddCoinBase</name><parameter_list>(<parameter><decl><type><name>CAmount</name></type> <name>base_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>cache_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>modify_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>expected_value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>cache_flags</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>expected_flags</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coinbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SingleEntryCacheTest</name></type> <name>test</name><argument_list>(<argument><expr><name>base_value</name></expr></argument>, <argument><expr><name>cache_value</name></expr></argument>, <argument><expr><name>cache_flags</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>result_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>result_flags</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CTxOut</name></type> <name>output</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>nValue</name></name> <operator>=</operator> <name>modify_value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>AddCoin</name></name><argument_list>(<argument><expr><name>OUTPOINT</name></expr></argument>, <argument><expr><call><name>Coin</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>coinbase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coinbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>SelfTest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetCoinsMapEntry</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>map</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>result_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>logic_error</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>result_value</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result_flags</name> <operator>=</operator> <name>NO_ENTRY</name></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>expected_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_flags</name></expr></argument>, <argument><expr><name>expected_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Simple wrapper for CheckAddCoinBase function above that loops through</comment>
<comment type="line">// different possible base_values, making sure each one gives the same results.</comment>
<comment type="line">// This wrapper lets the coins_add test below be shorter and less repetitive,</comment>
<comment type="line">// while still verifying that the CoinsViewCache::AddCoin implementation</comment>
<comment type="line">// ignores base values.</comment>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>void</name></type> <name>CheckAddCoin</name><parameter_list>(<parameter><decl><type><name>Args</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>base_value</name> <range>: <expr><block>{<expr><name>ABSENT</name></expr>, <expr><name>PRUNED</name></expr>, <expr><name>VALUE1</name></expr>}</block></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CheckAddCoinBase</name><argument_list>(<argument><expr><name>base_value</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ccoins_add</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="block">/* Check AddCoin behavior, requesting a new coin from a cache view,
     * writing a modification to the coin, and then checking the resulting
     * entry in the cache after the modification. Verify behavior with the
     * with the AddCoin potential_overwrite argument set to false, and to true.
     *
     *           Cache   Write   Result  Cache        Result       potential_overwrite
     *           Value   Value   Value   Flags        Flags
     */</comment>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckAddCoin</name><argument_list>(<argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>VALUE3</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>CheckWriteCoins</name><parameter_list>(<parameter><decl><type><name>CAmount</name></type> <name>parent_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>child_value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>expected_value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>parent_flags</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>child_flags</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>expected_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SingleEntryCacheTest</name></type> <name>test</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>parent_value</name></expr></argument>, <argument><expr><name>parent_flags</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>result_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>result_flags</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>WriteCoinsViewEntry</name><argument_list>(<argument><expr><name><name>test</name><operator>.</operator><name>cache</name></name></expr></argument>, <argument><expr><name>child_value</name></expr></argument>, <argument><expr><name>child_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>SelfTest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetCoinsMapEntry</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>cache</name><operator>.</operator><name>map</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>result_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>logic_error</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>result_value</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result_flags</name> <operator>=</operator> <name>NO_ENTRY</name></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_value</name></expr></argument>, <argument><expr><name>expected_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result_flags</name></expr></argument>, <argument><expr><name>expected_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ccoins_write</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="block">/* Check BatchWrite behavior, flushing one entry from a child cache to a
     * parent cache, and checking the resulting entry in the parent cache
     * after the write.
     *
     *              Parent  Child   Result  Parent       Child        Result
     *              Value   Value   Value   Flags        Flags        Flags
     */</comment>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><literal type="number">0</literal></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>FRESH</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>ABSENT</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>PRUNED</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><literal type="number">0</literal></expr></argument>          , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>FRESH</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name></expr></argument>      , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>VALUE1</name></expr></argument>, <argument><expr><name>VALUE2</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>  , <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>DIRTY</name><operator>|</operator><name>FRESH</name></expr></argument>, <argument><expr><name>NO_ENTRY</name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The checks above omit cases where the child flags are not DIRTY, since</comment>
    <comment type="line">// they would be too repetitive (the parent cache is never updated in these</comment>
    <comment type="line">// cases). The loop below covers these cases and makes sure the parent cache</comment>
    <comment type="line">// is always left unchanged.</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>parent_value</name> <range>: <expr><block>{<expr><name>ABSENT</name></expr>, <expr><name>PRUNED</name></expr>, <expr><name>VALUE1</name></expr>}</block></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>child_value</name> <range>: <expr><block>{<expr><name>ABSENT</name></expr>, <expr><name>PRUNED</name></expr>, <expr><name>VALUE2</name></expr>}</block></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name></type> <name>parent_flags</name> <range>: <expr><name>parent_value</name> <operator>==</operator> <name>ABSENT</name> <operator>?</operator> <name>ABSENT_FLAGS</name> <operator>:</operator> <name>FLAGS</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name></type> <name>child_flags</name> <range>: <expr><name>child_value</name> <operator>==</operator> <name>ABSENT</name> <operator>?</operator> <name>ABSENT_FLAGS</name> <operator>:</operator> <name>CLEAN_FLAGS</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>CheckWriteCoins</name><argument_list>(<argument><expr><name>parent_value</name></expr></argument>, <argument><expr><name>child_value</name></expr></argument>, <argument><expr><name>parent_value</name></expr></argument>, <argument><expr><name>parent_flags</name></expr></argument>, <argument><expr><name>child_flags</name></expr></argument>, <argument><expr><name>parent_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
