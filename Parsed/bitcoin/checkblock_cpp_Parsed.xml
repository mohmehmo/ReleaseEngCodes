<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/checkblock.cpp"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/data.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>

<comment type="line">// These are the two major time-sinks which happen after we have fully received</comment>
<comment type="line">// a block off the wire, but before we can relay the block on to peers using</comment>
<comment type="line">// compact block relay.</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeserializeBlockTest</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><name><name>benchmark</name><operator>::</operator><name>data</name><operator>::</operator><name>block413567</name></name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>a</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Prevent compaction</comment>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>rewound</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>Rewind</name></name><argument_list>(<argument><expr><call><name><name>benchmark</name><operator>::</operator><name>data</name><operator>::</operator><name>block413567</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rewound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeserializeAndCheckBlockTest</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><name><name>benchmark</name><operator>::</operator><name>data</name><operator>::</operator><name>block413567</name></name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>a</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Prevent compaction</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt> <comment type="line">// Note that CBlock caches its checked state, so we need to recreate it here</comment>
        <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>rewound</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>Rewind</name></name><argument_list>(<argument><expr><call><name><name>benchmark</name><operator>::</operator><name>data</name><operator>::</operator><name>block413567</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rewound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>validationState</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>checked</name> <init>= <expr><call><name>CheckBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>validationState</name></expr></argument>, <argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>DeserializeBlockTest</name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>DeserializeAndCheckBlockTest</name></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
