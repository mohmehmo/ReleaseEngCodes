<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/univalue/include/univalue.h"><comment type="line">// Copyright 2014 BitPay Inc.</comment>
<comment type="line">// Copyright 2015 Bitcoin Core Developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__UNIVALUE_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UNIVALUE_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>        <comment type="line">// .get_int64()</comment>

<decl_stmt><decl><type><name>class</name></type> <name>UniValue</name> <block>{<block_content>
<label><name>public</name>:</label>
    <enum>enum <name>VType</name> <block>{ <decl><name>VNULL</name></decl>, <decl><name>VOBJ</name></decl>, <decl><name>VARR</name></decl>, <decl><name>VSTR</name></decl>, <decl><name>VNUM</name></decl>, <decl><name>VBOOL</name></decl>, }</block>;</enum>

    <macro><name>UniValue</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>VNULL</name></expr>;</expr_stmt> </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>UniValue::VType initialType</argument>, <argument>const std::string&amp; initialStr = <literal type="string">""</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>typ</name> <operator>=</operator> <name>initialType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <name>initialStr</name></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>uint64_t val_</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>setInt</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>int64_t val_</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>setInt</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>bool val_</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>setBool</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>int val_</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>setInt</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>double val_</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>setFloat</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>const std::string&amp; val_</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>setStr</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>UniValue</name><argument_list>(<argument>const char *val_</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>s</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setStr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>setNull</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>setBool</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>bool</name></type> <name>setNumStr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>bool</name></type> <name>setInt</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>setInt</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
    <function><type><name>bool</name></type> <name>setInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val_</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>setInt</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val_</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function_decl><type><name>bool</name></type> <name>setFloat</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>bool</name></type> <name>setStr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>bool</name></type> <name>setArray</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>setObject</name><parameter_list>()</parameter_list>;</function_decl>

    enum <expr_stmt><expr><name>VType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>typ</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>getValStr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>bool</name> <macro><name>getBool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isTrue</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>getObjMap</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>,<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>kv</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>checkObject</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>,<argument><expr><name>UniValue</name><operator>::</operator><name>VType</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>memberTypes</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_t</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>exists</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const <block>{<block_content> <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt> <return>return <expr><call><name>findKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VNULL</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>isTrue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VBOOL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name> <operator>==</operator> <literal type="string">"1"</literal><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>isFalse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VBOOL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name> <operator>!=</operator> <literal type="string">"1"</literal><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>isBool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VBOOL</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>isStr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VSTR</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>isNum</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VNUM</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>isArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VARR</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>isObject</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>typ</name> <operator>==</operator> <name>VOBJ</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

    <function_decl><type><name>bool</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>bool</name></type> <name>push_back</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <function_decl><type><name>UniValue</name></type> <name>tmpVal</name><parameter_list>(<parameter><decl><type><name>VSTR</name></type></decl></parameter>, <parameter><decl><type><name>val_</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <return>return <expr><call><name>push_back</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <function><type><name>bool</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val_</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>s</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>push_back</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val_</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>tmpVal</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>push_back</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>val_</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>tmpVal</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>push_back</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val_</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>tmpVal</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>push_back</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val_</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>tmpVal</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>push_back</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <decl_stmt><decl><type><name>bool</name></type> <name>push_backV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vec</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name></type> <name>__pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <function_decl><type><name>UniValue</name></type> <name>tmpVal</name><parameter_list>(<parameter><decl><type><name>VSTR</name></type></decl></parameter>, <parameter><decl><type><name>val_</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <return>return <expr><call><name>pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>_val</name><argument_list>(<argument><expr><name>val_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>_val</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>int64_t</name> <name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <function_decl><type><name>UniValue</name></type> <name>tmpVal</name><parameter_list>(<parameter><decl><type><name>val_</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <return>return <expr><call><name>pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <function_decl><type><name>UniValue</name></type> <name>tmpVal</name><parameter_list>(<parameter><decl><type><name>val_</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <return>return <expr><call><name>pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>bool</name> <name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>tmpVal</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name>val_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>int</name> <name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>tmpVal</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pushKV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>double</name> <name>val_</name></expr></argument>)</argument_list> <block>{<block_content>
        <function_decl><type><name>UniValue</name></type> <name>tmpVal</name><parameter_list>(<parameter><decl><type><name>val_</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <return>return <expr><call><name>pushKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <function_decl><type><name>bool</name></type> <name>pushKVs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>write</name><argument_list>(<argument>unsigned int prettyIndent = <literal type="number">0</literal></argument>,
                      <argument>unsigned int indentLevel = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <function_decl><type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
    <function><type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>raw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><name>bool</name></type> <name>read</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>rawStr</name></expr></argument>)</argument_list> <block>{<block_content>
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><call><name><name>rawStr</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rawStr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
    <expr_stmt><expr><name>UniValue</name><operator>::</operator><name>VType</name> <name>typ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>val</name></expr>;</expr_stmt>                       <comment type="line">// numbers are stored as C++ strings</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>keys</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name> <name>values</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>findKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>size_t</name><operator>&amp;</operator> <name>retIdx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>writeArray</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>prettyIndent</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>indentLevel</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>writeObject</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>prettyIndent</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>indentLevel</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>public</name>:</label>
    <comment type="line">// Strict type-specific getters, these throw std::runtime_error if the</comment>
    <comment type="line">// value is of unexpected type</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getKeys</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getValues</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>get_bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>get_str</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>get_int</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><name>int64_t</name> <macro><name>get_int64</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><name>double</name> <macro><name>get_real</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <macro><name>get_obj</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <macro><name>get_array</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    enum <expr_stmt><expr><name>VType</name> <macro><name>type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getType</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>friend</name> <specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>find_value</name><argument_list>( <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>obj</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<enum>enum <name>jtokentype</name> <block>{
    <decl><name>JTOK_ERR</name>        <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
    <decl><name>JTOK_NONE</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>,                           <comment type="line">// eof</comment>
    <decl><name>JTOK_OBJ_OPEN</name></decl>,
    <decl><name>JTOK_OBJ_CLOSE</name></decl>,
    <decl><name>JTOK_ARR_OPEN</name></decl>,
    <decl><name>JTOK_ARR_CLOSE</name></decl>,
    <decl><name>JTOK_COLON</name></decl>,
    <decl><name>JTOK_COMMA</name></decl>,
    <decl><name>JTOK_KW_NULL</name></decl>,
    <decl><name>JTOK_KW_TRUE</name></decl>,
    <decl><name>JTOK_KW_FALSE</name></decl>,
    <decl><name>JTOK_NUMBER</name></decl>,
    <decl><name>JTOK_STRING</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>jtokentype</name></name></type> <name>getJsonToken</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tokenVal</name></expr></argument>,
                                    <argument><expr><name>unsigned</name> <name>int</name><operator>&amp;</operator> <name>consumed</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>raw</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>end</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uvTypeName</name><argument_list>(<argument><expr><name>UniValue</name><operator>::</operator><name>VType</name> <name>t</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>jsonTokenIsValue</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>jtokentype</name></name></type> <name>jtt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>jtt</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JTOK_KW_NULL</name></expr>:</case>
    <case>case <expr><name>JTOK_KW_TRUE</name></expr>:</case>
    <case>case <expr><name>JTOK_KW_FALSE</name></expr>:</case>
    <case>case <expr><name>JTOK_NUMBER</name></expr>:</case>
    <case>case <expr><name>JTOK_STRING</name></expr>:</case>
        <return>return <expr><name>true</name></expr>;</return>

    <default>default:</default>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></switch>

    <comment type="line">// not reached</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>json_isspace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0x20</literal></expr>:</case>
    <case>case <expr><literal type="number">0x09</literal></expr>:</case>
    <case>case <expr><literal type="number">0x0a</literal></expr>:</case>
    <case>case <expr><literal type="number">0x0d</literal></expr>:</case>
        <return>return <expr><name>true</name></expr>;</return>

    <default>default:</default>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></switch>

    <comment type="line">// not reached</comment>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>UniValue</name></type> <name>NullUniValue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>find_value</name><argument_list>( <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>obj</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// __UNIVALUE_H__</comment>
</unit>
