<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/addrman_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;addrman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>

<class>class <name>CAddrManTest</name> <super_list>: <super><specifier>public</specifier> <name>CAddrMan</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>CAddrManTest</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>makeDeterministic</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>makeDeterministic</name></expr>)</condition> <block>{<block_content>
            <comment type="line">//  Set addrman addr placement to be deterministic.</comment>
            <expr_stmt><expr><call><name>MakeDeterministic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <comment type="line" format="doxygen">//! Ensure that bucket placement is always the same for testing purposes.</comment>
    <function><type><name>void</name></type> <name>MakeDeterministic</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>nKey</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>insecure_rand</name> <operator>=</operator> <call><name>FastRandomContext</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>Find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pnId</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>CAddrMan</name><operator>::</operator><name>Find</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>pnId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAddress</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>addrSource</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pnId</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>CAddrMan</name><operator>::</operator><name>Create</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrSource</name></expr></argument>, <argument><expr><name>pnId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CAddrMan</name><operator>::</operator><name>Delete</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// Simulates connection failure so that we can test eviction of offline nodes</comment>
    <function><type><name>void</name></type> <name>SimConnFail</name><parameter_list>(<parameter><decl><type><name>CService</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
         <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <decl_stmt><decl><type><name>int64_t</name></type> <name>nLastSuccess</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>Good_</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>nLastSuccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Set last good connection in the deep past.</comment>

         <decl_stmt><decl><type><name>bool</name></type> <name>count_failure</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>int64_t</name></type> <name>nLastTry</name> <init>= <expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">61</literal></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>Attempt</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>count_failure</name></expr></argument>, <argument><expr><name>nLastTry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></function>
</public>}</block>;</class>

<function><type><specifier>static</specifier> <name>CNetAddr</name></type> <name>ResolveIP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>addr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>LookupHost</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"failed to resolve: %s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CNetAddr</name></type> <name>ResolveIP</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><call><name><name>ip</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CService</name></type> <name>ResolveService</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CService</name></type> <name>serv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>Lookup</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"failed to resolve: %s:%i"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>serv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CService</name></type> <name>ResolveService</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>ResolveService</name><argument_list>(<argument><expr><call><name><name>ip</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>addrman_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_simple</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Test: Does Addrman respond correctly when empty.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_null</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_null</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Does Addrman::Add work as expected.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr1</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_ret1</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_ret1</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.1.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Does IP address deduplication work correctly.</comment>
    <comment type="line">//  Expected dup IP should not be added.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr1_dup</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1_dup</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">// Test: New table has one addr and we add a diff addr we should</comment>
    <comment type="line">//  have at least one addr.</comment>
    <comment type="line">// Note that addrman's size cannot be tested reliably after insertion, as</comment>
    <comment type="line">// hash collisions may occur. But we can always be sure of at least one</comment>
    <comment type="line">// success.</comment>

    <decl_stmt><decl><type><name>CService</name></type> <name>addr2</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.2"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: AddrMan::Clear() should empty the new table.</comment>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_null2</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_null2</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: AddrMan::Add multiple addresses works as expected</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAddress</name></expr></argument>&gt;</argument_list></name></type> <name>vAddr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vAddr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.3"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vAddr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.4"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>vAddr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_ports</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test 7; Addr with same IP but diff port does not replace existing addr.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr1</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CService</name></type> <name>addr1_port</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8334</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1_port</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_ret2</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_ret2</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.1.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Add same IP but diff port to tried table, it doesn't get added.</comment>
    <comment type="line">//  Perhaps this is not ideal behavior but it is the current behavior.</comment>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1_port</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>newOnly</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_ret3</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>(<argument><expr><name>newOnly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_ret3</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.1.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_select</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Test: Select from new with 1 addr in new.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr1</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>newOnly</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_ret1</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>(<argument><expr><name>newOnly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_ret1</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.1.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: move addr to tried, select from new expected nothing returned.</comment>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_ret2</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>(<argument><expr><name>newOnly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_ret2</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_ret3</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addr_ret3</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.1.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">// Add three addresses to new table.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr2</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.3.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr3</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.3.2.2"</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr4</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.3.3.3"</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.3.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr3</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.3.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr4</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.4.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add three addresses to tried table.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr5</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.4.4.4"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr6</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.4.5.5"</literal></expr></argument>, <argument><expr><literal type="number">7777</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr7</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.4.6.6"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr5</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.3.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr5</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr6</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.3.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr6</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr7</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.3"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr7</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: 6 addrs + 1 addr from last test = 7.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">7U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Select pulls from new and tried regardless of port number.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name></type> <name>ports</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ports</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Select</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ports</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_new_collisions</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test: No collision in new table yet.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//Test: new table collision!</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr1</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.18"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">17U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CService</name></type> <name>addr2</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.19"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">18U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_tried_collisions</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test: No collision in tried table yet.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//Test: tried table collision!</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr1</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.80"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">79U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CService</name></type> <name>addr2</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.81"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">80U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_find</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr1</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr2</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr3</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"251.255.2.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source1</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source2</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>source2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr3</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: ensure Find returns an IP matching what we searched on.</comment>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>info1</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Find</name></name><argument_list>(<argument><expr><name>addr1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><name>info1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.2.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test 18; Find does not discriminate by port number.</comment>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>info2</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Find</name></name><argument_list>(<argument><expr><name>addr2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><name>info2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info2</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>info1</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Find returns another IP matching what we searched on.</comment>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>info3</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Find</name></name><argument_list>(<argument><expr><name>addr3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><name>info3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info3</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"251.255.2.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_create</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr1</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source1</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>pinfo</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Test: The result should be the same as the input addr.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pinfo</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.2.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>info2</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Find</name></name><argument_list>(<argument><expr><name>addr1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info2</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"250.1.2.1:8333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_delete</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr1</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source1</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nId</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Create</name></name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Delete should actually delete the addr.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Delete</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>info2</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>Find</name></name><argument_list>(<argument><expr><name>addr1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>info2</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_getaddr</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <comment type="line">// Test: Sanity check, GetAddr should never return anything if addrman</comment>
    <comment type="line">//  is empty.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAddress</name></expr></argument>&gt;</argument_list></name></type> <name>vAddr1</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>GetAddr</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>vAddr1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr1</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.250.2.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>addr1</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Set time so isTerrible = false</comment>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr2</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.251.2.2"</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>addr2</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr3</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"251.252.2.3"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>addr3</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr4</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"252.253.3.4"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>addr4</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr5</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"252.254.4.5"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>addr5</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source1</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source2</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.2.3.3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Test: Ensure GetAddr works with new addresses.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>source2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr3</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr4</name></expr></argument>, <argument><expr><name>source2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr5</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// GetAddr returns 23% of addresses, 23% of 5 is 1 rounded down.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>GetAddr</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Ensure GetAddr works with new and tried addresses.</comment>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>GetAddr</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Ensure GetAddr still returns 23% when addrman has many addrs.</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">256</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>octet1</name> <init>= <expr><name>i</name> <operator>%</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>octet2</name> <init>= <expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>%</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strAddr</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>octet1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>octet2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".1.23"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAddress</name></type> <name>addr</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><name>strAddr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Ensure that for all addrs in addrman, isTerrible == false.</comment>
        <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><name>strAddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAddress</name></expr></argument>&gt;</argument_list></name></type> <name>vAddr</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>GetAddr</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>percent23</name> <init>= <expr><operator>(</operator><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">23</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>vAddr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>percent23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>vAddr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">461U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// (Addrman.size() &lt; number of addresses added) due to address collisions.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2006U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>caddrinfo_get_tried_bucket</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr1</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr2</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source1</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>info1</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>nKey1</name> <init>= <expr><operator>(</operator><name>uint256</name><operator>)</operator><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>nKey2</name> <init>= <expr><operator>(</operator><name>uint256</name><operator>)</operator><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Make sure key actually randomizes bucket placement. A fail on</comment>
    <comment type="line">//  this test could be a security issue.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>info1</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Two addresses with same IP but different ports can map to</comment>
    <comment type="line">//  different buckets because they have different keys.</comment>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>info2</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetKey</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>info2</name><operator>.</operator><name>GetKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>info2</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>buckets</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>infoi</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(
            <argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>infoi</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Test: IP addresses in the same group (\16 prefix for IPv4) should</comment>
    <comment type="line">//  never get more than 8 buckets</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>buckets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>infoj</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(
            <argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".1.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".1.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>infoj</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Test: IP addresses in the different groups should map to more than</comment>
    <comment type="line">//  8 buckets.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>buckets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">160U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>caddrinfo_get_new_bucket</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr1</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddress</name></type> <name>addr2</name> <init>= <expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source1</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.2.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>info1</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>nKey1</name> <init>= <expr><operator>(</operator><name>uint256</name><operator>)</operator><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>nKey2</name> <init>= <expr><operator>(</operator><name>uint256</name><operator>)</operator><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Test: Make sure the buckets are what we expect</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">786</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">786</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Make sure key actually randomizes bucket placement. A fail on</comment>
    <comment type="line">//  this test could be a security issue.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>info1</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test: Ports should not affect bucket placement in the addr</comment>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>info2</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetKey</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>info2</name><operator>.</operator><name>GetKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>info1</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>info2</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>buckets</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>infoi</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(
            <argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>infoi</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Test: IP addresses in the same group (\16 prefix for IPv4) should</comment>
    <comment type="line">//  always map to the same bucket.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>buckets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>infoj</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(
                                        <argument><expr><call><name>ResolveService</name><argument_list>(
                                            <argument><expr><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><literal type="number">250</literal> <operator>+</operator> <operator>(</operator><name>j</name> <operator>/</operator> <literal type="number">255</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>j</name> <operator>%</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".1.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"251.4.1.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>infoj</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Test: IP addresses in the same source groups should map to no more</comment>
    <comment type="line">//  than 64 buckets.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>buckets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>infoj</name> <init>= <expr><call><name>CAddrInfo</name><argument_list>(
            <argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"250."</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".1.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>infoj</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buckets</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Test: IP addresses in the different source groups should map to more</comment>
    <comment type="line">//  than 64 buckets.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>buckets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_selecttriedcollision</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Empty addrman should return blank addrman info.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add twenty two addresses.</comment>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal><operator>+</operator><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// No collisions yet.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Ensure Good handles duplicates well.</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal><operator>+</operator><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_noevict</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <comment type="line">// Add twenty two addresses.</comment>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal><operator>+</operator><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// No collision yet.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Collision between 23 and 19.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr23</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.23"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr23</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"250.1.1.19:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 23 should be discarded and 19 not evicted.</comment>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>ResolveCollisions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Lets create two collisions.</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal><operator>+</operator><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Cause a collision.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr33</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.33"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr33</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr33</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"250.1.1.27:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Cause a second collision.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr23</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>ResolveCollisions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>addrman_evictionworks</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrManTest</name></type> <name>addrman</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Empty addrman should return blank addrman info.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add twenty two addresses.</comment>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>source</name> <init>= <expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"252.2.2.2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1."</literal><operator>+</operator><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// No collision yet.</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Collision between 23 and 19.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.23"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>info</name> <init>= <expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>info</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"250.1.1.19:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ensure test of address fails, so that it is evicted.</comment>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>SimConnFail</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Should swap 23 for 19.</comment>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>ResolveCollisions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If 23 was swapped for 19, then this should cause no collisions.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If we insert 19 is should collide with 23.</comment>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr19</name> <init>= <expr><call><name>ResolveService</name><argument_list>(<argument><expr><literal type="string">"250.1.1.19"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>addrman</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><call><name>CAddress</name><argument_list>(<argument><expr><name>addr19</name></expr></argument>, <argument><expr><name>NODE_NONE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>Good</name></name><argument_list>(<argument><expr><name>addr19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"250.1.1.23:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>addrman</name><operator>.</operator><name>ResolveCollisions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addrman</name><operator>.</operator><name>SelectTriedCollision</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
