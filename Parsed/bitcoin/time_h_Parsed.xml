<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/time.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_TIME_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_TIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Helper to count the seconds of a duration.
 *
 * All durations should be using std::chrono and calling this should generally be avoided in code. Though, it is still
 * preferred to an inline t.count() to protect against a reliance on the exact type of t.
 */</comment>
<decl_stmt><decl><type><specifier>inline</specifier> <name>int64_t</name></type> <name>count_seconds</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name> <name>t</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><call><name><name>t</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/**
 * DEPRECATED
 * Use either GetSystemTimeInSeconds (not mockable) or GetTime&lt;T&gt; (mockable)
 */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetTime</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Returns the system time (not mockable) */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetTimeMillis</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Returns the system time (not mockable) */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetTimeMicros</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Returns the system time (not mockable) */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetSystemTimeInSeconds</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// Like GetTime(), but not mockable</comment>

<comment type="block" format="doxygen">/** For testing. Set e.g. with the setmocktime rpc, or -mocktime argument */</comment>
<function_decl><type><name>void</name></type> <name>SetMockTime</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nMockTimeIn</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** For testing */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetMockTime</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>MilliSleep</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Return system time (or mocked time, if set) */</comment>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name></type> <name>GetTime</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * ISO 8601 formatting is preferred. Use the FormatISO8601{DateTime,Date}
 * helper functions if possible.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>FormatISO8601DateTime</name><argument_list>(<argument>int64_t nTime</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>FormatISO8601Date</name><argument_list>(<argument>int64_t nTime</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ParseISO8601DateTime</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_TIME_H</comment>
</unit>
