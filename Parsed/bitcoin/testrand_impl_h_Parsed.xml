<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/testrand_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013-2015 Pieter Wuille                              *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_TESTRAND_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_TESTRAND_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testrand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>secp256k1_rfc6979_hmac_sha256</name></type> <name>secp256k1_test_rng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>secp256k1_test_rng_precomputed</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_test_rng_precomputed_used</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>secp256k1_test_rng_integer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_test_rng_integer_bits_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand_seed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seed16</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_rfc6979_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>secp256k1_test_rng</name></expr></argument>, <argument><expr><name>seed16</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>uint32_t</name></type> <name>secp256k1_rand32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>secp256k1_test_rng_precomputed_used</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>secp256k1_rfc6979_hmac_sha256_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>secp256k1_test_rng</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>secp256k1_test_rng_precomputed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secp256k1_test_rng_precomputed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>secp256k1_test_rng_precomputed_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>secp256k1_test_rng_precomputed</name><index>[<expr><name>secp256k1_test_rng_precomputed_used</name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>secp256k1_rand_bits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>secp256k1_test_rng_integer_bits_left</name> <operator>&lt;</operator> <name>bits</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>secp256k1_test_rng_integer</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>secp256k1_rand32</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <name>secp256k1_test_rng_integer_bits_left</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>secp256k1_test_rng_integer_bits_left</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>secp256k1_test_rng_integer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>secp256k1_test_rng_integer</name> <operator>&gt;&gt;=</operator> <name>bits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>secp256k1_test_rng_integer_bits_left</name> <operator>-=</operator> <name>bits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>bits</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>secp256k1_rand_int</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* We want a uniform integer between 0 and range-1, inclusive.
     * B is the smallest number such that range &lt;= 2**B.
     * two mechanisms implemented here:
     * - generate B bits numbers until one below range is found, and return it
     * - find the largest multiple M of range that is &lt;= 2**(B+A), generate B+A
     *   bits numbers until one below M is found, and return it modulo range
     * The second mechanism consumes A more bits of entropy in every iteration,
     * but may need fewer iterations due to M being closer to 2**(B+A) then
     * range is to 2**B. The array below (indexed by B) contains a 0 when the
     * first mechanism is to be used, and the number A otherwise.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>addbits</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>trange</name></decl>, <decl><type ref="prev"/><name>mult</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>range</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>trange</name> <operator>=</operator> <name>range</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>trange</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>trange</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name><name>addbits</name><index>[<expr><name>bits</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <name>bits</name> <operator>+</operator> <name><name>addbits</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mult</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>bits</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>range</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>trange</name> <operator>=</operator> <name>range</name> <operator>*</operator> <name>mult</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>trange</name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><call><name>secp256k1_rand_bits</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>trange</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><operator>(</operator><name>mult</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><operator>(</operator><name>x</name> <operator>%</operator> <name>range</name><operator>)</operator></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand256</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b32</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_rfc6979_hmac_sha256_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>secp256k1_test_rng</name></expr></argument>, <argument><expr><name>b32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand_bytes_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>now</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>secp256k1_rand_bits</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>secp256k1_rand_bits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <literal type="number">31</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>secp256k1_rand_bits</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>now</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>bits</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <name>val</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>now</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand256_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b32</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_rand_bytes_test</name><argument_list>(<argument><expr><name>b32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_TESTRAND_IMPL_H */</comment>
</unit>
