<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/version_edit.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_VERSION_EDIT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_VERSION_EDIT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/dbformat.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>VersionSet</name></decl>;</decl_stmt>

<struct>struct <name>FileMetaData</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>allowed_seeks</name></decl>;</decl_stmt>          <comment type="line">// Seeks allowed until compaction</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>number</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>file_size</name></decl>;</decl_stmt>         <comment type="line">// File size in bytes</comment>
  <decl_stmt><decl><type><name>InternalKey</name></type> <name>smallest</name></decl>;</decl_stmt>       <comment type="line">// Smallest internal key served by table</comment>
  <decl_stmt><decl><type><name>InternalKey</name></type> <name>largest</name></decl>;</decl_stmt>        <comment type="line">// Largest internal key served by table</comment>

  <expr_stmt><expr><call><name>FileMetaData</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>refs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>allowed_seeks</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>file_size</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>VersionEdit</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>VersionEdit</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  <expr_stmt><expr><operator>~</operator><macro><name>VersionEdit</name><argument_list>()</argument_list></macro> <block>{ }</block>

  <name>void</name> <call><name>Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function><type><name>void</name></type> <name>SetComparatorName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>has_comparator_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>comparator_</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>SetLogNumber</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>has_log_number_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>log_number_</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>SetPrevLogNumber</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>has_prev_log_number_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>prev_log_number_</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>SetNextFile</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>has_next_file_number_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next_file_number_</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>SetLastSequence</name><parameter_list>(<parameter><decl><type><name>SequenceNumber</name></type> <name>seq</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>has_last_sequence_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_sequence_</name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>SetCompactPointer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>InternalKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>compact_pointers_</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// Add the specified file at the specified number.</comment>
  <comment type="line">// REQUIRES: This version has not been saved (see VersionSet::SaveTo)</comment>
  <comment type="line">// REQUIRES: "smallest" and "largest" are smallest and largest keys in file</comment>
  <function><type><name>void</name></type> <name>AddFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>file</name></decl></parameter>,
               <parameter><decl><type><name>uint64_t</name></type> <name>file_size</name></decl></parameter>,
               <parameter><decl><type><specifier>const</specifier> <name>InternalKey</name><modifier>&amp;</modifier></type> <name>smallest</name></decl></parameter>,
               <parameter><decl><type><specifier>const</specifier> <name>InternalKey</name><modifier>&amp;</modifier></type> <name>largest</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FileMetaData</name></type> <name>f</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>file_size</name></name> <operator>=</operator> <name>file_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>smallest</name></name> <operator>=</operator> <name>smallest</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>largest</name></name> <operator>=</operator> <name>largest</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>new_files_</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// Delete the specified "file" from the specified "level".</comment>
  <function><type><name>void</name></type> <name>DeleteFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>deleted_files_</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name>void</name></type> <name>EncodeTo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <function_decl><type><name>Status</name></type> <name>DecodeFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>DebugString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>VersionSet</name></decl>;</decl_stmt>

  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>DeletedFileSet</name></expr>;</expr_stmt></typedef>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>comparator_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>log_number_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_log_number_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>next_file_number_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SequenceNumber</name></type> <name>last_sequence_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_comparator_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_log_number_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_prev_log_number_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_next_file_number_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_last_sequence_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>InternalKey</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>compact_pointers_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>DeletedFileSet</name></type> <name>deleted_files_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>FileMetaData</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>new_files_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_VERSION_EDIT_H_</comment>
</unit>
