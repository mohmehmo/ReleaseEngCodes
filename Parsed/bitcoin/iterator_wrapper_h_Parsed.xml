<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/table/iterator_wrapper.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<comment type="line">// A internal wrapper class with an interface similar to Iterator that</comment>
<comment type="line">// caches the valid() and key() results for an underlying iterator.</comment>
<comment type="line">// This can help avoid virtual function calls and also gives better</comment>
<comment type="line">// cache locality.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>IteratorWrapper</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>IteratorWrapper</name><argument_list>()</argument_list></call><operator>:</operator> <call><name>iter_</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>valid_</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{ }</block>
  <name>explicit</name> <call><name>IteratorWrapper</name><argument_list>(<argument><expr><name>Iterator</name><operator>*</operator> <name>iter</name></expr></argument>)</argument_list></call><operator>:</operator> <macro><name>iter_</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <block>{
    <expr><call><name>Set</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;
  }</block>
  <operator>~</operator><macro><name>IteratorWrapper</name><argument_list>()</argument_list></macro> <block>{ <expr><name>delete</name> <name>iter_</name></expr>; }</block>
  <name>Iterator</name><operator>*</operator> <macro><name>iter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>iter_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Takes ownership of "iter" and will delete it when destroyed, or</comment>
  <comment type="line">// when Set() is invoked again.</comment>
  <function><type><name>void</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><name>Iterator</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>delete</name></type> <name>iter_</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iter_</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>iter_</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>valid_</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>Update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>


  <comment type="line">// Iterator interface methods</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>Valid</name><argument_list>()</argument_list></macro> <specifier>const</specifier>        <block>{ <return>return <expr><name>valid_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>Slice</name> <macro><name>key</name><argument_list>()</argument_list></macro> <specifier>const</specifier>         <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><call><name>Valid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><name>key_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>Slice</name> <macro><name>value</name><argument_list>()</argument_list></macro> <specifier>const</specifier>       <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><call><name>Valid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><call><name><name>iter_</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
  <comment type="line">// Methods below require iter() != NULL</comment>
  <expr_stmt><expr><name>Status</name> <macro><name>status</name><argument_list>()</argument_list></macro> <specifier>const</specifier>     <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><name>iter_</name></expr></argument>)</argument_list></call></expr>; <return>return <expr><call><name><name>iter_</name><operator>-&gt;</operator><name>status</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
  <function><type><name>void</name></type> <name>Next</name><parameter_list>()</parameter_list>               <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>iter_</name><operator>-&gt;</operator><name>Next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>        <expr_stmt><expr><call><name>Update</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>Prev</name><parameter_list>()</parameter_list>               <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>iter_</name><operator>-&gt;</operator><name>Prev</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>        <expr_stmt><expr><call><name>Update</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>Seek</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>iter_</name><operator>-&gt;</operator><name>Seek</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <expr_stmt><expr><call><name>Update</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>SeekToFirst</name><parameter_list>()</parameter_list>        <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>iter_</name><operator>-&gt;</operator><name>SeekToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Update</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>SeekToLast</name><parameter_list>()</parameter_list>         <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>iter_</name><operator>-&gt;</operator><name>SeekToLast</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>Update</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

 <label><name>private</name>:</label>
  <function><type><name>void</name></type> <name>Update</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>valid_</name> <operator>=</operator> <call><name><name>iter_</name><operator>-&gt;</operator><name>Valid</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>key_</name> <operator>=</operator> <call><name><name>iter_</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name>Iterator</name><modifier>*</modifier></type> <name>iter_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>valid_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Slice</name></type> <name>key_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_</comment>
</unit>
