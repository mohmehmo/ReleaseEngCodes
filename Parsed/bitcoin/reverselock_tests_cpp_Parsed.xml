<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/reverselock_tests.cpp"><comment type="line">// Copyright (c) 2015-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;reverselock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>reverselock_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>reverselock_basics</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>mutex</name></name></type> <name>mutex</name></decl>;</decl_stmt>
    <function_decl><type><name><name>boost</name><operator>::</operator><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>mutex</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <function_decl><type><name><name>reverse_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>rlock</name><parameter_list>(<parameter><decl><type><name>lock</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>reverselock_errors</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>mutex</name></name></type> <name>mutex</name></decl>;</decl_stmt>
    <function_decl><type><name><name>boost</name><operator>::</operator><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>mutex</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Make sure trying to reverse lock an unlocked lock fails</comment>
    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>failed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <function_decl><type><name><name>reverse_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>rlock</name><parameter_list>(<parameter><decl><type><name>lock</name></type></decl></parameter>)</parameter_list>;</function_decl>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Locking the original lock after it has been taken by a reverse lock</comment>
    <comment type="line">// makes no sense. Ensure that the original lock no longer owns the lock</comment>
    <comment type="line">// after giving it to a reverse one.</comment>

    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <function_decl><type><name><name>reverse_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>rlock</name><parameter_list>(<parameter><decl><type><name>lock</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>lock</name><operator>.</operator><name>owns_lock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
