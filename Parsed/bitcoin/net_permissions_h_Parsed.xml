<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/net_permissions.h"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netaddress.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_NET_PERMISSIONS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_NET_PERMISSIONS_H</name></cpp:macro></cpp:define>
<enum>enum <name>NetPermissionFlags</name>
<block>{
    <decl><name>PF_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <comment type="line">// Can query bloomfilter even if -peerbloomfilters is false</comment>
    <decl><name>PF_BLOOMFILTER</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
    <comment type="line">// Relay and accept transactions from this peer, even if -blocksonly is true</comment>
    <decl><name>PF_RELAY</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
    <comment type="line">// Always relay transactions from this peer, even if already in mempool or rejected from policy</comment>
    <comment type="line">// Keep parameter interaction: forcerelay implies relay</comment>
    <decl><name>PF_FORCERELAY</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <name>PF_RELAY</name></expr></init></decl>,
    <comment type="line">// Can't be banned for misbehavior</comment>
    <decl><name>PF_NOBAN</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
    <comment type="line">// Can query the mempool</comment>
    <decl><name>PF_MEMPOOL</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,

    <comment type="line">// True if the user did not specifically set fine grained permissions</comment>
    <decl><name>PF_ISIMPLICIT</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr></init></decl>,
    <decl><name>PF_ALL</name> <init>= <expr><name>PF_BLOOMFILTER</name> <operator>|</operator> <name>PF_FORCERELAY</name> <operator>|</operator> <name>PF_RELAY</name> <operator>|</operator> <name>PF_NOBAN</name> <operator>|</operator> <name>PF_MEMPOOL</name></expr></init></decl>,
}</block>;</enum>
<decl_stmt><decl><type><name>class</name></type> <name>NetPermissions</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <decl_stmt><decl><type><name>NetPermissionFlags</name></type> <name>m_flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>ToStrings</name><argument_list>(<argument>NetPermissionFlags flags</argument>)</argument_list></macro></expr>;</expr_stmt>
    <function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>HasFlag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NetPermissionFlags</name><modifier>&amp;</modifier></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>NetPermissionFlags</name></type> <name>f</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>f</name><operator>)</operator> <operator>==</operator> <name>f</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>AddFlag</name><parameter_list>(<parameter><decl><type><name>NetPermissionFlags</name><modifier>&amp;</modifier></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>NetPermissionFlags</name></type> <name>f</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NetPermissionFlags</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ClearFlag</name><parameter_list>(<parameter><decl><type><name>NetPermissionFlags</name><modifier>&amp;</modifier></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>NetPermissionFlags</name></type> <name>f</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NetPermissionFlags</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NetWhitebindPermissions</name> <range>: <expr><name>public</name> <name>NetPermissions</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <specifier>static</specifier> <name>bool</name> <macro><name>TryParse</name><argument_list>(<argument>const std::string str</argument>, <argument>NetWhitebindPermissions&amp; output</argument>, <argument>std::string&amp; error</argument>)</argument_list></macro></expr>;
    <expr><name>CService</name> <name>m_service</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NetWhitelistPermissions</name> <range>: <expr><name>public</name> <name>NetPermissions</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <specifier>static</specifier> <name>bool</name> <macro><name>TryParse</name><argument_list>(<argument>const std::string str</argument>, <argument>NetWhitelistPermissions&amp; output</argument>, <argument>std::string&amp; error</argument>)</argument_list></macro></expr>;
    <expr><name>CSubNet</name> <name>m_subnet</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_NET_PERMISSIONS_H</comment></unit>
