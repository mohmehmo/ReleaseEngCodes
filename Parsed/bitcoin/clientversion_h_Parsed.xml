<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/clientversion.h"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CLIENTVERSION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CLIENTVERSION_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//HAVE_CONFIG_H</comment>

<comment type="line">// Check that required client information is defined</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLIENT_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLIENT_VERSION_MINOR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLIENT_VERSION_REVISION</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLIENT_VERSION_BUILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLIENT_VERSION_IS_RELEASE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COPYRIGHT_YEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Client version information missing: version is not defined by bitcoin-config.h or in any other way</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * Converts the parameter X to a string after macro replacement on X has been performed.
 * Don't merge these into one macro!
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIZE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DO_STRINGIZE(X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_STRINGIZE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#X</cpp:value></cpp:define>

<comment type="line" format="doxygen">//! Copyright string used in Windows .rc files</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYRIGHT_STR</name></cpp:macro> <cpp:value>"2009-" STRINGIZE(COPYRIGHT_YEAR) " " COPYRIGHT_HOLDERS_FINAL</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * bitcoind-res.rc includes this file, but it cannot cope with real c++ code.
 * WINDRES_PREPROC is defined to indicate that its pre-processor is running.
 * Anything other than a define should be guarded below.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINDRES_PREPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CLIENT_VERSION</name> <init>=
                           <expr><literal type="number">1000000</literal> <operator>*</operator> <name>CLIENT_VERSION_MAJOR</name>
                         <operator>+</operator>   <literal type="number">10000</literal> <operator>*</operator> <name>CLIENT_VERSION_MINOR</name>
                         <operator>+</operator>     <literal type="number">100</literal> <operator>*</operator> <name>CLIENT_VERSION_REVISION</name>
                         <operator>+</operator>       <literal type="number">1</literal> <operator>*</operator> <name>CLIENT_VERSION_BUILD</name></expr></init></decl>;</decl_stmt>

<extern>extern const std::string CLIENT_NAME;</extern>
<extern>extern const std::string CLIENT_BUILD;</extern>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>FormatFullVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>FormatSubVersion</name><argument_list>(<argument>const std::string&amp; name</argument>, <argument>int nClientVersion</argument>, <argument>const std::vector&lt;std::string&gt;&amp; comments</argument>)</argument_list></macro></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// WINDRES_PREPROC</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CLIENTVERSION_H</comment>
</unit>
