<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/scheduler_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scheduler.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/thread.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_AUTO_TEST_SUITE</name><argument_list>(<argument>scheduler_tests</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>microTask</name><parameter_list>(<parameter><decl><type><name>CScheduler</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>boost</name><operator>::</operator><name>mutex</name></name><modifier>&amp;</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>counter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>rescheduleTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>unique_lock</name><argument_list type="generic">&lt;<argument><expr><name><name>boost</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>counter</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>noTime</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rescheduleTime</name> <operator>!=</operator> <name>noTime</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>CScheduler</name><operator>::</operator><name>Function</name></name></type> <name>f</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>microTask</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name>delta</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>noTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rescheduleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MicroSleep</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_BOOST_SLEEP_FOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>this_thread</name><operator>::</operator><name>sleep_for</name></name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WORKING_BOOST_SLEEP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>this_thread</name><operator>::</operator><name>sleep</name></name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>posix_time</name><operator>::</operator><name>microseconds</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">//should never get here</comment>
    <cpp:error>#<cpp:directive>error</cpp:directive> missing boost sleep implementation</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>manythreads</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Stress test: hundreds of microsecond-scheduled tasks,</comment>
    <comment type="line">// serviced by 10 threads.</comment>
    <comment type="line">//</comment>
    <comment type="line">// So... ten shared counters, which if all the tasks execute</comment>
    <comment type="line">// properly will sum to the number of tasks done.</comment>
    <comment type="line">// Each task adds or subtracts a random amount from one of the</comment>
    <comment type="line">// counters, and then schedules another task 0-1000</comment>
    <comment type="line">// microseconds in the future to subtract or add from</comment>
    <comment type="line">// the counter -random_amount+1, so in the end the shared</comment>
    <comment type="line">// counters should sum to the number of initial tasks performed.</comment>
    <decl_stmt><decl><type><name>CScheduler</name></type> <name>microTasks</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>mutex</name></name></type> <name><name>counterMutex</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>counter</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>rng</name><argument_list>{<comment type="block">/* fDeterministic */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>zeroToNine</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>FastRandomContext</name><modifier>&amp;</modifier></type> <name>rc</name></decl></parameter>)</parameter_list> -&gt; <type><name>int</name></type> <block>{<block_content> <return>return <expr><call><name><name>rc</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></init></decl>;</decl_stmt> <comment type="line">// [0, 9]</comment>
    <decl_stmt><decl><type><name>auto</name></type> <name>randomMsec</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>FastRandomContext</name><modifier>&amp;</modifier></type> <name>rc</name></decl></parameter>)</parameter_list> -&gt; <type><name>int</name></type> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">11</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>rc</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">1012</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></init></decl>;</decl_stmt> <comment type="line">// [-11, 1000]</comment>
    <decl_stmt><decl><type><name>auto</name></type> <name>randomDelta</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>FastRandomContext</name><modifier>&amp;</modifier></type> <name>rc</name></decl></parameter>)</parameter_list> -&gt; <type><name>int</name></type> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1000</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>rc</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">2001</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></init></decl>;</decl_stmt> <comment type="line">// [-1000, 1000]</comment>

    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>start</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>now</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nTasks</name> <init>= <expr><call><name><name>microTasks</name><operator>.</operator><name>getQueueInfo</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>nTasks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>t</name> <init>= <expr><name>now</name> <operator>+</operator> <call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></name><argument_list>(<argument><expr><call><name>randomMsec</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>tReschedule</name> <init>= <expr><name>now</name> <operator>+</operator> <call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></name><argument_list>(<argument><expr><literal type="number">500</literal> <operator>+</operator> <call><name>randomMsec</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>whichCounter</name> <init>= <expr><call><name>zeroToNine</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CScheduler</name><operator>::</operator><name>Function</name></name></type> <name>f</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>microTask</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name>microTasks</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name><name>counterMutex</name><index>[<expr><name>whichCounter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name><name>counter</name><index>[<expr><name>whichCounter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>randomDelta</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tReschedule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>microTasks</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>nTasks</name> <operator>=</operator> <call><name><name>microTasks</name><operator>.</operator><name>getQueueInfo</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>nTasks</name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>first</name> <operator>&lt;</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>last</name> <operator>&gt;</operator> <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// As soon as these are created they will start running and servicing the queue</comment>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>thread_group</name></name></type> <name>microThreads</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>microThreads</name><operator>.</operator><name>create_thread</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CScheduler</name><operator>::</operator><name>serviceQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>microTasks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>MicroSleep</name><argument_list>(<argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// More threads and more tasks:</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>microThreads</name><operator>.</operator><name>create_thread</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CScheduler</name><operator>::</operator><name>serviceQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>microTasks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>t</name> <init>= <expr><name>now</name> <operator>+</operator> <call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></name><argument_list>(<argument><expr><call><name>randomMsec</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>time_point</name></name></type> <name>tReschedule</name> <init>= <expr><name>now</name> <operator>+</operator> <call><name><name>boost</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></name><argument_list>(<argument><expr><literal type="number">500</literal> <operator>+</operator> <call><name>randomMsec</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>whichCounter</name> <init>= <expr><call><name>zeroToNine</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CScheduler</name><operator>::</operator><name>Function</name></name></type> <name>f</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>microTask</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name>microTasks</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name><name>counterMutex</name><index>[<expr><name>whichCounter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name><name>counter</name><index>[<expr><name>whichCounter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>randomDelta</name><argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tReschedule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>microTasks</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Drain the task queue then exit threads</comment>
    <expr_stmt><expr><call><name><name>microTasks</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>microThreads</name><operator>.</operator><name>join_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// ... wait until all the threads are done</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>counterSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>counter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>counterSum</name> <operator>+=</operator> <name><name>counter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>counterSum</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>singlethreadedscheduler_ordered</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScheduler</name></type> <name>scheduler</name></decl>;</decl_stmt>

    <comment type="line">// each queue should be well ordered with respect to itself but not other queues</comment>
    <decl_stmt><decl><type><name>SingleThreadedSchedulerClient</name></type> <name>queue1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scheduler</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SingleThreadedSchedulerClient</name></type> <name>queue2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scheduler</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// create more threads than queues</comment>
    <comment type="line">// if the queues only permit execution of one task at once then</comment>
    <comment type="line">// the extra threads should effectively be doing nothing</comment>
    <comment type="line">// if they don't we'll get out of order behaviour</comment>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>thread_group</name></name></type> <name>threads</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>create_thread</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CScheduler</name><operator>::</operator><name>serviceQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scheduler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// these are not atomic, if SinglethreadedSchedulerClient prevents</comment>
    <comment type="line">// parallel execution at the queue level no synchronization should be required here</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>counter1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>counter2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// just simply count up on each queue - if execution is properly ordered then</comment>
    <comment type="line">// the callbacks should run in exactly the order in which they were enqueued</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>queue1</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>i</name></argument>, <argument><modifier>&amp;</modifier><name>counter1</name></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name> <name>expectation</name> = <name>i</name> == <name>counter1</name>++</type></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>expectation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>queue2</name><operator>.</operator><name>AddToProcessQueue</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>i</name></argument>, <argument><modifier>&amp;</modifier><name>counter2</name></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name> <name>expectation</name> = <name>i</name> == <name>counter2</name>++</type></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>expectation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// finish up</comment>
    <expr_stmt><expr><call><name><name>scheduler</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threads</name><operator>.</operator><name>join_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>counter1</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>counter2</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
