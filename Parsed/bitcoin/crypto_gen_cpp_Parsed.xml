<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/gen/crypto_gen.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/gen/crypto_gen.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/gen/Arbitrary.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/Gen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/gen/Predicate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/gen/Container.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Generates 1 to 20 keys for OP_CHECKMULTISIG */</comment>
<function><type><name><name>rc</name><operator>::</operator><name>Gen</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>MultisigKeys</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>rc</name><operator>::</operator><name>gen</name><operator>::</operator><name>suchThat</name></name><argument_list>(<argument><expr><call><name><name>rc</name><operator>::</operator><name>gen</name><operator>::</operator><name>arbitrary</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">15</literal></expr>;</return>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
</unit>
