<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/compat/assumptions.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<comment type="line">// Compile-time verification of assumptions we make.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_COMPAT_ASSUMPTIONS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_COMPAT_ASSUMPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>

<comment type="line">// Assumption: We assume that the macro NDEBUG is not defined.</comment>
<comment type="line">// Example(s): We use assert(...) extensively with the assumption of it never</comment>
<comment type="line">//             being a noop at runtime.</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"Bitcoin cannot be compiled without assertions."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Assumption: We assume a C++11 (ISO/IEC 14882:2011) compiler (minimum requirement).</comment>
<comment type="line">// Example(s): We assume the presence of C++11 features everywhere :-)</comment>
<comment type="line">// Note:       MSVC does not report the expected __cplusplus value due to legacy</comment>
<comment type="line">//             reasons.</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// ISO Standard C++11 [cpp.predefined]p1:</comment>
<comment type="line">// "The name __cplusplus is defined to the value 201103L when compiling a C++</comment>
<comment type="line">//  translation unit."</comment>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></argument>, <argument><expr><literal type="string">"C++11 standard assumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Assumption: We assume the floating-point types to fulfill the requirements of</comment>
<comment type="line">//             IEC 559 (IEEE 754) standard.</comment>
<comment type="line">// Example(s): Floating-point division by zero in ConnectBlock, CreateTransaction</comment>
<comment type="line">//             and EstimateMedianVal.</comment>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_iec559</name></expr></argument>, <argument><expr><literal type="string">"IEEE 754 float assumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>is_iec559</name></expr></argument>, <argument><expr><literal type="string">"IEEE 754 double assumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Assumption: We assume eight bits per byte (obviously, but remember: don't</comment>
<comment type="line">//             trust -- verify!).</comment>
<comment type="line">// Example(s): Everywhere :-)</comment>
<macro><name>static_assert</name><argument_list>(<argument>std::numeric_limits&lt;unsigned char&gt;::digits == <literal type="number">8</literal></argument>, <argument><literal type="string">"8-bit byte assumed"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="line">// Assumption: We assume floating-point widths.</comment>
<comment type="line">// Example(s): Type punning in serialization code (ser_{float,double}_to_uint{32,64}).</comment>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"32-bit float assumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"64-bit double assumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Assumption: We assume integer widths.</comment>
<comment type="line">// Example(s): GetSizeOfCompactSize and WriteCompactSize in the serialization</comment>
<comment type="line">//             code.</comment>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"16-bit short assumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"32-bit int assumed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Assumption: We assume size_t to be 32-bit or 64-bit.</comment>
<comment type="line">// Example(s): size_t assumed to be at least 32-bit in ecdsa_signature_parse_der_lax(...).</comment>
<comment type="line">//             size_t assumed to be 32-bit or 64-bit in MallocUsage(...).</comment>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"size_t assumed to be 32-bit or 64-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Sizes of size_t and void* assumed to be equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Some important things we are NOT assuming (non-exhaustive list):</comment>
<comment type="line">// * We are NOT assuming a specific value for std::endian::native.</comment>
<comment type="line">// * We are NOT assuming a specific value for std::locale("").name().</comment>
<comment type="line">// * We are NOT assuming a specific value for std::numeric_limits&lt;char&gt;::is_signed.</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_COMPAT_ASSUMPTIONS_H</comment>
</unit>
