<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/addresstablemodel.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_ADDRESSTABLEMODEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_ADDRESSTABLEMODEL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractTableModel&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStringList&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>OutputType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AddressTablePriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Wallet</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/**
   Qt model of the address book in the core. This allows views to access and modify the address book.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AddressTableModel</name> <range>: <expr><name>public</name> <name>QAbstractTableModel</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>AddressTableModel</name><argument_list>(<argument><expr><name>WalletModel</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>AddressTableModel</name><argument_list>()</argument_list></call></expr>;

    enum <expr><name>ColumnIndex</name> <block>{
        <expr><name>Label</name> <operator>=</operator> <literal type="number">0</literal></expr>,   <comment type="block" format="doxygen">/**&lt; User specified label */</comment>
        <expr><name>Address</name> <operator>=</operator> <literal type="number">1</literal></expr>  <comment type="block" format="doxygen">/**&lt; Bitcoin address */</comment>
    }</block></expr>;

    enum <expr><name>RoleIndex</name> <block>{
        <expr><name>TypeRole</name> <operator>=</operator> <name>Qt</name><operator>::</operator><name>UserRole</name></expr> <comment type="block" format="doxygen">/**&lt; Type of address (#Send or #Receive) */</comment>
    }</block></expr>;

    <comment type="block" format="doxygen">/** Return status of edit/insert operation */</comment>
    enum <expr><name>EditStatus</name> <block>{
        <expr><name>OK</name></expr>,                     <comment type="block" format="doxygen">/**&lt; Everything ok */</comment>
        <expr><name>NO_CHANGES</name></expr>,             <comment type="block" format="doxygen">/**&lt; No changes were made during edit operation */</comment>
        <expr><name>INVALID_ADDRESS</name></expr>,        <comment type="block" format="doxygen">/**&lt; Unparseable address */</comment>
        <expr><name>DUPLICATE_ADDRESS</name></expr>,      <comment type="block" format="doxygen">/**&lt; Address already in address book */</comment>
        <expr><name>WALLET_UNLOCK_FAILURE</name></expr>,  <comment type="block" format="doxygen">/**&lt; Wallet could not be unlocked to create new receiving address */</comment>
        <expr><name>KEY_GENERATION_FAILURE</name></expr>  <comment type="block" format="doxygen">/**&lt; Generating a new public key for a receiving address failed */</comment>
    }</block></expr>;

    <expr><specifier>static</specifier> <specifier>const</specifier> <name>QString</name> <name>Send</name></expr>;      <comment type="block" format="doxygen">/**&lt; Specifies send address */</comment>
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>QString</name> <name>Receive</name></expr>;   <comment type="block" format="doxygen">/**&lt; Specifies receive address */</comment>

    <comment type="block" format="doxygen">/** @name Methods overridden from QAbstractTableModel
        @{*/</comment>
    <expr><name>int</name> <macro><name>rowCount</name><argument_list>(<argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>int</name> <macro><name>columnCount</name><argument_list>(<argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>data</name><argument_list>(<argument>const QModelIndex &amp;index</argument>, <argument>int role</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>bool</name> <macro><name>setData</name><argument_list>(<argument>const QModelIndex &amp;index</argument>, <argument>const QVariant &amp;value</argument>, <argument>int role</argument>)</argument_list></macro></expr>;
    <expr><name>QVariant</name> <macro><name>headerData</name><argument_list>(<argument>int section</argument>, <argument>Qt::Orientation orientation</argument>, <argument>int role</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QModelIndex</name> <macro><name>index</name><argument_list>(<argument>int row</argument>, <argument>int column</argument>, <argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>bool</name> <macro><name>removeRows</name><argument_list>(<argument>int row</argument>, <argument>int count</argument>, <argument>const QModelIndex &amp;parent = QModelIndex()</argument>)</argument_list></macro></expr>;
    <expr><name>Qt</name><operator>::</operator><name>ItemFlags</name> <macro><name>flags</name><argument_list>(<argument>const QModelIndex &amp;index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <comment type="block">/*@}*/</comment>

    <comment type="block">/* Add an address to the model.
       Returns the added address on success, and an empty string otherwise.
     */</comment>
    <expr><name>QString</name> <macro><name>addRow</name><argument_list>(<argument>const QString &amp;type</argument>, <argument>const QString &amp;label</argument>, <argument>const QString &amp;address</argument>, <argument>const OutputType address_type</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Look up label for address in address book, if not found return empty string. */</comment>
    <expr><name>QString</name> <macro><name>labelForAddress</name><argument_list>(<argument>const QString &amp;address</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="block" format="doxygen">/** Look up purpose for address in address book, if not found return empty string. */</comment>
    <expr><name>QString</name> <macro><name>purposeForAddress</name><argument_list>(<argument>const QString &amp;address</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="block">/* Look up row index of an address in the model.
       Return -1 if not found.
     */</comment>
    <expr><name>int</name> <macro><name>lookupAddress</name><argument_list>(<argument>const QString &amp;address</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>EditStatus</name> <macro><name>getEditStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>editStatus</name></expr>;</return> }</block>

    <name>OutputType</name> <macro><name>GetDefaultAddressType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
    <name>WalletModel</name><operator>*</operator> <specifier>const</specifier> <name>walletModel</name></expr>;
    <expr><name>AddressTablePriv</name> <operator>*</operator><name>priv</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QStringList</name> <name>columns</name></expr>;
    <expr><name>EditStatus</name> <name>editStatus</name> <operator>=</operator> <name>OK</name></expr>;

    <comment type="block" format="doxygen">/** Look up address book data given an address string. */</comment>
    <expr><name>bool</name> <macro><name>getAddressData</name><argument_list>(<argument>const QString &amp;address</argument>, <argument>std::string* name</argument>, <argument>std::string* purpose</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="block" format="doxygen">/** Notify listeners that data changed. */</comment>
    <expr><name>void</name> <macro><name>emitDataChanged</name><argument_list>(<argument>int index</argument>)</argument_list></macro></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="block">/* Update address list from core.
     */</comment>
    <name>void</name> <macro><name>updateEntry</name><argument_list>(<argument>const QString &amp;address</argument>, <argument>const QString &amp;label</argument>, <argument>bool isMine</argument>, <argument>const QString &amp;purpose</argument>, <argument>int status</argument>)</argument_list></macro></expr>;

    <expr><name>friend</name> <name>class</name> <name>AddressTablePriv</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_ADDRESSTABLEMODEL_H</comment>
</unit>
