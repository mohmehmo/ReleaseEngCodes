<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/mempool_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>mempool_tests</argument>, <argument>TestingSetup</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>constexpr</specifier> <name>auto</name></type> <name>REMOVAL_REASON_DUMMY</name> <init>= <expr><name><name>MemPoolRemovalReason</name><operator>::</operator><name>REPLACED</name></name></expr></init></decl>;</decl_stmt>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>MempoolRemoveTest</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test CTxMemPool::remove functionality</comment>

    <decl_stmt><decl><type><name>TestMemPoolEntryHelper</name></type> <name>entry</name></decl>;</decl_stmt>
    <comment type="line">// Parent transaction with three children,</comment>
    <comment type="line">// and three grand-children:</comment>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txParent</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txParent</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txParent</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txParent</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txParent</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txParent</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">33000LL</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name><name>txChild</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>txParent</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11000LL</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name><name>txGrandChild</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11000LL</literal></expr>;</expr_stmt>
    </block_content>}</block></for>


    <decl_stmt><decl><type><name>CTxMemPool</name></type> <name>testPool</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>testPool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Nothing in pool, remove should do nothing:</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>poolSize</name> <init>= <expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txParent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Just the parent:</comment>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name>txParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>poolSize</name> <operator>=</operator> <call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txParent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parent, children, grandchildren:</comment>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name>txParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Remove Child[0], GrandChild[0] should be removed:</comment>
    <expr_stmt><expr><name>poolSize</name> <operator>=</operator> <call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>txChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... make sure grandchild and child are gone:</comment>
    <expr_stmt><expr><name>poolSize</name> <operator>=</operator> <call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>txGrandChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>poolSize</name> <operator>=</operator> <call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>txChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Remove parent, all children/grandchildren should go:</comment>
    <expr_stmt><expr><name>poolSize</name> <operator>=</operator> <call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txParent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add children and grandchildren, but NOT the parent (simulate the parent being in a block)</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name><name>txChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name><name>txGrandChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be</comment>
    <comment type="line">// put into the mempool (maybe because it is non-standard):</comment>
    <expr_stmt><expr><name>poolSize</name> <operator>=</operator> <call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>testPool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txParent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>testPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>name</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>void</name></type> <name>CheckSort</name><argument_list>(<argument><expr><name>CTxMemPool</name> <operator>&amp;</operator><name>pool</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>sortedOrder</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><typename>typename</typename> <name>CTxMemPool</name><operator>::</operator><name>indexed_transaction_set</name><operator>::</operator><name>index</name><argument_list type="generic">&lt;<argument><expr><name>name</name></expr></argument>&gt;</argument_list><operator>::</operator><name>type</name><operator>::</operator><name>iterator</name></name> <name>it</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>name</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name>int</name> <name>count</name><operator>=</operator><literal type="number">0</literal></expr></argument>;
    for <argument><expr><operator>(</operator>; <name>it</name> <operator>!=</operator> <call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>name</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>,</operator> <operator>++</operator><name>count</name><operator>)</operator> <block>{
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>it</name><operator>-&gt;</operator><name>GetTx</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sortedOrder</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
    }</block></expr></argument>
}</argument_list>

<name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument><expr><name>MempoolIndexingTest</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>CTxMemPool</name> <name>pool</name></expr></argument>;
    <argument><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>TestMemPoolEntryHelper</name> <name>entry</name></expr></argument>;

    <comment type="block">/* 3rd highest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx1</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx1</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* highest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx2</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx2</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">20000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* lowest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx3</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx3</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* 2nd highest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx4</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx4</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">15000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* equal fee rate to tx1, but newer */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx5</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx5</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><name><name>entry</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5U</literal></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>sortedOrder</name></expr></argument>;
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>sortedOrder</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// 0</comment>
    <argument><expr><name><name>sortedOrder</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// 10000</comment>
    <argument><expr><name><name>sortedOrder</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// 10000</comment>
    <argument><expr><name><name>sortedOrder</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// 15000</comment>
    <argument><expr><name><name>sortedOrder</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// 20000</comment>
    <argument><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>descendant_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* low fee but with high fee child */</comment>
    <comment type="block">/* tx6 -&gt; tx7 -&gt; tx8, tx9 -&gt; tx10 */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx6</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx6</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">6U</literal></expr></argument>)</argument_list></call></expr></argument>;
    <comment type="line">// Check that at this point, tx6 is sorted low</comment>
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>descendant_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name><name>CTxMemPool</name><operator>::</operator><name>setEntries</name></name> <name>setAncestors</name></expr></argument>;
    <argument><expr><call><name><name>setAncestors</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>CMutableTransaction</name> <name>tx7</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx7</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr></argument>;
    <argument><expr><call><name><name>tx7</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><name><name>CTxMemPool</name><operator>::</operator><name>setEntries</name></name> <name>setAncestorsCalculated</name></expr></argument>;
    <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name> <name>dummy</name></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>CalculateMemPoolAncestors</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">2000000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setAncestorsCalculated</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>setAncestorsCalculated</name> <operator>==</operator> <name>setAncestors</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name>tx7</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setAncestors</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">7U</literal></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...</comment>
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>descendant_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* low fee child of tx7 */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx8</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx8</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx8</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx8</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr></argument>;
    <argument><expr><call><name><name>tx8</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx8</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx8</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>setAncestors</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setAncestors</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Now tx8 should be sorted low, but tx6/tx both high</comment>
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tx8</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>descendant_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* low fee child of tx7 */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx9</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx9</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx9</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx9</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr></argument>;
    <argument><expr><call><name><name>tx9</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx9</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx9</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx9</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setAncestors</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// tx9 should be sorted low</comment>
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">9U</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tx9</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>descendant_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>snapshotOrder</name> <operator>=</operator> <name>sortedOrder</name></expr></argument>;

    <argument><expr><call><name><name>setAncestors</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx8</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>setAncestors</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx9</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <comment type="block">/* tx10 depends on tx8 and tx9 and has a high fee*/</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx10</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx10</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx10</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx8</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx10</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr></argument>;
    <argument><expr><name><name>tx10</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx9</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx10</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr></argument>;
    <argument><expr><call><name><name>tx10</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx10</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx10</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;

    <argument><expr><call><name><name>setAncestorsCalculated</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>CalculateMemPoolAncestors</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">200000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setAncestorsCalculated</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>setAncestorsCalculated</name> <operator>==</operator> <name>setAncestors</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name>tx10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setAncestors</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block" format="doxygen">/**
     *  tx8 and tx9 should both now be sorted higher
     *  Final order after tx10 is added:
     *
     *  tx3 = 0 (1)
     *  tx5 = 10000 (1)
     *  tx1 = 10000 (1)
     *  tx4 = 15000 (1)
     *  tx2 = 20000 (1)
     *  tx9 = 200k (2 txs)
     *  tx8 = 200k (2 txs)
     *  tx10 = 200k (1 tx)
     *  tx6 = 2.2M (5 txs)
     *  tx7 = 2.2M (4 txs)
     */</comment>
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>; <comment type="line">// take out tx9, tx8 from the beginning</comment>
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>tx9</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>tx8</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><call><name><name>tx10</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>; <comment type="line">// tx10 is just before tx6</comment>
    <argument><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>descendant_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// there should be 10 transactions in the mempool</comment>
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10U</literal></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Now try removing tx10 and verify the sort order returns to normal</comment>
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx10</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetTx</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>descendant_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>snapshotOrder</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>pool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx9</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetTx</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx8</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetTx</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>REMOVAL_REASON_DUMMY</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument><expr><name>MempoolAncestorIndexingTest</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>CTxMemPool</name> <name>pool</name></expr></argument>;
    <argument><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>TestMemPoolEntryHelper</name> <name>entry</name></expr></argument>;

    <comment type="block">/* 3rd highest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx1</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx1</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* highest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx2</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx2</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">20000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>uint64_t</name> <name>tx2Size</name> <operator>=</operator> <call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* lowest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx3</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx3</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* 2nd highest fee */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx4</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx4</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">15000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* equal fee rate to tx1, but newer */</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx5</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx5</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></argument>;
    <argument><expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal> <operator>*</operator> <name>COIN</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5U</literal></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>sortedOrder</name></expr></argument>;
    <argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>sortedOrder</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// 20000</comment>
    <argument><expr><name><name>sortedOrder</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// 15000</comment>
    <comment type="line">// tx1 and tx5 are both 10000</comment>
    <comment type="line">// Ties are broken by hash, not timestamp, so determine which</comment>
    <comment type="line">// hash comes first.</comment>
    if <argument><expr><operator>(</operator><call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
        <expr><name><name>sortedOrder</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>sortedOrder</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr>;
    }</block></expr></argument> <if_stmt><else>else <expr_stmt><expr><block>{
        <expr><name><name>sortedOrder</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr>;
        <name><name>sortedOrder</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt></else></if_stmt></argument_list></decl></decl_stmt>
    }
    sortedOrder<expr_stmt><expr><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <call><name><name>tx3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// 0</comment>

    <expr_stmt><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>ancestor_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* low fee parent with high fee child */</comment>
    <comment type="block">/* tx6 (0) -&gt; tx7 (high) */</comment>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx6</name> <init>= <expr><call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx6</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tx6Size</name> <init>= <expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">6U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Ties are broken by hash</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>tx3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>ancestor_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx7</name> <init>= <expr><call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx7</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx7</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tx7Size</name> <init>= <expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* set the fee to just below tx2's feerate when including ancestor */</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>fee</name> <init>= <expr><operator>(</operator><literal type="number">20000</literal><operator>/</operator><name>tx2Size</name><operator>)</operator><operator>*</operator><operator>(</operator><name>tx7Size</name> <operator>+</operator> <name>tx6Size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>fee</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">7U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>ancestor_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* after tx6 is mined, tx7 should move up in the sort */</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name></type> <name>vtx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>removeForBlock</name></name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Ties are broken by hash</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>tx3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>ancestor_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// High-fee parent, low-fee child</comment>
    <comment type="line">// tx7 -&gt; tx8</comment>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx8</name> <init>= <expr><call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx8</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx8</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name>  <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx8</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx8</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx8</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx8</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>COIN</name></expr>;</expr_stmt>

    <comment type="line">// Check that we sort by min(feerate, ancestor_feerate):</comment>
    <comment type="line">// set the fee so that the ancestor feerate is above tx1/5,</comment>
    <comment type="line">// but the transaction's own feerate is lower</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">5000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sortedOrder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>sortedOrder</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>tx8</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>CheckSort</name><argument_list type="generic">&lt;<argument><expr><name>ancestor_score</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sortedOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


BOOST_AUTO_TEST_CASE<expr_stmt><expr><operator>(</operator><name>MempoolSizeLimitTest</name><operator>)</operator>
<block>{
    <expr><name>CTxMemPool</name> <name>pool</name></expr>;
    <expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><name>TestMemPoolEntryHelper</name> <name>entry</name></expr>;

    <expr><name>CMutableTransaction</name> <name>tx1</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>tx1</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;
    <expr><call><name><name>tx1</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;
    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>CMutableTransaction</name> <name>tx2</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>tx2</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name></expr>;
    <expr><call><name><name>tx2</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;
    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">5000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <comment type="line">// should do nothing</comment>
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// should remove the lower-feerate transaction</comment>
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name>tx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>CMutableTransaction</name> <name>tx3</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>tx3</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx3</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx3</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name></expr>;
    <expr><call><name><name>tx3</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx3</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;
    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">20000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// tx3 should pay for tx2 (CPFP)</comment>
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; <comment type="line">// mempool is limited to tx1's size in memory usage, so nothing fits</comment>
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><name>CFeeRate</name> <call><name>maxFeeRateRemoved</name><argument_list>(<argument><expr><literal type="number">25000</literal></expr></argument>, <argument><expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>maxFeeRateRemoved</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;

    <expr><name>CMutableTransaction</name> <name>tx4</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>tx4</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr>;
    <expr><call><name><name>tx4</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx4</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;

    <expr><name>CMutableTransaction</name> <name>tx5</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>tx5</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name></expr>;
    <expr><call><name><name>tx5</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx5</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;

    <expr><name>CMutableTransaction</name> <name>tx6</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>tx6</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_4</name></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name></expr>;
    <expr><call><name><name>tx6</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx6</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;

    <expr><name>CMutableTransaction</name> <name>tx7</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>tx7</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_5</name></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_6</name></expr>;
    <expr><call><name><name>tx7</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_7</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_7</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;
    <expr><name><name>tx7</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;

    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">7000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">1000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">1100LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">9000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that</comment>
    <expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">1000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">9000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// should maximize mempool size by only removing 5/7</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx5</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx6</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>tx7</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">1000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">9000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name></type> <name>vtx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">42</literal> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>maxFeeRateRemoved</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... we should keep the same min fee until we get a block</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>removeForBlock</name></name><argument_list>(<argument><expr><name>vtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">42</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>llround</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>maxFeeRateRemoved</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... then feerate should drop 1/2 each halflife</comment>

    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">42</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>llround</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>maxFeeRateRemoved</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal><operator>)</operator><operator>/</operator><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... with a 1/2 halflife when mempool is &lt; 1/2 its target size</comment>

    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">42</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">9</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>llround</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>maxFeeRateRemoved</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal><operator>)</operator><operator>/</operator><literal type="number">8.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... with a 1/4 halflife when mempool is &lt; 1/4 its target size</comment>

    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">42</literal> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... but feerate should never drop below 1000</comment>

    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">42</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>CTxMemPool</name><operator>::</operator><name>ROLLING_FEE_HALFLIFE</name></name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... unless it has gone all the way to 0 (after getting past 1000/2)</comment>

    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

inline <function><type><name>CTransactionRef</name></type> <name>make_tx</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name><modifier>&amp;&amp;</modifier></type> <name>output_values</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><modifier>&amp;&amp;</modifier></type> <name>inputs</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><modifier>&amp;&amp;</modifier></type> <name>input_indices</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name> <init>= <expr><call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>output_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>inputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>input_indices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>i</name></expr> ?</condition><then> <expr><name><name>input_indices</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>output_values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name><name>output_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>MempoolAncestryTests</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ancestors</name></decl>, <decl><type ref="prev"/><name>descendants</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CTxMemPool</name></type> <name>pool</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TestMemPoolEntryHelper</name></type> <name>entry</name></decl>;</decl_stmt>

    <comment type="block">/* Base transaction */</comment>
    <comment type="line">//</comment>
    <comment type="line">// [tx1]</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx1</name> <init>= <expr><call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ancestors / descendants should be 1 / 1 (itself / itself)</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Child transaction */</comment>
    <comment type="line">//</comment>
    <comment type="line">// [tx1].0 &lt;- [tx2]</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx2</name> <init>= <expr><call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">495</literal> <operator>*</operator> <name>CENT</name></expr>, <expr><literal type="number">5</literal> <operator>*</operator> <name>COIN</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment> <argument><expr><block>{<expr><name>tx1</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ancestors / descendants should be:</comment>
    <comment type="line">// transaction  ancestors   descendants</comment>
    <comment type="line">// ============ =========== ===========</comment>
    <comment type="line">// tx1          1 (tx1)     2 (tx1,2)</comment>
    <comment type="line">// tx2          2 (tx1,2)   2 (tx1,2)</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Grand-child 1 */</comment>
    <comment type="line">//</comment>
    <comment type="line">// [tx1].0 &lt;- [tx2].0 &lt;- [tx3]</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx3</name> <init>= <expr><call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">290</literal> <operator>*</operator> <name>CENT</name></expr>, <expr><literal type="number">200</literal> <operator>*</operator> <name>CENT</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment> <argument><expr><block>{<expr><name>tx2</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ancestors / descendants should be:</comment>
    <comment type="line">// transaction  ancestors   descendants</comment>
    <comment type="line">// ============ =========== ===========</comment>
    <comment type="line">// tx1          1 (tx1)     3 (tx1,2,3)</comment>
    <comment type="line">// tx2          2 (tx1,2)   3 (tx1,2,3)</comment>
    <comment type="line">// tx3          3 (tx1,2,3) 3 (tx1,2,3)</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx3</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Grand-child 2 */</comment>
    <comment type="line">//</comment>
    <comment type="line">// [tx1].0 &lt;- [tx2].0 &lt;- [tx3]</comment>
    <comment type="line">//              |</comment>
    <comment type="line">//              \---1 &lt;- [tx4]</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx4</name> <init>= <expr><call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">290</literal> <operator>*</operator> <name>CENT</name></expr>, <expr><literal type="number">250</literal> <operator>*</operator> <name>CENT</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment> <argument><expr><block>{<expr><name>tx2</name></expr>}</block></expr></argument>, <comment type="block">/* input_indices */</comment> <argument><expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ancestors / descendants should be:</comment>
    <comment type="line">// transaction  ancestors   descendants</comment>
    <comment type="line">// ============ =========== ===========</comment>
    <comment type="line">// tx1          1 (tx1)     4 (tx1,2,3,4)</comment>
    <comment type="line">// tx2          2 (tx1,2)   4 (tx1,2,3,4)</comment>
    <comment type="line">// tx3          3 (tx1,2,3) 4 (tx1,2,3,4)</comment>
    <comment type="line">// tx4          3 (tx1,2,4) 4 (tx1,2,3,4)</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx3</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Make an alternate branch that is longer and connect it to tx3 */</comment>
    <comment type="line">//</comment>
    <comment type="line">// [ty1].0 &lt;- [ty2].0 &lt;- [ty3].0 &lt;- [ty4].0 &lt;- [ty5].0</comment>
    <comment type="line">//                                              |</comment>
    <comment type="line">// [tx1].0 &lt;- [tx2].0 &lt;- [tx3].0 &lt;- [ty6] ---&gt;--/</comment>
    <comment type="line">//              |</comment>
    <comment type="line">//              \---1 &lt;- [tx4]</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>ty1</name></decl>, <decl><type ref="prev"/><name>ty2</name></decl>, <decl><type ref="prev"/><name>ty3</name></decl>, <decl><type ref="prev"/><name>ty4</name></decl>, <decl><type ref="prev"/><name>ty5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name><modifier>*</modifier></type> <name><name>ty</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>ty1</name></expr>, <expr><operator>&amp;</operator><name>ty2</name></expr>, <expr><operator>&amp;</operator><name>ty3</name></expr>, <expr><operator>&amp;</operator><name>ty4</name></expr>, <expr><operator>&amp;</operator><name>ty5</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>v</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <name>COIN</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>tyi</name> <init>= <expr><operator>*</operator><name><name>ty</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tyi</name> <operator>=</operator> <call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><name>v</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment> <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><argument_list>{<argument><expr><operator>*</operator><name><name>ty</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>}</argument_list></call></expr> </then><else>: <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><argument_list>{}</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>-=</operator> <literal type="number">50</literal> <operator>*</operator> <name>CENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tyi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tyi</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>ty6</name> <init>= <expr><call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">5</literal> <operator>*</operator> <name>COIN</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment> <argument><expr><block>{<expr><name>tx3</name></expr>, <expr><name>ty5</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>ty6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ancestors / descendants should be:</comment>
    <comment type="line">// transaction  ancestors           descendants</comment>
    <comment type="line">// ============ =================== ===========</comment>
    <comment type="line">// tx1          1 (tx1)             5 (tx1,2,3,4, ty6)</comment>
    <comment type="line">// tx2          2 (tx1,2)           5 (tx1,2,3,4, ty6)</comment>
    <comment type="line">// tx3          3 (tx1,2,3)         5 (tx1,2,3,4, ty6)</comment>
    <comment type="line">// tx4          3 (tx1,2,4)         5 (tx1,2,3,4, ty6)</comment>
    <comment type="line">// ty1          1 (ty1)             6 (ty1,2,3,4,5,6)</comment>
    <comment type="line">// ty2          2 (ty1,2)           6 (ty1,2,3,4,5,6)</comment>
    <comment type="line">// ty3          3 (ty1,2,3)         6 (ty1,2,3,4,5,6)</comment>
    <comment type="line">// ty4          4 (y1234)           6 (ty1,2,3,4,5,6)</comment>
    <comment type="line">// ty5          5 (y12345)          6 (ty1,2,3,4,5,6)</comment>
    <comment type="line">// ty6          9 (tx123, ty123456) 6 (ty1,2,3,4,5,6)</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx1</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">5ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx2</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">5ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx3</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">5ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tx4</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">5ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>ty1</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">6ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>ty2</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">6ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>ty3</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">6ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>ty4</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">6ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>ty5</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">5ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">6ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>ty6</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">9ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">6ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Ancestors represented more than once ("diamond") */</comment>
    <comment type="line">//</comment>
    <comment type="line">// [ta].0 &lt;- [tb].0 -----&lt;------- [td].0</comment>
    <comment type="line">//            |                    |</comment>
    <comment type="line">//            \---1 &lt;- [tc].0 --&lt;--/</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>ta</name></decl>, <decl><type ref="prev"/><name>tb</name></decl>, <decl><type ref="prev"/><name>tc</name></decl>, <decl><type ref="prev"/><name>td</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ta</name> <operator>=</operator> <call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">5</literal> <operator>*</operator> <name>COIN</name></expr>, <expr><literal type="number">3</literal> <operator>*</operator> <name>COIN</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment>  <block>{<block_content><expr><name>ta</name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><name>tc</name> <operator>=</operator> <call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">2</literal> <operator>*</operator> <name>COIN</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment> <block>{<block_content><expr><name>tb</name></expr></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <comment type="block">/* input_indices */</comment> <block>{<block_content><expr><literal type="number">1</literal></expr></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><name>td</name> <operator>=</operator> <call><name>make_tx</name><argument_list>(<comment type="block">/* output_values */</comment> <argument><expr><block>{<expr><literal type="number">6</literal> <operator>*</operator> <name>COIN</name></expr>}</block></expr></argument>, <comment type="block">/* inputs */</comment> <block>{<block_content><expr><name>tb</name></expr><operator>,</operator> <expr><name>tc</name></expr></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <comment type="block">/* input_indices */</comment> <block>{<block_content><expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ancestors / descendants should be:</comment>
    <comment type="line">// transaction  ancestors           descendants</comment>
    <comment type="line">// ============ =================== ===========</comment>
    <comment type="line">// ta           1 (ta               4 (ta,tb,tc,td)</comment>
    <comment type="line">// tb           2 (ta,tb)           4 (ta,tb,tc,td)</comment>
    <comment type="line">// tc           3 (ta,tb,tc)        4 (ta,tb,tc,td)</comment>
    <comment type="line">// td           4 (ta,tb,tc,td)     4 (ta,tb,tc,td)</comment>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>ta</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tb</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">2ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>tc</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">3ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>GetTransactionAncestry</name></name><argument_list>(<argument><expr><call><name><name>td</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>descendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>descendants</name></expr></argument>, <argument><expr><literal type="number">4ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
