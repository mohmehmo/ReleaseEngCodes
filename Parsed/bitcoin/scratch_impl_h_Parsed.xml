<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/scratch_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2017 Andrew Poelstra                                 *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_SECP256K1_SCRATCH_IMPL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SECP256K1_SCRATCH_IMPL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scratch.h"</cpp:file></cpp:include>

<comment type="block">/* Using 16 bytes alignment because common architectures never have alignment
 * requirements above 8 for any of the types we care about. In addition we
 * leave some room because currently we don't care about a few bytes.
 * TODO: Determine this at configure time. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNMENT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>secp256k1_scratch</name><modifier>*</modifier></type> <name>secp256k1_scratch_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name><modifier>*</modifier></type> <name>error_callback</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><operator>(</operator><name>secp256k1_scratch</name><operator>*</operator><operator>)</operator><call><name>checked_malloc</name><argument_list>(<argument><expr><name>error_callback</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <name>max_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>error_callback</name></name> <operator>=</operator> <name>error_callback</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scratch_destroy</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>scratch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>secp256k1_scratch_max_allocation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>objects</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>allocated</name> <operator>+=</operator> <name><name>scratch</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>scratch</name><operator>-&gt;</operator><name>max_size</name></name> <operator>-</operator> <name>allocated</name> <operator>&lt;=</operator> <name>objects</name> <operator>*</operator> <name>ALIGNMENT</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>scratch</name><operator>-&gt;</operator><name>max_size</name></name> <operator>-</operator> <name>allocated</name> <operator>-</operator> <name>objects</name> <operator>*</operator> <name>ALIGNMENT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scratch_allocate_frame</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>objects</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name> <operator>&lt;</operator> <name>SECP256K1_SCRATCH_MAX_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <call><name>secp256k1_scratch_max_allocation</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>objects</name> <operator>*</operator> <name>ALIGNMENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scratch</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name></expr>]</index></name> <operator>=</operator> <call><name>checked_malloc</name><argument_list>(<argument><expr><name><name>scratch</name><operator>-&gt;</operator><name>error_callback</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>scratch</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>scratch</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scratch</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scratch_deallocate_frame</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>scratch</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>secp256k1_scratch_alloc</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>frame</name> <init>= <expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>+</operator> <name>ALIGNMENT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ALIGNMENT</name><operator>)</operator> <operator>*</operator> <name>ALIGNMENT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>scratch</name><operator>-&gt;</operator><name>frame</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>+</operator> <name><name>scratch</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>frame</name></expr>]</index></name> <operator>&gt;</operator> <name><name>scratch</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name>frame</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>scratch</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>frame</name></expr>]</index></name> <operator>+</operator> <name><name>scratch</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>frame</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>scratch</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>frame</name></expr>]</index></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
