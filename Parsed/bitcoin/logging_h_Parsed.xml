<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/logging.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_LOGGING_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_LOGGING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_LOGTIMEMICROS</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_LOGIPS</name>        <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_LOGTIMESTAMPS</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_LOGTHREADNAMES</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>DEFAULT_DEBUGLOGFILE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>fLogIPs</name></decl>;</decl_stmt>

<struct>struct <name>CLogCategoryActive</name>
<block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>category</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>namespace</name></type> <name>BCLog</name> <block>{<block_content>
    <enum>enum <name>LogFlags</name> : <type><name>uint32_t</name></type> <block>{
        <decl><name>NONE</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><name>NET</name>         <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
        <decl><name>TOR</name>         <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
        <decl><name>MEMPOOL</name>     <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
        <decl><name>HTTP</name>        <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
        <decl><name>BENCH</name>       <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
        <decl><name>ZMQ</name>         <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
        <decl><name>WALLETDB</name>    <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">6</literal><operator>)</operator></expr></init></decl>,
        <decl><name>RPC</name>         <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">7</literal><operator>)</operator></expr></init></decl>,
        <decl><name>ESTIMATEFEE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">8</literal><operator>)</operator></expr></init></decl>,
        <decl><name>ADDRMAN</name>     <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator>  <literal type="number">9</literal><operator>)</operator></expr></init></decl>,
        <decl><name>SELECTCOINS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></init></decl>,
        <decl><name>REINDEX</name>     <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></init></decl>,
        <decl><name>CMPCTBLOCK</name>  <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></init></decl>,
        <decl><name>RAND</name>        <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></init></decl>,
        <decl><name>PRUNE</name>       <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></init></decl>,
        <decl><name>PROXY</name>       <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>,
        <decl><name>MEMPOOLREJ</name>  <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>,
        <decl><name>LIBEVENT</name>    <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr></init></decl>,
        <decl><name>COINDB</name>      <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator></expr></init></decl>,
        <decl><name>QT</name>          <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr></init></decl>,
        <decl><name>LEVELDB</name>     <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr></init></decl>,
        <decl><name>ALL</name>         <init>= <expr><operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>,
    }</block>;</enum>

    <decl_stmt><decl><type><name>class</name></type> <name>Logger</name>
    <block>{<block_content>
    <label><name>private</name>:</label>
        <expr_stmt><expr><name>mutable</name> <name>std</name><operator>::</operator><name>mutex</name> <name>m_cs</name></expr>;</expr_stmt>                   <comment type="line">// Can not use Mutex from sync.h because in debug mode it would cause a deadlock when a potential deadlock was detected</comment>
        <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>m_fileout</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>                 <comment type="line">// GUARDED_BY(m_cs)</comment>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_msgs_before_open</name></expr>;</expr_stmt> <comment type="line">// GUARDED_BY(m_cs)</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>m_buffering</name><block>{<block_content><expr><name>true</name></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>                    <comment type="line" format="doxygen">//!&lt; Buffer messages before logging can be started. GUARDED_BY(m_cs)</comment>

        <comment type="block" format="doxygen">/**
         * m_started_new_line is a state variable that will suppress printing of
         * the timestamp when multiple calls are made that don't end in a
         * newline.
         */</comment>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>atomic_bool</name> <name>m_started_new_line</name><block>{<expr><name>true</name></expr>}</block></expr>;</expr_stmt>

        <comment type="block" format="doxygen">/** Log categories bitfield. */</comment>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>m_categories</name><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>LogTimestampStr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" format="doxygen">/** Slots that connect to the print signal */</comment>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_print_callbacks</name> <comment type="block">/* GUARDED_BY(m_cs) */</comment> <block>{}</block></expr>;</expr_stmt>

    <label><name>public</name>:</label>
        <decl_stmt><decl><type><name>bool</name></type> <name>m_print_to_console</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>m_print_to_file</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>m_log_timestamps</name> <init>= <expr><name>DEFAULT_LOGTIMESTAMPS</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>m_log_time_micros</name> <init>= <expr><name>DEFAULT_LOGTIMEMICROS</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>m_log_threadnames</name> <init>= <expr><name>DEFAULT_LOGTHREADNAMES</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <name>m_file_path</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>m_reopen_file</name><block>{<expr><name>false</name></expr>}</block></expr>;</expr_stmt>

        <comment type="block" format="doxygen">/** Send a string to the log output */</comment>
        <decl_stmt><decl><type><name>void</name></type> <name>LogPrintStr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <comment type="block" format="doxygen">/** Returns whether logs will be written to any output */</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>Enabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
        <block>{
            <expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>mutex</name></expr></argument>&gt;</argument_list></name> <call><name>scoped_lock</name><argument_list>(<argument><expr><name>m_cs</name></expr></argument>)</argument_list></call></expr>;
            <return>return <expr><name>m_buffering</name> <operator>||</operator> <name>m_print_to_console</name> <operator>||</operator> <name>m_print_to_file</name> <operator>||</operator> <operator>!</operator><call><name><name>m_print_callbacks</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></expr></expr_stmt>

        <comment type="block" format="doxygen">/** Connect a slot to the print signal and return the connection */</comment>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <macro><name>PushBackCallback</name><argument_list>(<argument>std::function&lt;void(const std::string&amp;)&gt; fun</argument>)</argument_list></macro>
        <block>{
            <expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>mutex</name></expr></argument>&gt;</argument_list></name> <call><name>scoped_lock</name><argument_list>(<argument><expr><name>m_cs</name></expr></argument>)</argument_list></call></expr>;
            <expr><call><name><name>m_print_callbacks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <return>return <expr><operator>--</operator><call><name><name>m_print_callbacks</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></expr></expr_stmt>

        <comment type="block" format="doxygen">/** Delete a connection */</comment>
        <decl_stmt><decl><type><name>void</name></type> <name>DeleteCallback</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>it</name></expr></argument>)</argument_list>
        <block>{<block_content>
            <expr_stmt><expr><name>std</name><operator>::</operator><name><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>mutex</name></expr></argument>&gt;</argument_list></name> <call><name>scoped_lock</name><argument_list>(<argument><expr><name>m_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m_print_callbacks</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></decl></decl_stmt>

        <comment type="block" format="doxygen">/** Start logging (and flush all buffered messages) */</comment>
        <function_decl><type><name>bool</name></type> <name>StartLogging</name><parameter_list>()</parameter_list>;</function_decl>
        <comment type="block" format="doxygen">/** Only for testing */</comment>
        <function_decl><type><name>void</name></type> <name>DisconnectTestLogger</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>ShrinkDebugFile</name><parameter_list>()</parameter_list>;</function_decl>

        <expr_stmt><expr><name>uint32_t</name> <macro><name>GetCategoryMask</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_categories</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

        <function_decl><type><name>void</name></type> <name>EnableCategory</name><parameter_list>(<parameter><decl><type><name>LogFlags</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>
        <decl_stmt><decl><type><name>bool</name></type> <name>EnableCategory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <function_decl><type><name>void</name></type> <name>DisableCategory</name><parameter_list>(<parameter><decl><type><name>LogFlags</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>
        <decl_stmt><decl><type><name>bool</name></type> <name>DisableCategory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>WillLogCategory</name><argument_list>(<argument><expr><name>LogFlags</name> <name>category</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

        <expr_stmt><expr><name>bool</name> <macro><name>DefaultShrinkDebugFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace BCLog</comment>

<expr_stmt><expr><name>BCLog</name><operator>::</operator><name>Logger</name><operator>&amp;</operator> <call><name>LogInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Return true if log accepts specified category */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>LogAcceptCategory</name><argument_list>(<argument><expr><name>BCLog</name><operator>::</operator><name>LogFlags</name> <name>category</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>WillLogCategory</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/** Returns a string with the log categories. */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>ListLogCategories</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Returns a vector of the active log categories. */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CLogCategoryActive</name></expr></argument>&gt;</argument_list></name> <call><name>ListActiveLogCategories</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Return true if str parses as a log category and set the flag */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>GetLogCategory</name><argument_list>(<argument><expr><name>BCLog</name><operator>::</operator><name>LogFlags</name><operator>&amp;</operator> <name>flag</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Be conservative when using LogPrintf/error or other things which</comment>
<comment type="line">// unconditionally log to debug.log! It should not be the case that an inbound</comment>
<comment type="line">// peer can fill up a user's disk with debug.log entries.</comment>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>LogPrintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Enabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>log_msg</name></expr>;</expr_stmt>
        <macro><name>try</name></macro> <block>{<block_content>
            <expr_stmt><expr><name>log_msg</name> <operator>=</operator> <name>tfm</name><operator>::</operator><call><name>format</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>tinyformat::format_error&amp; fmterr</argument>)</argument_list></macro> <block>{<block_content>
            <comment type="block">/* Original format string will have newline so don't add one here */</comment>
            <expr_stmt><expr><name>log_msg</name> <operator>=</operator> <literal type="string">"Error \""</literal> <operator>+</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name><name>fmterr</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\" while formatting log message: "</literal> <operator>+</operator> <name>fmt</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>LogPrintStr</name><argument_list>(<argument><expr><name>log_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Use a macro instead of a function for conditional logging to prevent</comment>
<comment type="line">// evaluating arguments when logging for the category is not enabled.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LogPrint</name><parameter_list>(<parameter><type><name>category</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>              \
    <cpp:value>do {                                     \
        if (LogAcceptCategory((category))) { \
            LogPrintf(__VA_ARGS__);          \
        }                                    \
    } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_LOGGING_H</comment>
</unit>
