<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/scriptpubkeyman.cpp"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;outputtype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bip32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/scriptpubkeyman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetNewDestination</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OutputType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TopUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Generate a new key that is added to wallet</comment>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>new_key</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetKeyFromPool</name><argument_list>(<argument><expr><name>new_key</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">"Error: Keypool ran out, please call keypoolrefill first"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>LearnRelatedScripts</name><argument_list>(<argument><expr><name>new_key</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>GetDestinationForKey</name><argument_list>(<argument><expr><name>new_key</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>valtype</name>;</typedef>

<namespace>namespace <block>{

<comment type="block" format="doxygen">/**
 * This is an enum that tracks the execution context of a script, similar to
 * SigVersion in script/interpreter. It is separate however because we want to
 * distinguish between top-level scriptPubKey execution and P2SH redeemScript
 * execution (a distinction that has no impact on consensus rules).
 */</comment>
<enum type="class">enum class <name>IsMineSigVersion</name>
<block>{
    <decl><name>TOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,        <comment type="line" format="doxygen">//!&lt; scriptPubKey execution</comment>
    <decl><name>P2SH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,       <comment type="line" format="doxygen">//!&lt; P2SH redeemScript</comment>
    <decl><name>WITNESS_V0</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <comment type="line" format="doxygen">//!&lt; P2WSH witness script execution</comment>
}</block>;</enum>

<comment type="block" format="doxygen">/**
 * This is an internal representation of isminetype + invalidity.
 * Its order is significant, as we return the max of all explored
 * possibilities.
 */</comment>
<enum type="class">enum class <name>IsMineResult</name>
<block>{
    <decl><name>NO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,         <comment type="line" format="doxygen">//!&lt; Not ours</comment>
    <decl><name>WATCH_ONLY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <comment type="line" format="doxygen">//!&lt; Included in watch-only balance</comment>
    <decl><name>SPENDABLE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,  <comment type="line" format="doxygen">//!&lt; Included in all balances</comment>
    <decl><name>INVALID</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,    <comment type="line" format="doxygen">//!&lt; Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)</comment>
}</block>;</enum>

<function><type><name>bool</name></type> <name>PermitsUncompressed</name><parameter_list>(<parameter><decl><type><name>IsMineSigVersion</name></type> <name>sigversion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>sigversion</name> <operator>==</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>TOP</name></name> <operator>||</operator> <name>sigversion</name> <operator>==</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>P2SH</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>HaveKeys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pubkeys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LegacyScriptPubKeyMan</name><modifier>&amp;</modifier></type> <name>keystore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>valtype</name><modifier>&amp;</modifier></type> <name>pubkey</name> <range>: <expr><name>pubkeys</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyID</name> <init>= <expr><call><name>CPubKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keystore</name><operator>.</operator><name>HaveKey</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IsMineResult</name></type> <name>IsMineInner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LegacyScriptPubKeyMan</name><modifier>&amp;</modifier></type> <name>keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>IsMineSigVersion</name></type> <name>sigversion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>IsMineResult</name></type> <name>ret</name> <init>= <expr><name><name>IsMineResult</name><operator>::</operator><name>NO</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>vSolutions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>whichType</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>vSolutions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyID</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>whichType</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>TX_NONSTANDARD</name></expr>:</case>
    <case>case <expr><name>TX_NULL_DATA</name></expr>:</case>
    <case>case <expr><name>TX_WITNESS_UNKNOWN</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>TX_PUBKEY</name></expr>:</case>
        <expr_stmt><expr><name>keyID</name> <operator>=</operator> <call><name>CPubKey</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PermitsUncompressed</name><argument_list>(<argument><expr><name>sigversion</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">33</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>IsMineResult</name><operator>::</operator><name>INVALID</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>keystore</name><operator>.</operator><name>HaveKey</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>IsMineResult</name><operator>::</operator><name>SPENDABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TX_WITNESS_V0_KEYHASH</name></expr>:</case>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sigversion</name> <operator>==</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// P2WPKH inside P2WSH is invalid.</comment>
            <return>return <expr><name><name>IsMineResult</name><operator>::</operator><name>INVALID</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sigversion</name> <operator>==</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>keystore</name><operator>.</operator><name>HaveCScript</name></name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// We do not support bare witness outputs unless the P2SH version of it would be</comment>
            <comment type="line">// acceptable as well. This protects against matching before segwit activates.</comment>
            <comment type="line">// This also applies to the P2WSH case.</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>IsMineInner</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>IsMineSigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TX_PUBKEYHASH</name></expr>:</case>
        <expr_stmt><expr><name>keyID</name> <operator>=</operator> <call><name>CKeyID</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PermitsUncompressed</name><argument_list>(<argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>keystore</name><operator>.</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>pubkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>IsMineResult</name><operator>::</operator><name>INVALID</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>keystore</name><operator>.</operator><name>HaveKey</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>IsMineResult</name><operator>::</operator><name>SPENDABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    <case>case <expr><name>TX_SCRIPTHASH</name></expr>:</case>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sigversion</name> <operator>!=</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>TOP</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// P2SH inside P2WSH or P2SH is invalid.</comment>
            <return>return <expr><name><name>IsMineResult</name><operator>::</operator><name>INVALID</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>scriptID</name> <init>= <expr><call><name>CScriptID</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>keystore</name><operator>.</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>scriptID</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>IsMineInner</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>, <argument><expr><name><name>IsMineSigVersion</name><operator>::</operator><name>P2SH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TX_WITNESS_V0_SCRIPTHASH</name></expr>:</case>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sigversion</name> <operator>==</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// P2WSH inside P2WSH is invalid.</comment>
            <return>return <expr><name><name>IsMineResult</name><operator>::</operator><name>INVALID</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sigversion</name> <operator>==</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>TOP</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>keystore</name><operator>.</operator><name>HaveCScript</name></name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>uint160</name></type> <name>hash</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CRIPEMD160</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>scriptID</name> <init>= <expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>keystore</name><operator>.</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>scriptID</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>IsMineInner</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>, <argument><expr><name><name>IsMineSigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TX_MULTISIG</name></expr>:</case>
    <block>{<block_content>
        <comment type="line">// Never treat bare multisig outputs as ours (they can still be made watchonly-though)</comment>
        <if_stmt><if>if <condition>(<expr><name>sigversion</name> <operator>==</operator> <name><name>IsMineSigVersion</name><operator>::</operator><name>TOP</name></name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Only consider transactions "mine" if we own ALL the</comment>
        <comment type="line">// keys involved. Multi-signature transactions that are</comment>
        <comment type="line">// partially owned (somebody else has a key that can spend</comment>
        <comment type="line">// them) enable spend-out-from-under-you attacks, especially</comment>
        <comment type="line">// in shared-wallet situations.</comment>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name><argument_list>(<argument><expr><call><name><name>vSolutions</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>vSolutions</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><call><name><name>vSolutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PermitsUncompressed</name><argument_list>(<argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">33</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>IsMineResult</name><operator>::</operator><name>INVALID</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>HaveKeys</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keystore</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>IsMineResult</name><operator>::</operator><name>SPENDABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name><name>IsMineResult</name><operator>::</operator><name>NO</name></name> <operator>&amp;&amp;</operator> <call><name><name>keystore</name><operator>.</operator><name>HaveWatchOnly</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>IsMineResult</name><operator>::</operator><name>WATCH_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace</comment>

<function><type><name>isminetype</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>IsMine</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <switch>switch <condition>(<expr><call><name>IsMineInner</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>IsMineSigVersion</name><operator>::</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>IsMineResult</name><operator>::</operator><name>INVALID</name></name></expr>:</case>
    <case>case <expr><name><name>IsMineResult</name><operator>::</operator><name>NO</name></name></expr>:</case>
        <return>return <expr><name>ISMINE_NO</name></expr>;</return>
    <case>case <expr><name><name>IsMineResult</name><operator>::</operator><name>WATCH_ONLY</name></name></expr>:</case>
        <return>return <expr><name>ISMINE_WATCH_ONLY</name></expr>;</return>
    <case>case <expr><name><name>IsMineResult</name><operator>::</operator><name>SPENDABLE</name></name></expr>:</case>
        <return>return <expr><name>ISMINE_SPENDABLE</name></expr>;</return>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CWallet</name><operator>::</operator><name>Unlock</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vMasterKeyIn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>accept_no_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetCrypted</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>keyPass</name> <init>= <expr><call><name><name>mapCryptedKeys</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Always pass when there are no encrypted keys</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>keyFail</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CryptedKeyMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>mi</name> <init>= <expr><call><name><name>mapCryptedKeys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>mi</name> <operator>!=</operator> <call><name><name>mapCryptedKeys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>mi</name></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>vchPubKey</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>mi</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vchCryptedSecret</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>mi</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DecryptKey</name><argument_list>(<argument><expr><name>vMasterKeyIn</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>, <argument><expr><name>vchPubKey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>keyFail</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>keyPass</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fDecryptionThoroughlyChecked</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>keyPass</name> <operator>&amp;&amp;</operator> <name>keyFail</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"The wallet is probably corrupted: Some keys decrypt but not all.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>keyFail</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>keyPass</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>accept_no_keys</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>vMasterKey</name> <operator>=</operator> <name>vMasterKeyIn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>fDecryptionThoroughlyChecked</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>NotifyStatusChanged</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>EncryptKeys</name></name><parameter_list>(<parameter><decl><type><name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vMasterKeyIn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mapCryptedKeys</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>IsCrypted</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>fUseCrypto</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>KeyMap</name><operator>::</operator><name>value_type</name></name><modifier>&amp;</modifier></type> <name>mKey</name> <range>: <expr><name>mapKeys</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CKey</name> <modifier>&amp;</modifier></type><name>key</name> <init>= <expr><name><name>mKey</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>vchPubKey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CKeyingMaterial</name></type> <name>vchSecret</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchCryptedSecret</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EncryptSecret</name><argument_list>(<argument><expr><name>vMasterKeyIn</name></expr></argument>, <argument><expr><name>vchSecret</name></expr></argument>, <argument><expr><call><name><name>vchPubKey</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddCryptedKey</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>mapKeys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetReservedDestination</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OutputType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>, <parameter><decl><type><name>CTxDestination</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>CKeyPool</name><modifier>&amp;</modifier></type> <name>keypool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CanGetAddresses</name><argument_list>(<argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReserveKeyFromKeyPool</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>keypool</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>GetDestinationForKey</name><argument_list>(<argument><expr><name><name>keypool</name><operator>.</operator><name>vchPubKey</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>MarkUnusedAddresses</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// extract addresses and check if they match with an unused keypool key</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>keyid</name> <range>: <expr><call><name>GetAffectedKeys</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>mi</name> <init>= <expr><call><name><name>m_pool_key_to_index</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>m_pool_key_to_index</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Detected a used keypool key, mark all keypool key up to this key as used\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MarkReserveKeysAsUsed</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TopUp</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Topping up keypool failed (locked wallet)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>UpgradeKeyMetadata</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_storage</name><operator>.</operator><name>IsLocked</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_KEY_ORIGIN_METADATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WalletBatch</name></expr></argument>&gt;</argument_list></name></type> <name>batch</name> <init>= <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>WalletBatch</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>meta_pair</name> <operator>:</operator> <name>mapKeyMetadata</name></expr></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CKeyMetadata</name><modifier>&amp;</modifier></type> <name>meta</name> <init>= <expr><name><name>meta_pair</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>meta</name><operator>.</operator><name>hd_seed_id</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>meta</name><operator>.</operator><name>has_key_origin</name></name> <operator>&amp;&amp;</operator> <name><name>meta</name><operator>.</operator><name>hdKeypath</name></name> <operator>!=</operator> <literal type="string">"s"</literal></expr>)</condition> <block>{<block_content> <comment type="line">// If the hdKeypath is "s", that's the seed and it doesn't have a key origin</comment>
            <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>GetKey</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>hd_seed_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CExtKey</name></type> <name>masterKey</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>masterKey</name><operator>.</operator><name>SetSeed</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Add to map</comment>
            <decl_stmt><decl><type><name>CKeyID</name></type> <name>master_id</name> <init>= <expr><call><name><name>masterKey</name><operator>.</operator><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>master_id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>master_id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>hdKeypath</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid stored hdKeypath"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>has_key_origin</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>.</operator><name>nVersion</name></name> <operator>&lt;</operator> <name><name>CKeyMetadata</name><operator>::</operator><name>VERSION_WITH_KEY_ORIGIN</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <name><name>CKeyMetadata</name><operator>::</operator><name>VERSION_WITH_KEY_ORIGIN</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Write meta to wallet</comment>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GetPubKey</name><argument_list>(<argument><expr><name><name>meta_pair</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>batch</name><operator>-&gt;</operator><name>WriteKeyMetadata</name></name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>SetupGeneration</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CanGenerateKeys</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name><operator>)</operator> <operator>||</operator> <call><name><name>m_storage</name><operator>.</operator><name>IsLocked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SetHDSeed</name><argument_list>(<argument><expr><call><name>GenerateNewSeed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NewKeyPool</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>IsHDEnabled</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><operator>!</operator><call><name><name>hdChain</name><operator>.</operator><name>seed_id</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>CanGetAddresses</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Check if the keypool has keys</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>keypool_has_keys</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>internal</name> <operator>&amp;&amp;</operator> <call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>keypool_has_keys</name> <operator>=</operator> <call><name><name>setInternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>keypool_has_keys</name> <operator>=</operator> <call><name>KeypoolCountExternalKeys</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// If the keypool doesn't have keys, check if we can generate them</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>keypool_has_keys</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>CanGenerateKeys</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>keypool_has_keys</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>Upgrade</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prev_version</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>hd_upgrade</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>split_upgrade</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsHDEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"Upgrading wallet to HD\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_storage</name><operator>.</operator><name>SetMinVersion</name></name><argument_list>(<argument><expr><name>FEATURE_HD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// generate a new master key</comment>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>masterPubKey</name> <init>= <expr><call><name>GenerateNewSeed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SetHDSeed</name><argument_list>(<argument><expr><name>masterPubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hd_upgrade</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Upgrade to HD chain split if necessary</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"Upgrading wallet to use HD chain split\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_storage</name><operator>.</operator><name>SetMinVersion</name></name><argument_list>(<argument><expr><name>FEATURE_PRE_SPLIT_KEYPOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>split_upgrade</name> <operator>=</operator> <name>FEATURE_HD_SPLIT</name> <operator>&gt;</operator> <name>prev_version</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Mark all keys currently in the keypool as pre-split</comment>
    <if_stmt><if>if <condition>(<expr><name>split_upgrade</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>MarkPreSplitKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Regenerate the keypool if upgraded to HD</comment>
    <if_stmt><if>if <condition>(<expr><name>hd_upgrade</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TopUp</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to generate keys"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>HavePrivateKeys</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>mapKeys</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>mapCryptedKeys</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>RewriteDB</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_pool_key_to_index</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Note: can't top-up keypool here, because wallet is locked.</comment>
    <comment type="line">// User will be prompted to unlock wallet the next operation</comment>
    <comment type="line">// that requires a new key.</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>GetOldestKeyTimeInPool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>setKeyPool</name></decl></parameter>, <parameter><decl><type><name>WalletBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>setKeyPool</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CKeyPool</name></type> <name>keypool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nIndex</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>setKeyPool</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>batch</name><operator>.</operator><name>ReadPool</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>, <argument><expr><name>keypool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": read oldest key in keypool failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>keypool</name><operator>.</operator><name>nTime</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetOldestKeyPoolTime</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// load oldest key from keypool, get time and return</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>oldestKey</name> <init>= <expr><call><name>GetOldestKeyTimeInPool</name><argument_list>(<argument><expr><name>setExternalKeyPool</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsHDEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>oldestKey</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name>GetOldestKeyTimeInPool</name><argument_list>(<argument><expr><name>setInternalKeyPool</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oldestKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>oldestKey</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name>GetOldestKeyTimeInPool</name><argument_list>(<argument><expr><name>set_pre_split_keypool</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oldestKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>oldestKey</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>KeypoolCountExternalKeys</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>set_pre_split_keypool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetKeyPoolSize</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>setExternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>set_pre_split_keypool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetTimeFirstKey</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nTimeFirstKey</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>CKeyMetadata</name><modifier>*</modifier></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetMetadata</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CKeyID</name></type> <name>key_id</name> <init>= <expr><call><name>GetKeyForDestination</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key_id</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>mapKeyMetadata</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>mapKeyMetadata</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>m_script_metadata</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>m_script_metadata</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Update wallet first key creation time. This should be called whenever keys
 * are added to the wallet, with the oldest key creation time.
 */</comment>
<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>UpdateTimeFirstKey</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nCreateTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nCreateTime</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Cannot determine birthday information, so set the wallet birthday to</comment>
        <comment type="line">// the beginning of time.</comment>
        <expr_stmt><expr><name>nTimeFirstKey</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>nTimeFirstKey</name> <operator>||</operator> <name>nCreateTime</name> <operator>&lt;</operator> <name>nTimeFirstKey</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nTimeFirstKey</name> <operator>=</operator> <name>nCreateTime</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LoadKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>AddKeyPubKeyInner</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddKeyPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>secret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddKeyPubKeyWithDB</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddKeyPubKeyWithDB</name></name><parameter_list>(<parameter><decl><type><name>WalletBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>secret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure we aren't adding private keys to private key disabled wallets</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey</comment>
    <comment type="line">// which is overridden below.  To avoid flushes, the database handle is</comment>
    <comment type="line">// tunneled through to it.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>needsDB</name> <init>= <expr><operator>!</operator><name>encrypted_batch</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>needsDB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>encrypted_batch</name> <operator>=</operator> <operator>&amp;</operator><name>batch</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddKeyPubKeyInner</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>needsDB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>encrypted_batch</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>needsDB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>encrypted_batch</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// check if we need to remove from watch-only</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HaveWatchOnly</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RemoveWatchOnly</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HaveWatchOnly</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RemoveWatchOnly</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCrypted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>batch</name><operator>.</operator><name>WriteKey</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>,
                                                 <argument><expr><call><name><name>secret</name><operator>.</operator><name>GetPrivKey</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>m_storage</name><operator>.</operator><name>UnsetBlankWalletFlag</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LoadCScript</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>redeemScript</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* A sanity check was added in pull #3843 to avoid adding redeemScripts
     * that never can be redeemed. However, old wallets may still contain
     * these. Do not add them to the wallet and warn. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>redeemScript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_SCRIPT_ELEMENT_SIZE</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strAddr</name> <init>= <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MAX_SCRIPT_ELEMENT_SIZE</name></expr></argument>, <argument><expr><name>strAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>FillableSigningProvider</name><operator>::</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LoadKeyMetadata</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyMetadata</name><modifier>&amp;</modifier></type> <name>meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateTimeFirstKey</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>nCreateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><name>keyID</name></expr>]</index></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LoadScriptMetadata</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScriptID</name><modifier>&amp;</modifier></type> <name>script_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyMetadata</name><modifier>&amp;</modifier></type> <name>meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateTimeFirstKey</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>nCreateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m_script_metadata</name><index>[<expr><name>script_id</name></expr>]</index></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddKeyPubKeyInner</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCrypted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>FillableSigningProvider</name><operator>::</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>m_storage</name><operator>.</operator><name>IsLocked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchCryptedSecret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKeyingMaterial</name></type> <name>vchSecret</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EncryptSecret</name><argument_list>(<argument><expr><name>vMasterKey</name></expr></argument>, <argument><expr><name>vchSecret</name></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddCryptedKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LoadCryptedKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>vchPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vchCryptedSecret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>AddCryptedKeyInner</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddCryptedKeyInner</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>vchPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vchCryptedSecret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetCrypted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>mapCryptedKeys</name><index>[<expr><call><name><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ImplicitlyLearnRelatedKeyScripts</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddCryptedKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>vchPubKey</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vchCryptedSecret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddCryptedKeyInner</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>encrypted_batch</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>encrypted_batch</name><operator>-&gt;</operator><name>WriteCryptedKey</name></name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>,
                                                        <argument><expr><name>vchCryptedSecret</name></expr></argument>,
                                                        <argument><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>WalletBatch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WriteCryptedKey</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>,
                                                            <argument><expr><name>vchCryptedSecret</name></expr></argument>,
                                                            <argument><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>HaveWatchOnly</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name> <modifier>&amp;</modifier></type><name>dest</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>setWatchOnly</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>HaveWatchOnly</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>!</operator><call><name><name>setWatchOnly</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ExtractPubKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name> <modifier>&amp;</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubKeyOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>solutions</name></decl>;</decl_stmt>
    <return>return <expr><call><name>Solver</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TX_PUBKEY</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>pubKeyOut</name> <operator>=</operator> <call><name>CPubKey</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>IsFullyValid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>RemoveWatchOnly</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name> <modifier>&amp;</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>setWatchOnly</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubKey</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ExtractPubKey</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pubKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapWatchKeys</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>pubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Related CScripts are not removed; having superfluous scripts around is</comment>
        <comment type="line">// harmless (see comment in ImplicitlyLearnRelatedKeyScripts).</comment>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HaveWatchOnly</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>NotifyWatchonlyChanged</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WalletBatch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>EraseWatchOnly</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LoadWatchOnly</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name> <modifier>&amp;</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>AddWatchOnlyInMem</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddWatchOnlyInMem</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name> <modifier>&amp;</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>setWatchOnly</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubKey</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ExtractPubKey</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pubKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>mapWatchKeys</name><index>[<expr><call><name><name>pubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>pubKey</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ImplicitlyLearnRelatedKeyScripts</name><argument_list>(<argument><expr><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddWatchOnlyWithDB</name></name><parameter_list>(<parameter><decl><type><name>WalletBatch</name> <modifier>&amp;</modifier></type><name>batch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddWatchOnlyInMem</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CKeyMetadata</name><modifier>&amp;</modifier></type> <name>meta</name> <init>= <expr><name><name>m_script_metadata</name><index>[<expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UpdateTimeFirstKey</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>nCreateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NotifyWatchonlyChanged</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>batch</name><operator>.</operator><name>WriteWatchOnly</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_storage</name><operator>.</operator><name>UnsetBlankWalletFlag</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddWatchOnlyWithDB</name></name><parameter_list>(<parameter><decl><type><name>WalletBatch</name> <modifier>&amp;</modifier></type><name>batch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>create_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>m_script_metadata</name><index>[<expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>nCreateTime</name> <operator>=</operator> <name>create_time</name></expr>;</expr_stmt>
    <return>return <expr><call><name>AddWatchOnlyWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddWatchOnly</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name>AddWatchOnlyWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddWatchOnly</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nCreateTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>m_script_metadata</name><index>[<expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>nCreateTime</name> <operator>=</operator> <name>nCreateTime</name></expr>;</expr_stmt>
    <return>return <expr><call><name>AddWatchOnly</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>SetHDChain</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CHDChain</name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>memonly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>memonly</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>WalletBatch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>WriteHDChain</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": writing chain failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>hdChain</name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>HaveKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCrypted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>FillableSigningProvider</name><operator>::</operator><name>HaveKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>mapCryptedKeys</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>keyOut</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCrypted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>FillableSigningProvider</name><operator>::</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>keyOut</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>CryptedKeyMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>mi</name> <init>= <expr><call><name><name>mapCryptedKeys</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>mapCryptedKeys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>vchPubKey</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>mi</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vchCryptedSecret</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>mi</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>DecryptKey</name><argument_list>(<argument><expr><name>vMasterKey</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>, <argument><expr><name>vchPubKey</name></expr></argument>, <argument><expr><name>keyOut</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetKeyOrigin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyID</name></decl></parameter>, <parameter><decl><type><name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKeyMetadata</name></type> <name>meta</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>mapKeyMetadata</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>mapKeyMetadata</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>meta</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>.</operator><name>has_key_origin</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>fingerprint</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>meta</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Single pubkeys get the master fingerprint of themselves</comment>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>keyID</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyID</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetWatchPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name> <modifier>&amp;</modifier></type><name>pubkey_out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>WatchKeyMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>mapWatchKeys</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>mapWatchKeys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pubkey_out</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>vchPubKeyOut</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCrypted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>FillableSigningProvider</name><operator>::</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>vchPubKeyOut</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>GetWatchPubKey</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>vchPubKeyOut</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>CryptedKeyMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>mi</name> <init>= <expr><call><name><name>mapCryptedKeys</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>mapCryptedKeys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>vchPubKeyOut</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>mi</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Check for watch-only pubkeys</comment>
    <return>return <expr><call><name>GetWatchPubKey</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>vchPubKeyOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CPubKey</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GenerateNewKey</name></name><parameter_list>(<parameter><decl><type><name>WalletBatch</name> <modifier>&amp;</modifier></type><name>batch</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_BLANK_WALLET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fCompressed</name> <init>= <expr><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_COMPRPUBKEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// default to compressed public keys if we want 0.6.0 wallets</comment>

    <decl_stmt><decl><type><name>CKey</name></type> <name>secret</name></decl>;</decl_stmt>

    <comment type="line">// Create new metadata</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nCreationTime</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKeyMetadata</name></type> <name>metadata</name><argument_list>(<argument><expr><name>nCreationTime</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// use HD key derivation if HD was enabled during wallet creation and a seed is present</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsHDEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>DeriveNewChildKey</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>internal</name></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>secret</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><name>fCompressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Compressed public keys were introduced in version 0.6.0</comment>
    <if_stmt><if>if <condition>(<expr><name>fCompressed</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_storage</name><operator>.</operator><name>SetMinVersion</name></name><argument_list>(<argument><expr><name>FEATURE_COMPRPUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name><name>secret</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>secret</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateTimeFirstKey</name><argument_list>(<argument><expr><name>nCreationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddKeyPubKeyWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": AddKey failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>pubkey</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>BIP32_HARDENED_KEY_LIMIT</name> <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>DeriveNewChildKey</name></name><parameter_list>(<parameter><decl><type><name>WalletBatch</name> <modifier>&amp;</modifier></type><name>batch</name></decl></parameter>, <parameter><decl><type><name>CKeyMetadata</name><modifier>&amp;</modifier></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>secret</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// for now we use a fixed keypath scheme of m/0'/0'/k</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name>seed</name></decl>;</decl_stmt>                     <comment type="line">//seed (256bit)</comment>
    <decl_stmt><decl><type><name>CExtKey</name></type> <name>masterKey</name></decl>;</decl_stmt>             <comment type="line">//hd master key</comment>
    <decl_stmt><decl><type><name>CExtKey</name></type> <name>accountKey</name></decl>;</decl_stmt>            <comment type="line">//key at m/0'</comment>
    <decl_stmt><decl><type><name>CExtKey</name></type> <name>chainChildKey</name></decl>;</decl_stmt>         <comment type="line">//key at m/0'/0' (external) or m/0'/1' (internal)</comment>
    <decl_stmt><decl><type><name>CExtKey</name></type> <name>childKey</name></decl>;</decl_stmt>              <comment type="line">//key at m/0'/0'/&lt;n&gt;'</comment>

    <comment type="line">// try to get the seed</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetKey</name><argument_list>(<argument><expr><name><name>hdChain</name><operator>.</operator><name>seed_id</name></name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": seed not found"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>masterKey</name><operator>.</operator><name>SetSeed</name></name><argument_list>(<argument><expr><call><name><name>seed</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>seed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// derive m/0'</comment>
    <comment type="line">// use hardened derivation (child keys &gt;= 0x80000000 are hardened after bip32)</comment>
    <expr_stmt><expr><call><name><name>masterKey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>accountKey</name></expr></argument>, <argument><expr><name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// derive m/0'/0' (external chain) OR m/0'/1' (internal chain)</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><ternary><condition><expr><name>internal</name></expr> ?</condition><then> <expr><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="boolean">true</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>accountKey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>chainChildKey</name></expr></argument>, <argument><expr><name>BIP32_HARDENED_KEY_LIMIT</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>internal</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// derive child key at next index, skip keys already known to the wallet</comment>
    <do>do <block>{<block_content>
        <comment type="line">// always derive hardened keys</comment>
        <comment type="line">// childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range</comment>
        <comment type="line">// example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649</comment>
        <if_stmt><if>if <condition>(<expr><name>internal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>chainChildKey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>childKey</name></expr></argument>, <argument><expr><name><name>hdChain</name><operator>.</operator><name>nInternalChainCounter</name></name> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>hdKeypath</name></name> <operator>=</operator> <literal type="string">"m/0'/1'/"</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name><name>hdChain</name><operator>.</operator><name>nInternalChainCounter</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>metadata</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>metadata</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>metadata</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>hdChain</name><operator>.</operator><name>nInternalChainCounter</name></name> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hdChain</name><operator>.</operator><name>nInternalChainCounter</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>chainChildKey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>childKey</name></expr></argument>, <argument><expr><name><name>hdChain</name><operator>.</operator><name>nExternalChainCounter</name></name> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>hdKeypath</name></name> <operator>=</operator> <literal type="string">"m/0'/0'/"</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name><name>hdChain</name><operator>.</operator><name>nExternalChainCounter</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>metadata</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>metadata</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>metadata</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>hdChain</name><operator>.</operator><name>nExternalChainCounter</name></name> <operator>|</operator> <name>BIP32_HARDENED_KEY_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hdChain</name><operator>.</operator><name>nExternalChainCounter</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block> while <condition>(<expr><call><name>HaveKey</name><argument_list>(<argument><expr><call><name><name>childKey</name><operator>.</operator><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    <expr_stmt><expr><name>secret</name> <operator>=</operator> <name><name>childKey</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>hd_seed_id</name></name> <operator>=</operator> <name><name>hdChain</name><operator>.</operator><name>seed_id</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>master_id</name> <init>= <expr><call><name><name>masterKey</name><operator>.</operator><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>master_id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>master_id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>key_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>has_key_origin</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <comment type="line">// update the chain model in the database</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>batch</name><operator>.</operator><name>WriteHDChain</name></name><argument_list>(<argument><expr><name>hdChain</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": Writing HD chain model failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LoadKeyPool</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyPool</name> <modifier>&amp;</modifier></type><name>keypool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>keypool</name><operator>.</operator><name>m_pre_split</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>keypool</name><operator>.</operator><name>fInternal</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>m_max_keypool_index</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>m_max_keypool_index</name></expr></argument>, <argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m_pool_key_to_index</name><index>[<expr><call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>nIndex</name></expr>;</expr_stmt>

    <comment type="line">// If no metadata exists yet, create a default with the pool key's</comment>
    <comment type="line">// creation time. Note that this may be overwritten by actually</comment>
    <comment type="line">// stored metadata for that key later, which is fine.</comment>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyid</name> <init>= <expr><call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>mapKeyMetadata</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><name>keyid</name></expr>]</index></name> <operator>=</operator> <call><name>CKeyMetadata</name><argument_list>(<argument><expr><name><name>keypool</name><operator>.</operator><name>nTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>CanGenerateKeys</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)</comment>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>IsHDEnabled</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CPubKey</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GenerateNewSeed</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>DeriveNewSeed</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CPubKey</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>DeriveNewSeed</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nCreationTime</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKeyMetadata</name></type> <name>metadata</name><argument_list>(<argument><expr><name>nCreationTime</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// calculate the seed</comment>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>seed</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set the hd keypath to "s" -&gt; Seed, refers the seed to itself</comment>
    <expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>hdKeypath</name></name>     <operator>=</operator> <literal type="string">"s"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>has_key_origin</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>hd_seed_id</name></name> <operator>=</operator> <call><name><name>seed</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// mem store the metadata</comment>
        <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>seed</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>

        <comment type="line">// write the key&amp;metadata to the database</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddKeyPubKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": AddKeyPubKey failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block>

    <return>return <expr><name>seed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>SetHDSeed</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// store the keyid (hash160) together with</comment>
    <comment type="line">// the child index counter in the database</comment>
    <comment type="line">// as a hdchain object</comment>
    <decl_stmt><decl><type><name>CHDChain</name></type> <name>newHdChain</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>newHdChain</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>CHDChain</name><operator>::</operator><name>VERSION_HD_CHAIN_SPLIT</name></name></expr> </then><else>: <expr><name><name>CHDChain</name><operator>::</operator><name>VERSION_HD_BASE</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newHdChain</name><operator>.</operator><name>seed_id</name></name> <operator>=</operator> <call><name><name>seed</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetHDChain</name><argument_list>(<argument><expr><name>newHdChain</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NotifyCanGetAddressesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m_storage</name><operator>.</operator><name>UnsetBlankWalletFlag</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Mark old keypool keys as used,
 * and generate all new keys
 */</comment>
<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>NewKeyPool</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nIndex</name> <range>: <expr><name>setInternalKeyPool</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>ErasePool</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nIndex</name> <range>: <expr><name>setExternalKeyPool</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>ErasePool</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nIndex</name> <range>: <expr><name>set_pre_split_keypool</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>ErasePool</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>m_pool_key_to_index</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TopUp</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"LegacyScriptPubKeyMan::NewKeyPool rewrote keypool\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>TopUp</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>kpSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CanGenerateKeys</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>m_storage</name><operator>.</operator><name>IsLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// Top up key pool</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nTargetSize</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>kpSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nTargetSize</name> <operator>=</operator> <name>kpSize</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>nTargetSize</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-keypool"</literal></expr></argument>, <argument><expr><name>DEFAULT_KEYPOOL_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// count amount of available keys (internal, external)</comment>
        <comment type="line">// make sure the keypool of external and internal keys fits the user selected target (-keypool)</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>missingExternal</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nTargetSize</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>setExternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>missingInternal</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nTargetSize</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>setInternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHDEnabled</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// don't create extra internal keys</comment>
            <expr_stmt><expr><name>missingInternal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>internal</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>missingInternal</name> <operator>+</operator> <name>missingExternal</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>missingInternal</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>internal</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><call><name>GenerateNewKey</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>AddKeypoolPubkeyWithDB</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>missingInternal</name> <operator>+</operator> <name>missingExternal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"keypool added %d keys (%d internal), size=%u (%u internal)\n"</literal></expr></argument>, <argument><expr><name>missingInternal</name> <operator>+</operator> <name>missingExternal</name></expr></argument>, <argument><expr><name>missingInternal</name></expr></argument>, <argument><expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>setExternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>set_pre_split_keypool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>NotifyCanGetAddressesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddKeypoolPubkeyWithDB</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>internal</name></decl></parameter>, <parameter><decl><type><name>WalletBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m_max_keypool_index</name> <operator>&lt;</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// How in the hell did you use so many keys?</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name> <init>= <expr><operator>++</operator><name>m_max_keypool_index</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>batch</name><operator>.</operator><name>WritePool</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name>CKeyPool</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": writing imported pubkey failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>internal</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>m_pool_key_to_index</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>KeepDestination</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OutputType</name><modifier>&amp;</modifier></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Remove from key pool</comment>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>ErasePool</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>have_pk</name> <init>= <expr><call><name>GetPubKey</name><argument_list>(<argument><expr><call><name><name>m_index_to_reserved_key</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>have_pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LearnRelatedScripts</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_index_to_reserved_key</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"keypool keep %d\n"</literal></expr></argument>, <argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>ReturnDestination</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fInternal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Return to key pool</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fInternal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>CKeyID</name><modifier>&amp;</modifier></type> <name>pubkey_id</name> <init>= <expr><call><name><name>m_index_to_reserved_key</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m_pool_key_to_index</name><index>[<expr><name>pubkey_id</name></expr>]</index></name> <operator>=</operator> <name>nIndex</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_index_to_reserved_key</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NotifyCanGetAddressesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"keypool return %d\n"</literal></expr></argument>, <argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetKeyFromPool</name></name><parameter_list>(<parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OutputType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CanGetAddresses</name><argument_list>(<argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CKeyPool</name></type> <name>keypool</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nIndex</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReserveKeyFromKeyPool</name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>, <argument><expr><name>keypool</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>m_storage</name><operator>.</operator><name>IsLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GenerateNewKey</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>KeepDestination</name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>keypool</name><operator>.</operator><name>vchPubKey</name></name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>ReserveKeyFromKeyPool</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type> <name>nIndex</name></decl></parameter>, <parameter><decl><type><name>CKeyPool</name><modifier>&amp;</modifier></type> <name>keypool</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fRequestedInternal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>nIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>keypool</name><operator>.</operator><name>vchPubKey</name></name> <operator>=</operator> <call><name>CPubKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TopUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>fReturningInternal</name> <init>= <expr><name>fRequestedInternal</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fReturningInternal</name> <operator>&amp;=</operator> <operator>(</operator><call><name>IsHDEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>m_storage</name><operator>.</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name><name>m_storage</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>use_split_keypool</name> <init>= <expr><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>setKeyPool</name> <init>= <expr><ternary><condition><expr><name>use_split_keypool</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>fReturningInternal</name></expr> ?</condition><then> <expr><name>setInternalKeyPool</name></expr> </then><else>: <expr><name>setExternalKeyPool</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>set_pre_split_keypool</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get the oldest key</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>setKeyPool</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>setKeyPool</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nIndex</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>setKeyPool</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>batch</name><operator>.</operator><name>ReadPool</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>, <argument><expr><name>keypool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": read failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pk</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetPubKey</name><argument_list>(<argument><expr><call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": unknown key in key pool"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// If the key was pre-split keypool, we don't care about what type it is</comment>
        <if_stmt><if>if <condition>(<expr><name>use_split_keypool</name> <operator>&amp;&amp;</operator> <name><name>keypool</name><operator>.</operator><name>fInternal</name></name> <operator>!=</operator> <name>fReturningInternal</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": keypool entry misclassified"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": keypool entry invalid"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>m_index_to_reserved_key</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m_index_to_reserved_key</name><index>[<expr><name>nIndex</name></expr>]</index></name> <operator>=</operator> <call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_pool_key_to_index</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"keypool reserve %d\n"</literal></expr></argument>, <argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>NotifyCanGetAddressesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LearnRelatedScripts</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>OutputType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name><name>OutputType</name><operator>::</operator><name>P2SH_SEGWIT</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>OutputType</name><operator>::</operator><name>BECH32</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>witdest</name> <init>= <expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witprog</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>witdest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Make sure the resulting program is solvable.</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IsSolvable</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>witprog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddCScript</name><argument_list>(<argument><expr><name>witprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LearnAllRelatedScripts</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.</comment>
    <expr_stmt><expr><call><name>LearnRelatedScripts</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>OutputType</name><operator>::</operator><name>P2SH_SEGWIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>MarkReserveKeysAsUsed</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>keypool_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>internal</name> <init>= <expr><call><name><name>setInternalKeyPool</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>keypool_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>internal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>keypool_id</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>set_pre_split_keypool</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>keypool_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>setKeyPool</name> <init>= <expr><ternary><condition><expr><name>internal</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>setInternalKeyPool</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>setExternalKeyPool</name></expr> </then><else>: <expr><operator>&amp;</operator><name>set_pre_split_keypool</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>setKeyPool</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>std</name><operator>::</operator><name>end</name></name><argument_list>(<argument><expr><operator>*</operator><name>setKeyPool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>index</name> <init>= <expr><operator>*</operator><operator>(</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>keypool_id</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> <comment type="line">// set*KeyPool is ordered</comment>

        <decl_stmt><decl><type><name>CKeyPool</name></type> <name>keypool</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>batch</name><operator>.</operator><name>ReadPool</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>keypool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">//TODO: This should be unnecessary</comment>
            <expr_stmt><expr><call><name><name>m_pool_key_to_index</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>keypool</name><operator>.</operator><name>vchPubKey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>LearnAllRelatedScripts</name><argument_list>(<argument><expr><name><name>keypool</name><operator>.</operator><name>vchPubKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>ErasePool</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"keypool index %d removed\n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>setKeyPool</name><operator>-&gt;</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name></type> <name>GetAffectedKeys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>spk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>out</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>InferDescriptor</name><argument_list>(<argument><expr><name>spk</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Expand</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DUMMY_SIGNING_PROVIDER</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name><name>out</name><operator>.</operator><name>pubkeys</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>MarkPreSplitKeys</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>setExternalKeyPool</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>setExternalKeyPool</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CKeyPool</name></type> <name>keypool</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>batch</name><operator>.</operator><name>ReadPool</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>keypool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": read keypool entry failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>keypool</name><operator>.</operator><name>m_pre_split</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>batch</name><operator>.</operator><name>WritePool</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>keypool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": writing modified keypool entry failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>set_pre_split_keypool</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>setExternalKeyPool</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddCScript</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>redeemScript</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name>AddCScriptWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddCScriptWithDB</name></name><parameter_list>(<parameter><decl><type><name>WalletBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>redeemScript</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>FillableSigningProvider</name><operator>::</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>batch</name><operator>.</operator><name>WriteCScript</name></name><argument_list>(<argument><expr><call><name>Hash160</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_storage</name><operator>.</operator><name>UnsetBlankWalletFlag</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>AddKeyOriginWithDB</name></name><parameter_list>(<parameter><decl><type><name>WalletBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fingerprint</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><name><name>key_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><name><name>key_origin</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>path</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><name>has_key_origin</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><name>hdKeypath</name> <operator>=</operator> <call><name>WriteHDKeypath</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>batch</name><operator>.</operator><name>WriteKeyMetadata</name></name><argument_list>(<argument><expr><name><name>mapKeyMetadata</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>ImportScripts</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>scripts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>scripts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>id</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>HaveCScript</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"Already have script %s, skipping\n"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddCScriptWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>m_script_metadata</name><index>[<expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>nCreateTime</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>UpdateTimeFirstKey</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>ImportPrivKeys</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>privkey_map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>privkey_map</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>id</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Skip if we already have the key</comment>
        <if_stmt><if>if <condition>(<expr><call><name>HaveKey</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"Already have key with pubkey %s, skipping\n"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>nCreateTime</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
        <comment type="line">// If the private key is not present in the wallet, insert it.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddKeyPubKeyWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>UpdateTimeFirstKey</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>ImportPubKeys</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>ordered_pubkeys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pubkey_map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>key_origins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>add_keypool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>internal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>key_origins</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>AddKeyOriginWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>id</name> <range>: <expr><name>ordered_pubkeys</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>entry</name> <init>= <expr><call><name><name>pubkey_map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <call><name><name>pubkey_map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>temp</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetPubKey</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Already have pubkey, skipping</comment>
            <expr_stmt><expr><call><name>WalletLogPrintf</name><argument_list>(<argument><expr><literal type="string">"Already have pubkey %s, skipping\n"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddWatchOnlyWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>mapKeyMetadata</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>nCreateTime</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

        <comment type="line">// Add to keypool only works with pubkeys</comment>
        <if_stmt><if>if <condition>(<expr><name>add_keypool</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>AddKeypoolPubkeyWithDB</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>NotifyCanGetAddressesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>ImportScriptPubKeys</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>script_pub_keys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>have_solving_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>(<argument><expr><call><name><name>m_storage</name><operator>.</operator><name>GetDatabase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name> <range>: <expr><name>script_pub_keys</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_solving_data</name> <operator>||</operator> <operator>!</operator><call><name>IsMine</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddWatchOnlyWithDB</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>GetKeys</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCrypted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>FillableSigningProvider</name><operator>::</operator><name>GetKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name></type> <name>set_address</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>mi</name> <range>: <expr><name>mapCryptedKeys</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>set_address</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>mi</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>set_address</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Temporary CWallet accessors and aliases.</comment>
<constructor><name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>LegacyScriptPubKeyMan</name></name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>ScriptPubKeyMan</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call>,
      <call><name>m_wallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call>,
      <call><name>cs_wallet</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call>,
      <call><name>vMasterKey</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>vMasterKey</name></name></expr></argument>)</argument_list></call>,
      <call><name>fUseCrypto</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>fUseCrypto</name></name></expr></argument>)</argument_list></call>,
      <call><name>fDecryptionThoroughlyChecked</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>fDecryptionThoroughlyChecked</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>SetCrypted</name></name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>.</operator><name>SetCrypted</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>IsCrypted</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>.</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>NotifyWatchonlyChanged</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fHaveWatchOnly</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>.</operator><name>NotifyWatchonlyChanged</name></name><argument_list>(<argument><expr><name>fHaveWatchOnly</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>NotifyCanGetAddressesChanged</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>.</operator><name>NotifyCanGetAddressesChanged</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Params</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name><name>LegacyScriptPubKeyMan</name><operator>::</operator><name>WalletLogPrintf</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Params</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>parameters</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>.</operator><name>WalletLogPrintf</name></name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>parameters</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</unit>
