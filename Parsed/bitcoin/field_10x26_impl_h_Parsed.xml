<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/field_10x26_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_FIELD_REPR_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FIELD_REPR_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x03FFFFFUL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03FFFFFUL</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>mid</name> <init>= <expr><name><name>d</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <literal type="number">0x3FFFFFFUL</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x40UL</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x3D1UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>,
             <decl><type ref="prev"/><name>t5</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t6</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t7</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t8</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t9</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Reduce t9 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t9</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFUL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x3D1UL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t5</name> <operator>+=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t6</name> <operator>+=</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t5</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t5</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t7</name> <operator>+=</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t6</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t6</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t8</name> <operator>+=</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t7</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t9</name> <operator>+=</operator> <operator>(</operator><name>t8</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t8</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t8</name></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* At most a single final reduction is needed; check if the value is &gt;= the field characteristic */</comment>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>t9</name> <operator>==</operator> <literal type="number">0x03FFFFFUL</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>m</name> <operator>==</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator>
        <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">0x40UL</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">0x3D1UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Apply the final reduction (for constant-time behaviour, we do it always) */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x3D1UL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t5</name> <operator>+=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t6</name> <operator>+=</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t5</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t7</name> <operator>+=</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t6</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t8</name> <operator>+=</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t9</name> <operator>+=</operator> <operator>(</operator><name>t8</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t8</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>

    <comment type="block">/* If t9 didn't carry to bit 22 already, then it should have after any final reduction */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal> <operator>==</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Mask off the possible multiple of 2^256 from the final reduction */</comment>
    <expr_stmt><expr><name>t9</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFUL</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>t8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>t9</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize_weak</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>,
             <decl><type ref="prev"/><name>t5</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t6</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t7</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t8</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t9</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Reduce t9 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t9</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFUL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x3D1UL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t5</name> <operator>+=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t6</name> <operator>+=</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t5</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t7</name> <operator>+=</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t6</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t8</name> <operator>+=</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t9</name> <operator>+=</operator> <operator>(</operator><name>t8</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t8</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>t8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>t9</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>,
             <decl><type ref="prev"/><name>t5</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t6</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t7</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t8</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t9</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Reduce t9 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t9</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFUL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x3D1UL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t5</name> <operator>+=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t6</name> <operator>+=</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t5</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t5</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t7</name> <operator>+=</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t6</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t6</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t8</name> <operator>+=</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t7</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t9</name> <operator>+=</operator> <operator>(</operator><name>t8</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t8</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t8</name></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* At most a single final reduction is needed; check if the value is &gt;= the field characteristic */</comment>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>t9</name> <operator>==</operator> <literal type="number">0x03FFFFFUL</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>m</name> <operator>==</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator>
        <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">0x40UL</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">0x3D1UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>t0</name> <operator>+=</operator> <literal type="number">0x3D1UL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t5</name> <operator>+=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t6</name> <operator>+=</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t5</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t7</name> <operator>+=</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t6</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t8</name> <operator>+=</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t9</name> <operator>+=</operator> <operator>(</operator><name>t8</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t8</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>

        <comment type="block">/* If t9 didn't carry to bit 22 already, then it should have after any final reduction */</comment>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal> <operator>==</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Mask off the possible multiple of 2^256 from the final reduction */</comment>
        <expr_stmt><expr><name>t9</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFUL</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>t8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>t9</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_normalizes_to_zero</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>,
             <decl><type ref="prev"/><name>t5</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t6</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t7</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t8</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t9</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>;</decl_stmt>

    <comment type="block">/* Reduce t9 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t9</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFUL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x3D1UL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name>  <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name>  <operator>=</operator> <name>t0</name> <operator>^</operator> <literal type="number">0x3D0UL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t1</name> <operator>^</operator> <literal type="number">0x40UL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t5</name> <operator>+=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t4</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t6</name> <operator>+=</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t5</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t5</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t5</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t7</name> <operator>+=</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t6</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t6</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t6</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t8</name> <operator>+=</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t7</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t7</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t9</name> <operator>+=</operator> <operator>(</operator><name>t8</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t8</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t8</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t8</name></expr>;</expr_stmt>
                                         <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t9</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t9</name> <operator>^</operator> <literal type="number">0x3C00000UL</literal></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>z0</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>z1</name> <operator>==</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_normalizes_to_zero_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>, <decl><type ref="prev"/><name>t9</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t9</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Reduce t9 at the start so there will be at most a single carry from the first pass */</comment>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x3D1UL</literal></expr>;</expr_stmt>

    <comment type="block">/* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */</comment>
    <expr_stmt><expr><name>z0</name> <operator>=</operator> <name>t0</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>z1</name> <operator>=</operator> <name>z0</name> <operator>^</operator> <literal type="number">0x3D0UL</literal></expr>;</expr_stmt>

    <comment type="block">/* Fast return path should catch the majority of cases */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>z0</name> <operator>!=</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>z1</name> <operator>!=</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t5</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t6</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t7</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t8</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>t9</name> <operator>&amp;=</operator> <literal type="number">0x03FFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t1</name> <operator>^</operator> <literal type="number">0x40UL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t5</name> <operator>+=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t4</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t6</name> <operator>+=</operator> <operator>(</operator><name>t5</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t5</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t5</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t5</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t7</name> <operator>+=</operator> <operator>(</operator><name>t6</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t6</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t6</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t6</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t8</name> <operator>+=</operator> <operator>(</operator><name>t7</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t7</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t7</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t7</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t9</name> <operator>+=</operator> <operator>(</operator><name>t8</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t8</name> <operator>&amp;=</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t8</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t8</name></expr>;</expr_stmt>
                                         <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t9</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t9</name> <operator>^</operator> <literal type="number">0x3C00000UL</literal></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 22 of t9 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t9</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>z0</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>z1</name> <operator>==</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_set_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_is_odd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_cmp_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_set_b32</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x3FFFFFUL</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x40UL</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x3D1UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x3FFFFFFUL</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_get_b32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFC2FUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFBFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3FFFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x03FFFFFUL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXTERNAL_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* External assembler implementation */</comment>
<function_decl><type><name>void</name></type> <name>secp256k1_fe_mul_inner</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier> <name>SECP256K1_RESTRICT</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>secp256k1_fe_sqr_inner</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERIFY_BITS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VERIFY_CHECK(((x) &gt;&gt; (n)) == 0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERIFY_BITS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul_inner</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier> <name>SECP256K1_RESTRICT</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>u0</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>, <decl><type ref="prev"/><name>u3</name></decl>, <decl><type ref="prev"/><name>u4</name></decl>, <decl><type ref="prev"/><name>u5</name></decl>, <decl><type ref="prev"/><name>u6</name></decl>, <decl><type ref="prev"/><name>u7</name></decl>, <decl><type ref="prev"/><name>u8</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t9</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>M</name> <init>= <expr><literal type="number">0x3FFFFFFUL</literal></expr></init></decl>, <decl><type ref="prev"/><name>R0</name> <init>= <expr><literal type="number">0x3D10UL</literal></expr></init></decl>, <decl><type ref="prev"/><name>R1</name> <init>= <expr><literal type="number">0x400UL</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** [... a b c] is a shorthand for ... + a&lt;&lt;52 + b&lt;&lt;26 + c&lt;&lt;0 mod n.
     *  for 0 &lt;= x &lt;= 9, px is a shorthand for sum(a[i]*b[x-i], i=0..x).
     *  for 9 &lt;= x &lt;= 18, px is a shorthand for sum(a[i]*b[x-i], i=(x-9)..9)
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */</comment>

    <expr_stmt><expr><name>d</name>  <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(d, 64); */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */</comment>
    <expr_stmt><expr><name>t9</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t9</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */</comment>

    <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <expr_stmt><expr><name>u0</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u0</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u0</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <expr_stmt><expr><name>t0</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u0</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <comment type="block">/* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <expr_stmt><expr><name>u1</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u1</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u1</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u2</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u2</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u2</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u3</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u3</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u3</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t3</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u3</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u4</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u4</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u4</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t4</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u4</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u5</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u5</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u5</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t5</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u5</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u6</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u6</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u6</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t6</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u6</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x8000007C00000007ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u7</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u7</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u7</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x800001703FFFC2F7ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t7</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u7</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x9000007B80000008ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u8</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u8</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u8</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x9000016FBFFFC2F8ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u8</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9+c-u8*R1 r8-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 0 t9+c r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name>   <operator>+=</operator> <name>d</name> <operator>*</operator> <name>R0</name> <operator>+</operator> <name>t9</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 0 c-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <operator>(</operator><name>M</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">22</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>d</name> <operator>*</operator> <operator>(</operator><name>R1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 r9+((c-d*R1&lt;&lt;4)&lt;&lt;22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 -d*R1 r9+(c&lt;&lt;22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>d</name>    <operator>=</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>R0</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>t0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 t1 d-c*R0&gt;&gt;4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 t1+d r0-c*R0&gt;&gt;4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name>   <operator>+=</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>R1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>t1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0x10000003FFFFBFULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 d-c*R1&gt;&gt;4 r0-c*R0&gt;&gt;4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 t2 d r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0x4000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 t2+d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name>   <operator>+=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 r2 r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_sqr_inner</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>u0</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>, <decl><type ref="prev"/><name>u3</name></decl>, <decl><type ref="prev"/><name>u4</name></decl>, <decl><type ref="prev"/><name>u5</name></decl>, <decl><type ref="prev"/><name>u6</name></decl>, <decl><type ref="prev"/><name>u7</name></decl>, <decl><type ref="prev"/><name>u8</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t9</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>M</name> <init>= <expr><literal type="number">0x3FFFFFFUL</literal></expr></init></decl>, <decl><type ref="prev"/><name>R0</name> <init>= <expr><literal type="number">0x3D10UL</literal></expr></init></decl>, <decl><type ref="prev"/><name>R1</name> <init>= <expr><literal type="number">0x400UL</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** [... a b c] is a shorthand for ... + a&lt;&lt;52 + b&lt;&lt;26 + c&lt;&lt;0 mod n.
     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).
     *  Note that [x 0 0 0 0 0 0 0 0 0 0] = [x*R1 x*R0].
     */</comment>

    <expr_stmt><expr><name>d</name>  <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(d, 64); */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */</comment>
    <expr_stmt><expr><name>t9</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t9</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t9 0 0 0 0 0 0 0 0 0] = [p9 0 0 0 0 0 0 0 0 0] */</comment>

    <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t9 0 0 0 0 0 0 0 0 c] = [p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d t9 0 0 0 0 0 0 0 0 c] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <expr_stmt><expr><name>u0</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u0</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u0</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u0 t9 0 0 0 0 0 0 0 0 c-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <expr_stmt><expr><name>t0</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u0</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u0 t9 0 0 0 0 0 0 0 c-u0*R1 t0-u0*R0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>
    <comment type="block">/* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 0 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 t9 0 0 0 0 0 0 0 c t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <expr_stmt><expr><name>u1</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u1</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u1 0 t9 0 0 0 0 0 0 0 c-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u1</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u1 0 t9 0 0 0 0 0 0 c-u1*R1 t1-u1*R0 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 0 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 t9 0 0 0 0 0 0 c t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u2</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u2</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u2 0 0 t9 0 0 0 0 0 0 c-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u2</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u2 0 0 t9 0 0 0 0 0 c-u2*R1 t2-u2*R0 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 0 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 t9 0 0 0 0 0 c t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u3</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u3</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u3</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u3 0 0 0 t9 0 0 0 0 0 c-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t3</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u3</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u3 0 0 0 t9 0 0 0 0 c-u3*R1 t3-u3*R0 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 0 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 t9 0 0 0 0 c t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u4</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u4</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u4</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u4 0 0 0 0 t9 0 0 0 0 c-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t4</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u4</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u4 0 0 0 0 t9 0 0 0 c-u4*R1 t4-u4*R0 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 0 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 t9 0 0 0 c t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u5</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u5</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u5</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u5 0 0 0 0 0 t9 0 0 0 c-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t5</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u5</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u5 0 0 0 0 0 t9 0 0 c-u5*R1 t5-u5*R0 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 0 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 t9 0 0 c t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u6</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u6</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u6</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <comment type="block">/* [d u6 0 0 0 0 0 0 t9 0 0 c-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t6</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u6</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u6 0 0 0 0 0 0 t9 0 c-u6*R1 t6-u6*R0 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 0 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x8000007C00000007ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 t9 0 c t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u7</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u7</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u7</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x800001703FFFC2F7ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u7 0 0 0 0 0 0 0 t9 0 c-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>t7</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u7</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u7 0 0 0 0 0 0 0 t9 c-u7*R1 t7-u7*R0 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 0 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
       <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x9000007B80000008ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 t9 c t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>u8</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u8</name> <operator>*</operator> <name>R0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>u8</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* VERIFY_BITS(c, 64); */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x9000016FBFFFC2F8ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 t3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 t4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 t5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 t6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 t7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9 c-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>u8</name> <operator>*</operator> <name>R1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d u8 0 0 0 0 0 0 0 0 t9+c-u8*R1 r8-u8*R0 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 0 t9+c r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>c</name>   <operator>+=</operator> <name>d</name> <operator>*</operator> <name>R0</name> <operator>+</operator> <name>t9</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 0 c-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <operator>(</operator><name>M</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">22</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>d</name> <operator>*</operator> <operator>(</operator><name>R1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [d 0 0 0 0 0 0 0 0 r9+((c-d*R1&lt;&lt;4)&lt;&lt;22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [d 0 0 0 0 0 0 0 -d*R1 r9+(c&lt;&lt;22)-d*R0 r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 t1 t0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>

    <expr_stmt><expr><name>d</name>    <operator>=</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>R0</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>t0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 t1 d-c*R0&gt;&gt;4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 t1+d r0-c*R0&gt;&gt;4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name>   <operator>+=</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>R1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>t1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0x10000003FFFFBFULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9+(c&lt;&lt;22) r8 r7 r6 r5 r4 r3 t2 d-c*R1&gt;&gt;4 r0-c*R0&gt;&gt;4] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 t2 d r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>d</name> <operator>&lt;=</operator> <literal type="number">0x4000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 t2+d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name>d</name>   <operator>+=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 d r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_BITS</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* [r9 r8 r7 r6 r5 r4 r3 r2 r1 r0] = [p18 p17 p16 p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0] */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier> <name>SECP256K1_RESTRICT</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_inner</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_sqr</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr_inner</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_fe_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>mask0</name></decl>, <decl><type ref="prev"/><name>mask1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>mask0</name> <operator>=</operator> <name>flag</name> <operator>+</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>mask1</name> <operator>=</operator> <operator>~</operator><name>mask0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>&amp;=</operator> <name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_fe_storage_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>mask0</name></decl>, <decl><type ref="prev"/><name>mask1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>mask0</name> <operator>=</operator> <name>flag</name> <operator>+</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>mask1</name> <operator>=</operator> <operator>~</operator><name>mask0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_to_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">18</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_fe_from_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">26</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">22</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FFFFFFUL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_FIELD_REPR_IMPL_H */</comment>
</unit>
