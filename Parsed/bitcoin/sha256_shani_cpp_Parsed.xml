<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/crypto/sha256_shani.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<comment type="line">//</comment>
<comment type="line">// Based on https://github.com/noloader/SHA-Intrinsics/blob/master/sha256-x86.c,</comment>
<comment type="line">// Written and placed in public domain by Jeffrey Walton.</comment>
<comment type="line">// Based on code from Intel, and by Sean Gulley for the miTLS project.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_SHANI</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;immintrin.h&gt;</cpp:file></cpp:include>



<namespace>namespace <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>__m128i</name></type> <name>MASK</name> <init>= <expr><call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0x0c0d0e0f08090a0bULL</literal></expr></argument>, <argument><expr><literal type="number">0x0405060700010203ULL</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__m128i</name></type> <name>INIT0</name> <init>= <expr><call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0x6a09e667bb67ae85ull</literal></expr></argument>, <argument><expr><literal type="number">0x510e527f9b05688cull</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__m128i</name></type> <name>INIT1</name> <init>= <expr><call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0x3c6ef372a54ff53aull</literal></expr></argument>, <argument><expr><literal type="number">0x1f83d9ab5be0cd19ull</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <specifier>inline</specifier></type>  <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> <name>QuadRound</name><argument_list>(<argument><expr><name>__m128i</name><operator>&amp;</operator> <name>state0</name></expr></argument>, <argument><expr><name>__m128i</name><operator>&amp;</operator> <name>state1</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>k1</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>k0</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><specifier>const</specifier> <name>__m128i</name> <name>msg</name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>state1</name> <operator>=</operator> <call><name>_mm_sha256rnds2_epu32</name><argument_list>(<argument><expr><name>state1</name></expr></argument>, <argument><expr><name>state0</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>state0</name> <operator>=</operator> <call><name>_mm_sha256rnds2_epu32</name><argument_list>(<argument><expr><name>state0</name></expr></argument>, <argument><expr><name>state1</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>void</name> <namespace><specifier>inline</specifier>  __attribute__((<name>always_inline</name></namespace></decl>)</decl_stmt>)</block> <name>QuadRound</name>(<name>__m128i</name><modifier>&amp;</modifier> <name>state0</name><operator>,</operator> <name>__m128i</name><modifier>&amp;</modifier> <name>state1</name><operator>,</operator> <name>__m128i</name> <name>m</name><operator>,</operator> <name>uint64_t</name> <name>k1</name><operator>,</operator> <name>uint64_t</name> <name>k0</name></namespace>)
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>__m128i</name></type> <name>msg</name> <init>= <expr><call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>state1</name> <operator>=</operator> <call><name>_mm_sha256rnds2_epu32</name><argument_list>(<argument><expr><name>state1</name></expr></argument>, <argument><expr><name>state0</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>state0</name> <operator>=</operator> <call><name>_mm_sha256rnds2_epu32</name><argument_list>(<argument><expr><name>state0</name></expr></argument>, <argument><expr><name>state1</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>void</name> <specifier>inline</specifier></type>  <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> <name>ShiftMessageA</name><argument_list>(<argument><expr><name>__m128i</name><operator>&amp;</operator> <name>m0</name></expr></argument>, <argument><expr><name>__m128i</name> <name>m1</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>m0</name> <operator>=</operator> <call><name>_mm_sha256msg1_epu32</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>void</name> <namespace><specifier>inline</specifier>  __attribute__((<name>always_inline</name></namespace></decl>)</decl_stmt>) <macro><name>ShiftMessageC</name><argument_list>(<argument>__m128i&amp; m0</argument>, <argument>__m128i m1</argument>, <argument>__m128i&amp; m2</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><name>m2</name> <operator>=</operator> <call><name>_mm_sha256msg2_epu32</name><argument_list>(<argument><expr><call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><call><name>_mm_alignr_epi8</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>void</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> <name>ShiftMessageB</name><argument_list>(<argument><expr><name>__m128i</name><operator>&amp;</operator> <name>m0</name></expr></argument>, <argument><expr><name>__m128i</name> <name>m1</name></expr></argument>, <argument><expr><name>__m128i</name><operator>&amp;</operator> <name>m2</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>void</name> <namespace><specifier>inline</specifier> __attribute__((<name>always_inline</name></namespace></decl>)</decl_stmt>) <macro><name>Shuffle</name><argument_list>(<argument>__m128i&amp; s0</argument>, <argument>__m128i&amp; s1</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>__m128i</name></type> <name>t1</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>__m128i</name></type> <name>t2</name> <init>= <expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0x1B</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_alignr_epi8</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_blend_epi16</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>void</name> <specifier>inline</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> <name>Unshuffle</name><argument_list>(<argument><expr><name>__m128i</name><operator>&amp;</operator> <name>s0</name></expr></argument>, <argument><expr><name>__m128i</name><operator>&amp;</operator> <name>s1</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><specifier>const</specifier> <name>__m128i</name> <name>t1</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">0x1B</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>__m128i</name> <name>t2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>s0</name> <operator>=</operator> <call><name>_mm_blend_epi16</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>s1</name> <operator>=</operator> <call><name>_mm_alignr_epi8</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>__m128i</name> <namespace><specifier>inline</specifier>  __attribute__((<name>always_inline</name></namespace></decl>)</decl_stmt>) <macro><name>Load</name><argument_list>(<argument>const unsigned char* in</argument>)</argument_list></macro>
<block>{<block_content>
    <return>return <expr><call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MASK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<decl_stmt><decl><type><name>void</name> <specifier>inline</specifier></type>  <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>always_inline</name><operator>)</operator></expr></argument>)</argument_list> <name>Save</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name><operator>*</operator> <name>out</name></expr></argument>, <argument><expr><name>__m128i</name> <name>s</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list></decl></decl_stmt>
}

namespace <macro><name>sha256_shani</name></macro> <block>{<block_content>
<function><type><name>void</name></type> <name>Transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>__m128i</name></type> <name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>m3</name></decl>, <decl><type ref="prev"/><name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>so0</name></decl>, <decl><type ref="prev"/><name>so1</name></decl>;</decl_stmt>

    <comment type="block">/* Load state */</comment>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Shuffle</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Remember old state */</comment>
        <expr_stmt><expr><name>so0</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>so1</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

        <comment type="block">/* Load data and transform */</comment>
        <expr_stmt><expr><name>m0</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5b5c0fbcfull</literal></expr></argument>, <argument><expr><literal type="number">0x71374491428a2f98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m1</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>chunk</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5923f82a4ull</literal></expr></argument>, <argument><expr><literal type="number">0x59f111f13956c25bull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m2</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>chunk</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3243185beull</literal></expr></argument>, <argument><expr><literal type="number">0x12835b01d807aa98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m3</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>chunk</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><literal type="number">0xc19bf1749bdc06a7ull</literal></expr></argument>, <argument><expr><literal type="number">0x80deb1fe72be5d74ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><literal type="number">0x240ca1cc0fc19dc6ull</literal></expr></argument>, <argument><expr><literal type="number">0xefbe4786E49b69c1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><literal type="number">0x76f988da5cb0a9dcull</literal></expr></argument>, <argument><expr><literal type="number">0x4a7484aa2de92c6full</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><literal type="number">0xbf597fc7b00327c8ull</literal></expr></argument>, <argument><expr><literal type="number">0xa831c66d983e5152ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><literal type="number">0x1429296706ca6351ull</literal></expr></argument>, <argument><expr><literal type="number">0xd5a79147c6e00bf3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><literal type="number">0x53380d134d2c6dfcull</literal></expr></argument>, <argument><expr><literal type="number">0x2e1b213827b70a85ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><literal type="number">0x92722c8581c2c92eull</literal></expr></argument>, <argument><expr><literal type="number">0x766a0abb650a7354ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><literal type="number">0xc76c51A3c24b8b70ull</literal></expr></argument>, <argument><expr><literal type="number">0xa81a664ba2bfe8a1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><literal type="number">0x106aa070f40e3585ull</literal></expr></argument>, <argument><expr><literal type="number">0xd6990624d192e819ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><literal type="number">0x34b0bcb52748774cull</literal></expr></argument>, <argument><expr><literal type="number">0x1e376c0819a4c116ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><literal type="number">0x682e6ff35b9cca4full</literal></expr></argument>, <argument><expr><literal type="number">0x4ed8aa4a391c0cb3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><literal type="number">0x8cc7020884c87814ull</literal></expr></argument>, <argument><expr><literal type="number">0x78a5636f748f82eeull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><literal type="number">0xc67178f2bef9A3f7ull</literal></expr></argument>, <argument><expr><literal type="number">0xa4506ceb90befffaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Combine with old state */</comment>
        <expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>so0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>so1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Advance */</comment>
        <expr_stmt><expr><name>chunk</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>Unshuffle</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block>

<namespace>namespace <name>sha256d64_shani</name> <block>{

<function><type><name>void</name></type> <name>Transform_2way</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>__m128i</name></type> <name>am0</name></decl>, <decl><type ref="prev"/><name>am1</name></decl>, <decl><type ref="prev"/><name>am2</name></decl>, <decl><type ref="prev"/><name>am3</name></decl>, <decl><type ref="prev"/><name>as0</name></decl>, <decl><type ref="prev"/><name>as1</name></decl>, <decl><type ref="prev"/><name>aso0</name></decl>, <decl><type ref="prev"/><name>aso1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>__m128i</name></type> <name>bm0</name></decl>, <decl><type ref="prev"/><name>bm1</name></decl>, <decl><type ref="prev"/><name>bm2</name></decl>, <decl><type ref="prev"/><name>bm3</name></decl>, <decl><type ref="prev"/><name>bs0</name></decl>, <decl><type ref="prev"/><name>bs1</name></decl>, <decl><type ref="prev"/><name>bso0</name></decl>, <decl><type ref="prev"/><name>bso1</name></decl>;</decl_stmt>

    <comment type="block">/* Transform 1 */</comment>
    <expr_stmt><expr><name>bs0</name> <operator>=</operator> <name>as0</name> <operator>=</operator> <name>INIT0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs1</name> <operator>=</operator> <name>as1</name> <operator>=</operator> <name>INIT1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>am0</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm0</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5b5c0fbcfull</literal></expr></argument>, <argument><expr><literal type="number">0x71374491428a2f98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5b5c0fbcfull</literal></expr></argument>, <argument><expr><literal type="number">0x71374491428a2f98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>am1</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm1</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5923f82a4ull</literal></expr></argument>, <argument><expr><literal type="number">0x59f111f13956c25bull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5923f82a4ull</literal></expr></argument>, <argument><expr><literal type="number">0x59f111f13956c25bull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>am2</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm2</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">96</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3243185beull</literal></expr></argument>, <argument><expr><literal type="number">0x12835b01d807aa98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3243185beull</literal></expr></argument>, <argument><expr><literal type="number">0x12835b01d807aa98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>am3</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm3</name> <operator>=</operator> <call><name>Load</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><literal type="number">0xc19bf1749bdc06a7ull</literal></expr></argument>, <argument><expr><literal type="number">0x80deb1fe72be5d74ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><literal type="number">0xc19bf1749bdc06a7ull</literal></expr></argument>, <argument><expr><literal type="number">0x80deb1fe72be5d74ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0x240ca1cc0fc19dc6ull</literal></expr></argument>, <argument><expr><literal type="number">0xefbe4786E49b69c1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0x240ca1cc0fc19dc6ull</literal></expr></argument>, <argument><expr><literal type="number">0xefbe4786E49b69c1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0x76f988da5cb0a9dcull</literal></expr></argument>, <argument><expr><literal type="number">0x4a7484aa2de92c6full</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0x76f988da5cb0a9dcull</literal></expr></argument>, <argument><expr><literal type="number">0x4a7484aa2de92c6full</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><literal type="number">0xbf597fc7b00327c8ull</literal></expr></argument>, <argument><expr><literal type="number">0xa831c66d983e5152ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><literal type="number">0xbf597fc7b00327c8ull</literal></expr></argument>, <argument><expr><literal type="number">0xa831c66d983e5152ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><literal type="number">0x1429296706ca6351ull</literal></expr></argument>, <argument><expr><literal type="number">0xd5a79147c6e00bf3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><literal type="number">0x1429296706ca6351ull</literal></expr></argument>, <argument><expr><literal type="number">0xd5a79147c6e00bf3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0x53380d134d2c6dfcull</literal></expr></argument>, <argument><expr><literal type="number">0x2e1b213827b70a85ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0x53380d134d2c6dfcull</literal></expr></argument>, <argument><expr><literal type="number">0x2e1b213827b70a85ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0x92722c8581c2c92eull</literal></expr></argument>, <argument><expr><literal type="number">0x766a0abb650a7354ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0x92722c8581c2c92eull</literal></expr></argument>, <argument><expr><literal type="number">0x766a0abb650a7354ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><literal type="number">0xc76c51A3c24b8b70ull</literal></expr></argument>, <argument><expr><literal type="number">0xa81a664ba2bfe8a1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><literal type="number">0xc76c51A3c24b8b70ull</literal></expr></argument>, <argument><expr><literal type="number">0xa81a664ba2bfe8a1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><literal type="number">0x106aa070f40e3585ull</literal></expr></argument>, <argument><expr><literal type="number">0xd6990624d192e819ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><literal type="number">0x106aa070f40e3585ull</literal></expr></argument>, <argument><expr><literal type="number">0xd6990624d192e819ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0x34b0bcb52748774cull</literal></expr></argument>, <argument><expr><literal type="number">0x1e376c0819a4c116ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0x34b0bcb52748774cull</literal></expr></argument>, <argument><expr><literal type="number">0x1e376c0819a4c116ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0x682e6ff35b9cca4full</literal></expr></argument>, <argument><expr><literal type="number">0x4ed8aa4a391c0cb3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0x682e6ff35b9cca4full</literal></expr></argument>, <argument><expr><literal type="number">0x4ed8aa4a391c0cb3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><literal type="number">0x8cc7020884c87814ull</literal></expr></argument>, <argument><expr><literal type="number">0x78a5636f748f82eeull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><literal type="number">0x8cc7020884c87814ull</literal></expr></argument>, <argument><expr><literal type="number">0x78a5636f748f82eeull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><literal type="number">0xc67178f2bef9A3f7ull</literal></expr></argument>, <argument><expr><literal type="number">0xa4506ceb90befffaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><literal type="number">0xc67178f2bef9A3f7ull</literal></expr></argument>, <argument><expr><literal type="number">0xa4506ceb90befffaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>as0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>INIT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>INIT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>as1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>as1</name></expr></argument>, <argument><expr><name>INIT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>INIT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Transform 2 */</comment>
    <expr_stmt><expr><name>aso0</name> <operator>=</operator> <name>as0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bso0</name> <operator>=</operator> <name>bs0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>aso1</name> <operator>=</operator> <name>as1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bso1</name> <operator>=</operator> <name>bs1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5b5c0fbcfull</literal></expr></argument>, <argument><expr><literal type="number">0x71374491c28a2f98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5b5c0fbcfull</literal></expr></argument>, <argument><expr><literal type="number">0x71374491c28a2f98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5923f82a4ull</literal></expr></argument>, <argument><expr><literal type="number">0x59f111f13956c25bull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5923f82a4ull</literal></expr></argument>, <argument><expr><literal type="number">0x59f111f13956c25bull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3243185beull</literal></expr></argument>, <argument><expr><literal type="number">0x12835b01d807aa98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3243185beull</literal></expr></argument>, <argument><expr><literal type="number">0x12835b01d807aa98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xc19bf3749bdc06a7ull</literal></expr></argument>, <argument><expr><literal type="number">0x80deb1fe72be5d74ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xc19bf3749bdc06a7ull</literal></expr></argument>, <argument><expr><literal type="number">0x80deb1fe72be5d74ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x240cf2540fe1edc6ull</literal></expr></argument>, <argument><expr><literal type="number">0xf0fe4786649b69c1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x240cf2540fe1edc6ull</literal></expr></argument>, <argument><expr><literal type="number">0xf0fe4786649b69c1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x16f988fa61b9411eull</literal></expr></argument>, <argument><expr><literal type="number">0x6cc984be4fe9346full</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x16f988fa61b9411eull</literal></expr></argument>, <argument><expr><literal type="number">0x6cc984be4fe9346full</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xb9d99ec7b019fc65ull</literal></expr></argument>, <argument><expr><literal type="number">0xa88e5a6df2c65152ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xb9d99ec7b019fc65ull</literal></expr></argument>, <argument><expr><literal type="number">0xa88e5a6df2c65152ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xc7353eb0fdb1232bull</literal></expr></argument>, <argument><expr><literal type="number">0xe70eeaa09a1231c3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xc7353eb0fdb1232bull</literal></expr></argument>, <argument><expr><literal type="number">0xe70eeaa09a1231c3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xdc1eeefd5a0f118full</literal></expr></argument>, <argument><expr><literal type="number">0xcb976d5f3069bad5ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xdc1eeefd5a0f118full</literal></expr></argument>, <argument><expr><literal type="number">0xcb976d5f3069bad5ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xe15d5b1658f4ca9dull</literal></expr></argument>, <argument><expr><literal type="number">0xde0b7a040a35b689ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xe15d5b1658f4ca9dull</literal></expr></argument>, <argument><expr><literal type="number">0xde0b7a040a35b689ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x6fab9537a507ea32ull</literal></expr></argument>, <argument><expr><literal type="number">0x37088980007f3e86ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x6fab9537a507ea32ull</literal></expr></argument>, <argument><expr><literal type="number">0x37088980007f3e86ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xc0bbbe37cdaa3b6dull</literal></expr></argument>, <argument><expr><literal type="number">0x0d8cd6f117406110ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xc0bbbe37cdaa3b6dull</literal></expr></argument>, <argument><expr><literal type="number">0x0d8cd6f117406110ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x6fd15ca70b02e931ull</literal></expr></argument>, <argument><expr><literal type="number">0xdb48a36383613bdaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x6fd15ca70b02e931ull</literal></expr></argument>, <argument><expr><literal type="number">0xdb48a36383613bdaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x6d4378906ed41a95ull</literal></expr></argument>, <argument><expr><literal type="number">0x31338431521afacaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x6d4378906ed41a95ull</literal></expr></argument>, <argument><expr><literal type="number">0x31338431521afacaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x532fb63cb5c9a0e6ull</literal></expr></argument>, <argument><expr><literal type="number">0x9eccabbdc39c91f2ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x532fb63cb5c9a0e6ull</literal></expr></argument>, <argument><expr><literal type="number">0x9eccabbdc39c91f2ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x4c191d76a4954b68ull</literal></expr></argument>, <argument><expr><literal type="number">0x07237ea3d2c741c6ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x4c191d76a4954b68ull</literal></expr></argument>, <argument><expr><literal type="number">0x07237ea3d2c741c6ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>as0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>aso0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bso0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>as1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>as1</name></expr></argument>, <argument><expr><name>aso1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bso1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Extract hash */</comment>
    <expr_stmt><expr><call><name>Unshuffle</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Unshuffle</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>am0</name> <operator>=</operator> <name>as0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm0</name> <operator>=</operator> <name>bs0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>am1</name> <operator>=</operator> <name>as1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm1</name> <operator>=</operator> <name>bs1</name></expr>;</expr_stmt>

    <comment type="block">/* Transform 3 */</comment>
    <expr_stmt><expr><name>bs0</name> <operator>=</operator> <name>as0</name> <operator>=</operator> <name>INIT0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs1</name> <operator>=</operator> <name>as1</name> <operator>=</operator> <name>INIT1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5B5c0fbcfull</literal></expr></argument>, <argument><expr><literal type="number">0x71374491428a2f98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5B5c0fbcfull</literal></expr></argument>, <argument><expr><literal type="number">0x71374491428a2f98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5923f82a4ull</literal></expr></argument>, <argument><expr><literal type="number">0x59f111f13956c25bull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5923f82a4ull</literal></expr></argument>, <argument><expr><literal type="number">0x59f111f13956c25bull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm2</name> <operator>=</operator> <name>am2</name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0x0ull</literal></expr></argument>, <argument><expr><literal type="number">0x80000000ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3243185beull</literal></expr></argument>, <argument><expr><literal type="number">0x12835b015807aa98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3243185beull</literal></expr></argument>, <argument><expr><literal type="number">0x12835b015807aa98ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageA</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bm3</name> <operator>=</operator> <name>am3</name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0x10000000000ull</literal></expr></argument>, <argument><expr><literal type="number">0x0ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><literal type="number">0xc19bf2749bdc06a7ull</literal></expr></argument>, <argument><expr><literal type="number">0x80deb1fe72be5d74ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><literal type="number">0xc19bf2749bdc06a7ull</literal></expr></argument>, <argument><expr><literal type="number">0x80deb1fe72be5d74ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0x240ca1cc0fc19dc6ull</literal></expr></argument>, <argument><expr><literal type="number">0xefbe4786e49b69c1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0x240ca1cc0fc19dc6ull</literal></expr></argument>, <argument><expr><literal type="number">0xefbe4786e49b69c1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0x76f988da5cb0a9dcull</literal></expr></argument>, <argument><expr><literal type="number">0x4a7484aa2de92c6full</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0x76f988da5cb0a9dcull</literal></expr></argument>, <argument><expr><literal type="number">0x4a7484aa2de92c6full</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><literal type="number">0xbf597fc7b00327c8ull</literal></expr></argument>, <argument><expr><literal type="number">0xa831c66d983e5152ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><literal type="number">0xbf597fc7b00327c8ull</literal></expr></argument>, <argument><expr><literal type="number">0xa831c66d983e5152ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><literal type="number">0x1429296706ca6351ull</literal></expr></argument>, <argument><expr><literal type="number">0xd5a79147c6e00bf3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><literal type="number">0x1429296706ca6351ull</literal></expr></argument>, <argument><expr><literal type="number">0xd5a79147c6e00bf3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0x53380d134d2c6dfcull</literal></expr></argument>, <argument><expr><literal type="number">0x2e1b213827b70a85ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0x53380d134d2c6dfcull</literal></expr></argument>, <argument><expr><literal type="number">0x2e1b213827b70a85ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0x92722c8581c2c92eull</literal></expr></argument>, <argument><expr><literal type="number">0x766a0abb650a7354ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0x92722c8581c2c92eull</literal></expr></argument>, <argument><expr><literal type="number">0x766a0abb650a7354ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><literal type="number">0xc76c51a3c24b8b70ull</literal></expr></argument>, <argument><expr><literal type="number">0xa81a664ba2bfe8A1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><literal type="number">0xc76c51a3c24b8b70ull</literal></expr></argument>, <argument><expr><literal type="number">0xa81a664ba2bfe8A1ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><literal type="number">0x106aa070f40e3585ull</literal></expr></argument>, <argument><expr><literal type="number">0xd6990624d192e819ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><literal type="number">0x106aa070f40e3585ull</literal></expr></argument>, <argument><expr><literal type="number">0xd6990624d192e819ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><literal type="number">0x34b0bcb52748774cull</literal></expr></argument>, <argument><expr><literal type="number">0x1e376c0819a4c116ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><literal type="number">0x34b0bcb52748774cull</literal></expr></argument>, <argument><expr><literal type="number">0x1e376c0819a4c116ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>am3</name></expr></argument>, <argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageB</name><argument_list>(<argument><expr><name>bm3</name></expr></argument>, <argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><literal type="number">0x682e6ff35b9cca4full</literal></expr></argument>, <argument><expr><literal type="number">0x4ed8aa4a391c0cb3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><literal type="number">0x682e6ff35b9cca4full</literal></expr></argument>, <argument><expr><literal type="number">0x4ed8aa4a391c0cb3ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>am0</name></expr></argument>, <argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>bm0</name></expr></argument>, <argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><literal type="number">0x8cc7020884c87814ull</literal></expr></argument>, <argument><expr><literal type="number">0x78a5636f748f82eeull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><literal type="number">0x8cc7020884c87814ull</literal></expr></argument>, <argument><expr><literal type="number">0x78a5636f748f82eeull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>am1</name></expr></argument>, <argument><expr><name>am2</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ShiftMessageC</name><argument_list>(<argument><expr><name>bm1</name></expr></argument>, <argument><expr><name>bm2</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>, <argument><expr><name>am3</name></expr></argument>, <argument><expr><literal type="number">0xc67178f2bef9a3f7ull</literal></expr></argument>, <argument><expr><literal type="number">0xa4506ceb90befffaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QuadRound</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>bm3</name></expr></argument>, <argument><expr><literal type="number">0xc67178f2bef9a3f7ull</literal></expr></argument>, <argument><expr><literal type="number">0xa4506ceb90befffaull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>as0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>INIT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>INIT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>as1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>as1</name></expr></argument>, <argument><expr><name>INIT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bs1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>bs1</name></expr></argument>, <argument><expr><name>INIT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Extract hash into out */</comment>
    <expr_stmt><expr><call><name>Unshuffle</name><argument_list>(<argument><expr><name>as0</name></expr></argument>, <argument><expr><name>as1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Unshuffle</name><argument_list>(<argument><expr><name>bs0</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Save</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>as0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Save</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>as1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Save</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>bs0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Save</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

}</block></namespace>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
