<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/comparator.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Slice</name></decl>;</decl_stmt>

<comment type="line">// A Comparator object provides a total order across slices that are</comment>
<comment type="line">// used as keys in an sstable or a database.  A Comparator implementation</comment>
<comment type="line">// must be thread-safe since leveldb may invoke its methods concurrently</comment>
<comment type="line">// from multiple threads.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Comparator</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Comparator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Three-way comparison.  Returns value:</comment>
  <comment type="line">//   &lt; 0 iff "a" &lt; "b",</comment>
  <comment type="line">//   == 0 iff "a" == "b",</comment>
  <comment type="line">//   &gt; 0 iff "a" &gt; "b"</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>Compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>b</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// The name of the comparator.  Used to check for comparator</comment>
  <comment type="line">// mismatches (i.e., a DB created with one comparator is</comment>
  <comment type="line">// accessed using a different comparator.</comment>
  <comment type="line">//</comment>
  <comment type="line">// The client of this package should switch to a new name whenever</comment>
  <comment type="line">// the comparator implementation changes in a way that will cause</comment>
  <comment type="line">// the relative ordering of any two keys to change.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Names starting with "leveldb." are reserved and should not be used</comment>
  <comment type="line">// by any clients of this package.</comment>
  <expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>Name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Advanced functions: these are used to reduce the space requirements</comment>
  <comment type="line">// for internal data structures like index blocks.</comment>

  <comment type="line">// If *start &lt; limit, changes *start to a short string in [start,limit).</comment>
  <comment type="line">// Simple comparator implementations may return with *start unchanged,</comment>
  <comment type="line">// i.e., an implementation of this method that does nothing is correct.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>FindShortestSeparator</name><argument_list>(
      <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>start</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>limit</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Changes *key to a short string &gt;= *key.</comment>
  <comment type="line">// Simple comparator implementations may return with *key unchanged,</comment>
  <comment type="line">// i.e., an implementation of this method that does nothing is correct.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>FindShortSuccessor</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>key</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Return a builtin comparator that uses lexicographic byte-wise</comment>
<comment type="line">// ordering.  The result remains the property of this module and</comment>
<comment type="line">// must not be deleted.</comment>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>Comparator</name><modifier>*</modifier></type> <name>BytewiseComparator</name><parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_</comment>
</unit>
