<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/threadinterrupt.h"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_THREADINTERRUPT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_THREADINTERRUPT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;condition_variable&gt;</cpp:file></cpp:include>

<comment type="block">/*
    A helper class for interruptible sleeps. Calling operator() will interrupt
    any current sleep, and after that point operator bool() will return true
    until reset.
*/</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CThreadInterrupt</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>CThreadInterrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><name>void</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>bool</name></type> <name>sleep_for</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name> <name>rel_time</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>sleep_for</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name> <name>rel_time</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>sleep_for</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>minutes</name> <name>rel_time</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>condition_variable</name> <name>cond</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Mutex</name></type> <name>mut</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//BITCOIN_THREADINTERRUPT_H</comment>
</unit>
