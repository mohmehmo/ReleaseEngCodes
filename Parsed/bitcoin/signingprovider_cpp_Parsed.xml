<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/script/signingprovider.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/keyorigin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>DUMMY_SIGNING_PROVIDER</name> <init>= <expr><call><name>SigningProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>M</name></parameter>, <parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>LookupHelper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>M</name><modifier>&amp;</modifier></type> <name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>V</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>HidingSigningProvider</name><operator>::</operator><name>GetCScript</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScriptID</name><modifier>&amp;</modifier></type> <name>scriptid</name></decl></parameter>, <parameter><decl><type><name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>m_provider</name><operator>-&gt;</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>scriptid</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>HidingSigningProvider</name><operator>::</operator><name>GetPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyid</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>m_provider</name><operator>-&gt;</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>HidingSigningProvider</name><operator>::</operator><name>GetKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyid</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>m_hide_secret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>m_provider</name><operator>-&gt;</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>HidingSigningProvider</name><operator>::</operator><name>GetKeyOrigin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyid</name></decl></parameter>, <parameter><decl><type><name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>m_hide_origin</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>m_provider</name><operator>-&gt;</operator><name>GetKeyOrigin</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FlatSigningProvider</name><operator>::</operator><name>GetCScript</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScriptID</name><modifier>&amp;</modifier></type> <name>scriptid</name></decl></parameter>, <parameter><decl><type><name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>LookupHelper</name><argument_list>(<argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>scriptid</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>FlatSigningProvider</name><operator>::</operator><name>GetPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyid</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>LookupHelper</name><argument_list>(<argument><expr><name>pubkeys</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>FlatSigningProvider</name><operator>::</operator><name>GetKeyOrigin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyid</name></decl></parameter>, <parameter><decl><type><name>KeyOriginInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>, <argument><expr><name>KeyOriginInfo</name></expr></argument>&gt;</argument_list></name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>LookupHelper</name><argument_list>(<argument><expr><name>origins</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>FlatSigningProvider</name><operator>::</operator><name>GetKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyid</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>LookupHelper</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>FlatSigningProvider</name></type> <name>Merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>scripts</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>scripts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>scripts</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>scripts</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>scripts</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>pubkeys</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>pubkeys</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pubkeys</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>pubkeys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>pubkeys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>keys</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>keys</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>keys</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>origins</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>origins</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>origins</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>origins</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>origins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>ImplicitlyLearnRelatedKeyScripts</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>key_id</name> <init>= <expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// This adds the redeemscripts necessary to detect P2WPKH and P2SH-P2WPKH</comment>
    <comment type="line">// outputs. Technically P2WPKH outputs don't have a redeemscript to be</comment>
    <comment type="line">// spent. However, our current IsMine logic requires the corresponding</comment>
    <comment type="line">// P2SH-P2WPKH redeemscript to be present in the wallet in order to accept</comment>
    <comment type="line">// payment even to P2WPKH outputs.</comment>
    <comment type="line">// Also note that having superfluous scripts in the keystore never hurts.</comment>
    <comment type="line">// They're only used to guide recursion in signing and IsMine logic - if</comment>
    <comment type="line">// a script is present but we can't do anything with it, it has no effect.</comment>
    <comment type="line">// "Implicitly" refers to fact that scripts are derived automatically from</comment>
    <comment type="line">// existing keys, and are present in memory, even without being explicitly</comment>
    <comment type="line">// loaded (e.g. from a file).</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>pubkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>script</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// This does not use AddCScript, as it may be overridden.</comment>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>id</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mapScripts</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>GetPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name> <modifier>&amp;</modifier></type><name>vchPubKeyOut</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetKey</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>vchPubKeyOut</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>AddKeyPubKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name> <modifier>&amp;</modifier></type><name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapKeys</name><index>[<expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ImplicitlyLearnRelatedKeyScripts</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>HaveKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>mapKeys</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>GetKeys</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CKeyID</name></expr></argument>&gt;</argument_list></name></type> <name>set_address</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>mi</name> <range>: <expr><name>mapKeys</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>set_address</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>mi</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>set_address</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>GetKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyID</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>CKey</name> <modifier>&amp;</modifier></type><name>keyOut</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>KeyMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>mi</name> <init>= <expr><call><name><name>mapKeys</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>mapKeys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>keyOut</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>AddCScript</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>redeemScript</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>redeemScript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_SCRIPT_ELEMENT_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"FillableSigningProvider::AddCScript(): redeemScripts &gt; %i bytes are invalid"</literal></expr></argument>, <argument><expr><name>MAX_SCRIPT_ELEMENT_SIZE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapScripts</name><index>[<expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>redeemScript</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>HaveCScript</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScriptID</name><modifier>&amp;</modifier></type> <name>hash</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>mapScripts</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CScriptID</name></expr></argument>&gt;</argument_list></name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>GetCScripts</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CScriptID</name></expr></argument>&gt;</argument_list></name></type> <name>set_script</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>mi</name> <range>: <expr><name>mapScripts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>set_script</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>mi</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>set_script</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>FillableSigningProvider</name><operator>::</operator><name>GetCScript</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScriptID</name> <modifier>&amp;</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>CScript</name><modifier>&amp;</modifier></type> <name>redeemScriptOut</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_KeyStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>ScriptMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>mi</name> <init>= <expr><call><name><name>mapScripts</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>mapScripts</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>redeemScriptOut</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>mi</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>CKeyID</name></type> <name>GetKeyForDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Only supports destinations which map to single public keys, i.e. P2PKH,</comment>
    <comment type="line">// P2WPKH, and P2SH-P2WPKH.</comment>
    <if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>id</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
        <return>return <expr><call><name>CKeyID</name><argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>witness_id</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0KeyHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
        <return>return <expr><call><name>CKeyID</name><argument_list>(<argument><expr><operator>*</operator><name>witness_id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>script_hash</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>script_id</name><argument_list>(<argument><expr><operator>*</operator><name>script_hash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>inner_dest</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>store</name><operator>.</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>script_id</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ExtractDestination</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>inner_dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>inner_witness_id</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0KeyHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>inner_dest</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
                <return>return <expr><call><name>CKeyID</name><argument_list>(<argument><expr><operator>*</operator><name>inner_witness_id</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>CKeyID</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
