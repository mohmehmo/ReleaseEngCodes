<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/filter_policy.h"><comment type="line">// Copyright (c) 2012 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// A database can be configured with a custom FilterPolicy object.</comment>
<comment type="line">// This object is responsible for creating a small filter from a set</comment>
<comment type="line">// of keys.  These filters are stored in leveldb and are consulted</comment>
<comment type="line">// automatically by leveldb to decide whether or not to read some</comment>
<comment type="line">// information from disk. In many cases, a filter can cut down the</comment>
<comment type="line">// number of disk seeks form a handful to a single disk seek per</comment>
<comment type="line">// DB::Get() call.</comment>
<comment type="line">//</comment>
<comment type="line">// Most people will want to use the builtin bloom filter support (see</comment>
<comment type="line">// NewBloomFilterPolicy() below).</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FilterPolicy</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>FilterPolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Return the name of this policy.  Note that if the filter encoding</comment>
  <comment type="line">// changes in an incompatible way, the name returned by this method</comment>
  <comment type="line">// must be changed.  Otherwise, old incompatible filters may be</comment>
  <comment type="line">// passed to methods of this type.</comment>
  <expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>Name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// keys[0,n-1] contains a list of keys (potentially with duplicates)</comment>
  <comment type="line">// that are ordered according to the user supplied comparator.</comment>
  <comment type="line">// Append a filter that summarizes keys[0,n-1] to *dst.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Warning: do not change the initial contents of *dst.  Instead,</comment>
  <comment type="line">// append the newly constructed filter to *dst.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>CreateFilter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>*</operator> <name>keys</name></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>)</argument_list>
      const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// "filter" contains the data appended by a preceding call to</comment>
  <comment type="line">// CreateFilter() on this class.  This method must return true if</comment>
  <comment type="line">// the key was in the list of keys passed to CreateFilter().</comment>
  <comment type="line">// This method may return true or false if the key was not on the</comment>
  <comment type="line">// list, but it should aim to return false with a high probability.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>KeyMayMatch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>filter</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Return a new filter policy that uses a bloom filter with approximately</comment>
<comment type="line">// the specified number of bits per key.  A good value for bits_per_key</comment>
<comment type="line">// is 10, which yields a filter with ~ 1% false positive rate.</comment>
<comment type="line">//</comment>
<comment type="line">// Callers must delete the result after any database that is using the</comment>
<comment type="line">// result has been closed.</comment>
<comment type="line">//</comment>
<comment type="line">// Note: if you are using a custom comparator that ignores some parts</comment>
<comment type="line">// of the keys being compared, you must not use NewBloomFilterPolicy()</comment>
<comment type="line">// and must provide your own FilterPolicy that also ignores the</comment>
<comment type="line">// corresponding parts of the keys.  For example, if the comparator</comment>
<comment type="line">// ignores trailing spaces, it would be incorrect to use a</comment>
<comment type="line">// FilterPolicy (like NewBloomFilterPolicy) that does not ignore</comment>
<comment type="line">// trailing spaces in keys.</comment>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>FilterPolicy</name><modifier>*</modifier></type> <name>NewBloomFilterPolicy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits_per_key</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_</comment>
</unit>
