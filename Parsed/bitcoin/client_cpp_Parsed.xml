<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/rpc/client.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<class>class <name>CRPCConvertParam</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>methodName</name></decl>;</decl_stmt> <comment type="line" format="doxygen">//!&lt; method whose params want conversion</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>paramIdx</name></decl>;</decl_stmt>           <comment type="line" format="doxygen">//!&lt; 0-based idx of param to convert</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>paramName</name></decl>;</decl_stmt>  <comment type="line" format="doxygen">//!&lt; parameter name</comment>
</public>}</block>;</class>

<comment type="line">// clang-format off</comment>
<comment type="block" format="doxygen">/**
 * Specify a (method, idx, name) here if the argument is a non-string RPC
 * argument and needs to be converted from JSON.
 *
 * @note Parameter indexes start from 0.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CRPCConvertParam</name></type> <name><name>vRPCConvertParams</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="string">"setmocktime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"timestamp"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"utxoupdatepsbt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"descriptors"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"generatetoaddress"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nblocks"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"generatetoaddress"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"maxtries"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"generatetodescriptor"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"num_blocks"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"generatetodescriptor"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"maxtries"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getnetworkhashps"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nblocks"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getnetworkhashps"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"height"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendtoaddress"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"amount"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendtoaddress"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"subtractfeefromamount"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendtoaddress"</literal></expr>, <expr><literal type="number">5</literal></expr> , <expr><literal type="string">"replaceable"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendtoaddress"</literal></expr>, <expr><literal type="number">6</literal></expr> , <expr><literal type="string">"conf_target"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendtoaddress"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"avoid_reuse"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"settxfee"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"amount"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sethdseed"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"newkeypool"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getreceivedbyaddress"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"minconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getreceivedbylabel"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"minconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listreceivedbyaddress"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"minconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listreceivedbyaddress"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"include_empty"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listreceivedbyaddress"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"include_watchonly"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listreceivedbylabel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"minconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listreceivedbylabel"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"include_empty"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listreceivedbylabel"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"include_watchonly"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getbalance"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"minconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getbalance"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"include_watchonly"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getbalance"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"avoid_reuse"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getblockhash"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"height"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"waitforblockheight"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"height"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"waitforblockheight"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"waitforblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"waitfornewblock"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"timeout"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listtransactions"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"count"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listtransactions"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"skip"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listtransactions"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"include_watchonly"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletpassphrase"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getblocktemplate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"template_request"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listsinceblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"target_confirmations"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listsinceblock"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"include_watchonly"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listsinceblock"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"include_removed"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendmany"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"amounts"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendmany"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"minconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendmany"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"subtractfeefrom"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendmany"</literal></expr>, <expr><literal type="number">5</literal></expr> , <expr><literal type="string">"replaceable"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendmany"</literal></expr>, <expr><literal type="number">6</literal></expr> , <expr><literal type="string">"conf_target"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"deriveaddresses"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"scantxoutset"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"scanobjects"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"addmultisigaddress"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nrequired"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"addmultisigaddress"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"keys"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createmultisig"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nrequired"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createmultisig"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"keys"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listunspent"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"minconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listunspent"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"maxconf"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listunspent"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"addresses"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listunspent"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"include_unsafe"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"listunspent"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"query_options"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"verbosity"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"verbose"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getblockheader"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"verbose"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getchaintxstats"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"nblocks"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"gettransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"include_watchonly"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"gettransaction"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"verbose"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getrawtransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"verbose"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createrawtransaction"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"inputs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createrawtransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"outputs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createrawtransaction"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"locktime"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createrawtransaction"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"replaceable"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"decoderawtransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"iswitness"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"signrawtransactionwithkey"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"privkeys"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"signrawtransactionwithkey"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"prevtxs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"signrawtransactionwithwallet"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"prevtxs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendrawtransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"allowhighfees"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sendrawtransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"maxfeerate"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"testmempoolaccept"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"rawtxs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"testmempoolaccept"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"allowhighfees"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"testmempoolaccept"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"maxfeerate"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"combinerawtransaction"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"txs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fundrawtransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"options"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fundrawtransaction"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"iswitness"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletcreatefundedpsbt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"inputs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletcreatefundedpsbt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"outputs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletcreatefundedpsbt"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"locktime"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletcreatefundedpsbt"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"options"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletcreatefundedpsbt"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"bip32derivs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletprocesspsbt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"sign"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"walletprocesspsbt"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"bip32derivs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createpsbt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"inputs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createpsbt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"outputs"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createpsbt"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"locktime"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"createpsbt"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"replaceable"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"combinepsbt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"txs"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"joinpsbts"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"txs"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"finalizepsbt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"extract"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"converttopsbt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"permitsigdata"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"converttopsbt"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"iswitness"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"gettxout"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"n"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"gettxout"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"include_mempool"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"gettxoutproof"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"txids"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"lockunspent"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"unlock"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"lockunspent"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"transactions"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"importprivkey"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"rescan"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"importaddress"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"rescan"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"importaddress"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"p2sh"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"importpubkey"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"rescan"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"importmulti"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"requests"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"importmulti"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"options"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"verifychain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"checklevel"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"verifychain"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"nblocks"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getblockstats"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"hash_or_height"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getblockstats"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"stats"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pruneblockchain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"height"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"keypoolrefill"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"newsize"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getrawmempool"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"verbose"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"estimatesmartfee"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"conf_target"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"estimaterawfee"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"conf_target"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"estimaterawfee"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"threshold"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"prioritisetransaction"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"dummy"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"prioritisetransaction"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"fee_delta"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"setban"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"bantime"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"setban"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"absolute"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"setnetworkactive"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"state"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"setwalletflag"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"value"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getmempoolancestors"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"verbose"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"getmempooldescendants"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"verbose"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bumpfee"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"options"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"logging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"include"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"logging"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"exclude"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"disconnectnode"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"nodeid"</literal></expr> }</block></expr>,
    <comment type="line">// Echo with conversion (For testing only)</comment>
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"arg0"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"arg1"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"arg2"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"arg3"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"arg4"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"arg5"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"arg6"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="string">"arg7"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"arg8"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"echojson"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="string">"arg9"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"rescanblockchain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"start_height"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"rescanblockchain"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"stop_height"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"createwallet"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"disable_private_keys"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"createwallet"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"blank"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"createwallet"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"avoid_reuse"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"getnodeaddresses"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"count"</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"wait"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<class>class <name>CRPCConvertTable</name>
<block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>members</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>membersByName</name></decl>;</decl_stmt>

</private><public>public:
    <constructor_decl><name>CRPCConvertTable</name><parameter_list>()</parameter_list>;</constructor_decl>

    <function><type><name>bool</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name><name>members</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name><name>membersByName</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<constructor><name><name>CRPCConvertTable</name><operator>::</operator><name>CRPCConvertTable</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>n_elem</name> <init>=
        <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>vRPCConvertParams</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>vRPCConvertParams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_elem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>members</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name><name>vRPCConvertParams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>methodName</name></expr></argument>,
                                      <argument><expr><name><name>vRPCConvertParams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paramIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>membersByName</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name><name>vRPCConvertParams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>methodName</name></expr></argument>,
                                            <argument><expr><name><name>vRPCConvertParams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>paramName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></constructor>

<decl_stmt><decl><type><specifier>static</specifier> <name>CRPCConvertTable</name></type> <name>rpcCvtTable</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)
 * as well as objects and arrays.
 */</comment>
<function><type><name>UniValue</name></type> <name>ParseNonRFCJSONValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>jVal</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>jVal</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call><operator>+</operator><name>strVal</name><operator>+</operator><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name><name>jVal</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>jVal</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"Error parsing JSON:"</literal></expr></argument>)</argument_list></call><operator>+</operator><name>strVal</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name><name>jVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>RPCConvertValues</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>strMethod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>strParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>params</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>strParams</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strVal</name> <init>= <expr><name><name>strParams</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rpcCvtTable</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>strMethod</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// insert string value directly</comment>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>strVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// parse string as JSON, insert bool/number/object/etc. value</comment>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><name>strVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>params</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>RPCConvertNamedValues</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>strMethod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>strParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>params</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>s</name><range>: <expr><name>strParams</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw<expr><operator>(</operator><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"No '=' in named argument '"</literal><operator>+</operator><name>s</name><operator>+</operator><literal type="string">"', this needs to be present for every argument (even if it is empty)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>value</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rpcCvtTable</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>strMethod</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// insert string value directly</comment>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// parse string as JSON, insert bool/number/object/etc. value</comment>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>params</name></expr>;</return>
</block_content>}</block></function>
</unit>
