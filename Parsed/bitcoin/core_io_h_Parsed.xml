<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/core_io.h"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CORE_IO_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CORE_IO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attributes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CBlockHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CScript</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CTransaction</name></decl>;</decl_stmt>
<struct_decl>struct <name>CMutableTransaction</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>uint256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UniValue</name></decl>;</decl_stmt>

<comment type="line">// core_read.cpp</comment>
<decl_stmt><decl><type><name>CScript</name></type> <name>ParseScript</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ScriptToAsmStr</name><argument_list>(<argument>const CScript&amp; script</argument>, <argument>const bool fAttemptSighashDecode = false</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>DecodeHexTx</name><argument_list>(<argument><expr><name>CMutableTransaction</name><operator>&amp;</operator> <name>tx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>hex_tx</name></expr></argument>, <argument><expr><name>bool</name> <name>try_no_witness</name> <operator>=</operator> <name>false</name></expr></argument>, <argument><expr><name>bool</name> <name>try_witness</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>DecodeHexBlk</name><argument_list>(<argument><expr><name>CBlock</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strHexBlk</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>DecodeHexBlockHeader</name><argument_list>(<argument><expr><name>CBlockHeader</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>hex_header</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Parse a hex string into 256 bits
 * @param[in] strHex a hex-formatted, 64-character string
 * @param[out] result the result of the parasing
 * @returns true if successful, false if not
 *
 * @see ParseHashV for an RPC-oriented version of this
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>ParseHashStr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strHex</name></expr></argument>, <argument><expr><name>uint256</name><operator>&amp;</operator> <name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <call><name>ParseHexUV</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>v</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>int</name></type> <name>ParseSighashString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>sighash</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// core_write.cpp</comment>
<function_decl><type><name>UniValue</name></type> <name>ValueFromAmount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>FormatScript</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>EncodeHexTx</name><argument_list>(<argument>const CTransaction&amp; tx</argument>, <argument>const int serializeFlags = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>SighashToStr</name><argument_list>(<argument>unsigned char sighash_type</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>ScriptPubKeyToUniv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fIncludeHex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ScriptToUniv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>TxToUniv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hashBlock</name></decl></parameter>, <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_hex</name> <init>= <expr><name>true</name></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serialize_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CORE_IO_H</comment>
</unit>
