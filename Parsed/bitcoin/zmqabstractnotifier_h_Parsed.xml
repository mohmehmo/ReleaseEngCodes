<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/zmq/zmqabstractnotifier.h"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqconfig.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CBlockIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CZMQAbstractNotifier</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>CZMQAbstractNotifier</name><modifier>*</modifier></type> (<modifier>*</modifier><name>CZMQNotifierFactory</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>CZMQAbstractNotifier</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_ZMQ_SNDHWM</name> <block>{<block_content><expr><literal type="number">1000</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><call><name>CZMQAbstractNotifier</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>psocket</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>outbound_message_high_water_mark</name><argument_list>(<argument>DEFAULT_ZMQ_SNDHWM</argument>)</argument_list></macro> <expr><block>{ }</block>
    <name>virtual</name> <operator>~</operator><call><name>CZMQAbstractNotifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <specifier>static</specifier> <name>CZMQAbstractNotifier</name><modifier>*</modifier></type> <name>Create</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>new</name> <call><name>T</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>type</name></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>SetType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>t</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>address</name></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>SetAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>a</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>address</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetOutboundMessageHighWaterMark</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>outbound_message_high_water_mark</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>void</name></type> <name>SetOutboundMessageHighWaterMark</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sndhwm</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sndhwm</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>outbound_message_high_water_mark</name> <operator>=</operator> <name>sndhwm</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pcontext</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>Shutdown</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>NotifyBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pindex</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>NotifyTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name> <modifier>&amp;</modifier></type><name>transaction</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>psocket</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>address</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>outbound_message_high_water_mark</name></decl>;</decl_stmt> <comment type="line">// aka SNDHWM</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_ZMQ_ZMQABSTRACTNOTIFIER_H</comment>
</unit>
