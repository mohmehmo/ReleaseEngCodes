<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/rpc/blockchain.h"><comment type="line">// Copyright (c) 2017-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_RPC_BLOCKCHAIN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_RPC_BLOCKCHAIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>RecursiveMutex</name></type> <name>cs_main</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CBlockIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CTxMemPool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UniValue</name></decl>;</decl_stmt>
<struct_decl>struct <name>NodeContext</name>;</struct_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NUM_GETBLOCKSTATS_PERCENTILES</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Get the difficulty of the net wrt to the given block index.
 *
 * @return A floating point number that is a multiple of the main net minimum
 * difficulty (4295032833 hashes).
 */</comment>
<function_decl><type><name>double</name></type> <name>GetDifficulty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>blockindex</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Callback for when block tip changed. */</comment>
<function_decl><type><name>void</name></type> <name>RPCNotifyBlockChange</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ibd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Block description to JSON */</comment>
<function_decl><type><name>UniValue</name></type> <name>blockToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>blockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>txDetails</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> LOCKS_EXCLUDED<parameter_list>(<parameter><decl><type><name>cs_main</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Mempool information to JSON */</comment>
<function_decl><type><name>UniValue</name></type> <name>MempoolInfoToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxMemPool</name><modifier>&amp;</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Mempool to JSON */</comment>
<function_decl><type><name>UniValue</name></type> <name>MempoolToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxMemPool</name><modifier>&amp;</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Block header to JSON */</comment>
<function_decl><type><name>UniValue</name></type> <name>blockheaderToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>blockindex</name></decl></parameter>)</parameter_list> LOCKS_EXCLUDED<parameter_list>(<parameter><decl><type><name>cs_main</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Used by getblockstats to get feerates at different percentiles by weight  */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>CalculatePercentilesByWeight</name><argument_list>(<argument><expr><name>CAmount</name> <name><name>result</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>scores</name></expr></argument>, <argument><expr><name>int64_t</name> <name>total_weight</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! Pointer to node state that needs to be declared as a global to be accessible</comment>
<comment type="line" format="doxygen">//! RPC methods. Due to limitations of the RPC framework, there's currently no</comment>
<comment type="line" format="doxygen">//! direct way to pass in state to RPC methods without globals.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>NodeContext</name><modifier>*</modifier></type> <name>g_rpc_node</name></decl>;</decl_stmt>

<function_decl><type><name>CTxMemPool</name><modifier>&amp;</modifier></type> <name>EnsureMemPool</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
