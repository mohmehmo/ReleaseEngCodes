<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/hash.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2014 Pieter Wuille                                   *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_HASH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_HASH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* In big endian */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>secp256k1_sha256</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_sha256_initialize</name><parameter_list>(<parameter><decl><type><name>secp256k1_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_sha256_write</name><parameter_list>(<parameter><decl><type><name>secp256k1_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_sha256_finalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out32</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>secp256k1_sha256</name></type> <name>inner</name></decl>, <name>outer</name>;</decl_stmt>
}</block></struct></type> <name>secp256k1_hmac_sha256</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_hmac_sha256_initialize</name><parameter_list>(<parameter><decl><type><name>secp256k1_hmac_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_hmac_sha256_write</name><parameter_list>(<parameter><decl><type><name>secp256k1_hmac_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_hmac_sha256_finalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_hmac_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out32</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>v</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retry</name></decl>;</decl_stmt>
}</block></struct></type> <name>secp256k1_rfc6979_hmac_sha256</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rfc6979_hmac_sha256_initialize</name><parameter_list>(<parameter><decl><type><name>secp256k1_rfc6979_hmac_sha256</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rfc6979_hmac_sha256_generate</name><parameter_list>(<parameter><decl><type><name>secp256k1_rfc6979_hmac_sha256</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rfc6979_hmac_sha256_finalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_rfc6979_hmac_sha256</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_HASH_H */</comment>
</unit>
