<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/paymentserver.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/paymentserver.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QByteArray&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDataStream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDateTime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDebug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFile&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFileOpenEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QHash&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLocalServer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLocalSocket&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStringList&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QUrlQuery&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>BITCOIN_IPC_CONNECT_TIMEOUT</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// milliseconds</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>QString</name></type> <name>BITCOIN_IPC_PREFIX</name><argument_list>(<argument><expr><literal type="string">"bitcoin:"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">//</comment>
<comment type="line">// Create a name that is unique for:</comment>
<comment type="line">//  testnet / non-testnet</comment>
<comment type="line">//  data directory</comment>
<comment type="line">//</comment>
<function><type><specifier>static</specifier> <name>QString</name></type> <name>ipcServerName</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>name</name><argument_list>(<argument><expr><literal type="string">"BitcoinQt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Append a simple hash of the datadir</comment>
    <comment type="line">// Note that GetDataDir(true) returns a different path</comment>
    <comment type="line">// for -testnet versus main net</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>ddir</name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>boostPathToQString</name></name><argument_list>(<argument><expr><call><name>GetDataDir</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name>qHash</name><argument_list>(<argument><expr><name>ddir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">// We store payment URIs and requests received before</comment>
<comment type="line">// the main GUI window is up and ready to ask the user</comment>
<comment type="line">// to send payment.</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>QSet</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>&gt;</argument_list></name></type> <name>savedPaymentRequests</name></decl>;</decl_stmt>

<comment type="line">//</comment>
<comment type="line">// Sending to the server is done synchronously, at startup.</comment>
<comment type="line">// If the server isn't already running, startup continues,</comment>
<comment type="line">// and the items in savedPaymentRequest will be handled</comment>
<comment type="line">// when uiReady() is called.</comment>
<comment type="line">//</comment>
<comment type="line">// Warning: ipcSendCommandLine() is called early in init,</comment>
<comment type="line">// so don't use "Q_EMIT message()", but "QMessageBox::"!</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name><name>PaymentServer</name><operator>::</operator><name>ipcParseCommandLine</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>arg</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>arg</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// If the bitcoin: URI contains a payment request, we are not able to detect the</comment>
        <comment type="line">// network as that would require fetching and parsing the payment request.</comment>
        <comment type="line">// That means clicking such an URI which contains a testnet payment request</comment>
        <comment type="line">// will start a mainnet instance and throw a "wrong network" error.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>arg</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>BITCOIN_IPC_PREFIX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>CaseInsensitive</name></name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="line">// bitcoin: URI</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>savedPaymentRequests</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>savedPaymentRequests</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>SendCoinsRecipient</name></type> <name>r</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>GUIUtil</name><operator>::</operator><name>parseBitcoinURI</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>r</name><operator>.</operator><name>address</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>auto</name></type> <name>tempChainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>IsValidDestinationString</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>tempChainParams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>selectParams</name></name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>tempChainParams</name> <operator>=</operator> <call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>IsValidDestinationString</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>tempChainParams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>selectParams</name></name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">// Sending to the server is done synchronously, at startup.</comment>
<comment type="line">// If the server isn't already running, startup continues,</comment>
<comment type="line">// and the items in savedPaymentRequest will be handled</comment>
<comment type="line">// when uiReady() is called.</comment>
<comment type="line">//</comment>
<function><type><name>bool</name></type> <name><name>PaymentServer</name><operator>::</operator><name>ipcSendCommandLine</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>fResult</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>r</name> <range>: <expr><name>savedPaymentRequests</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QLocalSocket</name><modifier>*</modifier></type> <name>socket</name> <init>= <expr><operator>new</operator> <call><name>QLocalSocket</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>socket</name><operator>-&gt;</operator><name>connectToServer</name></name><argument_list>(<argument><expr><call><name>ipcServerName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>QIODevice</name><operator>::</operator><name>WriteOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>socket</name><operator>-&gt;</operator><name>waitForConnected</name></name><argument_list>(<argument><expr><name>BITCOIN_IPC_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>delete</operator> <name>socket</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>socket</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>QByteArray</name></type> <name>block</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QDataStream</name></type> <name>out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name><name>QIODevice</name><operator>::</operator><name>WriteOnly</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>QDataStream</name><operator>::</operator><name>Qt_4_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>device</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>seek</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>socket</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>socket</name><operator>-&gt;</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>socket</name><operator>-&gt;</operator><name>waitForBytesWritten</name></name><argument_list>(<argument><expr><name>BITCOIN_IPC_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>socket</name><operator>-&gt;</operator><name>disconnectFromServer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>delete</operator> <name>socket</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>socket</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>fResult</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>fResult</name></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>PaymentServer</name><operator>::</operator><name>PaymentServer</name></name><parameter_list>(<parameter><decl><type><name>QObject</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>startLocalServer</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>saveURIs</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>,
    <call><name>uriServer</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>optionsModel</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <comment type="line">// Install global event filter to catch QFileOpenEvents</comment>
    <comment type="line">// on Mac: sent when you click bitcoin: links</comment>
    <comment type="line">// other OSes: helpful when dealing with payment request files</comment>
    <if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>parent</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>name</name> <init>= <expr><call><name>ipcServerName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Clean up old socket leftover from a crash:</comment>
    <expr_stmt><expr><call><name><name>QLocalServer</name><operator>::</operator><name>removeServer</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>startLocalServer</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>uriServer</name> <operator>=</operator> <operator>new</operator> <call><name>QLocalServer</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>uriServer</name><operator>-&gt;</operator><name>listen</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// constructor is called early in init, so don't use "Q_EMIT message()" here</comment>
            <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Payment request error"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cannot start bitcoin: click-to-pay handler"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>uriServer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLocalServer</name><operator>::</operator><name>newConnection</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PaymentServer</name><operator>::</operator><name>handleURIConnection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>PaymentServer</name><operator>::</operator><name>~PaymentServer</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></destructor>

<comment type="line">//</comment>
<comment type="line">// OSX-specific way of handling bitcoin: URIs</comment>
<comment type="line">//</comment>
<function><type><name>bool</name></type> <name><name>PaymentServer</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>FileOpen</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QFileOpenEvent</name> <modifier>*</modifier></type><name>fileEvent</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QFileOpenEvent</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fileEvent</name><operator>-&gt;</operator><name>file</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>handleURIOrFile</name><argument_list>(<argument><expr><call><name><name>fileEvent</name><operator>-&gt;</operator><name>file</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>fileEvent</name><operator>-&gt;</operator><name>url</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>handleURIOrFile</name><argument_list>(<argument><expr><call><name><name>fileEvent</name><operator>-&gt;</operator><name>url</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>QObject</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>PaymentServer</name><operator>::</operator><name>uiReady</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>saveURIs</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>s</name> <range>: <expr><name>savedPaymentRequests</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>handleURIOrFile</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>savedPaymentRequests</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>PaymentServer</name><operator>::</operator><name>handleURIOrFile</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>saveURIs</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>savedPaymentRequests</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"bitcoin://"</literal></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>CaseInsensitive</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>message</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"URI handling"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"'bitcoin://' is not a valid URI. Use 'bitcoin:' instead."</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>BITCOIN_IPC_PREFIX</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>CaseInsensitive</name></name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="line">// bitcoin: URI</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QUrlQuery</name></type> <name>uri</name><argument_list>(<argument><expr><operator>(</operator><call><name>QUrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
        <comment type="line">// normal URI</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SendCoinsRecipient</name></type> <name>recipient</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>GUIUtil</name><operator>::</operator><name>parseBitcoinURI</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recipient</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestinationString</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>uri</name><operator>.</operator><name>hasQueryItem</name></name><argument_list>(<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// payment request</comment>
                        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>message</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"URI handling"</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cannot process payment request because BIP70 is not supported."</literal></expr></argument>)</argument_list></call><operator>+</operator>
                            <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored."</literal></expr></argument>)</argument_list></call><operator>+</operator>
                            <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"If you are receiving this error you should request the merchant provide a BIP21 compatible URI."</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>ICON_WARNING</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>message</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"URI handling"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Invalid payment address %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>recipient</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>receivedPaymentRequest</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></decl>;</decl_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>message</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"URI handling"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"URI cannot be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters."</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>ICON_WARNING</name></name></expr></argument>)</argument_list></decl>;</decl_stmt></block_content></block></else></if_stmt>

            <return>return;</return>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>QFile</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="line">// payment request file</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>message</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Payment request file handling"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cannot process payment request because BIP70 is not supported."</literal></expr></argument>)</argument_list></call><operator>+</operator>
            <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored."</literal></expr></argument>)</argument_list></call><operator>+</operator>
            <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"If you are receiving this error you should request the merchant provide a BIP21 compatible URI."</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>ICON_WARNING</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>PaymentServer</name><operator>::</operator><name>handleURIConnection</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QLocalSocket</name> <modifier>*</modifier></type><name>clientConnection</name> <init>= <expr><call><name><name>uriServer</name><operator>-&gt;</operator><name>nextPendingConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>clientConnection</name><operator>-&gt;</operator><name>bytesAvailable</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>quint32</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>clientConnection</name><operator>-&gt;</operator><name>waitForReadyRead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clientConnection</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLocalSocket</name><operator>::</operator><name>disconnected</name></name></expr></argument>, <argument><expr><name>clientConnection</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLocalSocket</name><operator>::</operator><name>deleteLater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QDataStream</name></type> <name>in</name><argument_list>(<argument><expr><name>clientConnection</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name><name>QDataStream</name><operator>::</operator><name>Qt_4_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>clientConnection</name><operator>-&gt;</operator><name>bytesAvailable</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>quint16</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>msg</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>msg</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>handleURIOrFile</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>PaymentServer</name><operator>::</operator><name>setOptionsModel</name></name><parameter_list>(<parameter><decl><type><name>OptionsModel</name> <modifier>*</modifier></type><name>_optionsModel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>optionsModel</name></name> <operator>=</operator> <name>_optionsModel</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
