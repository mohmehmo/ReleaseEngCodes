<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/amount_tests.cpp"><comment type="line">// Copyright (c) 2016-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>amount_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>MoneyRangeTest</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>MoneyRange</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>MoneyRange</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>MoneyRange</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>MoneyRange</name><argument_list>(<argument><expr><name>MAX_MONEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>MoneyRange</name><argument_list>(<argument><expr><name>MAX_MONEY</name> <operator>+</operator> <call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>GetFeeTest</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>feeRate</name></decl>, <decl><type ref="prev"/><name>altFeeRate</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Must always return 0</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">1e5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Must always just return the arg</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">121</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">121</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">1e3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1e3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">9e3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">9e3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Must always just return -1 * arg</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">121</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">121</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">1e3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1e3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">9e3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">9e3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Truncates the result, if not integer</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Special case: returns 1 instead of 0</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">121</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">122</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">122</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">1e3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">9e3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1107</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Truncates the result, if not integer</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Special case: returns -1 instead of 0</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// check alternate constructor</comment>
    <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>altFeeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><name>feeRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>altFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check full constructor</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// default value</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// lost precision (can only resolve satoshis per kB)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// some more integer checks</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">789</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">789</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Maximum size in bytes, should not crash</comment>
    <expr_stmt><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><name>MAX_MONEY</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>BinaryOperatorTest</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>==</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>&lt;=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>&lt;=</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>b</name> <operator>&gt;=</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>b</name> <operator>&gt;=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// a should be 0.00000002 BTC/kB now</comment>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>==</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ToStringTest</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>feeRate</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00000001 BTC/kB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
