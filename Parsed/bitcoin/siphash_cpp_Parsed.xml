<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/crypto/siphash.cpp"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/siphash.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)(((x) &lt;&lt; (b)) | ((x) &gt;&gt; (64 - (b))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIPROUND</name></cpp:macro> <cpp:value>do { \
    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \
    v0 = ROTL(v0, 32); \
    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \
    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \
    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \
    v2 = ROTL(v2, 32); \
} while (0)</cpp:value></cpp:define>

<constructor><name><name>CSipHasher</name><operator>::</operator><name>CSipHasher</name></name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x736f6d6570736575ULL</literal> <operator>^</operator> <name>k0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x646f72616e646f6dULL</literal> <operator>^</operator> <name>k1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6c7967656e657261ULL</literal> <operator>^</operator> <name>k0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7465646279746573ULL</literal> <operator>^</operator> <name>k1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>CSipHasher</name><modifier>&amp;</modifier></type> <name><name>CSipHasher</name><operator>::</operator><name>Write</name></name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v1</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v3</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>data</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CSipHasher</name><modifier>&amp;</modifier></type> <name><name>CSipHasher</name><operator>::</operator><name>Write</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v1</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v3</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name><name>CSipHasher</name><operator>::</operator><name>Finalize</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v1</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v3</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><name>tmp</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>count</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>^=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <return>return <expr><name>v0</name> <operator>^</operator> <name>v1</name> <operator>^</operator> <name>v2</name> <operator>^</operator> <name>v3</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>SipHashUint256</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Specialized implementation for efficiency */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>d</name> <init>= <expr><call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name> <init>= <expr><literal type="number">0x736f6d6570736575ULL</literal> <operator>^</operator> <name>k0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v1</name> <init>= <expr><literal type="number">0x646f72616e646f6dULL</literal> <operator>^</operator> <name>k1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v2</name> <init>= <expr><literal type="number">0x6c7967656e657261ULL</literal> <operator>^</operator> <name>k0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v3</name> <init>= <expr><literal type="number">0x7465646279746573ULL</literal> <operator>^</operator> <name>k1</name> <operator>^</operator> <name>d</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">59</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">59</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>^=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <return>return <expr><name>v0</name> <operator>^</operator> <name>v1</name> <operator>^</operator> <name>v2</name> <operator>^</operator> <name>v3</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>SipHashUint256Extra</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Specialized implementation for efficiency */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>d</name> <init>= <expr><call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name> <init>= <expr><literal type="number">0x736f6d6570736575ULL</literal> <operator>^</operator> <name>k0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v1</name> <init>= <expr><literal type="number">0x646f72616e646f6dULL</literal> <operator>^</operator> <name>k1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v2</name> <init>= <expr><literal type="number">0x6c7967656e657261ULL</literal> <operator>^</operator> <name>k0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v3</name> <init>= <expr><literal type="number">0x7465646279746573ULL</literal> <operator>^</operator> <name>k1</name> <operator>^</operator> <name>d</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>GetUint64</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">36</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>|</operator> <name>extra</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>^=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <return>return <expr><name>v0</name> <operator>^</operator> <name>v1</name> <operator>^</operator> <name>v2</name> <operator>^</operator> <name>v3</name></expr>;</return>
</block_content>}</block></function>
</unit>
