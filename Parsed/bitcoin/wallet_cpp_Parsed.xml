<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/interfaces/wallet.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/handler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/feebumper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/ismine.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/load.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/psbtwallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/rpcwallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<namespace>namespace <name>interfaces</name> <block>{
<namespace>namespace <block>{

<comment type="line" format="doxygen">//! Construct wallet tx struct.</comment>
<function><type><name>WalletTx</name></type> <name>MakeWalletTx</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletTx</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tx</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>tx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txin_is_mine</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>txin</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vin</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txin_is_mine</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>txin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txout_is_mine</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txout_address</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txout_address_is_mine</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txout_is_mine</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txout_address</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>txout_address_is_mine</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>txout_address</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then>
                                                      <expr><call><name><name>wallet</name><operator>.</operator><name>IsMine</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>txout_address</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
                                                      <expr><name>ISMINE_NO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>credit</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetCredit</name></name><argument_list>(<argument><expr><name>ISMINE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>debit</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetDebit</name></name><argument_list>(<argument><expr><name>ISMINE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>change</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetTxTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value_map</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>mapValue</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>is_coinbase</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Construct wallet tx status struct.</comment>
<function><type><name>WalletTxStatus</name></type> <name>MakeWalletTxStatus</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name><operator>::</operator><name>Lock</name></name><modifier>&amp;</modifier></type> <name>locked_chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WalletTxStatus</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>block_height</name></name> <operator>=</operator> <call><name><name>locked_chain</name><operator>.</operator><name>getBlockHeight</name></name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>m_confirm</name><operator>.</operator><name>hashBlock</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_value_or</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>blocks_to_maturity</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetBlocksToMaturity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>depth_in_main_chain</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>time_received</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>nTimeReceived</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>lock_time</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>nLockTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>is_final</name></name> <operator>=</operator> <call><name><name>locked_chain</name><operator>.</operator><name>checkFinalTx</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>is_trusted</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>IsTrusted</name></name><argument_list>(<argument><expr><name>locked_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>is_abandoned</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>isAbandoned</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>is_coinbase</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>is_in_main_chain</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>IsInMainChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Construct wallet TxOut struct.</comment>
<decl_stmt><decl><type><name>WalletTxOut</name></type> <name>MakeWalletTxOut</name><argument_list>(<argument><expr><name>CWallet</name><operator>&amp;</operator> <name>wallet</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>CWalletTx</name><operator>&amp;</operator> <name>wtx</name></expr></argument>,
    <argument><expr><name>int</name> <name>n</name></expr></argument>,
    <argument><expr><name>int</name> <name>depth</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>WalletTxOut</name> <name>result</name></expr></argument>;
    <argument><expr><name><name>result</name><operator>.</operator><name>txout</name></name> <operator>=</operator> <name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>;
    <argument><expr><name><name>result</name><operator>.</operator><name>time</name></name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetTxTime</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>result</name><operator>.</operator><name>depth_in_main_chain</name></name> <operator>=</operator> <name>depth</name></expr></argument>;
    <argument><expr><name><name>result</name><operator>.</operator><name>is_spent</name></name> <operator>=</operator> <call><name><name>wallet</name><operator>.</operator><name>IsSpent</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>;
    return <argument><expr><name>result</name></expr></argument>;
}</argument_list>

<name>class</name> <name>WalletImpl</name> <range>: <expr><specifier>public</specifier> <macro><name>Wallet</name></macro>
<block>{
<expr><specifier>public</specifier><operator>:</operator>
    <specifier>explicit</specifier> <call><name>WalletImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>wallet</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_wallet</name><argument_list>(<argument>wallet</argument>)</argument_list></macro> <block>{}</block>

    <name>bool</name> <call><name>encryptWallet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SecureString</name><operator>&amp;</operator> <name>wallet_passphrase</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>EncryptWallet</name></name><argument_list>(<argument><expr><name>wallet_passphrase</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <call><name>isCrypted</name><argument_list>()</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
    <name>bool</name> <call><name>lock</name><argument_list>()</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
    <name>bool</name> <call><name>unlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SecureString</name><operator>&amp;</operator> <name>wallet_passphrase</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>Unlock</name></name><argument_list>(<argument><expr><name>wallet_passphrase</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
    <name>bool</name> <call><name>isLocked</name><argument_list>()</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsLocked</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
    <name>bool</name> <call><name>changeWalletPassphrase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SecureString</name><operator>&amp;</operator> <name>old_wallet_passphrase</name></expr></argument>,
        <argument><expr><specifier>const</specifier> <name>SecureString</name><operator>&amp;</operator> <name>new_wallet_passphrase</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>ChangeWalletPassphrase</name></name><argument_list>(<argument><expr><name>old_wallet_passphrase</name></expr></argument>, <argument><expr><name>new_wallet_passphrase</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>void</name> <call><name>abortRescan</name><argument_list>()</argument_list></call> <macro><name>override</name></macro> <block>{ <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>AbortRescan</name></name><argument_list>()</argument_list></call></expr>; }</block>
    <name>bool</name> <call><name>backupWallet</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>filename</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>BackupWallet</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
    <name><name>std</name><operator>::</operator><name>string</name></name> <call><name>getWalletName</name><argument_list>()</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
    <name>bool</name> <macro><name>getNewDestination</name><argument_list>(<argument>const OutputType type</argument>, <argument>const std::string label</argument>, <argument>CTxDestination&amp; dest</argument>)</argument_list></macro> <macro><name>override</name></macro>
    <block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>std</name><operator>::</operator><name>string</name></name> <name>error</name></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetNewDestination</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <call><name>getPubKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>script</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CKeyID</name><operator>&amp;</operator> <name>address</name></expr></argument>, <argument><expr><name>CPubKey</name><operator>&amp;</operator> <name>pub_key</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><specifier>const</specifier> <name>SigningProvider</name><operator>*</operator> <name>provider</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><name>provider</name></expr>)</condition> <expr_stmt><expr><block>{
            <return>return <expr><call><name><name>provider</name><operator>-&gt;</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>pub_key</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></expr></expr_stmt></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block>
    <name>bool</name> <call><name>getPrivKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>script</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CKeyID</name><operator>&amp;</operator> <name>address</name></expr></argument>, <argument><expr><name>CKey</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><specifier>const</specifier> <name>SigningProvider</name><operator>*</operator> <name>provider</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><name>provider</name></expr>)</condition> <expr_stmt><expr><block>{
            <return>return <expr><call><name><name>provider</name><operator>-&gt;</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></expr></expr_stmt></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block>
    <name>bool</name> <call><name>isSpendable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ISMINE_SPENDABLE</name></expr>;</return> }</block>
    <name>bool</name> <call><name>haveWatchOnly</name><argument_list>()</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>spk_man</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><name>spk_man</name></expr>)</condition> <expr_stmt><expr><block>{
            <return>return <expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>HaveWatchOnly</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></expr></expr_stmt></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></expr>;
    <expr><name>bool</name> <call><name>setAddressBook</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>purpose</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>SetAddressBook</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <call><name>delAddressBook</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>DelAddressBook</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <call><name>getAddress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>,
        <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name><operator>*</operator> <name>name</name></expr></argument>,
        <argument><expr><name>isminetype</name><operator>*</operator> <name>is_mine</name></expr></argument>,
        <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name><operator>*</operator> <name>purpose</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <expr_stmt><expr><block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></expr></expr_stmt></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <expr_stmt><expr><block>{
            <expr><operator>*</operator><name>name</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>name</name></name></expr>;
        }</block></expr></expr_stmt></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_mine</name></expr>)</condition> <expr_stmt><expr><block>{
            <expr><operator>*</operator><name>is_mine</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;
        }</block></expr></expr_stmt></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>purpose</name></expr>)</condition> <expr_stmt><expr><block>{
            <expr><operator>*</operator><name>purpose</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>purpose</name></name></expr>;
        }</block></expr></expr_stmt></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block>
    <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletAddress</name></expr></argument>&gt;</argument_list></name> <call><name>getAddresses</name><argument_list>()</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletAddress</name></expr></argument>&gt;</argument_list></name> <name>result</name></expr>;
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><name><name>m_wallet</name><operator>-&gt;</operator><name>mapAddressBook</name></name></expr></range></decl></init>)</control> <expr_stmt><expr><block>{
            <expr><call><name><name>result</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>second</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>second</name><operator>.</operator><name>purpose</name></name></expr></argument>)</argument_list></call></expr>;
        }</block></expr></expr_stmt></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block>
    <name>void</name> <macro><name>learnRelatedScripts</name><argument_list>(<argument>const CPubKey&amp; key</argument>, <argument>OutputType type</argument>)</argument_list></macro> <macro><name>override</name></macro> <block>{ <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>LearnRelatedScripts</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>; }</block>
    <name>bool</name> <call><name>addDestData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><name>WalletBatch</name> <call><name>batch</name><argument_list>{<argument><expr><macro><name>m_wallet</name></macro><operator>-&gt;</operator><macro><name>GetDatabase</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>AddDestData</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <call><name>eraseDestData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxDestination</name><operator>&amp;</operator> <name>dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><name>WalletBatch</name> <call><name>batch</name><argument_list>{<argument><expr><macro><name>m_wallet</name></macro><operator>-&gt;</operator><macro><name>GetDatabase</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>EraseDestData</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <call><name>getDestValues</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>prefix</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetDestValues</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>void</name> <call><name>lockCoin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>COutPoint</name><operator>&amp;</operator> <name>output</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>LockCoin</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>void</name> <call><name>unlockCoin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>COutPoint</name><operator>&amp;</operator> <name>output</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>UnlockCoin</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <call><name>isLockedCoin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>COutPoint</name><operator>&amp;</operator> <name>output</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsLockedCoin</name></name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>void</name> <call><name>listLockedCoins</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>outputs</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>ListLockedCoins</name></name><argument_list>(<argument><expr><name>outputs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>CTransactionRef</name> <macro><name>createTransaction</name><argument_list>(<argument>const std::vector&lt;CRecipient&gt;&amp; recipients</argument>,
        <argument>const CCoinControl&amp; coin_control</argument>,
        <argument>bool sign</argument>,
        <argument>int&amp; change_pos</argument>,
        <argument>CAmount&amp; fee</argument>,
        <argument>std::string&amp; fail_reason</argument>)</argument_list></macro> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><name>CTransactionRef</name> <name>tx</name></expr>;
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_wallet</name><operator>-&gt;</operator><name>CreateTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>recipients</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>fee</name></expr></argument>, <argument><expr><name>change_pos</name></expr></argument>,
                <argument><expr><name>fail_reason</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><block>{
            <return>return <expr><block>{}</block></expr>;</return>
        }</block></expr></expr_stmt></if></if_stmt>
        <return>return <expr><name>tx</name></expr>;</return>
    }</block>
    <name>void</name> <macro><name>commitTransaction</name><argument_list>(<argument>CTransactionRef tx</argument>,
        <argument>WalletValueMap value_map</argument>,
        <argument>WalletOrderForm order_form</argument>)</argument_list></macro> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>CommitTransaction</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>value_map</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>order_form</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>
    <name>bool</name> <call><name>transactionCanBeAbandoned</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>TransactionCanBeAbandoned</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
    <name>bool</name> <call><name>abandonTransaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>AbandonTransaction</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <call><name>transactionCanBeBumped</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <return>return <expr><call><name><name>feebumper</name><operator>::</operator><name>TransactionCanBeBumped</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>m_wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
    <name>bool</name> <macro><name>createBumpTransaction</name><argument_list>(<argument>const uint256&amp; txid</argument>,
        <argument>const CCoinControl&amp; coin_control</argument>,
        <argument>CAmount total_fee</argument>,
        <argument>std::vector&lt;std::string&gt;&amp; errors</argument>,
        <argument>CAmount&amp; old_fee</argument>,
        <argument>CAmount&amp; new_fee</argument>,
        <argument>CMutableTransaction&amp; mtx</argument>)</argument_list></macro> <macro><name>override</name></macro>
    <block>{
        <if_stmt><if>if <condition>(<expr><name>total_fee</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <expr_stmt><expr><block>{
            <return>return <expr><call><name><name>feebumper</name><operator>::</operator><name>CreateTotalBumpTransaction</name></name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txid</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><name>total_fee</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>new_fee</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call> <operator>==</operator>
                <name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
        }</block></expr></expr_stmt></if> <else>else <expr_stmt><expr><block>{
            <return>return <expr><call><name><name>feebumper</name><operator>::</operator><name>CreateRateBumpTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>m_wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txid</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>new_fee</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call> <operator>==</operator>
                <name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
        }</block>
    }
    <name>bool</name> <call><name>signBumpTransaction</name><argument_list>(<argument><expr><name>CMutableTransaction</name><operator>&amp;</operator> <name>mtx</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro> <block>{ <return>return <expr><call><name><name>feebumper</name><operator>::</operator><name>SignTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>m_wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
    <name>bool</name> <call><name>commitBumpTransaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>,
        <argument><expr><name>CMutableTransaction</name><operator>&amp;&amp;</operator> <name>mtx</name></expr></argument>,
        <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>errors</name></expr></argument>,
        <argument><expr><name>uint256</name><operator>&amp;</operator> <name>bumped_txid</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <return>return <expr><call><name><name>feebumper</name><operator>::</operator><name>CommitTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>m_wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txid</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>bumped_txid</name></expr></argument>)</argument_list></call> <operator>==</operator>
               <name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
    }</block>
    <name>CTransactionRef</name> <call><name>getTx</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txid</name></expr></argument>)</argument_list></call> <macro><name>override</name></macro>
    <block>{
        <expr><name>auto</name> <name>locked_chain</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;
        <call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></else></if_stmt>
        <name>auto</name> <name>mi</name> <operator>=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></block></expr>;
        <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <expr_stmt><expr><block>{
            <return>return <expr><name><name>mi</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>tx</name></name></expr>;</return>
        }</block></expr></expr_stmt></if></if_stmt>
        <return>return <expr><block>{}</block></expr>;</return>
    }</block></expr></range></decl></decl_stmt>
    <function><type><name>WalletTx</name></type> <name>getWalletTx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>mi</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>MakeWalletTx</name><argument_list>(<argument><expr><operator>*</operator><name>m_wallet</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><block>{}</block></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletTx</name></expr></argument>&gt;</argument_list></name></type> <name>getWalletTxs</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletTx</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>MakeWalletTx</name><argument_list>(<argument><expr><operator>*</operator><name>m_wallet</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>tryGetTxStatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>,
        <parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>WalletTxStatus</name></name><modifier>&amp;</modifier></type> <name>tx_status</name></decl></parameter>,
        <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>num_blocks</name></decl></parameter>,
        <parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type> <name>block_time</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* try_lock */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked_chain</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>TRY_LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>, <argument><expr><name>locked_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked_wallet</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>mi</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>==</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>height</name> <init>= <expr><call><name><name>locked_chain</name><operator>-&gt;</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <operator>*</operator><name>height</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>block_time</name> <operator>=</operator> <call><name><name>locked_chain</name><operator>-&gt;</operator><name>getBlockTime</name></name><argument_list>(<argument><expr><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>block_time</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>tx_status</name> <operator>=</operator> <call><name>MakeWalletTxStatus</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>WalletTx</name></type> <name>getWalletTxDetails</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>,
        <parameter><decl><type><name>WalletTxStatus</name><modifier>&amp;</modifier></type> <name>tx_status</name></decl></parameter>,
        <parameter><decl><type><name>WalletOrderForm</name><modifier>&amp;</modifier></type> <name>order_form</name></decl></parameter>,
        <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>in_mempool</name></decl></parameter>,
        <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>num_blocks</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>mi</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <call><name><name>locked_chain</name><operator>-&gt;</operator><name>getHeight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get_value_or</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>in_mempool</name> <operator>=</operator> <call><name><name>mi</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>InMempool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>order_form</name> <operator>=</operator> <name><name>mi</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>vOrderForm</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>tx_status</name> <operator>=</operator> <call><name>MakeWalletTxStatus</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>MakeWalletTx</name><argument_list>(<argument><expr><operator>*</operator><name>m_wallet</name></expr></argument>, <argument><expr><name><name>mi</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><block>{}</block></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>TransactionError</name></type> <name>fillPSBT</name><parameter_list>(<parameter><decl><type><name>PartiallySignedTransaction</name><modifier>&amp;</modifier></type> <name>psbtx</name></decl></parameter>,
        <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>complete</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>sighash_type</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter> <comment type="block">/* SIGHASH_ALL */</comment>,
        <parameter><decl><type><name>bool</name></type> <name>sign</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>,
        <parameter><decl><type><name>bool</name></type> <name>bip32derivs</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>FillPSBT</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>psbtx</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>sighash_type</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>bip32derivs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>WalletBalances</name></type> <name>getBalances</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>bal</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetBalance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WalletBalances</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>balance</name></name> <operator>=</operator> <name><name>bal</name><operator>.</operator><name>m_mine_trusted</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>unconfirmed_balance</name></name> <operator>=</operator> <name><name>bal</name><operator>.</operator><name>m_mine_untrusted_pending</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>immature_balance</name></name> <operator>=</operator> <name><name>bal</name><operator>.</operator><name>m_mine_immature</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>have_watch_only</name></name> <operator>=</operator> <call><name>haveWatchOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>have_watch_only</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>watch_only_balance</name></name> <operator>=</operator> <name><name>bal</name><operator>.</operator><name>m_watchonly_trusted</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>unconfirmed_watch_only_balance</name></name> <operator>=</operator> <name><name>bal</name><operator>.</operator><name>m_watchonly_untrusted_pending</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>immature_watch_only_balance</name></name> <operator>=</operator> <name><name>bal</name><operator>.</operator><name>m_watchonly_immature</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>tryGetBalances</name><parameter_list>(<parameter><decl><type><name>WalletBalances</name><modifier>&amp;</modifier></type> <name>balances</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>num_blocks</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* try_lock */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked_chain</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>TRY_LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>, <argument><expr><name>locked_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked_wallet</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>balances</name> <operator>=</operator> <call><name>getBalances</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <call><name><name>locked_chain</name><operator>-&gt;</operator><name>getHeight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get_value_or</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>CAmount</name></type> <name>getBalance</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><name>m_mine_trusted</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>CAmount</name></type> <name>getAvailableBalance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetAvailableBalance</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>coin_control</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>isminetype</name></type> <name>txinIsMine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>txin</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>isminetype</name></type> <name>txoutIsMine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>CAmount</name></type> <name>getDebit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name></decl></parameter>, <parameter><decl><type><name>isminefilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetDebit</name></name><argument_list>(<argument><expr><name>txin</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>CAmount</name></type> <name>getCredit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>, <parameter><decl><type><name>isminefilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>GetCredit</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>CoinsList</name></type> <name>listCoins</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CoinsList</name></type> <name>result</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>ListCoins</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>group</name> <operator>=</operator> <name><name>result</name><index>[<expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>coin</name> <range>: <expr><name><name>entry</name><operator>.</operator><name>second</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>coin</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>coin</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>MakeWalletTxOut</name><argument_list>(<argument><expr><operator>*</operator><name>m_wallet</name></expr></argument>, <argument><expr><operator>*</operator><name><name>coin</name><operator>.</operator><name>tx</name></name></expr></argument>, <argument><expr><name><name>coin</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>coin</name><operator>.</operator><name>nDepth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletTxOut</name></expr></argument>&gt;</argument_list></name></type> <name>getCoins</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>outputs</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletTxOut</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>output</name> <range>: <expr><name>outputs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>m_wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>=</operator> <call><name>MakeWalletTxOut</name><argument_list>(<argument><expr><operator>*</operator><name>m_wallet</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>CAmount</name></type> <name>getRequiredFee</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tx_bytes</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>GetRequiredFee</name><argument_list>(<argument><expr><operator>*</operator><name>m_wallet</name></expr></argument>, <argument><expr><name>tx_bytes</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>CAmount</name></type> <name>getMinimumFee</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tx_bytes</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>,
        <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>returned_target</name></decl></parameter>,
        <parameter><decl><type><name>FeeReason</name><modifier>*</modifier></type> <name>reason</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FeeCalculation</name></type> <name>fee_calc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetMinimumFee</name><argument_list>(<argument><expr><operator>*</operator><name>m_wallet</name></expr></argument>, <argument><expr><name>tx_bytes</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fee_calc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>returned_target</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>returned_target</name> <operator>=</operator> <name><name>fee_calc</name><operator>.</operator><name>returnedTarget</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>reason</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>reason</name> <operator>=</operator> <name><name>fee_calc</name><operator>.</operator><name>reason</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>unsigned</name> <name>int</name></type> <name>getConfirmTarget</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><name>m_wallet</name><operator>-&gt;</operator><name>m_confirm_target</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>hdEnabled</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsHDEnabled</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>canGetAddresses</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>CanGetAddresses</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>IsWalletFlagSet</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>flag</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>OutputType</name></type> <name>getDefaultAddressType</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><name>m_wallet</name><operator>-&gt;</operator><name>m_default_address_type</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>OutputType</name></type> <name>getDefaultChangeType</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><name>m_wallet</name><operator>-&gt;</operator><name>m_default_change_type</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>CAmount</name></type> <name>getDefaultMaxTxFee</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name><name>m_wallet</name><operator>-&gt;</operator><name>m_default_max_tx_fee</name></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name>RemoveWallet</name><argument_list>(<argument><expr><name>m_wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleUnload</name><parameter_list>(<parameter><decl><type><name>UnloadFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>NotifyUnload</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleShowProgress</name><parameter_list>(<parameter><decl><type><name>ShowProgressFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>ShowProgress</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleStatusChanged</name><parameter_list>(<parameter><decl><type><name>StatusChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>NotifyStatusChanged</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>fn</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleAddressBookChanged</name><parameter_list>(<parameter><decl><type><name>AddressBookChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>NotifyAddressBookChanged</name><operator>.</operator><name>connect</name></name><argument_list>(
            <argument><expr><lambda><capture>[<argument><name>fn</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_mine</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>purpose</name></decl></parameter>, <parameter><decl><type><name>ChangeType</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>is_mine</name></expr></argument>, <argument><expr><name>purpose</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleTransactionChanged</name><parameter_list>(<parameter><decl><type><name>TransactionChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>NotifyTransactionChanged</name><operator>.</operator><name>connect</name></name><argument_list>(
            <argument><expr><lambda><capture>[<argument><name>fn</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>, <parameter><decl><type><name>ChangeType</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleWatchOnlyChanged</name><parameter_list>(<parameter><decl><type><name>WatchOnlyChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>NotifyWatchonlyChanged</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>handleCanGetAddressesChanged</name><parameter_list>(<parameter><decl><type><name>CanGetAddressesChangedFn</name></type> <name>fn</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>MakeHandler</name><argument_list>(<argument><expr><call><name><name>m_wallet</name><operator>-&gt;</operator><name>NotifyCanGetAddressesChanged</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>m_wallet</name></decl>;</decl_stmt>
}</block></namespace><empty_stmt>;</empty_stmt>

<class>class <name>WalletClientImpl</name> <super_list>: <super><specifier>public</specifier> <name>ChainClient</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <constructor><name>WalletClientImpl</name><parameter_list>(<parameter><decl><type><name>Chain</name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>wallet_filenames</name></decl></parameter>)</parameter_list>
        <member_init_list>: <call><name>m_chain</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call>, <call><name>m_wallet_filenames</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet_filenames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    </member_init_list><block>{<block_content>
    </block_content>}</block></constructor>
    <function><type><name>void</name></type> <name>registerRpcs</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><name>g_rpc_chain</name> <operator>=</operator> <operator>&amp;</operator><name>m_chain</name></expr>;</expr_stmt>
        <return>return <expr><call><name>RegisterWalletRPCCommands</name><argument_list>(<argument><expr><name>m_chain</name></expr></argument>, <argument><expr><name>m_rpc_handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>verify</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>VerifyWallets</name><argument_list>(<argument><expr><name>m_chain</name></expr></argument>, <argument><expr><name>m_wallet_filenames</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>load</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>LoadWallets</name><argument_list>(<argument><expr><name>m_chain</name></expr></argument>, <argument><expr><name>m_wallet_filenames</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>CScheduler</name><modifier>&amp;</modifier></type> <name>scheduler</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>StartWallets</name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>FlushWallets</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <return>return <expr><call><name>StopWallets</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <destructor><name>~WalletClientImpl</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name>UnloadWallets</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></destructor>

    <decl_stmt><decl><type><name>Chain</name><modifier>&amp;</modifier></type> <name>m_chain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>m_wallet_filenames</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>m_rpc_handlers</name></decl>;</decl_stmt>
</public>}</block>;</class>

}</block></namespace> <comment type="line">// namespace</comment>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name></type> <name>MakeWallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>wallet</name></expr> ?</condition><then> <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>WalletImpl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ChainClient</name></expr></argument>&gt;</argument_list></name></type> <name>MakeWalletClient</name><parameter_list>(<parameter><decl><type><name>Chain</name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>wallet_filenames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>WalletClientImpl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet_filenames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

} <comment type="line">// namespace interfaces</comment>
</unit>
