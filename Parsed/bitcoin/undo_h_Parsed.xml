<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/undo.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UNDO_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UNDO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compressor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Undo information for a CTxIn
 *
 *  Contains the prevout's CTxOut being spent, and its metadata as well
 *  (coinbase or not, height). The serialization contains a dummy value of
 *  zero. This is compatible with older versions which expect to see
 *  the transaction version there.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>TxInUndoSerializer</name>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Coin</name><modifier>*</modifier></type> <name>txout</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Serialize</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>s</name></expr></argument>)</argument_list> const <block>{<block_content>
        <expr_stmt><expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name><name>txout</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>txout</name><operator>-&gt;</operator><name>fCoinBase</name></name></expr> ?</condition><then> <expr><literal type="number">1u</literal></expr> </then><else>: <expr><literal type="number">0u</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>txout</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Required to maintain compatibility with older undo format.</comment>
            <expr_stmt><expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>CTxOutCompressor</name><argument_list>(<argument><expr><call><name>REF</name><argument_list>(<argument><expr><name><name>txout</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>TxInUndoSerializer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Coin</name><operator>*</operator> <name>coin</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>txout</name><argument_list>(<argument>coin</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TxInUndoDeserializer</name>
<block>{<block_content>
    <decl_stmt><decl><type><name>Coin</name><modifier>*</modifier></type> <name>txout</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Unserialize</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name>nCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txout</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>=</operator> <name>nCode</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txout</name><operator>-&gt;</operator><name>fCoinBase</name></name> <operator>=</operator> <name>nCode</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>txout</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Old versions stored the version number for the last spend of</comment>
            <comment type="line">// a transaction's outputs. Non-final spends were indicated with</comment>
            <comment type="line">// height = 0.</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nVersionDummy</name></decl>;</decl_stmt>
            <expr_stmt><expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name>nVersionDummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>CTxOutCompressor</name><argument_list>(<argument><expr><call><name>REF</name><argument_list>(<argument><expr><name><name>txout</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>TxInUndoDeserializer</name><argument_list>(<argument><expr><name>Coin</name><operator>*</operator> <name>coin</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>txout</name><argument_list>(<argument>coin</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>MIN_TRANSACTION_INPUT_WEIGHT</name> <init>= <expr><name>WITNESS_SCALE_FACTOR</name> <operator>*</operator> <operator>::</operator><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>CTxIn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>MAX_INPUTS_PER_BLOCK</name> <init>= <expr><name>MAX_BLOCK_WEIGHT</name> <operator>/</operator> <name>MIN_TRANSACTION_INPUT_WEIGHT</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Undo information for a CTransaction */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CTxUndo</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line">// undo information for all txins</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name> <name>vprevout</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Serialize</name><argument_list>(<argument><expr><name>Stream</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list> const <block>{<block_content>
        <comment type="line">// TODO: avoid reimplementing vector serializer</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><call><name><name>vprevout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><call><name>REF</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>prevout</name> <range>: <expr><name>vprevout</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>TxInUndoSerializer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Unserialize</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// TODO: avoid reimplementing vector deserializer</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>MAX_INPUTS_PER_BLOCK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Too many input undo records"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>vprevout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>prevout</name> <operator>:</operator> <name>vprevout</name></expr></init>)</control> <block>{<block_content>
            <expr_stmt><expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>TxInUndoDeserializer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Undo information for a CBlock */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CBlockUndo</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxUndo</name></expr></argument>&gt;</argument_list></name> <name>vtxundo</name></expr>;</expr_stmt> <comment type="line">// for all but the coinbase</comment>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>vtxundo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UNDO_H</comment>
</unit>
