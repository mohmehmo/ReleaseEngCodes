<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/crypto/aes.cpp"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/aes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/ctaes/ctaes.c&gt;</cpp:file></cpp:include>
</block_content>}</block></extern>

<constructor><name><name>AES256Encrypt</name><operator>::</operator><name>AES256Encrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AES256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>AES256Encrypt</name><operator>::</operator><name>~AES256Encrypt</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>AES256Encrypt</name><operator>::</operator><name>Encrypt</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ciphertext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>plaintext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>AES256_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>AES256Decrypt</name><operator>::</operator><name>AES256Decrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AES256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>AES256Decrypt</name><operator>::</operator><name>~AES256Decrypt</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>AES256Decrypt</name><operator>::</operator><name>Decrypt</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>plaintext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ciphertext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>AES256_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>int</name></type> <name>CBCEncrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><name>AES_BLOCKSIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pad</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>padsize</name> <init>= <expr><name>size</name> <operator>%</operator> <name>AES_BLOCKSIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mixed</name><index>[<expr><name>AES_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>size</name> <operator>||</operator> <operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pad</name> <operator>&amp;&amp;</operator> <name>padsize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mixed</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>AES_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write all but the last block</comment>
    <while>while <condition>(<expr><name>written</name> <operator>+</operator> <name>AES_BLOCKSIZE</name> <operator>&lt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>AES_BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>mixed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>enc</name><operator>.</operator><name>Encrypt</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>mixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mixed</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>AES_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>written</name> <operator>+=</operator> <name>AES_BLOCKSIZE</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// For all that remains, pad each byte with the value of the remaining</comment>
        <comment type="line">// space. If there is none, pad by a full block.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>padsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>mixed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>padsize</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>AES_BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>mixed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name>AES_BLOCKSIZE</name> <operator>-</operator> <name>padsize</name></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>enc</name><operator>.</operator><name>Encrypt</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>mixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>written</name> <operator>+=</operator> <name>AES_BLOCKSIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>int</name></type> <name>CBCDecrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><name>AES_BLOCKSIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pad</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fail</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><name>iv</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>size</name> <operator>||</operator> <operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <name>AES_BLOCKSIZE</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Decrypt all data. Padding will be checked in the output.</comment>
    <while>while <condition>(<expr><name>written</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dec</name><operator>.</operator><name>Decrypt</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>AES_BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>^=</operator> <name><name>prev</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>written</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>written</name> <operator>+=</operator> <name>AES_BLOCKSIZE</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// When decrypting padding, attempt to run in constant-time</comment>
    <if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// If used, padding size is the value of the last decrypted byte. For</comment>
        <comment type="line">// it to be valid, It must be between 1 and AES_BLOCKSIZE.</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>padsize</name> <init>= <expr><operator>*</operator><operator>--</operator><name>out</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fail</name> <operator>=</operator> <operator>!</operator><name>padsize</name> <operator>|</operator> <operator>(</operator><name>padsize</name> <operator>&gt;</operator> <name>AES_BLOCKSIZE</name><operator>)</operator></expr>;</expr_stmt>

        <comment type="line">// If not well-formed, treat it as though there's no padding.</comment>
        <expr_stmt><expr><name>padsize</name> <operator>*=</operator> <operator>!</operator><name>fail</name></expr>;</expr_stmt>

        <comment type="line">// All padding must equal the last byte otherwise it's not well-formed</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>AES_BLOCKSIZE</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fail</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;</operator> <name>AES_BLOCKSIZE</name> <operator>-</operator> <name>padsize</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>*</operator><name>out</name><operator>--</operator> <operator>!=</operator> <name>padsize</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><name>written</name> <operator>-=</operator> <name>padsize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>written</name> <operator>*</operator> <operator>!</operator><name>fail</name></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>AES256CBCEncrypt</name><operator>::</operator><name>AES256CBCEncrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>AES256_KEYSIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ivIn</name><index>[<expr><name>AES_BLOCKSIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>padIn</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>enc</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>, <call><name>pad</name><argument_list>(<argument><expr><name>padIn</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivIn</name></expr></argument>, <argument><expr><name>AES_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>int</name></type> <name><name>AES256CBCEncrypt</name><operator>::</operator><name>Encrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>CBCEncrypt</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<destructor><name><name>AES256CBCEncrypt</name><operator>::</operator><name>~AES256CBCEncrypt</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<constructor><name><name>AES256CBCDecrypt</name><operator>::</operator><name>AES256CBCDecrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>AES256_KEYSIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ivIn</name><index>[<expr><name>AES_BLOCKSIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>padIn</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>dec</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>, <call><name>pad</name><argument_list>(<argument><expr><name>padIn</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivIn</name></expr></argument>, <argument><expr><name>AES_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>


<function><type><name>int</name></type> <name><name>AES256CBCDecrypt</name><operator>::</operator><name>Decrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>CBCDecrypt</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<destructor><name><name>AES256CBCDecrypt</name><operator>::</operator><name>~AES256CBCDecrypt</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>
</unit>
