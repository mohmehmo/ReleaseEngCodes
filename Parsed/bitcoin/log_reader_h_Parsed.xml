<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/log_reader.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_LOG_READER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_LOG_READER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/log_format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/status.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SequentialFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>log</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Reader</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Interface for reporting errors.</comment>
  <decl_stmt><decl><type><name>class</name></type> <name>Reporter</name> <block>{<block_content>
   <label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Reporter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Some corruption was detected.  "size" is the approximate number</comment>
    <comment type="line">// of bytes dropped due to the corruption.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>Corruption</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Status</name><modifier>&amp;</modifier></type> <name>status</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <comment type="line">// Create a reader that will return log records from "*file".</comment>
  <comment type="line">// "*file" must remain live while this Reader is in use.</comment>
  <comment type="line">//</comment>
  <comment type="line">// If "reporter" is non-NULL, it is notified whenever some data is</comment>
  <comment type="line">// dropped due to a detected corruption.  "*reporter" must remain</comment>
  <comment type="line">// live while this Reader is in use.</comment>
  <comment type="line">//</comment>
  <comment type="line">// If "checksum" is true, verify checksums if available.</comment>
  <comment type="line">//</comment>
  <comment type="line">// The Reader will start reading at the first record located at physical</comment>
  <comment type="line">// position &gt;= initial_offset within the file.</comment>
  <macro><name>Reader</name><argument_list>(<argument>SequentialFile* file</argument>, <argument>Reporter* reporter</argument>, <argument>bool checksum</argument>,
         <argument>uint64_t initial_offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><operator>~</operator><call><name>Reader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Read the next record into *record.  Returns true if read</comment>
  <comment type="line">// successfully, false if we hit end of the input.  May use</comment>
  <comment type="line">// "*scratch" as temporary storage.  The contents filled in *record</comment>
  <comment type="line">// will only be valid until the next mutating operation on this</comment>
  <comment type="line">// reader or the next mutation to *scratch.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>ReadRecord</name><argument_list>(<argument><expr><name>Slice</name><operator>*</operator> <name>record</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>scratch</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Returns the physical offset of the last record returned by ReadRecord.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Undefined before the first call to ReadRecord.</comment>
  <function_decl><type><name>uint64_t</name></type> <name>LastRecordOffset</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>SequentialFile</name><modifier>*</modifier> <specifier>const</specifier></type> <name>file_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Reporter</name><modifier>*</modifier> <specifier>const</specifier></type> <name>reporter_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name> <specifier>const</specifier></type> <name>checksum_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>backing_store_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Slice</name></type> <name>buffer_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>eof_</name></decl>;</decl_stmt>   <comment type="line">// Last Read() indicated EOF by returning &lt; kBlockSize</comment>

  <comment type="line">// Offset of the last record returned by ReadRecord.</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>last_record_offset_</name></decl>;</decl_stmt>
  <comment type="line">// Offset of the first location past the end of buffer_.</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>end_of_buffer_offset_</name></decl>;</decl_stmt>

  <comment type="line">// Offset at which to start looking for the first record to return</comment>
  <decl_stmt><decl><type><name>uint64_t</name> <specifier>const</specifier></type> <name>initial_offset_</name></decl>;</decl_stmt>

  <comment type="line">// True if we are resynchronizing after a seek (initial_offset_ &gt; 0). In</comment>
  <comment type="line">// particular, a run of kMiddleType and kLastType records can be silently</comment>
  <comment type="line">// skipped in this mode</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>resyncing_</name></decl>;</decl_stmt>

  <comment type="line">// Extend record types with the following special values</comment>
  <enum>enum <block>{
    <decl><name>kEof</name> <init>= <expr><name>kMaxRecordType</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
    <comment type="line">// Returned whenever we find an invalid physical record.</comment>
    <comment type="line">// Currently there are three situations in which this happens:</comment>
    <comment type="line">// * The record has an invalid CRC (ReadPhysicalRecord reports a drop)</comment>
    <comment type="line">// * The record is a 0-length record (No drop is reported)</comment>
    <comment type="line">// * The record is below constructor's initial_offset (No drop is reported)</comment>
    <decl><name>kBadRecord</name> <init>= <expr><name>kMaxRecordType</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>
  }</block>;</enum>

  <comment type="line">// Skips all blocks that are completely before "initial_offset_".</comment>
  <comment type="line">//</comment>
  <comment type="line">// Returns true on success. Handles reporting.</comment>
  <function_decl><type><name>bool</name></type> <name>SkipToInitialBlock</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Return type, or one of the preceding special values</comment>
  <function_decl><type><name>unsigned</name> <name>int</name></type> <name>ReadPhysicalRecord</name><parameter_list>(<parameter><decl><type><name>Slice</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Reports dropped bytes to the reporter.</comment>
  <comment type="line">// buffer_ must be updated to remove the dropped bytes prior to invocation.</comment>
  <function_decl><type><name>void</name></type> <name>ReportCorruption</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>reason</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ReportDrop</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Status</name><modifier>&amp;</modifier></type> <name>reason</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>Reader</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Reader</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Reader</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace log</comment>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_LOG_READER_H_</comment>
</unit>
