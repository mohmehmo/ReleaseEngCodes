<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/compat/cpuid.h"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_COMPAT_CPUID_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_COMPAT_CPUID_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETCPUID</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cpuid.h&gt;</cpp:file></cpp:include>

<comment type="line">// We can't use cpuid.h's __get_cpuid as it does not support subleafs.</comment>
<function><type><name>void</name> <specifier>static</specifier> <specifier>inline</specifier></type> <name>GetCPUID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>leaf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>subleaf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>&amp;</modifier></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
    <expr_stmt><expr><call><name>__cpuid_count</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>subleaf</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <asm>__asm__ ("cpuid" : "=a"(a), "=b"(b), "=c"(c), "=d"(d) : "0"(leaf), "2"(subleaf));</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// defined(__x86_64__) || defined(__amd64__) || defined(__i386__)</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_COMPAT_CPUID_H</comment>
</unit>
