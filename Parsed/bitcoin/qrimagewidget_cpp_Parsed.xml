<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/qrimagewidget.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/qrimagewidget.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QClipboard&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDrag&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMenu&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMimeData&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMouseEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPainter&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include> <comment type="block">/* for USE_QRCODE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_QRCODE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qrencode.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<constructor><name><name>QRImageWidget</name><operator>::</operator><name>QRImageWidget</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list><member_init_list>:
    <call><name>QLabel</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>, <call><name>contextMenu</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><name>contextMenu</name> <operator>=</operator> <operator>new</operator> <call><name>QMenu</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>saveImageAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Save Image..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>saveImageAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QRImageWidget</name><operator>::</operator><name>saveImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>saveImageAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>copyImageAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Copy Image"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>copyImageAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QRImageWidget</name><operator>::</operator><name>copyImage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>copyImageAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>bool</name></type> <name><name>QRImageWidget</name><operator>::</operator><name>setQR</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_QRCODE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// limit length</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_URI_LENGTH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Resulting URI too long, try to reduce the text for label / message."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>QRcode</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><call><name>QRcode_encodeString</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>toUtf8</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>QR_ECLEVEL_L</name></expr></argument>, <argument><expr><name>QR_MODE_8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error encoding URI into QR Code."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>QImage</name></type> <name>qrImage</name> <init>= <expr><call><name>QImage</name><argument_list>(<argument><expr><name><name>code</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>QImage</name><operator>::</operator><name>Format_RGB32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>qrImage</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><literal type="number">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>code</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>code</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>code</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>qrImage</name><operator>.</operator><name>setPixel</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x0</literal></expr> </then><else>: <expr><literal type="number">0xffffff</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>QRcode_free</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QImage</name></type> <name>qrAddrImage</name> <init>= <expr><call><name>QImage</name><argument_list>(<argument><expr><name>QR_IMAGE_SIZE</name></expr></argument>, <argument><expr><name>QR_IMAGE_SIZE</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>text</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">20</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>QImage</name><operator>::</operator><name>Format_RGB32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>qrAddrImage</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><literal type="number">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QPainter</name></type> <name>painter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qrAddrImage</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>qrImage</name><operator>.</operator><name>scaled</name></name><argument_list>(<argument><expr><name>QR_IMAGE_SIZE</name></expr></argument>, <argument><expr><name>QR_IMAGE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>text</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QFont</name></type> <name>font</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>fixedPitchFont</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>font</name><operator>.</operator><name>setStyleStrategy</name></name><argument_list>(<argument><expr><name><name>QFont</name><operator>::</operator><name>NoAntialias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QRect</name></type> <name>paddedRect</name> <init>= <expr><call><name><name>qrAddrImage</name><operator>.</operator><name>rect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// calculate ideal font size</comment>
        <decl_stmt><decl><type><name>qreal</name></type> <name>font_size</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>calculateIdealFontSize</name></name><argument_list>(<argument><expr><call><name><name>paddedRect</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>font</name><operator>.</operator><name>setPointSizeF</name></name><argument_list>(<argument><expr><name>font_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paddedRect</name><operator>.</operator><name>setHeight</name></name><argument_list>(<argument><expr><name>QR_IMAGE_SIZE</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>paddedRect</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>AlignBottom</name></name><operator>|</operator><name><name>Qt</name><operator>::</operator><name>AlignCenter</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setPixmap</name><argument_list>(<argument><expr><call><name><name>QPixmap</name><operator>::</operator><name>fromImage</name></name><argument_list>(<argument><expr><name>qrAddrImage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"QR code support not available."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>QImage</name></type> <name><name>QRImageWidget</name><operator>::</operator><name>exportImage</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pixmap</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QImage</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>pixmap</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>toImage</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QRImageWidget</name><operator>::</operator><name>mousePressEvent</name></name><parameter_list>(<parameter><decl><type><name>QMouseEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>button</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>LeftButton</name></name> <operator>&amp;&amp;</operator> <call><name>pixmap</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>accept</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QMimeData</name> <modifier>*</modifier></type><name>mimeData</name> <init>= <expr><operator>new</operator> <name>QMimeData</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mimeData</name><operator>-&gt;</operator><name>setImageData</name></name><argument_list>(<argument><expr><call><name>exportImage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>QDrag</name> <modifier>*</modifier></type><name>drag</name> <init>= <expr><operator>new</operator> <call><name>QDrag</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>drag</name><operator>-&gt;</operator><name>setMimeData</name></name><argument_list>(<argument><expr><name>mimeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>drag</name><operator>-&gt;</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>QLabel</name><operator>::</operator><name>mousePressEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QRImageWidget</name><operator>::</operator><name>saveImage</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pixmap</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>fn</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>getSaveFileName</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save QR Code"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"PNG Image (*.png)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fn</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>exportImage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>save</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QRImageWidget</name><operator>::</operator><name>copyImage</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pixmap</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>clipboard</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setImage</name><argument_list>(<argument><expr><call><name>exportImage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QRImageWidget</name><operator>::</operator><name>contextMenuEvent</name></name><parameter_list>(<parameter><decl><type><name>QContextMenuEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pixmap</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>contextMenu</name><operator>-&gt;</operator><name>exec</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>-&gt;</operator><name>globalPos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
