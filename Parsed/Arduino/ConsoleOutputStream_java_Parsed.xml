<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/cc/arduino/ConsoleOutputStream.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Original version of this file courtesy of Rob Camick
 * &lt;p&gt;
 * https://tips4java.wordpress.com/2008/11/08/message-console/
 * &lt;p&gt;
 * About page at https://tips4java.wordpress.com/about/ says something
 * like MIT
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>EditorConsole</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>BadLocationException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleAttributeSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintStream</name></name>;</import>

<comment type="block">/*
 *  Class to intercept output from a PrintStream and add it to a Document.
 *  The output can optionally be redirected to a different PrintStream.
 *  The text displayed in the Document can be color coded to indicate
 *  the output source.
 */</comment>
<class><specifier>public</specifier> class <name>ConsoleOutputStream</name> <super_list><extends>extends <super><name>ByteArrayOutputStream</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>SimpleAttributeSet</name></type> <name>attributes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PrintStream</name></type> <name>printStream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>timer</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>EditorConsole</name></type> <name>editorConsole</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>newLinePrinted</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ConsoleOutputStream</name><parameter_list>(<parameter><decl><type><name>SimpleAttributeSet</name></type> <name>attributes</name></decl></parameter>, <parameter><decl><type><name>PrintStream</name></type> <name>printStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attributes</name></name> <operator>=</operator> <name>attributes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>printStream</name></name> <operator>=</operator> <name>printStream</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>newLinePrinted</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timer</name></name> <operator>=</operator> <operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>e</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>editorConsole</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>newLinePrinted</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>editorConsole</name><operator>.</operator><name>scrollDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>newLinePrinted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>setRepeats</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setAttibutes</name><parameter_list>(<parameter><decl><type><name>SimpleAttributeSet</name></type> <name>attributes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attributes</name></name> <operator>=</operator> <name>attributes</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentEditorConsole</name><parameter_list>(<parameter><decl><type><name>EditorConsole</name></type> <name>console</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editorConsole</name></name> <operator>=</operator> <name>console</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>printStream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printInConsole</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>printInConsole</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>newLinePrinted</name> <operator>=</operator> <name>newLinePrinted</name> <operator>||</operator> <call><name><name>text</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>editorConsole</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>editorConsole</name><operator>.</operator><name>insertString</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>ble</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">//ignore</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>timer</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>restart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
