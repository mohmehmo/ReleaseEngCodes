<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/test/processing/app/CommandLineTest.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2017 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fest</name><operator>.</operator><name>assertions</name><operator>.</operator><name>Assertions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>

<class><specifier>public</specifier> class <name>CommandLineTest</name> <block>{

  <decl_stmt><decl><type><name>File</name></type> <name>buildPath</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>File</name></type> <name>arduinoPath</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>findBuildPaths</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>buildPath</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>buildPath</name></expr></argument>, <argument><expr><literal type="string">"build"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>buildPath</name> <operator>=</operator> <call><name><name>buildPath</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>buildPath</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Could not determine build path"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"found buildpath: "</literal> <operator>+</operator> <name>buildPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isLinux</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>arduinoPath</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>buildPath</name></expr></argument>, <argument><expr><literal type="string">"build/linux/work/arduino"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isWindows</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>arduinoPath</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>buildPath</name></expr></argument>, <argument><expr><literal type="string">"build/windows/work/arduino.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>arduinoPath</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>buildPath</name></expr></argument>,
          <argument><expr><literal type="string">"build/macosx/work/Arduino.app/Contents/MacOS/Arduino"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>arduinoPath</name><operator>.</operator><name>canExecute</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Could not determine arduino location"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"found arduino: "</literal> <operator>+</operator> <name>arduinoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCommandLineBuildWithRelativePath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Runtime</name></type> <name>rt</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>wd</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>buildPath</name></expr></argument>, <argument><expr><literal type="string">"build/shared/examples/01.Basics/Blink/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Process</name></type> <name>pr</name> <init>= <expr><call><name><name>rt</name>
        <operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><name>arduinoPath</name> <operator>+</operator> <literal type="string">" --board arduino:avr:uno --verify Blink.ino"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
              <argument><expr><name>wd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pr</name><operator>.</operator><name>exitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCommandLinePreferencesSave</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Runtime</name></type> <name>rt</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>prefFile</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>createTempFile</name></name><argument_list>(<argument><expr><literal type="string">"test_pref"</literal></expr></argument>, <argument><expr><literal type="string">".txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>prefFile</name><operator>.</operator><name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Process</name></type> <name>pr</name> <init>= <expr><call><name><name>rt</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
        <expr><call><name><name>arduinoPath</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
        <expr><literal type="string">"--save-prefs"</literal></expr>,
        <expr><literal type="string">"--preferences-file"</literal></expr>, <expr><call><name><name>prefFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
        <expr><literal type="string">"--get-pref"</literal></expr>, <comment type="line">// avoids starting the GUI</comment>
    }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pr</name><operator>.</operator><name>exitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pr</name> <operator>=</operator> <call><name><name>rt</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
        <expr><call><name><name>arduinoPath</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
        <expr><literal type="string">"--pref"</literal></expr>, <expr><literal type="string">"test_pref=xxx"</literal></expr>,
        <expr><literal type="string">"--preferences-file"</literal></expr>, <expr><call><name><name>prefFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
    }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pr</name><operator>.</operator><name>exitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>prefs</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>prefFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><literal type="string">"preference should not be saved"</literal></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"test_pref"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pr</name> <operator>=</operator> <call><name><name>rt</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
        <expr><call><name><name>arduinoPath</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
        <expr><literal type="string">"--pref"</literal></expr>, <expr><literal type="string">"test_pref=xxx"</literal></expr>,
        <expr><literal type="string">"--preferences-file"</literal></expr>, <expr><call><name><name>prefFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
        <expr><literal type="string">"--save-prefs"</literal></expr>,
    }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pr</name><operator>.</operator><name>exitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>prefs</name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>prefFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"preference should be saved"</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"test_pref"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCommandLineVersion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Runtime</name></type> <name>rt</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Process</name></type> <name>pr</name> <init>= <expr><call><name><name>rt</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{
      <expr><call><name><name>arduinoPath</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
      <expr><literal type="string">"--version"</literal></expr>,
    }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>assertThat</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>exitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>as</name><argument_list>(<argument><expr><literal type="string">"Process will finish with exit code 0 in --version"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>isEqualTo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>assertThat</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>IOUtils</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><literal type="string">"Arduino: \\d+\\.\\d+\\.\\d+.*\r?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCommandLineMultipleAction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Runtime</name></type> <name>rt</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Process</name></type> <name>pr</name> <init>= <expr><call><name><name>rt</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{
      <expr><call><name><name>arduinoPath</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
      <expr><literal type="string">"--version"</literal></expr>,
      <expr><literal type="string">"--verify"</literal></expr>,
    }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>assertThat</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>exitValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>as</name><argument_list>(<argument><expr><literal type="string">"Multiple Action will be rejected"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>isEqualTo</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
