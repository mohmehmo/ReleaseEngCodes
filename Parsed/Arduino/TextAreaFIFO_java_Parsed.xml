<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/TextAreaFIFO.java"><comment type="block">/*
  Copyright (c) 2014 Paul Stoffregen &lt;paul@pjrc.com&gt;

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<comment type="line">// adapted from https://community.oracle.com/thread/1479784</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextArea</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>SwingUtilities</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>DocumentEvent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>DocumentListener</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>BadLocationException</name></name>;</import>

<class><specifier>public</specifier> class <name>TextAreaFIFO</name> <super_list><extends>extends <super><name>JTextArea</name></super></extends> <implements>implements <super><name>DocumentListener</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxChars</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>trimMaxChars</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>updateCount</name></decl>;</decl_stmt> <comment type="line">// limit how often we trim the document</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>doTrim</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TextAreaFIFO</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>maxChars</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>trimMaxChars</name> <operator>=</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>updateCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>doTrim</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getDocument</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addDocumentListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>insertUpdate</name><parameter_list>(<parameter><decl><type><name>DocumentEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>updateCount</name> <operator>&gt;</operator> <literal type="number">150</literal> <operator>&amp;&amp;</operator> <name>doTrim</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>updateCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>trimDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>removeUpdate</name><parameter_list>(<parameter><decl><type><name>DocumentEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>changedUpdate</name><parameter_list>(<parameter><decl><type><name>DocumentEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>trimDocument</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>getDocument</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLength</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>trimMaxChars</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>len</name> <operator>-</operator> <name>trimMaxChars</name></expr></init></decl>;</decl_stmt>
      <comment type="line">//System.out.println("trimDocument: remove " + n + " chars");</comment>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>getDocument</name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>ble</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>appendNoTrim</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>free</name> <init>= <expr><name>maxChars</name> <operator>-</operator> <call><name>getDocument</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLength</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>free</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>free</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>doTrim</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>appendTrim</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>doTrim</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
