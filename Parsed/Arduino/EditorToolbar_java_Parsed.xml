<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/EditorToolbar.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-09 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageIO</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>MouseInputListener</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>thizzer</name><operator>.</operator><name>jtouchbar</name><operator>.</operator><name>JTouchBar</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>thizzer</name><operator>.</operator><name>jtouchbar</name><operator>.</operator><name>item</name><operator>.</operator><name>TouchBarItem</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>thizzer</name><operator>.</operator><name>jtouchbar</name><operator>.</operator><name>item</name><operator>.</operator><name>view</name><operator>.</operator><name>TouchBarButton</name></name>;</import>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>VersionComparator</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>MouseEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowAdapter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>scale</name></name>;</import>

<comment type="block" format="javadoc">/**
 * run/stop/etc buttons for the ide
 */</comment>
<class><specifier>public</specifier> class <name>EditorToolbar</name> <super_list><extends>extends <super><name>JComponent</name></super></extends> <implements>implements <super><name>MouseInputListener</name></super>, <super><name>KeyEventDispatcher</name></super></implements></super_list> <block>{

  <comment type="block" format="javadoc">/**
   * Rollover titles for each button.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>title</name> <init>= <expr><block>{
    <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Verify"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Upload"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"New"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial Monitor"</literal></expr></argument>)</argument_list></call></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Titles for each button when the shift key is pressed.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>titleShift</name> <init>= <expr><block>{
    <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Verify"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Upload Using Programmer"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"New"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save As..."</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial Monitor"</literal></expr></argument>)</argument_list></call></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUTTON_COUNT</name> <init>= <expr><name><name>title</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Width of each toolbar button.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUTTON_WIDTH</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Height of each toolbar button.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUTTON_HEIGHT</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * The amount of space between groups of buttons on the toolbar.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUTTON_GAP</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Size of the button image being chopped up.
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUTTON_IMAGE_SIZE</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RUN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXPORT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NEW</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>OPEN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SAVE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SERIAL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INACTIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ROLLOVER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ACTIVE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Editor</name></type> <name>editor</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Image</name></type> <name>offscreen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>height</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Color</name></type> <name>bgcolor</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Image</name><index>[]</index><index>[]</index></name></type> <name>buttonImages</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>com</name><operator>.</operator><name>thizzer</name><operator>.</operator><name>jtouchbar</name><operator>.</operator><name>common</name><operator>.</operator><name>Image</name><index>[]</index><index>[]</index></name></type> <name>touchBarImages</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentRollover</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>JPopupMenu</name></type> <name>popup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JMenu</name></type> <name>menu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JTouchBar</name></type> <name>touchBar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>TouchBarButton</name><index>[]</index></name></type> <name>touchBarButtons</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>buttonCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>state</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>BUTTON_COUNT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Image</name><index>[]</index></name></type> <name>stateImage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>which</name></decl>;</decl_stmt> <comment type="line">// mapping indices to implementation</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>x1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>x2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>y1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>y2</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Font</name></type> <name>statusFont</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Color</name></type> <name>statusColor</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shiftPressed</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EditorToolbar</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>editor</name></decl></parameter>, <parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <name>editor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>menu</name></name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>buttonCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>which</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>BUTTON_COUNT</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">//which[buttonCount++] = NOTHING;</comment>
    <expr_stmt><expr><name><name>which</name><index>[<expr><name>buttonCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>RUN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>which</name><index>[<expr><name>buttonCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>EXPORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>which</name><index>[<expr><name>buttonCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NEW</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>which</name><index>[<expr><name>buttonCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>OPEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>which</name><index>[<expr><name>buttonCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>SAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>which</name><index>[<expr><name>buttonCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>SERIAL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>currentRollover</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>bgcolor</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"buttons.bgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>statusFont</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"buttons.status.font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>statusColor</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"buttons.status.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>VersionComparator</name><operator>.</operator><name>greaterThanOrEqual</name></name><argument_list>(<argument><expr><call><name><name>OSUtils</name><operator>.</operator><name>version</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"10.12"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>addWindowListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>WindowAdapter</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>windowActivated</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>touchBar</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>buildTouchBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name>touchBar</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          </block_content>}</block></if></if_stmt>               
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>addMouseListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addMouseMotionListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KeyboardFocusManager</name><operator>.</operator><name>getCurrentKeyboardFocusManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addKeyEventDispatcher</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>buildTouchBar</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>touchBarImages</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>loadTouchBarImages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>touchBar</name> <operator>=</operator> <operator>new</operator> <call><name>JTouchBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>touchBarButtons</name> <operator>=</operator> <operator>new</operator> <name><name>TouchBarButton</name><index>[<expr><name>BUTTON_COUNT</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>touchBar</name><operator>.</operator><name>setCustomizationIdentifier</name></name><argument_list>(<argument><expr><literal type="string">"Arduino"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUTTON_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>selection</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
      
      <comment type="line">// add spacers before NEW and SERIAL buttons</comment>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NEW</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>touchBar</name><operator>.</operator><name>addItem</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TouchBarItem</name><argument_list>(<argument><expr><name><name>TouchBarItem</name><operator>.</operator><name>NSTouchBarItemIdentifierFixedSpaceSmall</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>SERIAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>touchBar</name><operator>.</operator><name>addItem</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TouchBarItem</name><argument_list>(<argument><expr><name><name>TouchBarItem</name><operator>.</operator><name>NSTouchBarItemIdentifierFlexibleSpace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>touchBarButtons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TouchBarButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>touchBarButtons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setImage</name><argument_list>(<argument><expr><name><name>touchBarImages</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>ROLLOVER</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>touchBarButtons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
        <comment type="line">// Run event handler later to prevent hanging if a dialog needs to be open</comment>
        <expr_stmt><expr><call><name><name>EventQueue</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
          <function><annotation>@<name>Override</name></annotation>
          <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>handleSelectionPressed</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <decl_stmt><decl><type><name>TouchBarItem</name></type> <name>touchBarItem</name> <init>= <expr><operator>new</operator> <call><name>TouchBarItem</name><argument_list>(<argument><expr><name><name>title</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>touchBarButtons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>touchBarItem</name><operator>.</operator><name>setCustomizationLabel</name></name><argument_list>(<argument><expr><name><name>title</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name><name>touchBar</name><operator>.</operator><name>addItem</name></name><argument_list>(<argument><expr><name>touchBarItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>loadButtons</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Image</name></type> <name>allButtons</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>getThemeImage</name></name><argument_list>(<argument><expr><literal type="string">"buttons"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>,
                                           <argument><expr><name>BUTTON_IMAGE_SIZE</name> <operator>*</operator> <name>BUTTON_COUNT</name></expr></argument>,
                                           <argument><expr><name>BUTTON_IMAGE_SIZE</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buttonImages</name> <operator>=</operator> <operator>new</operator> <name><name>Image</name><index>[<expr><name>BUTTON_COUNT</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUTTON_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>state</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>state</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>createImage</name><argument_list>(<argument><expr><name>BUTTON_WIDTH</name></expr></argument>, <argument><expr><name>BUTTON_HEIGHT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics</name></type> <name>g</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>getGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>bgcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BUTTON_WIDTH</name></expr></argument>, <argument><expr><name>BUTTON_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>BUTTON_IMAGE_SIZE</name> <operator>-</operator> <name>BUTTON_WIDTH</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>allButtons</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>BUTTON_IMAGE_SIZE</name><operator>)</operator> <operator>-</operator> <name>offset</name></expr></argument>,
                    <argument><expr><operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>+</operator> <name>state</name><operator>)</operator> <operator>*</operator> <name>BUTTON_IMAGE_SIZE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buttonImages</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>loadTouchBarImages</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Image</name></type> <name>allButtonsRetina</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>getThemeImage</name></name><argument_list>(<argument><expr><literal type="string">"buttons"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>,
                                           <argument><expr><name>BUTTON_IMAGE_SIZE</name> <operator>*</operator> <name>BUTTON_COUNT</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
                                           <argument><expr><name>BUTTON_IMAGE_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>touchBarImages</name> <operator>=</operator> <operator>new</operator> <name><name>com</name><operator>.</operator><name>thizzer</name><operator>.</operator><name>jtouchbar</name><operator>.</operator><name>common</name><operator>.</operator><name>Image</name><index>[<expr><name>BUTTON_COUNT</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUTTON_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>state</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>state</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>BUTTON_WIDTH</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>BUTTON_HEIGHT</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, 
                                                <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics</name></type> <name>g</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>getGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>BUTTON_IMAGE_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>BUTTON_WIDTH</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>allButtonsRetina</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>BUTTON_IMAGE_SIZE</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>offset</name></expr></argument>,
                    <argument><expr><operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>+</operator> <name>state</name><operator>)</operator> <operator>*</operator> <name>BUTTON_IMAGE_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        
        <comment type="line">// convert the image to a PNG to display on the touch bar</comment>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>pngStream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>ImageIO</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="string">"PNG"</literal></expr></argument>, <argument><expr><name>pngStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>touchBarImages</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>thizzer</name><operator>.</operator><name>jtouchbar</name><operator>.</operator><name>common</name><operator>.</operator><name>Image</name></name><argument_list>(<argument><expr><call><name><name>pngStream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// ignore errors</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>paintComponent</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>screen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// this data is shared by all EditorToolbar instances</comment>
    <if_stmt><if>if <condition>(<expr><name>buttonImages</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>loadButtons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// this happens once per instance of EditorToolbar</comment>
    <if_stmt><if>if <condition>(<expr><name>stateImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>state</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>buttonCount</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>stateImage</name> <operator>=</operator> <operator>new</operator> <name><name>Image</name><index>[<expr><name>buttonCount</name></expr>]</index></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buttonCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>INACTIVE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>y2</name> <operator>=</operator> <name>BUTTON_HEIGHT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>buttonCount</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>buttonCount</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> <init>= <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>offscreen</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name><name>size</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name>width</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>size</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name>height</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>offscreen</name> <operator>=</operator> <call><name>createImage</name><argument_list>(<argument><expr><name><name>size</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>offsetX</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buttonCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>x1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>offsetX</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>BUTTON_GAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>x2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>x1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>BUTTON_WIDTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>offsetX</name> <operator>=</operator> <name><name>x2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// Serial button must be on the right</comment>
      <expr_stmt><expr><name><name>x1</name><index>[<expr><name>SERIAL</name></expr>]</index></name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>BUTTON_WIDTH</name> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>x2</name><index>[<expr><name>SERIAL</name></expr>]</index></name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>setupGraphics2D</name></name><argument_list>(<argument><expr><call><name><name>offscreen</name><operator>.</operator><name>getGraphics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>bgcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//getBackground());</comment>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buttonCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name><name>stateImage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>statusColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>statusFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
    // if i ever find the guy who wrote the java2d api, i will hurt him.
     * 
     * whereas I love the Java2D API. --jdf. lol.
     * 
    Graphics2D g2 = (Graphics2D) g;
    FontRenderContext frc = g2.getFontRenderContext();
    float statusW = (float) statusFont.getStringBounds(status, frc).getWidth();
    float statusX = (getSize().width - statusW) / 2;
    g2.drawString(status, statusX, statusY);
    */</comment>
    <if_stmt><if>if <condition>(<expr><name>currentRollover</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>statusY</name> <init>= <expr><operator>(</operator><name>BUTTON_HEIGHT</name> <operator>+</operator> <call><name><name>g</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAscent</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>status</name> <init>= <expr><ternary><condition><expr><name>shiftPressed</name></expr> ?</condition><then> <expr><name><name>titleShift</name><index>[<expr><name>currentRollover</name></expr>]</index></name></expr> </then><else>: <expr><name><name>title</name><index>[<expr><name>currentRollover</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>currentRollover</name> <operator>!=</operator> <name>SERIAL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>buttonCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>BUTTON_WIDTH</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>BUTTON_GAP</name></expr></argument>, <argument><expr><name>statusY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>statusX</name> <init>= <expr><name><name>x1</name><index>[<expr><name>SERIAL</name></expr>]</index></name> <operator>-</operator> <name>BUTTON_GAP</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>statusX</name> <operator>-=</operator> <call><name><name>g</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stringWidth</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>statusX</name></expr></argument>, <argument><expr><name>statusY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>screen</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>offscreen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>screen</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>screen</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseMoved</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// mouse events before paint();</comment>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>OPEN</name></expr>]</index></name> <operator>!=</operator> <name>INACTIVE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// avoid flicker, since there will probably be an update event</comment>
      <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name>OPEN</name></expr></argument>, <argument><expr><name>INACTIVE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>handleMouse</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseDragged</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>handleMouse</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>currentRollover</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name><name>x1</name><index>[<expr><name>currentRollover</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&gt;</operator> <name>y1</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>x</name> <operator>&lt;</operator> <name><name>x2</name><index>[<expr><name>currentRollover</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <name>y2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return;</return>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name>currentRollover</name></expr></argument>, <argument><expr><name>INACTIVE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentRollover</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sel</name> <init>= <expr><call><name>findSelection</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sel</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>sel</name></expr>]</index></name> <operator>!=</operator> <name>ACTIVE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><name>ROLLOVER</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>currentRollover</name> <operator>=</operator> <name>sel</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>int</name></type> <name>findSelection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// if app loads slowly and cursor is near the buttons</comment>
    <comment type="line">// when it comes up, the app may not have time to load</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buttonCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&gt;</operator> <name>y1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <name><name>x1</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>y</name> <operator>&lt;</operator> <name>y2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name><name>x2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">//System.out.println("sel is " + i);</comment>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>setState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newState</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateAfter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>state</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>newState</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stateImage</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name><name>buttonImages</name><index>[<expr><name><name>which</name><index>[<expr><name>slot</name></expr>]</index></name></expr>]</index><index>[<expr><name>newState</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>updateAfter</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>touchBarButtons</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> 
      <if_stmt><if>if <condition>(<expr><name>newState</name> <operator>==</operator> <name>INACTIVE</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// use ROLLOVER state when INACTIVE</comment>
        <expr_stmt><expr><name>newState</name> <operator>=</operator> <name>ROLLOVER</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>touchBarButtons</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><call><name>setImage</name><argument_list>(<argument><expr><name><name>touchBarImages</name><index>[<expr><name>slot</name></expr>]</index><index>[<expr><name>newState</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseEntered</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>handleMouse</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseExited</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// if the popup menu for is visible, don't register this,</comment>
    <comment type="line">// because the popup being set visible will fire a mouseExited() event</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>popup</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>popup</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>OPEN</name></expr>]</index></name> <operator>!=</operator> <name>INACTIVE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name>OPEN</name></expr></argument>, <argument><expr><name>INACTIVE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>handleMouse</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>mousePressed</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <comment type="line">// jdf</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sel</name> <init>= <expr><call><name>findSelection</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" format="doxygen">///if (sel == -1) return false;</comment>
    <if_stmt><if>if <condition>(<expr><name>sel</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>currentRollover</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>handleSelectionPressed</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>isShiftDown</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseClicked</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseReleased</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>handleSelectionPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sel</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>handleSelectionPressed</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>handleSelectionPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sel</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isShiftDown</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>sel</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>RUN</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>editor</name><operator>.</operator><name>avoidMultipleOperations</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>handleRun</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>editor</name><operator>.</operator><name>presentHandler</name></name></expr></argument>, <argument><expr><name><name>editor</name><operator>.</operator><name>runHandler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name><operator>.</operator><name>avoidMultipleOperations</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

<comment type="line">//      case STOP:</comment>
<comment type="line">//        editor.handleStop();</comment>
<comment type="line">//        break;</comment>
<comment type="line">//    </comment>
      <case>case <expr><name>OPEN</name></expr>:</case>
        <expr_stmt><expr><name>popup</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>getPopupMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name><name>EditorToolbar</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>NEW</name></expr>:</case>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>handleNew</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <break>break;</break>

      <case>case <expr><name>SAVE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>isShiftDown</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>handleSaveAs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>handleSave</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

      <case>case <expr><name>EXPORT</name></expr>:</case>
        <comment type="line">// launch a timeout timer which can reenable to upload button functionality an</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>editor</name><operator>.</operator><name>avoidMultipleOperations</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>handleExport</name></name><argument_list>(<argument><expr><name>isShiftDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><name>SERIAL</name></expr>:</case>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>handleSerial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Set a particular button to be active.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>buttonImages</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>ACTIVE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>activateRun</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>activate</name><argument_list>(<argument><expr><name>RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>activateSave</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>activate</name><argument_list>(<argument><expr><name>SAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>activateExport</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>activate</name><argument_list>(<argument><expr><name>EXPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Set a particular button to be active.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>deactivate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>buttonImages</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>INACTIVE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>deactivateRun</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>deactivate</name><argument_list>(<argument><expr><name>RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>deactivateSave</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>deactivate</name><argument_list>(<argument><expr><name>SAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>deactivateExport</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>deactivate</name><argument_list>(<argument><expr><name>EXPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getPreferredSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getMinimumSize</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMinimumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>BUTTON_COUNT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>BUTTON_WIDTH</name></expr></argument>, <argument><expr><name>BUTTON_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMaximumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BUTTON_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>dispatchKeyEvent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>shiftPressed</name> <operator>!=</operator> <call><name><name>e</name><operator>.</operator><name>isShiftDown</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>shiftPressed</name> <operator>=</operator> <operator>!</operator><name>shiftPressed</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Return false to continue processing this keyEvent</comment>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
