<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/helpers/Ticks.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<class><specifier>public</specifier> class <name>Ticks</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>tickCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>ticks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>tickMin</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>tickMax</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>tickStep</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Ticks</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tickCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>range</name> <init>= <expr><name>max</name> <operator>-</operator> <name>min</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>exp</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>log10</name></name><argument_list>(<argument><expr><name>range</name> <operator>/</operator> <operator>(</operator><name>tickCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>rawTickStep</name> <init>= <expr><operator>(</operator><name>range</name> <operator>/</operator> <operator>(</operator><name>tickCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>scale</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>double</name></type> <name>potentialStep</name> <range>: <expr><operator>new</operator> <name><name>double</name><index>[]</index></name><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.5</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>potentialStep</name> <operator>&lt;</operator> <name>rawTickStep</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>tickStep</name> <operator>=</operator> <name>potentialStep</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tickMin</name> <operator>=</operator> <name>tickStep</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><name>min</name> <operator>/</operator> <name>tickStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tickMax</name> <operator>=</operator> <name>tickMin</name> <operator>+</operator> <name>tickStep</name> <operator>*</operator> <operator>(</operator><name>tickCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tickMax</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>tickCount</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><operator>(</operator><name>tickMax</name> <operator>-</operator> <name>max</name><operator>)</operator> <operator>/</operator> <name>tickStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tickCount</name></name> <operator>=</operator> <name>tickCount</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ticks</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[<expr><name>tickCount</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tickCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>ticks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tickMin</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>tickStep</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>double</name></type> <name>getTick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>ticks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getTickCount</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>tickCount</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
