<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/Theme.java"><comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-06 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>MediaTracker</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Rectangle</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>RenderingHints</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>SystemColor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Toolkit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>font</name><operator>.</operator><name>TextAttribute</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Hashtable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipFile</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>StyleContext</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>Transcoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>PNGTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesHelper</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Storage class for theme settings. This was separated from the Preferences
 * class for 1.0 so that the coloring wouldn't conflict with previous releases
 * and to make way for future ability to customize.
 */</comment>
<class><specifier>public</specifier> class <name>Theme</name> <block>{
  
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>THEME_DIR</name> <init>= <expr><literal type="string">"theme/"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>THEME_FILE_NAME</name> <init>= <expr><literal type="string">"theme.txt"</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NAMESPACE_APP</name> <init>= <expr><literal type="string">"app:"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NAMESPACE_USER</name> <init>= <expr><literal type="string">"user:"</literal></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/**
   * A theme resource, this is returned instead of {@link File} so that we can
   * support zip-packaged resources as well as files in the file system
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Resource</name> <block>{
    
    <comment type="line">// Priority levels used to determine whether one resource should override</comment>
    <comment type="line">// another</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>PRIORITY_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>PRIORITY_USER_ZIP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>PRIORITY_USER_FILE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * Priority of this resource.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>priority</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * Resource name (original name of requested resource, relative path only).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * File if this resource represents a file, can be null. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * Zip theme if the resource is contained within a zipped theme 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ZippedTheme</name></type> <name>theme</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * Zip entry if this resource represents a zip entry, can be null.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ZipEntry</name></type> <name>zipEntry</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * URL of this resource regardless of type, theoretically shouldn't ever be
     * null though it might be if a particular resource path can't be
     * successfully transformed into a URL (eg. {@link Theme#getUrl} traps a
     * &lt;tt&gt;MalformedURLException&lt;/tt&gt;).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>URL</name></type> <name>url</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * If this resource supercedes a resource with a lower priority, this field
     * stores a reference to the superceded resource. This allows consumers to
     * traverse the resource hierarchy if required.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>parent</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * ctor for file resources
     */</comment>
    <constructor><name>Resource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <comment type="block" format="javadoc">/**
     * ctor for zip resources
     */</comment>
    <constructor><name>Resource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>ZippedTheme</name></type> <name>theme</name></decl></parameter>, <parameter><decl><type><name>ZipEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>theme</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>Resource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>ZippedTheme</name></type> <name>theme</name></decl></parameter>, <parameter><decl><type><name>ZipEntry</name></type> <name>zipEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>priority</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>theme</name></name> <operator>=</operator> <name>theme</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zipEntry</name></name> <operator>=</operator> <name>zipEntry</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><type><specifier>public</specifier> <name>Resource</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>parent</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getUrl</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>url</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPriority</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>priority</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUserDefined</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>priority</name></name> <operator>&gt;</operator> <name>PRIORITY_DEFAULT</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>zipEntry</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator>  <name><name>this</name><operator>.</operator><name>file</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>this</name><operator>.</operator><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>zipEntry</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>theme</name><operator>.</operator><name>getZip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInputStream</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>zipEntry</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>url</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>url</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      
      <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>Resource</name></type> <name>withParent</name><parameter_list>(<parameter><decl><type><name>Resource</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <comment type="block" format="javadoc">/**
   * Struct which keeps information about a discovered .zip theme file
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ZippedTheme</name> <block>{
    
    <comment type="block" format="javadoc">/**
     * Configuration key, this key consists of a "namespace" which determines
     * the root folder the theme was found in without actually storing the path
     * itself, followed by the file name. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>key</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * File containing the theme 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * Zip file handle for retrieving entries 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ZipFile</name></type> <name>zip</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Display name, defaulted to filename but can be read from metadata 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * Version number, plain text string read from metadata 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>version</name></decl>;</decl_stmt>
    
    <constructor><specifier>private</specifier> <name>ZippedTheme</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespace</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>ZipFile</name></type> <name>zip</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>namespace</name> <operator>+</operator> <call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zip</name></name> <operator>=</operator> <name>zip</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>key</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>file</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>ZipFile</name></type> <name>getZip</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>zip</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>this</name><operator>.</operator><name>version</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>description</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s %s (%s)"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>abbreviate</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Attempts to parse the supplied zip file as a theme file. This is largely
     * determined by the file being readable and containing a theme.txt entry.
     * Returns null if the file is unreadable or doesn't contain theme.txt 
     */</comment>
    <function><type><specifier>static</specifier> <name>ZippedTheme</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespace</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>ZipFile</name></type> <name>zip</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>zip</name> <operator>=</operator> <operator>new</operator> <call><name>ZipFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>themeTxtEntry</name> <init>= <expr><call><name><name>zip</name><operator>.</operator><name>getEntry</name></name><argument_list>(<argument><expr><name>THEME_FILE_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>themeTxtEntry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>version</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
          
          <decl_stmt><decl><type><name>ZipEntry</name></type> <name>themePropsEntry</name> <init>= <expr><call><name><name>zip</name><operator>.</operator><name>getEntry</name></name><argument_list>(<argument><expr><literal type="string">"theme.properties"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>themePropsEntry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Properties</name></type> <name>themeProperties</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>themeProperties</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name><name>zip</name><operator>.</operator><name>getInputStream</name></name><argument_list>(<argument><expr><name>themePropsEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>themeProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>themeProperties</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          
          <return>return <expr><operator>new</operator> <call><name>ZippedTheme</name><argument_list>(<argument><expr><name>namespace</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>zip</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error loading theme {0}: {1}"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
      
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
    
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Copy of the defaults in case the user mangles a preference.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>PreferencesMap</name></type> <name>defaults</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Table of attributes/values for the theme.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>PreferencesMap</name></type> <name>table</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/**
   * Available zipped themes 
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ZippedTheme</name></argument>&gt;</argument_list></name></type> <name>availableThemes</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/**
   * Zip file containing user-defined theme elements 
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <name>ZippedTheme</name></type> <name>zipTheme</name></decl>;</decl_stmt>
  
  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>zipTheme</name> <operator>=</operator> <call><name>openZipTheme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>loadFromResource</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>THEME_DIR</name> <operator>+</operator> <name>THEME_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showError</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not read color theme settings.\n"</literal>
                              <operator>+</operator> <literal type="string">"You'll need to reinstall Arduino."</literal></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <comment type="line">// other things that have to be set explicitly for the defaults</comment>
    <expr_stmt><expr><call><name>setColor</name><argument_list>(<argument><expr><literal type="string">"run.window.bgcolor"</literal></expr></argument>, <argument><expr><name><name>SystemColor</name><operator>.</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// clone the hash table</comment>
    <expr_stmt><expr><name>defaults</name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>ZippedTheme</name></type> <name>openZipTheme</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>refreshAvailableThemes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>selectedTheme</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"theme.file"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <synchronized>synchronized<init>(<expr><name>availableThemes</name></expr>)</init> <block>{<block_content>
      <return>return <expr><call><name><name>availableThemes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>selectedTheme</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>void</name></type> <name>refreshAvailableThemes</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ZippedTheme</name></argument>&gt;</argument_list></name></type> <name>discoveredThemes</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>refreshAvailableThemes</name><argument_list>(<argument><expr><name>discoveredThemes</name></expr></argument>, <argument><expr><name>NAMESPACE_APP</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>THEME_DIR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>refreshAvailableThemes</name><argument_list>(<argument><expr><name>discoveredThemes</name></expr></argument>, <argument><expr><name>NAMESPACE_USER</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>THEME_DIR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <synchronized>synchronized <init>(<expr><name>availableThemes</name></expr>)</init> <block>{<block_content>
      <expr_stmt><expr><call><name><name>availableThemes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>availableThemes</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>discoveredThemes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>void</name></type> <name>refreshAvailableThemes</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ZippedTheme</name></argument>&gt;</argument_list></name></type> <name>discoveredThemes</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>namespace</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>folder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><decl><type><name>File</name></type> <name>zipFile</name> <range>: <expr><call><name><name>folder</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>dir</name></decl></parameter>, <parameter><decl><name>name</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>name</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".zip"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr><name>ZippedTheme</name> <name>theme</name> <operator>=</operator> <call><name><name>ZippedTheme</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>namespace</name></expr></argument>, <argument><expr><name>zipFile</name></expr></argument>)</argument_list></call></expr>;
      <if_stmt><if>if <condition>(<expr><name>theme</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>discoveredThemes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>theme</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>theme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block_content></block></if></if_stmt>}</block></for>
    </block_content>}</block></function>
  }</block></class>
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ZippedTheme</name></argument>&gt;</argument_list></name></type> <name>getAvailablethemes</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>refreshAvailableThemes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableCollection</name></name><argument_list>(<argument><expr><call><name><name>availableThemes</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>table</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getDefault</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>defaults</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>table</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>getInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>getScale</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"gui.scale"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>scale</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemDPI</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <literal type="number">96</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>size</name> <operator>*</operator> <call><name>getScale</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">100</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Dimension</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>Dimension</name></type> <name>dim</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><call><name>scale</name><argument_list>(<argument><expr><name><name>dim</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>scale</name><argument_list>(<argument><expr><name><name>dim</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Font</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><call><name><name>font</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// size must be float to call the correct Font.deriveFont(float)</comment>
    <comment type="line">// method that is different from Font.deriveFont(int)!</comment>
    <decl_stmt><decl><type><name>Font</name></type> <name>scaled</name> <init>= <expr><call><name><name>font</name><operator>.</operator><name>deriveFont</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>scaled</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Rectangle</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rect</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Rectangle</name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name>Rectangle</name><argument_list>(<argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>res</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>scale</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>scale</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>scale</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>scale</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Color</name></type> <name>getColorCycleColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cycleSize</name> <init>= <expr><call><name>getInteger</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%02d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name> <operator>%</operator> <name>cycleSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>PreferencesHelper</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setColorCycleColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%02d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesHelper</name><operator>.</operator><name>putColor</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cycleSize</name> <init>= <expr><call><name>getInteger</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setInteger</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".size"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>cycleSize</name></expr> ?</condition><then> <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>cycleSize</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Color</name></type> <name>getColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesHelper</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PreferencesHelper</name><operator>.</operator><name>putColor</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Font</name></type> <name>getFont</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><call><name><name>PreferencesHelper</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getDefault</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>PreferencesHelper</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>font</name><operator>.</operator><name>deriveFont</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>scale</name><argument_list>(<argument><expr><call><name><name>font</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the default font for text areas.
   *
   * @return The default font.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>getDefaultFont</name><parameter_list>()</parameter_list> <block>{<block_content>

    <comment type="line">// Use StyleContext to get a composite font for better Asian language</comment>
    <comment type="line">// support; see Sun bug S282887.</comment>
    <decl_stmt><decl><type><name>StyleContext</name></type> <name>sc</name> <init>= <expr><call><name><name>StyleContext</name><operator>.</operator><name>getDefaultStyleContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Snow Leopard (1.6) uses Menlo as default monospaced font,</comment>
      <comment type="line">// pre-Snow Leopard used Monaco.</comment>
      <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>sc</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"Menlo"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">"Menlo"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>font</name><operator>.</operator><name>getFamily</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>sc</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"Monaco"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">"Monaco"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>font</name><operator>.</operator><name>getFamily</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Shouldn't happen</comment>
          <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>sc</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"Monospaced"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Consolas added in Vista, used by VS2010+.</comment>
      <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>sc</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"Consolas"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">"Consolas"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>font</name><operator>.</operator><name>getFamily</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>sc</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"Monospaced"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// System.out.println(font.getFamily() + ", " + font.getName());</comment>
    <return>return <expr><name>font</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getStyledFont</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name><name>split</name><index>[]</index></name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"editor."</literal> <operator>+</operator> <name>what</name> <operator>+</operator> <literal type="string">".style"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name><name>PreferencesHelper</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>style</name> <init>= <expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>bold</name> <init>= <expr><call><name><name>style</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"bold"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>italic</name> <init>= <expr><call><name><name>style</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"italic"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>underlined</name> <init>= <expr><call><name><name>style</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"underlined"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Font</name></type> <name>styledFont</name> <init>= <expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><call><name><name>font</name><operator>.</operator><name>getFamily</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><operator>(</operator><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>italic</name></expr> ?</condition><then> <expr><name><name>Font</name><operator>.</operator><name>ITALIC</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><call><name><name>font</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>underlined</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>TextAttribute</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>attr</name> <init>= <expr><operator>new</operator> <call><name><name>Hashtable</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>attr</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>TextAttribute</name><operator>.</operator><name>UNDERLINE</name></name></expr></argument>, <argument><expr><name><name>TextAttribute</name><operator>.</operator><name>UNDERLINE_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>styledFont</name> <operator>=</operator> <call><name><name>styledFont</name><operator>.</operator><name>deriveFont</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"color"</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><name>styledFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Return an Image object from inside the Processing lib folder.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Image</name></type> <name>getLibImage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>Component</name></type> <name>who</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
                                  <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Use vector image when available</comment>
    <decl_stmt><decl><type><name>Resource</name></type> <name>vectorFile</name> <init>= <expr><call><name>getThemeResource</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="string">".svg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>vectorFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>imageFromSVG</name><argument_list>(<argument><expr><call><name><name>vectorFile</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Failed to load "</literal> <operator>+</operator> <name>vectorFile</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Resource</name></type> <name>bitmapFile</name> <init>= <expr><call><name>getThemeResource</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="string">".png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="line">// Otherwise fall-back to PNG bitmaps, allowing user-defined bitmaps to</comment>
    <comment type="line">// override built-in svgs</comment>
    <if_stmt><if>if <condition>(<expr><name>image</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>bitmapFile</name><operator>.</operator><name>getPriority</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>vectorFile</name><operator>.</operator><name>getPriority</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Resource</name></type> <name>bitmap2xFile</name> <init>= <expr><call><name>getThemeResource</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="string">"@2x.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Resource</name></type> <name>imageFile</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>getScale</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">125</literal> <operator>&amp;&amp;</operator> <call><name><name>bitmap2xFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name><name>bitmapFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call><operator>)</operator>
          <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>bitmapFile</name><operator>.</operator><name>isUserDefined</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>bitmap2xFile</name><operator>.</operator><name>isUserDefined</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>imageFile</name> <operator>=</operator> <name>bitmap2xFile</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>imageFile</name> <operator>=</operator> <name>bitmapFile</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <decl_stmt><decl><type><name>Toolkit</name></type> <name>tk</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name><name>tk</name><operator>.</operator><name>getImage</name></name><argument_list>(<argument><expr><call><name><name>imageFile</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MediaTracker</name></type> <name>tracker</name> <init>= <expr><operator>new</operator> <call><name>MediaTracker</name><argument_list>(<argument><expr><name>who</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>tracker</name><operator>.</operator><name>addImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tracker</name><operator>.</operator><name>waitForAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>

    <if_stmt><if>if <condition>(<expr><call><name><name>image</name><operator>.</operator><name>getWidth</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>width</name> <operator>||</operator> <call><name><name>image</name><operator>.</operator><name>getHeight</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>height</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>image</name> <operator>=</operator> <call><name><name>image</name><operator>.</operator><name>getScaledInstance</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>Image</name><operator>.</operator><name>SCALE_SMOOTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>tracker</name><operator>.</operator><name>addImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tracker</name><operator>.</operator><name>waitForAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>image</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get an image associated with the current color theme.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Image</name></type> <name>getThemeImage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Component</name></type> <name>who</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
                                    <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getLibImage</name><argument_list>(<argument><expr><name>THEME_DIR</name> <operator>+</operator> <name>name</name></expr></argument>, <argument><expr><name>who</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Image</name></type> <name>imageFromSVG</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Transcoder</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>PNGTranscoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>addTranscodingHint</name></name><argument_list>(<argument><expr><name><name>PNGTranscoder</name><operator>.</operator><name>KEY_WIDTH</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>addTranscodingHint</name></name><argument_list>(<argument><expr><name><name>PNGTranscoder</name><operator>.</operator><name>KEY_HEIGHT</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TranscoderInput</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>TranscoderInput</name><argument_list>(<argument><expr><call><name><name>url</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>ostream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TranscoderOutput</name></type> <name>output</name> <init>= <expr><operator>new</operator> <call><name>TranscoderOutput</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>transcode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>imgData</name> <init>= <expr><call><name><name>ostream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createImage</name><argument_list>(<argument><expr><name>imgData</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Graphics2D</name></type> <name>setupGraphics2D</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>graphics</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>Graphics2D</name><operator>)</operator> <name>graphics</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.antialias"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setRenderingHint</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name><operator>.</operator><name>KEY_TEXT_ANTIALIASING</name></name></expr></argument>,
                         <argument><expr><name><name>RenderingHints</name><operator>.</operator><name>VALUE_TEXT_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>g</name></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Loads the supplied {@link PreferencesMap} from the specified resource,
   * recursively loading parent resources such that entries are loaded in order
   * of priority (lowest first).
   * 
   * @param map preference map to populate
   * @param name name of resource to load
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>PreferencesMap</name></type> <name>loadFromResource</name><parameter_list>(<parameter><decl><type><name>PreferencesMap</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>loadFromResource</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><call><name>getThemeResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>PreferencesMap</name></type> <name>loadFromResource</name><parameter_list>(<parameter><decl><type><name>PreferencesMap</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>Resource</name></type> <name>resource</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>resource</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>loadFromResource</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><call><name><name>resource</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name><name>resource</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>map</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param name
   * @return
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Resource</name></type> <name>getThemeResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>defaultfile</name> <init>= <expr><call><name>getDefaultFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Resource</name></type> <name>resource</name> <init>= <expr><operator>new</operator> <call><name>Resource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>PRIORITY_DEFAULT</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getUrl</name><argument_list>(<argument><expr><name>defaultfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>defaultfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>ZipEntry</name></type> <name>themeZipEntry</name> <init>= <expr><call><name>getThemeZipEntry</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>themeZipEntry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resource</name> <operator>=</operator> <operator>new</operator> <call><name>Resource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>PRIORITY_USER_ZIP</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getUrl</name><argument_list>(<argument><expr><name>themeZipEntry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zipTheme</name></expr></argument>, <argument><expr><name>themeZipEntry</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withParent</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <decl_stmt><decl><type><name>File</name></type> <name>themeFile</name> <init>= <expr><call><name>getThemeFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>themeFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resource</name> <operator>=</operator> <operator>new</operator> <call><name>Resource</name><argument_list>(<argument><expr><name><name>Resource</name><operator>.</operator><name>PRIORITY_USER_FILE</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getUrl</name><argument_list>(<argument><expr><name>themeFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>themeFile</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withParent</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>resource</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>File</name></type> <name>getThemeFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>sketchBookThemeFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>THEME_DIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>themeFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>sketchBookThemeFolder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>themeFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>themeFile</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>THEME_DIR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>themeFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>sketchBookThemeFolder</name></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>THEME_DIR</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>themeFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>themeFile</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>ZipEntry</name></type> <name>getThemeZipEntry</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>zipTheme</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>THEME_DIR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>THEME_DIR</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><call><name><name>zipTheme</name><operator>.</operator><name>getZip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEntry</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <specifier>private</specifier> <name>File</name></type> <name>getDefaultFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <name>URL</name></type> <name>getUrl</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>file</name><operator>.</operator><name>toURI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toURL</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
  
  <function><type><specifier>static</specifier> <name>URL</name></type> <name>getUrl</name><parameter_list>(<parameter><decl><type><name>ZipEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <comment type="line">// Adjust file name for URL format on Windows</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>zipFile</name> <init>= <expr><call><name><name>zipTheme</name><operator>.</operator><name>getZip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>zipFile</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>zipFile</name> <operator>=</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>zipFile</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <comment type="line">// Construct a URL which points to the internal resource</comment>
      <decl_stmt><decl><type><name>URI</name></type> <name>uri</name> <init>= <expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><literal type="string">"jar"</literal></expr></argument>, <argument><expr><literal type="string">"file:"</literal> <operator>+</operator> <name>zipFile</name> <operator>+</operator> <literal type="string">"!/"</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>uri</name><operator>.</operator><name>toURL</name></name><argument_list>()</argument_list></call></expr>;</return>
      
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> | <type><name>URISyntaxException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
}
</unit>
