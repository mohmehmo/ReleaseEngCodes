<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/packages/discoverers/serial/SerialDiscovery.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>discoverers</name><operator>.</operator><name>serial</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>BoardPort</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>Discovery</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetBoard</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>BoardCloudResolver</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>SerialDiscovery</name> <super_list><implements>implements <super><name>Discovery</name></super>, <super><name>Runnable</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>Timer</name></type> <name>serialBoardsListerTimer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>serialBoardPorts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>boardPorts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>oldPorts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>uploadInProgress</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>pausePolling</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>BoardPort</name></type> <name>oldUploadBoardPort</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BoardCloudResolver</name></type> <name>boardCloudResolver</name> <init>= <expr><operator>new</operator> <call><name>BoardCloudResolver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>listDiscoveredBoards</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>listDiscoveredBoards</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>listDiscoveredBoards</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>complete</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>serialBoardPorts</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>onlineBoardPorts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>BoardPort</name></type> <name>port</name> <range>: <expr><name>serialBoardPorts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>port</name><operator>.</operator><name>isOnline</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>onlineBoardPorts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <return>return <expr><name>onlineBoardPorts</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setSerialBoardPorts</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>newSerialBoardPorts</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>serialBoardPorts</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>serialBoardPorts</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>newSerialBoardPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setUploadInProgress</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>uploadInProgress</name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>pausePolling</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>pausePolling</name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>serialBoardsListerTimer</name> <operator>=</operator> <operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><call><name><name>SerialDiscovery</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>serialBoardsListerTimer</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>TimerTask</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>BaseNoGui</name><operator>.</operator><name>packages</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>pausePolling</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>forceRefresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>serialBoardsListerTimer</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>forceRefresh</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Platform</name></type> <name>platform</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>platform</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ports</name> <init>= <expr><call><name><name>platform</name><operator>.</operator><name>listSerials</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>ports</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>oldPorts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if (updating) {}</comment>
    <comment type="line">// a port will disappear, another will appear</comment>
    <comment type="line">// use this information to "merge" the boards</comment>
    <comment type="line">// updating must be signaled by SerialUpload class</comment>

    <expr_stmt><expr><call><name><name>oldPorts</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>oldPorts</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>ports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>BoardPort</name></type> <name>board</name> <range>: <expr><name>boardPorts</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>ports</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>board</name><operator>.</operator><name>isOnline</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>ports</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>ports</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>uploadInProgress</name> <operator>&amp;&amp;</operator> <call><name><name>board</name><operator>.</operator><name>isOnline</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>oldUploadBoardPort</name> <operator>=</operator> <name>board</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>board</name><operator>.</operator><name>setOnlineStatus</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>newPort</name> <range>: <expr><name>ports</name></expr></range></decl></init>)</control> <block>{<block_content>

      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>newPort</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>parts</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// something went horribly wrong</comment>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>parts</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// port name with _ in it (like CP2102 on OSX)</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>parts</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="string">"_"</literal> <operator>+</operator> <name><name>parts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>parts</name><index>[<expr><name><name>parts</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>parts</name><index>[<expr><name><name>parts</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>port</name> <init>= <expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>boardData</name> <init>= <expr><call><name><name>platform</name><operator>.</operator><name>resolveDeviceByVendorIdProductId</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>BaseNoGui</name><operator>.</operator><name>packages</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>BoardPort</name></type> <name>boardPort</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">// create new board or update existing</comment>
      <for>for <control>(<init><decl><type><name>BoardPort</name></type> <name>board</name> <range>: <expr><name>boardPorts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>board</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>newPort</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>boardPort</name> <operator>=</operator> <call><name><name>boardPorts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>boardPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>boardPort</name> <operator>=</operator> <operator>new</operator> <call><name>BoardPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>boardPorts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>setAddress</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>setProtocol</name></name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>setOnlineStatus</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><name>port</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>boardData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"vid"</literal></expr></argument>, <argument><expr><call><name><name>boardData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"vid"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name><name>boardData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>iserial</name> <init>= <expr><call><name><name>boardData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"iserial"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>iserial</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"iserial"</literal></expr></argument>, <argument><expr><name>iserial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>uploadInProgress</name> <operator>&amp;&amp;</operator> <name>oldUploadBoardPort</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>oldUploadBoardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"iserial"</literal></expr></argument>, <argument><expr><name>iserial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>TargetBoard</name></type> <name>board</name> <init>= <expr><operator>(</operator><name>TargetBoard</name><operator>)</operator> <call><name><name>boardData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>board</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>boardName</name> <init>= <expr><call><name><name>board</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>setBoardName</name></name><argument_list>(<argument><expr><name>boardName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"vid"</literal></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// ask Cloud API to match the board with known VID/PID pair</comment>
          <expr_stmt><expr><call><name><name>boardCloudResolver</name><operator>.</operator><name>getBoardBy</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"vid"</literal></expr></argument>, <argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"iserial"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name><name>boardPort</name><operator>.</operator><name>setLabel</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>setSerialBoardPorts</name><argument_list>(<argument><expr><name>boardPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
