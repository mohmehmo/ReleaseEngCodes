<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/net/PACSupportMethods.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>edazdarevic</name><operator>.</operator><name>commons</name><operator>.</operator><name>net</name><operator>.</operator><name>CIDRUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>net</name><operator>.</operator><name>util</name><operator>.</operator><name>SubnetUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>NetworkInterface</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<class><specifier>public</specifier> class <name>PACSupportMethods</name> <block>{

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPlainHostName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>!</operator><call><name><name>host</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>dnsDomainIs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>host</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>localHostOrDomainIs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>hostdom</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>hostdom</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isResolvable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>dnsResolve</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInNet</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mask</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SubnetUtils</name></type> <name>subnetUtils</name> <init>= <expr><operator>new</operator> <call><name>SubnetUtils</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>subnetUtils</name><operator>.</operator><name>setInclusiveHostCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>CIDRUtils</name><argument_list>(<argument><expr><call><name><name>subnetUtils</name><operator>.</operator><name>getInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCidrSignature</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isInRange</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>dnsResolve</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>myIpAddress</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SocketException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>NetworkInterface</name></argument>&gt;</argument_list></name></type> <name>publicIface</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><call><name><name>NetworkInterface</name><operator>.</operator><name>getNetworkInterfaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>iface</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
        <try>try <block>{<block_content>
          <return>return <expr><operator>!</operator><call><name><name>iface</name><operator>.</operator><name>isLoopback</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SocketException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>iface</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>iface</name><operator>.</operator><name>getInetAddresses</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasMoreElements</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>publicIface</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>publicIface</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInetAddresses</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextElement</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="string">"127.0.0.1"</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>dnsDomainLevels</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>host</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shExpMatch</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shexp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>exp</name> <init>= <expr><call><name><name>shexp</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matcher</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
