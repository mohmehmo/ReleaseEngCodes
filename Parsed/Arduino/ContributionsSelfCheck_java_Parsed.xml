<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/cc/arduino/contributions/ContributionsSelfCheck.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>UpdatableBoardsLibsFakeURLsHandler</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>LibraryInstaller</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>filters</name><operator>.</operator><name>UpdatableLibraryPredicate</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ContributionInstaller</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>filters</name><operator>.</operator><name>UpdatablePlatformPredicate</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>NotificationPopup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>LogManager</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>HyperlinkListener</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowFocusListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimerTask</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> class <name>ContributionsSelfCheck</name> <super_list><extends>extends <super><name>TimerTask</name></super></extends> <implements>implements <super><name><name>NotificationPopup</name><operator>.</operator><name>OptionalButtonCallbacks</name></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Base</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>HyperlinkListener</name></type> <name>hyperlinkListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ContributionInstaller</name></type> <name>contributionInstaller</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>LibraryInstaller</name></type> <name>libraryInstaller</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ProgressListener</name></type> <name>progressListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>boardsManagerURL</name>  <init>= <expr><literal type="string">"http://boardsmanager/DropdownUpdatableCoresItem"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>libraryManagerURL</name> <init>= <expr><literal type="string">"http://librarymanager/DropdownUpdatableLibrariesItem"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>cancelled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>NotificationPopup</name></type> <name>notificationPopup</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ContributionsSelfCheck</name><parameter_list>(<parameter><decl><type><name>Base</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>HyperlinkListener</name></type> <name>hyperlinkListener</name></decl></parameter>, <parameter><decl><type><name>ContributionInstaller</name></type> <name>contributionInstaller</name></decl></parameter>, <parameter><decl><type><name>LibraryInstaller</name></type> <name>libraryInstaller</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hyperlinkListener</name></name> <operator>=</operator> <name>hyperlinkListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contributionInstaller</name></name> <operator>=</operator> <name>contributionInstaller</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>libraryInstaller</name></name> <operator>=</operator> <name>libraryInstaller</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressListener</name></name> <operator>=</operator> <operator>new</operator> <call><name>NoopProgressListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cancelled</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>updateContributionIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateLibrariesIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>updatablePlatforms</name> <init>= <expr><call><name>checkForUpdatablePlatforms</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>updatableLibraries</name> <init>= <expr><call><name>checkForUpdatableLibraries</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>updatableLibraries</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>updatablePlatforms</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>setAccessible</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"ide.accessible"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>button1Name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>button2Name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>openAnchorBoards</name>  <init>= <expr><literal type="string">"&lt;a href=\""</literal> <operator>+</operator> <name>boardsManagerURL</name> <operator>+</operator> <literal type="string">"\"&gt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>closeAnchorBoards</name> <init>= <expr><literal type="string">"&lt;/a&gt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>openAnchorLibraries</name>  <init>= <expr><literal type="string">"&lt;a href=\""</literal> <operator>+</operator> <name>libraryManagerURL</name> <operator>+</operator> <literal type="string">"\"&gt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>closeAnchorLibraries</name> <init>= <expr><literal type="string">"&lt;/a&gt;"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// if accessibility mode and board updates are available set the button name and clear the anchors</comment>
    <if_stmt><if>if<condition>(<expr><name>setAccessible</name> <operator>&amp;&amp;</operator> <name>updatablePlatforms</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>button1Name</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Boards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>openAnchorBoards</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>closeAnchorBoards</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content> <comment type="line">// when not accessibility mode or no boards to update no button is needed</comment>
      <expr_stmt><expr><name>button1Name</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// if accessibility mode and libraries updates are available set the button name and clear the anchors</comment>
    <if_stmt><if>if <condition>(<expr><name>setAccessible</name> <operator>&amp;&amp;</operator> <name>updatableLibraries</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>button2Name</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Libraries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>openAnchorLibraries</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>closeAnchorLibraries</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content> <comment type="line">// when not accessibility mode or no libraries to update no button is needed</comment>
      <expr_stmt><expr><name>button2Name</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>updatableLibraries</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>updatablePlatforms</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Updates available for some of your {0}libraries{1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>openAnchorLibraries</name></expr></argument>, <argument><expr><name>closeAnchorLibraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>updatableLibraries</name> <operator>&amp;&amp;</operator> <name>updatablePlatforms</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Updates available for some of your {0}boards{1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>openAnchorBoards</name></expr></argument>, <argument><expr><name>closeAnchorBoards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Updates available for some of your {0}boards{1} and {2}libraries{3}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>openAnchorBoards</name></expr></argument>, <argument><expr><name>closeAnchorBoards</name></expr></argument>, <argument><expr><name>openAnchorLibraries</name></expr></argument>, <argument><expr><name>closeAnchorLibraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cancelled</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>Editor</name></type> <name>ed</name> <init>= <expr><call><name><name>base</name><operator>.</operator><name>getActiveEditor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>accessibleIde</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"ide.accessible"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>accessibleIde</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>notificationPopup</name> <operator>=</operator> <operator>new</operator> <call><name>NotificationPopup</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>hyperlinkListener</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>button1Name</name></expr></argument>, <argument><expr><name>button2Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>  <comment type="line">// if not accessible view leave it the same</comment>
        <expr_stmt><expr><name>notificationPopup</name> <operator>=</operator> <operator>new</operator> <call><name>NotificationPopup</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>hyperlinkListener</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>ed</name><operator>.</operator><name>isFocused</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>notificationPopup</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// If the IDE is not focused wait until it is focused again to</comment>
      <comment type="line">// display the notification, this avoids the annoying side effect</comment>
      <comment type="line">// to "steal" the focus from another application.</comment>
      <decl_stmt><decl><type><name>WindowFocusListener</name></type> <name>wfl</name> <init>= <expr><operator>new</operator> <class><super><name>WindowFocusListener</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>windowLostFocus</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>windowGainedFocus</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>notificationPopup</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>Editor</name></type> <name>e</name> <range>: <expr><call><name><name>base</name><operator>.</operator><name>getEditors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>removeWindowFocusListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>Editor</name></type> <name>e</name> <range>: <expr><call><name><name>base</name><operator>.</operator><name>getEditors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addWindowFocusListener</name></name><argument_list>(<argument><expr><name>wfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>goToManager</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>link</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>UpdatableBoardsLibsFakeURLsHandler</name><operator>)</operator> <name>hyperlinkListener</name><operator>)</operator><operator>.</operator><call><name>openBoardLibManager</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
      <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name><name>LogManager</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ContributionsSelfCheck</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Exception while attempting to go to board manager"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
  <comment type="line">// callback for boards button</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>onOptionalButton1Callback</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>goToManager</name><argument_list>(<argument><expr><name>boardsManagerURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// callback for libraries button</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>onOptionalButton2Callback</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>goToManager</name><argument_list>(<argument><expr><name>libraryManagerURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>boolean</name></type> <name>checkForUpdatablePlatforms</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getPackages</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pack</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>pack</name><operator>.</operator><name>getPlatforms</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><operator>new</operator> <call><name>UpdatablePlatformPredicate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>boolean</name></type> <name>checkForUpdatableLibraries</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLibraries</name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><operator>new</operator> <call><name>UpdatableLibraryPredicate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>cancelled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>notificationPopup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>notificationPopup</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>updateLibrariesIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cancelled</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>libraryInstaller</name><operator>.</operator><name>updateIndex</name></name><argument_list>(<argument><expr><name>progressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// ignore</comment>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>updateContributionIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cancelled</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>contributionInstaller</name><operator>.</operator><name>updateIndex</name></name><argument_list>(<argument><expr><name>progressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// ignore</comment>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
}</block></class>
</unit>
