<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/test/cc/arduino/net/CustomProxySelectorTest.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<class><specifier>public</specifier> class <name>CustomProxySelectorTest</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>preferences</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>URI</name></type> <name>uri</name></decl>;</decl_stmt>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.net.useSystemProxies"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>uri</name> <operator>=</operator> <operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><literal type="string">"https://www.arduino.cc"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toURI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>preferences</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testNoProxy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>NO_PROXY</name></name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSystemProxy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>ProxySelector</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testProxyPACHTTP</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_PAC_URL</name></name></expr></argument>, <argument><expr><call><name><name>CustomProxySelectorTest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><literal type="string">"proxy_http.pac"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Proxy</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>Type</name><operator>.</operator><name>HTTP</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><literal type="string">"proxy.example.com"</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testProxyPACHTTPWithLogin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_PAC_URL</name></name></expr></argument>, <argument><expr><call><name><name>CustomProxySelectorTest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><literal type="string">"proxy_http.pac"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_AUTO_USERNAME</name></name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_AUTO_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="string">"autopassword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Proxy</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>Type</name><operator>.</operator><name>HTTP</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><literal type="string">"proxy.example.com"</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PasswordAuthentication</name></type> <name>authentication</name> <init>= <expr><call><name><name>Authenticator</name><operator>.</operator><name>requestPasswordAuthentication</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>, <argument><expr><call><name><name>uri</name><operator>.</operator><name>toURL</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProtocol</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ciao"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>authentication</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>authentication</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"autopassword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testProxyPACSOCKS</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_PAC_URL</name></name></expr></argument>, <argument><expr><call><name><name>CustomProxySelectorTest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><literal type="string">"proxy_socks.pac"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Proxy</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>Type</name><operator>.</operator><name>SOCKS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><literal type="string">"proxy.example.com"</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testProxyPACDirect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_PAC_URL</name></name></expr></argument>, <argument><expr><call><name><name>CustomProxySelectorTest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><literal type="string">"proxy_direct.pac"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>NO_PROXY</name></name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testProxyPACComplex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_PAC_URL</name></name></expr></argument>, <argument><expr><call><name><name>CustomProxySelectorTest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><literal type="string">"proxy_complex.pac"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Proxy</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>Type</name><operator>.</operator><name>HTTP</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><literal type="string">"4.5.6.7"</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testProxyPACComplex2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_PAC_URL</name></name></expr></argument>, <argument><expr><call><name><name>CustomProxySelectorTest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><literal type="string">"proxy_complex.pac"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><literal type="string">"http://www.intranet.domain.com/ciao"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toURI</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>NO_PROXY</name></name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testManualProxy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_MANUAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_MANUAL_TYPE_HTTP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_HOSTNAME</name></name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_PORT</name></name></expr></argument>, <argument><expr><literal type="string">"8080"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Proxy</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>Type</name><operator>.</operator><name>HTTP</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testManualProxyWithLogin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_TYPE_MANUAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_TYPE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>PROXY_MANUAL_TYPE_HTTP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_HOSTNAME</name></name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_PORT</name></name></expr></argument>, <argument><expr><literal type="string">"8080"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_USERNAME</name></name></expr></argument>, <argument><expr><literal type="string">"username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_PROXY_MANUAL_PASSWORD</name></name></expr></argument>, <argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CustomProxySelector</name></type> <name>proxySelector</name> <init>= <expr><operator>new</operator> <call><name>CustomProxySelector</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Proxy</name></type> <name>proxy</name> <init>= <expr><call><name><name>proxySelector</name><operator>.</operator><name>getProxyFor</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Proxy</name><argument_list>(<argument><expr><name><name>Proxy</name><operator>.</operator><name>Type</name><operator>.</operator><name>HTTP</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PasswordAuthentication</name></type> <name>authentication</name> <init>= <expr><call><name><name>Authenticator</name><operator>.</operator><name>requestPasswordAuthentication</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">8080</literal></expr></argument>, <argument><expr><call><name><name>uri</name><operator>.</operator><name>toURL</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProtocol</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ciao"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>authentication</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>authentication</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
