<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/syntax/Token.java"><comment type="block">/*
 * Token.java - Generic token
 * Copyright (C) 1998, 1999 Slava Pestov
 *
 * You may use and modify this package for any purpose. Redistribution is
 * permitted, in both source and binary form, provided that this notice
 * remains intact in all source distributions of this package.
 */</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name></name>;</package>

<comment type="block" format="javadoc">/**
 * A linked list of tokens. Each token has three fields - a token
 * identifier, which is a byte value that can be looked up in the
 * array returned by &lt;code&gt;SyntaxDocument.getColors()&lt;/code&gt;
 * to get a color value, a length value which is the length of the
 * token in the text, and a pointer to the next token in the list.
 *
 * @author Slava Pestov
 */</comment>
<class><specifier>public</specifier> class <name>Token</name>
<block>{
        <comment type="block" format="javadoc">/**
         * Normal text token id. This should be used to mark
         * normal text.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>NULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Comment 1 token id. This can be used to mark a comment.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>COMMENT1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Comment 2 token id. This can be used to mark a comment.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>COMMENT2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>


        <comment type="block" format="javadoc">/**
         * Literal 1 token id. This can be used to mark a string
         * literal (eg, C mode uses this to mark "..." literals)
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>LITERAL1</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Literal 2 token id. This can be used to mark an object
         * literal (eg, Java mode uses this to mark true, false, etc)
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>LITERAL2</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Label token id. This can be used to mark labels
         * (eg, C mode uses this to mark ...: sequences)
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>LABEL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Keyword 1 token id. This can be used to mark a
         * keyword. This should be used for general language
         * constructs.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>KEYWORD1</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Keyword 2 token id. This can be used to mark a
         * keyword. This should be used for preprocessor
         * commands, or variables.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>KEYWORD2</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Keyword 3 token id. This can be used to mark a
         * keyword. This should be used for data types.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>KEYWORD3</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Operator token id. This can be used to mark an
         * operator. (eg, SQL mode marks +, -, etc with this
         * token type)
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>OPERATOR</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * URL token id.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>URL</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
        
        <comment type="block" format="javadoc">/**
         * Invalid token id. This can be used to mark invalid
         * or incomplete tokens, so the user can easily spot
         * syntax errors.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>INVALID</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The total number of defined token ids.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>ID_COUNT</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The first id that can be used for internal state
         * in a token marker.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>INTERNAL_FIRST</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The last id that can be used for internal state
         * in a token marker.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>INTERNAL_LAST</name> <init>= <expr><literal type="number">126</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The token type, that along with a length of 0
         * marks the end of the token list.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>END</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The length of this token.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>length</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The id of this token.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>byte</name></type> <name>id</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The next token in the linked list.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>Token</name></type> <name>next</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new token.
         * @param length The length of the token
         * @param id The id of the token
         */</comment>
        <constructor><specifier>public</specifier> <name>Token</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>id</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Returns a string representation of this token.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
                <return>return <expr><literal type="string">"[id="</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">",length="</literal> <operator>+</operator> <name>length</name> <operator>+</operator> <literal type="string">"]"</literal></expr>;</return>
        </block_content>}</block></function>
}</block></class>
</unit>
