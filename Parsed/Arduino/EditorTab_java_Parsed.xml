<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/EditorTab.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Arduino project - http://www.arduino.cc

  Copyright (c) 2015 Matthijs Kooijman
  Copyright (c) 2004-09 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2
  as published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>scale</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>BorderLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>FocusEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>FocusListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>Action</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>BorderFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JMenuItem</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPopupMenu</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>ToolTipManager</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>border</name><operator>.</operator><name>MatteBorder</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>PopupMenuEvent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>PopupMenuListener</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>BadLocationException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>PlainDocument</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>DefaultCaret</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>Document</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxTextAreaEditorKit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>Gutter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>RTextScrollPane</name></name>;</import>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>UpdatableBoardsLibsFakeURLsHandler</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>DocumentTextChangeListener</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>ArduinoTokenMakerFactory</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>PdeKeywords</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>SketchTextArea</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>SketchTextAreaEditorKit</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>tools</name><operator>.</operator><name>DiscourseFormat</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Single tab, editing a single file, in the main window.
 */</comment>
<class><specifier>public</specifier> class <name>EditorTab</name> <super_list><extends>extends <super><name>JPanel</name></super></extends> <implements>implements <super><name><name>SketchFile</name><operator>.</operator><name>TextStorage</name></name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>protected</specifier> <name>Editor</name></type> <name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>SketchTextArea</name></type> <name>textarea</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>RTextScrollPane</name></type> <name>scrollPane</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>SketchFile</name></type> <name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>modified</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Is external editing mode currently enabled? */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>external</name></decl>;</decl_stmt>
  
  <comment type="block" format="javadoc">/**
   * Create a new EditorTab
   *
   * @param editor
   *          The Editor this tab runs in
   * @param file
   *          The file to display in this tab
   * @param contents
   *          Initial contents to display in this tab. Can be used when editing
   *          a file that doesn't exist yet. If null is passed, code.load() is
   *          called and displayed instead.
   * @throws IOException
   */</comment>
  <constructor><specifier>public</specifier> <name>EditorTab</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>editor</name></decl></parameter>, <parameter><decl><type><name>SketchFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contents</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Load initial contents contents from file if nothing was specified.</comment>
    <if_stmt><if>if <condition>(<expr><name>contents</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>contents</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <name>editor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>RSyntaxDocument</name></type> <name>document</name> <init>= <expr><call><name>createDocument</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>textarea</name> <operator>=</operator> <call><name>createTextArea</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scrollPane</name> <operator>=</operator> <call><name>createScrollPane</name><argument_list>(<argument><expr><name>textarea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>setStorage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>applyPreferences</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>scrollPane</name></expr></argument>, <argument><expr><name><name>BorderLayout</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>addEditorFontResizeMouseWheelListener</name></name><argument_list>(<argument><expr><name>textarea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>private</specifier> <name>RSyntaxDocument</name></type> <name>createDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contents</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>RSyntaxDocument</name></type> <name>document</name> <init>= <expr><operator>new</operator> <call><name>RSyntaxDocument</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArduinoTokenMakerFactory</name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>getPdeKeywords</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RSyntaxDocument</name><operator>.</operator><name>SYNTAX_STYLE_CPLUSPLUS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>putProperty</name></name><argument_list>(<argument><expr><name><name>PlainDocument</name><operator>.</operator><name>tabSizeAttribute</name></name></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"editor.tabs.size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// insert the program text into the document object</comment>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>insertString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>bl</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>bl</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>addDocumentListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DocumentTextChangeListener</name><argument_list>(
        <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>setModified</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>document</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>RTextScrollPane</name></type> <name>createScrollPane</name><parameter_list>(<parameter><decl><type><name>SketchTextArea</name></type> <name>textArea</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>RTextScrollPane</name></type> <name>scrollPane</name> <init>= <expr><operator>new</operator> <call><name>RTextScrollPane</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>setBorder</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MatteBorder</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.bgcolor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>setViewportBorder</name></name><argument_list>(<argument><expr><call><name><name>BorderFactory</name><operator>.</operator><name>createEmptyBorder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>setLineNumbersEnabled</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.linenumbers"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>setIconRowHeaderEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Gutter</name></type> <name>gutter</name> <init>= <expr><call><name><name>scrollPane</name><operator>.</operator><name>getGutter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gutter</name><operator>.</operator><name>setBookmarkingEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//gutter.setBookmarkIcon(CompletionsRenderer.getIcon(CompletionType.TEMPLATE));</comment>
    <expr_stmt><expr><call><name><name>gutter</name><operator>.</operator><name>setIconRowHeaderInheritsGutterBackground</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>scrollPane</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>SketchTextArea</name></type> <name>createTextArea</name><parameter_list>(<parameter><decl><type><name>RSyntaxDocument</name></type> <name>document</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>SketchTextArea</name></type> <name>textArea</name> <init>= <expr><operator>new</operator> <call><name>SketchTextArea</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>getPdeKeywords</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"editor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setFocusTraversalKeysEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//textArea.requestFocusInWindow();</comment>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setMarkOccurrences</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.advanced"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setMarginLineEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setCodeFoldingEnabled</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.code_folding"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setAutoIndentEnabled</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.indent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setCloseCurlyBraces</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.auto_close_braces"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setAntiAliasingEnabled</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.antialias"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setTabsEmulated</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.tabs.expand"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setTabSize</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"editor.tabs.size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>addHyperlinkListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>evt</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>UpdatableBoardsLibsFakeURLsHandler</name></type> <name>boardLibHandler</name> <init>= <expr><operator>new</operator> <call><name>UpdatableBoardsLibsFakeURLsHandler</name><argument_list>(<argument><expr><name><name>editor</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>boardLibHandler</name><operator>.</operator><name>openBoardLibManager</name></name><argument_list>(<argument><expr><call><name><name>evt</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>platform</name><operator>.</operator><name>openURL</name></name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>evt</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>addCaretListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>lineStart</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMark</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>lineEnd</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getDot</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>lineStatus</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>lineStart</name></expr></argument>, <argument><expr><name>lineEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>addFocusListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FocusListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>focusGained</name><parameter_list>(<parameter><decl><type><name>FocusEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lineStart</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><call><name><name>textArea</name><operator>.</operator><name>getCaret</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMark</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lineEnd</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><call><name><name>textArea</name><operator>.</operator><name>getCaret</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>lineStatus</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>lineStart</name></expr></argument>, <argument><expr><name>lineEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function><empty_stmt>;</empty_stmt>
      <function><type><specifier>public</specifier> <name>void</name></type> <name>focusLost</name><parameter_list>(<parameter><decl><type><name>FocusEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function><empty_stmt>;</empty_stmt>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ToolTipManager</name><operator>.</operator><name>sharedInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerComponent</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>configurePopupMenu</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>textArea</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>configurePopupMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SketchTextArea</name></type> <name>textarea</name></decl></parameter>)</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>JPopupMenu</name></type> <name>menu</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getPopupMenu</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>createToolMenuItem</name></name><argument_list>(<argument><expr><literal type="string">"cc.arduino.packages.formatter.AStyle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"Tool cc.arduino.packages.formatter.AStyle unavailable"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"menuToolsAutoFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Comment/Uncomment"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>handleCommentUncomment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Increase Indent"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>handleIndentOutdent</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Decrease Indent"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"menuDecreaseIndent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>handleIndentOutdent</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy for Forum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>handleDiscourseCopy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy as HTML"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>handleHTMLCopy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>JMenuItem</name></type> <name>referenceItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find in Reference"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>referenceItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><name>editor</name><operator>::</operator><name>handleFindReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>referenceItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

    <decl_stmt><decl><type><specifier>final</specifier> <name>JMenuItem</name></type> <name>openURLItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open URL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>openURLItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>openURL</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getActionCommand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>openURLItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addPopupMenuListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>PopupMenuListener</name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>popupMenuWillBecomeVisible</name><parameter_list>(<parameter><decl><type><name>PopupMenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>referenceFile</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>getPdeKeywords</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReference</name><argument_list>(<argument><expr><call><name>getCurrentKeyword</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>referenceItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>referenceFile</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getCaretPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>Token</name></name></type> <name>token</name> <init>= <expr><call><name><name>RSyntaxUtilities</name><operator>.</operator><name>getTokenAtOffset</name></name><argument_list>(<argument><expr><name>textarea</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>token</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>isHyperlink</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>openURLItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>openURLItem</name><operator>.</operator><name>setActionCommand</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getLexeme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name><name>openURLItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>popupMenuWillBecomeInvisible</name><parameter_list>(<parameter><decl><type><name>PopupMenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>popupMenuCanceled</name><parameter_list>(<parameter><decl><type><name>PopupMenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>applyPreferences</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setCodeFoldingEnabled</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.code_folding"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>setFoldIndicatorEnabled</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.code_folding"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>setLineNumbersEnabled</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.linenumbers"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// apply the setting for 'use external editor', but only if it changed</comment>
    <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.external"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>external</name> <operator>=</operator> <operator>!</operator><name>external</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>external</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// disable line highlight and turn off the caret when disabling</comment>
        <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.external.bgcolor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setHighlightCurrentLine</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Detach from the code, since we are no longer the authoritative source</comment>
        <comment type="line">// for file contents.</comment>
        <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>setStorage</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Reload, in case the file contents already changed.</comment>
        <expr_stmt><expr><call><name>reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.bgcolor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setHighlightCurrentLine</name></name><argument_list>(<argument><expr><call><name><name>Theme</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.linehighlight"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>setStorage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Reload once just before disabling external mode, to ensure we have</comment>
        <comment type="line">// the latest contents.</comment>
        <expr_stmt><expr><call><name>reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// apply changes to the font size for the editor</comment>
    <decl_stmt><decl><type><name>Font</name></type> <name>editorFont</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="line">// check whether a theme-defined editor font is available</comment>
    <decl_stmt><decl><type><name>Font</name></type> <name>themeFont</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>themeFont</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="line">// Apply theme font if the editor font has *not* been changed by the user,</comment>
      <comment type="line">// This allows themes to specify an editor font which will only be applied</comment>
      <comment type="line">// if the user hasn't already changed their editor font via preferences.txt</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>defaultFontName</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>defaultIfEmpty</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getDefault</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>defaultFontName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>editorFont</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>editorFont</name> <operator>=</operator> <operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><call><name><name>themeFont</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>themeFont</name><operator>.</operator><name>getStyle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>editorFont</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>editorFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>getGutter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLineNumberFont</name><argument_list>(<argument><expr><name>editorFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>updateKeywords</name><parameter_list>(<parameter><decl><type><name>PdeKeywords</name></type> <name>keywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// update GUI for "Find In Reference"</comment>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setKeywords</name></name><argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// update document for syntax highlighting</comment>
    <decl_stmt><decl><type><name>RSyntaxDocument</name></type> <name>document</name> <init>= <expr><operator>(</operator><name>RSyntaxDocument</name><operator>)</operator> <call><name><name>textarea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>setTokenMakerFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ArduinoTokenMakerFactory</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>setSyntaxStyle</name></name><argument_list>(<argument><expr><name><name>RSyntaxDocument</name><operator>.</operator><name>SYNTAX_STYLE_CPLUSPLUS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Called when this tab is made the current one, or when it is the current one
   * and the window is activated.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>activated</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// When external editing is enabled, reload the text whenever we get activated.</comment>
    <if_stmt><if>if <condition>(<expr><name>external</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Reload the contents of our file.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>reload</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>text</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Warning: Failed to reload file: \"{0}\""</literal></expr></argument>,
                                     <argument><expr><call><name><name>file</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setModified</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get the TextArea object for use (not recommended). This should only
   * be used in obscure cases that really need to hack the internals of the
   * JEditTextArea. Most tools should only interface via the get/set functions
   * found in this class. This will maintain compatibility with future releases,
   * which will not use TextArea.
   */</comment>
  <function><type><specifier>public</specifier> <name>SketchTextArea</name></type> <name>getTextArea</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>textarea</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get the sketch this tab is editing a file from.
   */</comment>
  <function><type><specifier>public</specifier> <name>SketchController</name></type> <name>getSketch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Get the SketchFile that is being edited in this tab.
   */</comment>
  <function><type><specifier>public</specifier> <name>SketchFile</name></type> <name>getSketchFile</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>file</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <comment type="block" format="javadoc">/**
   * Get the contents of the text area.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>textarea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Replace the entire contents of this tab.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Remove all highlights, since these will all end up at the start of the</comment>
    <comment type="line">// text otherwise. Preserving them is tricky, so better just remove them.</comment>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>removeAllLineHighlights</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Set the caret update policy to NEVER_UPDATE while completely replacing</comment>
    <comment type="line">// the current text. Normally, the caret tracks inserts and deletions, but</comment>
    <comment type="line">// replacing the entire text will always make the caret end up at the end,</comment>
    <comment type="line">// which isn't really useful. With NEVER_UPDATE, the caret will just keep</comment>
    <comment type="line">// its absolute position (number of characters from the start), which isn't</comment>
    <comment type="line">// always perfect, but the best we can do without making a diff of the old</comment>
    <comment type="line">// and new text and some guesswork.</comment>
    <comment type="line">// Note that we cannot use textarea.setText() here, since that first removes</comment>
    <comment type="line">// text and then inserts the new text. Even with NEVER_UPDATE, the caret</comment>
    <comment type="line">// always makes sure to stay valid, so first removing all text makes it</comment>
    <comment type="line">// reset to 0. Also note that simply saving and restoring the caret position</comment>
    <comment type="line">// will work, but then the scroll position might change in response to the</comment>
    <comment type="line">// caret position.</comment>
    <decl_stmt><decl><type><name>DefaultCaret</name></type> <name>caret</name> <init>= <expr><operator>(</operator><name>DefaultCaret</name><operator>)</operator> <call><name><name>textarea</name><operator>.</operator><name>getCaret</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>policy</name> <init>= <expr><call><name><name>caret</name><operator>.</operator><name>getUpdatePolicy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>caret</name><operator>.</operator><name>setUpdatePolicy</name></name><argument_list>(<argument><expr><name><name>DefaultCaret</name><operator>.</operator><name>NEVER_UPDATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>oldLength</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// The undo manager already seems to group the insert and remove together</comment>
      <comment type="line">// automatically, but better be explicit about it.</comment>
      <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>beginAtomicEdit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>insertString</name></name><argument_list>(<argument><expr><name>oldLength</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oldLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Unexpected failure replacing text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>endAtomicEdit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>caret</name><operator>.</operator><name>setUpdatePolicy</name></name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Is the text modified since the last save / load?
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isModified</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>modified</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Clear modified status. Should only be called by SketchFile through the
   * TextStorage interface.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>clearModified</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setModified</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setModified</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>modified</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>modified</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      <comment type="line">// TODO: Improve decoupling</comment>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>calcModified</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getSelectedText</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>textarea</name><operator>.</operator><name>getSelectedText</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelectedText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>replaceSelection</name></name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getScrollPosition</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>scrollPane</name><operator>.</operator><name>getVerticalScrollBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
    
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setScrollPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>scrollPane</name><operator>.</operator><name>getVerticalScrollBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get the beginning point of the current selection.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getSelectionStart</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>textarea</name><operator>.</operator><name>getSelectionStart</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get the end point of the current selection.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getSelectionStop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>textarea</name><operator>.</operator><name>getSelectionEnd</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get text for a specified line.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getLineText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>textarea</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><call><name><name>textarea</name><operator>.</operator><name>getLineStartOffset</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>textarea</name><operator>.</operator><name>getLineEndOffset</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Jump to the given line
   * @param line The line number to jump to, 1-based. 
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>goToLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>setCaretPosition</name></name><argument_list>(<argument><expr><call><name><name>textarea</name><operator>.</operator><name>getLineStartOffset</name></name><argument_list>(<argument><expr><name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">//ignore</comment>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
  
  <function><type><name>void</name></type> <name>handleCut</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>cut</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
 
  <function><type><name>void</name></type> <name>handleCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><name>void</name></type> <name>handlePaste</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>paste</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><name>void</name></type> <name>handleSelectAll</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>selectAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>handleCommentUncomment</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Action</name></type> <name>action</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getActionMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>RSyntaxTextAreaEditorKit</name><operator>.</operator><name>rstaToggleCommentAction</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>actionPerformed</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// XXX: RSyntaxDocument doesn't fire DocumentListener events, it should be fixed in RSyntaxTextArea?</comment>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>updateUndoRedoState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>handleDiscourseCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>new</operator> <call><name>DiscourseFormat</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><name>void</name></type> <name>handleHTMLCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>new</operator> <call><name>DiscourseFormat</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>handleIndentOutdent</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>indent</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Action</name></type> <name>action</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getActionMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>SketchTextAreaEditorKit</name><operator>.</operator><name>rtaIncreaseIndentAction</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>actionPerformed</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>Action</name></type> <name>action</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getActionMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>RSyntaxTextAreaEditorKit</name><operator>.</operator><name>rstaDecreaseIndentAction</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>actionPerformed</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// XXX: RSyntaxDocument doesn't fire DocumentListener events, it should be fixed in RSyntaxTextArea?</comment>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>updateUndoRedoState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>handleUndo</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>undoLastAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><name>void</name></type> <name>handleRedo</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>textarea</name><operator>.</operator><name>redoLastAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getCurrentKeyword</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>textarea</name><operator>.</operator><name>getSelectedText</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>textarea</name><operator>.</operator><name>getSelectedText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>current</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getCaretPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>startOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> <init>= <expr><name>current</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>tmp</name> <init>= <expr><call><name><name>textarea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// TODO probably a regexp that matches Arduino lang special chars</comment>
      <comment type="line">// already exists.</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>regexp</name> <init>= <expr><literal type="string">"[\\s\\n();\\\\.!='\\[\\]{}]"</literal></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><operator>!</operator><call><name><name>tmp</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><name>regexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>endIndex</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>textarea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><name>endIndex</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <comment type="line">// For some reason document index start at 2.</comment>
      <comment type="line">// if( current - start &lt; 2 ) return;</comment>

      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>!</operator><call><name><name>tmp</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><name>regexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>startOffset</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>current</name> <operator>-</operator> <name>startOffset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>textarea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>textarea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><name>current</name> <operator>-</operator> <name>startOffset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>startOffset</name><operator>--</operator></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name>endIndex</name> <operator>-</operator> <name>current</name> <operator>+</operator> <name>startOffset</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>textarea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><name>current</name> <operator>-</operator> <name>startOffset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>bl</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>bl</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <return>return <expr><name>text</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>requestFocusInWindow</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="block" format="javadoc">/** If focus is requested, focus the textarea instead. */</comment>
    <return>return <expr><call><name><name>textarea</name><operator>.</operator><name>requestFocusInWindow</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
