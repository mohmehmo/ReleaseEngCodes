<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/cc/arduino/contributions/ui/FilterJTextField.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>DocumentEvent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>DocumentListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>FocusEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>FocusListener</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>FilterJTextField</name> <super_list><extends>extends <super><name>JTextField</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>filterHint</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showingHint</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Timer</name></type> <name>timer</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>FilterJTextField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hint</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filterHint</name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>showingHint</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>timer</name> <operator>=</operator> <operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <expr_stmt><expr><call><name>applyFilter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addFocusListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FocusListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>focusLost</name><parameter_list>(<parameter><decl><type><name>FocusEvent</name></type> <name>focusEvent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>showingHint</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>updateStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>void</name></type> <name>focusGained</name><parameter_list>(<parameter><decl><type><name>FocusEvent</name></type> <name>focusEvent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>showingHint</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>showingHint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>updateStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>getDocument</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addDocumentListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>DocumentListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>removeUpdate</name><parameter_list>(<parameter><decl><type><name>DocumentEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>spawnTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>void</name></type> <name>insertUpdate</name><parameter_list>(<parameter><decl><type><name>DocumentEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>spawnTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

      <function><type><specifier>public</specifier> <name>void</name></type> <name>changedUpdate</name><parameter_list>(<parameter><decl><type><name>DocumentEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addActionListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>timer</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>applyFilter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>spawnTimer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>timer</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>applyFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>filter</name> <init>= <expr><ternary><condition><expr><name>showingHint</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>getText</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name><name>filter</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Replace anything but 0-9, a-z, or : with a space</comment>
    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name><name>filter</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\x30-\\x39^\\x61-\\x7a^\\x3a]"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>onFilter</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>onFilter</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>strings</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Empty</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>updateStyle</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>showingHint</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name>filterHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setForeground</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>gray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setFont</name><argument_list>(<argument><expr><call><name>getFont</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deriveFont</name><argument_list>(<argument><expr><name><name>Font</name><operator>.</operator><name>ITALIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setForeground</name><argument_list>(<argument><expr><call><name><name>UIManager</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"TextField.foreground"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setFont</name><argument_list>(<argument><expr><call><name>getFont</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deriveFont</name><argument_list>(<argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>paste</name><parameter_list>()</parameter_list> <block>{<block_content>

    <comment type="line">// Same precondition check as JTextComponent#paste().</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEditable</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Disable hint to prevent the focus handler from clearing the pasted text.</comment>
    <if_stmt><if>if <condition>(<expr><name>showingHint</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>showingHint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Perform the paste.</comment>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>paste</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
