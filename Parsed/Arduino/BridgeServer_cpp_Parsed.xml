<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/BridgeServer.cpp"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;BridgeServer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;BridgeClient.h&gt;</cpp:file></cpp:include>

<constructor><name><name>BridgeServer</name><operator>::</operator><name>BridgeServer</name></name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>_p</name></decl></parameter>, <parameter><decl><type><name>BridgeClass</name> <modifier>&amp;</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <member_init_list>:
  <call><name>bridge</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call>, <call><name>port</name><argument_list>(<argument><expr><name>_p</name></expr></argument>)</argument_list></call>, <call><name>listening</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>, <call><name>useLocalhost</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>BridgeServer</name><operator>::</operator><name>begin</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="char">'N'</literal></expr>,
    <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>port</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></cast></expr>,
    <expr>static_cast<operator>&lt;</operator><name>uint8_t</name><operator>&gt;</operator><operator>(</operator><name>port</name><operator>)</operator></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>useLocalhost</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name><name>address</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>listening</name> <operator>=</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BridgeClient</name></type> <name><name>BridgeServer</name><operator>::</operator><name>accept</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'k'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>l</name> <init>= <expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>BridgeClient</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>BridgeClient</name><argument_list>(<argument><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>BridgeServer</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'b'</literal></expr>, <expr><name>c</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
