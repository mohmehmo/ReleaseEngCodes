<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/Bridge.h"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BRIDGE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIDGE_H_</name></cpp:macro></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BRIDGE_BAUDRATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIDGE_BAUDRATE</name></cpp:macro> <cpp:value>250000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Arduino.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Stream.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BridgeClass</name> <block>{<block_content>
  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>BridgeClass</name><argument_list>(<argument><expr><name>Stream</name> <operator>&amp;</operator><name>_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>void</name></type> <name>begin</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>end</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Methods to handle key/value datastore</comment>
    <function_decl><type><name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    <function><type><name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function_decl><type><name>unsigned</name> <name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
    <function><type><name>unsigned</name> <name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
      <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Trasnfer a frame (with error correction and response)</comment>
    <function_decl><type><name>uint16_t</name></type> <name>transfer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len1</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff2</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len2</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff3</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len3</name></decl></parameter>,
                      <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rxbuff</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>rxlen</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line">// multiple inline versions of the same function to allow efficient frame concatenation</comment>
    <function><type><name>uint16_t</name></type> <name>transfer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len1</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
      <return>return <expr><call><name>transfer</name><argument_list>(<argument><expr><name>buff1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>uint16_t</name></type> <name>transfer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len1</name></decl></parameter>,
                      <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rxbuff</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>rxlen</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
      <return>return <expr><call><name>transfer</name><argument_list>(<argument><expr><name>buff1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rxbuff</name></expr></argument>, <argument><expr><name>rxlen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>uint16_t</name></type> <name>transfer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len1</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff2</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len2</name></decl></parameter>,
                      <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rxbuff</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>rxlen</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
      <return>return <expr><call><name>transfer</name><argument_list>(<argument><expr><name>buff1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>buff2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rxbuff</name></expr></argument>, <argument><expr><name>rxlen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>uint16_t</name></type> <name>getBridgeVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
      <return>return <expr><name>bridgeVersion</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name>TRANSFER_TIMEOUT</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

  <label><name>private</name>:</label>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name></decl>;</decl_stmt>
    <function_decl><type><name>int</name></type> <name>timedRead</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>dropAll</name><parameter_list>()</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>bridgeVersion</name></decl>;</decl_stmt>

  <label><name>private</name>:</label>
    <function_decl><type><name>void</name></type> <name>crcUpdate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>crcReset</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>crcWrite</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>crcCheck</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>_CRC</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>CRC</name></decl>;</decl_stmt>

  <label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>CTRL_C</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>started</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>max_retries</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// This subclass uses a serial port Stream</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SerialBridgeClass</name> <range>: <expr><name>public</name> <name>BridgeClass</name> <block>{
  <expr><name>public</name><operator>:</operator>
    <call><name>SerialBridgeClass</name><argument_list>(<argument><expr><name>HardwareSerial</name> <operator>&amp;</operator><name>_serial</name></expr></argument>)</argument_list></call>
      <operator>:</operator> <call><name>BridgeClass</name><argument_list>(<argument><expr><name>_serial</name></expr></argument>)</argument_list></call></expr>, <macro><name>serial</name><argument_list>(<argument>_serial</argument>)</argument_list></macro> <expr><block>{
      <comment type="line">// Empty</comment>
    }</block>

    <name>void</name> <macro><name>begin</name><argument_list>(<argument>unsigned long baudrate = BRIDGE_BAUDRATE</argument>)</argument_list></macro> <block>{
      <expr><call><name><name>serial</name><operator>.</operator><name>begin</name></name><argument_list>(<argument><expr><name>baudrate</name></expr></argument>)</argument_list></call></expr>;
      <expr><name>BridgeClass</name><operator>::</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;
    }</block>

    <name>void</name> <macro><name>end</name><argument_list>(<argument>unsigned long baudrate = BRIDGE_BAUDRATE</argument>)</argument_list></macro> <block>{
      <expr><call><name><name>serial</name><operator>.</operator><name>begin</name></name><argument_list>(<argument><expr><name>baudrate</name></expr></argument>)</argument_list></call></expr>;
      <expr><name>BridgeClass</name><operator>::</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;
    }</block>

  <name>private</name><operator>:</operator>
    <name>HardwareSerial</name> <operator>&amp;</operator><name>serial</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SerialBridgeClass</name></type> <name>Bridge</name></decl>;</decl_stmt>

<comment type="line">// Some microcrontrollers don't start the bootloader after a reset.</comment>
<comment type="line">// This function is intended to let the microcontroller erase its</comment>
<comment type="line">// flash after checking a specific signal coming from the external</comment>
<comment type="line">// device without the need to press the erase button on the board.</comment>
<comment type="line">// The purpose is to enable a software update that does not require</comment>
<comment type="line">// a manual interaction with the board.</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>checkForRemoteSketchUpdate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>pin</name> <init>= <expr><literal type="number">7</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BRIDGE_H_ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Console.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Process.h&gt;</cpp:file></cpp:include>
</unit>
