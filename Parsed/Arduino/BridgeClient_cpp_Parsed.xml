<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/BridgeClient.cpp"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;BridgeClient.h&gt;</cpp:file></cpp:include>

<constructor><name><name>BridgeClient</name><operator>::</operator><name>BridgeClient</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>_h</name></decl></parameter>, <parameter><decl><type><name>BridgeClass</name> <modifier>&amp;</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <member_init_list>:
  <call><name>bridge</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call>, <call><name>handle</name><argument_list>(<argument><expr><name>_h</name></expr></argument>)</argument_list></call>, <call><name>opened</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>, <call><name>buffered</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<constructor><name><name>BridgeClient</name><operator>::</operator><name>BridgeClient</name></name><parameter_list>(<parameter><decl><type><name>BridgeClass</name> <modifier>&amp;</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <member_init_list>:
  <call><name>bridge</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call>, <call><name>handle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>opened</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>, <call><name>buffered</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<destructor><name><name>BridgeClient</name><operator>::</operator><name>~BridgeClient</name></name><parameter_list>()</parameter_list> <block>{<block_content>
</block_content>}</block></destructor>

<function type="operator"><type><name>BridgeClient</name><modifier>&amp;</modifier></type> <name><name>BridgeClient</name><operator>::</operator><name>operator<name>=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BridgeClient</name> <modifier>&amp;</modifier></type><name>_x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>opened</name> <operator>=</operator> <name><name>_x</name><operator>.</operator><name>opened</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>_x</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClient</name><operator>::</operator><name>stop</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>opened</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'j'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>opened</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>buffered</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>readPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClient</name><operator>::</operator><name>doBuffer</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// If there are already char in buffer exit</comment>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// Try to buffer up to 32 characters</comment>
  <expr_stmt><expr><name>readPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'K'</literal></expr>, <expr><name>handle</name></expr>, <expr>sizeof<operator>(</operator><name>buffer</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>buffered</name> <operator>=</operator> <call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClient</name><operator>::</operator><name>available</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// Look if there is new data available</comment>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>buffered</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClient</name><operator>::</operator><name>read</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>buffered</name><operator>--</operator></expr>;</expr_stmt>
    <return>return <expr><name><name>buffer</name><index>[<expr><name>readPos</name><operator>++</operator></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClient</name><operator>::</operator><name>read</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>readed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>readed</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>buff</name><index>[<expr><name>readed</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>readPos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffered</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>readed</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>;</do>
  <return>return <expr><name>readed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClient</name><operator>::</operator><name>peek</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name><name>buffer</name><index>[<expr><name>readPos</name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>BridgeClient</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opened</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'l'</literal></expr>, <expr><name>handle</name></expr>, <expr><name>c</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>BridgeClient</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opened</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'l'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClient</name><operator>::</operator><name>flush</name></name><parameter_list>()</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name><name>BridgeClient</name><operator>::</operator><name>connected</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opened</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
  <comment type="line">// Client is "connected" if it has unread bytes</comment>
  <if_stmt><if>if <condition>(<expr><call><name>available</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'L'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClient</name><operator>::</operator><name>connect</name></name><parameter_list>(<parameter><decl><type><name>IPAddress</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>String</name></type> <name>address</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>address</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>address</name> <operator>+=</operator> <name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>address</name> <operator>+=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>address</name> <operator>+=</operator> <name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>address</name> <operator>+=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>address</name> <operator>+=</operator> <name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>address</name> <operator>+=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>address</name> <operator>+=</operator> <name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClient</name><operator>::</operator><name>connect</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="char">'C'</literal></expr>,
    <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>port</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></cast></expr>,
    <expr>static_cast<operator>&lt;</operator><name>uint8_t</name><operator>&gt;</operator><operator>(</operator><name>port</name><operator>)</operator></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>host</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

  <comment type="line">// wait for connection</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><name>handle</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>res2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>opened</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

  <comment type="line">// check for successful connection</comment>
  <if_stmt><if>if <condition>(<expr><call><name>connected</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClient</name><operator>::</operator><name>connectSSL</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name><name>bridge</name><operator>.</operator><name>getBridgeVersion</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">161</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="char">'Z'</literal></expr>,
    <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>port</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></cast></expr>,
    <expr>static_cast<operator>&lt;</operator><name>uint8_t</name><operator>&gt;</operator><operator>(</operator><name>port</name><operator>)</operator></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>host</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

  <comment type="line">// wait for connection</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><name>handle</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>res2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>opened</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

  <comment type="line">// check for successful connection</comment>
  <if_stmt><if>if <condition>(<expr><call><name>connected</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
