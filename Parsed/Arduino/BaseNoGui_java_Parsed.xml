<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/BaseNoGui.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>GPGDetachedSignatureVerifier</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>VersionComparator</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>LibrariesIndexer</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ContributedPlatform</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ContributedTool</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ContributionsIndexer</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>DiscoveryManager</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonProcessingException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>logging</name><operator>.</operator><name>impl</name><operator>.</operator><name>LogFactoryImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>logging</name><operator>.</operator><name>impl</name><operator>.</operator><name>NoOpLog</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>filefilters</name><operator>.</operator><name>OnlyDirs</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>filefilters</name><operator>.</operator><name>OnlyFilesWithExtension</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>LibraryList</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibrary</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibraryFolder</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibraryFolder</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>files</name><operator>.</operator><name>DeleteFilesOnShutdown</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>FileUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>beans</name><operator>.</operator><name>PropertyChangeListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>beans</name><operator>.</operator><name>PropertyChangeSupport</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Level</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>BoardPort</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>filefilters</name><operator>.</operator><name>OnlyDirs</name><operator>.</operator><name>ONLY_DIRS</name></name>;</import>

<class><specifier>public</specifier> class <name>BaseNoGui</name> <block>{

  <comment type="block" format="javadoc">/** Version string to be used for build */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>REVISION</name> <init>= <expr><literal type="number">10811</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Extended version string displayed on GUI */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION_NAME</name> <init>= <expr><literal type="string">"1.8.11"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION_NAME_LONG</name></decl>;</decl_stmt>

  <comment type="line">// Current directory to use for relative paths specified on the</comment>
  <comment type="line">// commandline</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>String</name></type> <name>currentDirectory</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>versionNameLong</name> <init>= <expr><name>VERSION_NAME</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>hourlyBuildTxt</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hourlyBuild.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>hourlyBuildTxt</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>hourlyBuildTxt</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>versionNameLong</name> <operator>+=</operator> <literal type="string">" Hourly Build"</literal></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>versionNameLong</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>FileUtils</name><operator>.</operator><name>readFileToString</name></name><argument_list>(<argument><expr><name>hourlyBuildTxt</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">//noop</comment>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>windowsStoreConfig</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"windowsStore.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>windowsStoreConfig</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>conf</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>windowsStoreConfig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="string">"runtime.is-windows-store-app"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"runtime.windows-store-app.id"</literal></expr></argument>, <argument><expr><call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"appid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>versionNameLong</name> <operator>+=</operator> <literal type="string">" (Windows Store "</literal> <operator>+</operator> <call><name><name>conf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>VERSION_NAME_LONG</name> <operator>=</operator> <name>versionNameLong</name></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>DiscoveryManager</name></type> <name>discoveryManager</name></decl>;</decl_stmt>

  <comment type="line">// these are static because they're used by Sketch</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <name>File</name></type> <name>examplesFolder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <name>File</name></type> <name>toolsFolder</name></decl>;</decl_stmt>

  <comment type="line">// maps #included files to their library folder</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>LibraryList</name></argument>&gt;</argument_list></name></type> <name>importToLibraryTable</name></decl>;</decl_stmt>

  <comment type="line">// XXX: Remove this field</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>UserLibraryFolder</name></argument>&gt;</argument_list></name></type> <name>librariesFolders</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>UserNotifier</name></type> <name>notifier</name> <init>= <expr><operator>new</operator> <call><name>BasicUserNotifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TargetPackage</name></argument>&gt;</argument_list></name></type> <name>packages</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>Platform</name></type> <name>platform</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>File</name></type> <name>portableFolder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>portableSketchbookFolder</name> <init>= <expr><literal type="string">"sketchbook"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>ContributionsIndexer</name></type> <name>indexer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>LibrariesIndexer</name></type> <name>librariesIndexer</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>boardManagerLink</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>buildCache</name></decl>;</decl_stmt>

  <comment type="line">// Returns a File object for the given pathname. If the pathname</comment>
  <comment type="line">// is not absolute, it is interpreted relative to the current</comment>
  <comment type="line">// directory when starting the IDE (which is not the same as the</comment>
  <comment type="line">// current working directory!).</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>absoluteFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>currentDirectory</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>file</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get the number of lines in a file by counting the number of newline
   * characters inside a String (and adding 1).
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>countLines</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>what</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>PreferencesMap</name></type> <name>getBoardPreferences</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TargetBoard</name></type> <name>board</name> <init>= <expr><call><name>getTargetBoard</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>board</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>boardId</name> <init>= <expr><call><name><name>board</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>prefs</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getPreferences</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>extendedName</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>menuId</name> <range>: <expr><call><name><name>board</name><operator>.</operator><name>getMenuIds</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>board</name><operator>.</operator><name>hasMenu</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="line">// Get "custom_[MENU_ID]" preference (for example "custom_cpu")</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>entry</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"custom_"</literal> <operator>+</operator> <name>menuId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>entry</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>boardId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

        <decl_stmt><decl><type><name>String</name></type> <name>selectionId</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>boardId</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getMenuPreferences</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>, <argument><expr><name>selectionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update the name with the extended configuration</comment>
        <expr_stmt><expr><name>extendedName</name> <operator>+=</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>board</name><operator>.</operator><name>getMenuLabel</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>, <argument><expr><name>selectionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>extendedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Resolve tools needed for this board</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContributedTool</name></argument>&gt;</argument_list></name></type> <name>requiredTools</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add all tools dependencies specified in package index</comment>
    <decl_stmt><decl><type><name>ContributedPlatform</name></type> <name>p</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getContributedPlaform</name></name><argument_list>(<argument><expr><call><name>getTargetPlatform</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>requiredTools</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getResolvedTools</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add all tools dependencies from the (possibily) referenced core</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>core</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"build.core"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>core</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>core</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name><name>split</name><index>[]</index></name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>referenced</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getCurrentTargetPlatformFromPackage</name></name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>referenced</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ContributedPlatform</name></type> <name>referencedPlatform</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getContributedPlaform</name></name><argument_list>(<argument><expr><name>referenced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>referencedPlatform</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>requiredTools</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>referencedPlatform</name><operator>.</operator><name>getResolvedTools</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The current selected board needs the core '{0}' that is not installed."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>core</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><literal type="string">"runtime.tools."</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ContributedTool</name></type> <name>tool</name> <range>: <expr><name>requiredTools</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>folder</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>folder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>toolPath</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>toolPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <call><name><name>tool</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>toolPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>toolPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <call><name><name>tool</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>toolPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>prefs</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getContentFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>appDir</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"APP_DIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>appDir</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>appDir</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>appDir</name> <operator>=</operator> <name>currentDirectory</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>installationFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>appDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>installationFolder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>TargetPlatform</name></type> <name>getCurrentTargetPlatformFromPackage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pack</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getTargetPlatform</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"target_platform"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier>  <name>File</name></type> <name>getDefaultSketchbookFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getPortableSketchbookFolder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>sketchbookFolder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>sketchbookFolder</name> <operator>=</operator> <call><name>getPlatform</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultSketchbookFolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></catch></try>

    <return>return <expr><name>sketchbookFolder</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DiscoveryManager</name></type> <name>getDiscoveryManager</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>discoveryManager</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>discoveryManager</name> <operator>=</operator> <operator>new</operator> <call><name>DiscoveryManager</name><argument_list>(<argument><expr><name>packages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>discoveryManager</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getExamplesFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>examplesFolder</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getExamplesPath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>examplesFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getHardwareFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// calculate on the fly because it's needed by Preferences.init() to find</comment>
    <comment type="line">// the boards.txt and programmers.txt preferences files (which happens</comment>
    <comment type="line">// before the other folders / paths get cached).</comment>
    <return>return <expr><call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"hardware"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getHardwarePath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getHardwareFolder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>UserLibraryFolder</name></argument>&gt;</argument_list></name></type> <name>getLibrariesFolders</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>librariesFolders</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Platform</name></type> <name>getPlatform</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>platform</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getPortableFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>portableFolder</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getPortableSketchbookFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>portableSketchbookFolder</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getCachePath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>buildCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>buildCache</name> <operator>=</operator> <call><name><name>FileUtils</name><operator>.</operator><name>createTempFolder</name></name><argument_list>(<argument><expr><literal type="string">"arduino_cache_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DeleteFilesOnShutdown</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>buildCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>buildCache</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Convenience method to get a File object for the specified filename inside
   * the settings folder.
   * For now, only used by Preferences to get the preferences.txt file.
   * @param filename A file inside the settings folder.
   * @return filename wrapped as a File object inside the settings folder
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getSettingsFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getSettingsFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getSettingsFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>settingsFolder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>preferencesPath</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"settings.path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>preferencesPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>settingsFolder</name> <operator>=</operator> <call><name>absoluteFile</name><argument_list>(<argument><expr><name>preferencesPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>settingsFolder</name> <operator>=</operator> <call><name>getPlatform</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettingsFolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem getting data folder"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error getting the Arduino data folder."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// create the folder if it doesn't exist already</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>settingsFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>settingsFolder</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Settings issues"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Arduino cannot run because it could not\n"</literal> <operator>+</operator>
                        <literal type="string">"create a folder to store your settings."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>settingsFolder</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getSketchbookFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>sketchBookPath</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>sketchBookPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sketchBookPath</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>absoluteFile</name><argument_list>(<argument><expr><name>sketchBookPath</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getSketchbookHardwareFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getSketchbookFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hardware"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>UserLibraryFolder</name></type> <name>getSketchbookLibrariesFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>libdir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getSketchbookFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"libraries"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>libdir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>FileWriter</name></type> <name>freadme</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>libdir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>freadme</name> <operator>=</operator> <operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>, <argument><expr><literal type="string">"readme.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>freadme</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"For information on installing libraries, see: "</literal> <operator>+</operator>
                        <literal type="string">"http://www.arduino.cc/en/Guide/Libraries\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>freadme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><name>libdir</name></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>SKETCHBOOK</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getSketchbookPath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Get the sketchbook path, and make sure it's set properly</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>sketchbookPath</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// If a value is at least set, first check to see if the folder exists.</comment>
    <comment type="line">// If it doesn't, warn the user that the sketchbook folder is being reset.</comment>
    <if_stmt><if>if <condition>(<expr><name>sketchbookPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>sketchbookFolder</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>sketchbookPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sketchbookFolder</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getPortableFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sketchbookPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>sketchbookFolder</name> <operator>=</operator> <call><name>absoluteFile</name><argument_list>(<argument><expr><name>sketchbookPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sketchbookFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketchbook folder disappeared"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The sketchbook folder no longer exists.\n"</literal> <operator>+</operator>
                      <literal type="string">"Arduino will switch to the default sketchbook\n"</literal> <operator>+</operator>
                      <literal type="string">"location, and create a new sketchbook folder if\n"</literal> <operator>+</operator>
                      <literal type="string">"necessary. Arduino will then stop talking about\n"</literal> <operator>+</operator>
                      <literal type="string">"himself in the third person."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sketchbookPath</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>sketchbookPath</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TargetBoard</name></type> <name>getTargetBoard</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <init>= <expr><call><name>getTargetPlatform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>targetPlatform</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>boardId</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getBoard</name></name><argument_list>(<argument><expr><name>boardId</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a specific TargetPackage
   *
   * @param packageName
   * @return
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>TargetPackage</name></type> <name>getTargetPackage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>packageName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>packages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the currently selected TargetPlatform.
   *
   * @return
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>TargetPlatform</name></type> <name>getTargetPlatform</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>packageName</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"target_package"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>platformName</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"target_platform"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getTargetPlatform</name><argument_list>(<argument><expr><name>packageName</name></expr></argument>, <argument><expr><name>platformName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a specific TargetPlatform searching Package/Platform
   *
   * @param packageName
   * @param platformName
   * @return
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>TargetPlatform</name></type> <name>getTargetPlatform</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>packageName</name></decl></parameter>,
                                                 <parameter><decl><type><name>String</name></type> <name>platformName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TargetPackage</name></type> <name>p</name> <init>= <expr><call><name><name>packages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>p</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>platformName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getToolsFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>toolsFolder</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getToolsPath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>toolsFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getBoardManagerLink</name><parameter_list>()</parameter_list> <block>{<block_content>
	  <return>return <expr><name>boardManagerLink</name></expr>;</return>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>PropertyChangeSupport</name></type> <name>propertyChangeSupport</name> <init>= <expr><operator>new</operator> <call><name>PropertyChangeSupport</name><argument_list>(<argument><expr><name><name>BaseNoGui</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBoardManagerLink</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>temp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	  <expr_stmt><expr><name>boardManagerLink</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name><name>propertyChangeSupport</name><operator>.</operator><name>firePropertyChange</name></name><argument_list>(<argument><expr><literal type="string">"boardManagerLink"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>boardManagerLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addPropertyChangeListener</name><parameter_list>(<parameter><decl><type><name>PropertyChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
	  <expr_stmt><expr><call><name><name>propertyChangeSupport</name><operator>.</operator><name>addPropertyChangeListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Given a folder, return a list of the header files in that folder (but not
   * the header files in its sub-folders, as those should be included from
   * within the header files at the top-level).
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>headerListFromIncludePath</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>list</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OnlyFilesWithExtension</name><argument_list>(<argument><expr><literal type="string">".h"</literal></expr></argument>, <argument><expr><literal type="string">".hh"</literal></expr></argument>, <argument><expr><literal type="string">".hpp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>list</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>dumpPrefs</name><parameter_list>(<parameter><decl><type><name>CommandlineParser</name></type> <name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>getGetPref</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>parser</name><operator>.</operator><name>getGetPref</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"#PREFDUMP#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>prefs</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>initLogger</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name><name>LogFactoryImpl</name><operator>.</operator><name>LOG_PROPERTY</name></name></expr></argument>, <argument><expr><call><name><name>NoOpLog</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getCanonicalName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><literal type="string">"javax.jmdns"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setLevel</name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>OFF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>initPackages</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>indexer</name> <operator>=</operator> <operator>new</operator> <call><name>ContributionsIndexer</name><argument_list>(<argument><expr><call><name>getSettingsFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHardwareFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getPlatform</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><operator>new</operator> <call><name>GPGDetachedSignatureVerifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>parseIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JsonProcessingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>indexFile</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getIndexFile</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_INDEX_FILE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>indexSignatureFile</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getIndexFile</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_INDEX_FILE_NAME</name></name> <operator>+</operator> <literal type="string">".sig"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>indexFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>indexSignatureFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>syncWithFilesystem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>packages</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>loadHardware</name><argument_list>(<argument><expr><call><name>getHardwareFolder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>loadContributedHardware</name><argument_list>(<argument><expr><name>indexer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>loadHardware</name><argument_list>(<argument><expr><call><name>getSketchbookHardwareFolder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createToolPreferences</name><argument_list>(<argument><expr><call><name><name>indexer</name><operator>.</operator><name>getInstalledTools</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>librariesIndexer</name> <operator>=</operator> <operator>new</operator> <call><name>LibrariesIndexer</name><argument_list>(<argument><expr><call><name>getSettingsFolder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>librariesIndexer</name><operator>.</operator><name>parseIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JsonProcessingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>librariesIndexFile</name> <init>= <expr><call><name><name>librariesIndexer</name><operator>.</operator><name>getIndexFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>librariesIndexFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <if_stmt><if>if <condition>(<expr><name>discoveryManager</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>discoveryManager</name> <operator>=</operator> <operator>new</operator> <call><name>DiscoveryManager</name><argument_list>(<argument><expr><name>packages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>void</name></type> <name>initPlatform</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>platformClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"processing.app.Platform"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>platformClass</name> <operator>=</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"processing.app.macosx.Platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isWindows</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>platformClass</name> <operator>=</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"processing.app.windows.Platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isLinux</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>platformClass</name> <operator>=</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"processing.app.linux.Platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>platform</name> <operator>=</operator> <operator>(</operator><name>Platform</name><operator>)</operator> <call><name><name>platformClass</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem Setting the Platform"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"An unknown error occurred while trying to load\n"</literal> <operator>+</operator>
                  <literal type="string">"platform-specific code for your machine."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>initPortableFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Portable folder</comment>
    <expr_stmt><expr><name>portableFolder</name> <operator>=</operator> <call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"portable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>portableFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>portableFolder</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>initVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// help 3rd party installers find the correct hardware path</comment>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"last.ide."</literal> <operator>+</operator> <name>VERSION_NAME</name> <operator>+</operator> <literal type="string">".hardwarepath"</literal></expr></argument>, <argument><expr><call><name>getHardwarePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"last.ide."</literal> <operator>+</operator> <name>VERSION_NAME</name> <operator>+</operator> <literal type="string">".daterun"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <operator>(</operator><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Return true if the name is valid for a Processing sketch.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>isSanitaryName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sanitizeName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>void</name></type> <name>loadHardware</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>folder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name><name>list</name><index>[]</index></name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OnlyDirs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if a bad folder or something like that, this might come back null</comment>
    <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// alphabetize list, since it's not always alpha order</comment>
    <comment type="line">// replaced hella slow bubble sort with this feller for 0093</comment>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>CASE_INSENSITIVE_ORDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>target</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// Skip reserved 'tools' folder.</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>target</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"tools"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>subfolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>TargetPackage</name></type> <name>targetPackage</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>packages</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>targetPackage</name> <operator>=</operator> <call><name><name>packages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>targetPackage</name> <operator>=</operator> <operator>new</operator> <call><name>LegacyTargetPackage</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>packages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>loadTargetPackage</name><argument_list>(<argument><expr><name>targetPackage</name></expr></argument>, <argument><expr><name>subfolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TargetPlatformException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"WARNING: Error loading hardware folder "</literal> <operator>+</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>loadTargetPackage</name><parameter_list>(<parameter><decl><type><name>TargetPackage</name></type> <name>targetPackage</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>_folder</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TargetPlatformException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>folders</name> <init>= <expr><call><name><name>_folder</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><name>ONLY_DIRS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>folders</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>File</name></type> <name>subFolder</name> <range>: <expr><name>folders</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>subFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>subFolder</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>arch</name> <init>= <expr><call><name><name>subFolder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>LegacyTargetPlatform</name><argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><name>subFolder</name></expr></argument>, <argument><expr><name>targetPackage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>targetPackage</name><operator>.</operator><name>getPlatforms</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TargetPlatformException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>targetPackage</name><operator>.</operator><name>getPlatforms</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>TargetPlatformException</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No valid hardware definitions found in folder {0}."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>_folder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Grab the contents of a file as a string.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>loadFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>contents</name> <init>= <expr><call><name><name>PApplet</name><operator>.</operator><name>loadStrings</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>contents</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>PApplet</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkInstallationFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isIDEInstalledIntoSettingsFolder</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Incorrect IDE installation folder"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Your copy of the IDE is installed in a subfolder of your settings folder.\nPlease move the IDE to another folder."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isIDEInstalledIntoSketchbookFolder</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Incorrect IDE installation folder"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Your copy of the IDE is installed in a subfolder of your sketchbook.\nPlease move the IDE to another folder."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIDEInstalledIntoSketchbookFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>FileUtils</name><operator>.</operator><name>isSubDirectory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"runtime.ide.path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIDEInstalledIntoSettingsFolder</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>isSubDirectory</name></name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettingsFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"runtime.ide.path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>onBoardOrPortChange</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>examplesFolder</name> <operator>=</operator> <call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"examples"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>toolsFolder</name> <operator>=</operator> <call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"tools"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>librariesFolders</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add IDE libraries folder</comment>
    <expr_stmt><expr><call><name><name>librariesFolders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"libraries"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>IDE_BUILTIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <init>= <expr><call><name>getTargetPlatform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>targetPlatform</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>core</name> <init>= <expr><call><name>getBoardPreferences</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"build.core"</literal></expr></argument>, <argument><expr><literal type="string">"arduino"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>core</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>referencedCore</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>referencedPlatform</name> <init>= <expr><call><name>getTargetPlatform</name><argument_list>(<argument><expr><name>referencedCore</name></expr></argument>, <argument><expr><call><name><name>targetPlatform</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>referencedPlatform</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>File</name></type> <name>referencedPlatformFolder</name> <init>= <expr><call><name><name>referencedPlatform</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">// Add libraries folder for the referenced platform</comment>
          <decl_stmt><decl><type><name>File</name></type> <name>folder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>referencedPlatformFolder</name></expr></argument>, <argument><expr><literal type="string">"libraries"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>librariesFolders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>REFERENCED_CORE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>platformFolder</name> <init>= <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Add libraries folder for the selected platform</comment>
      <decl_stmt><decl><type><name>File</name></type> <name>folder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>platformFolder</name></expr></argument>, <argument><expr><literal type="string">"libraries"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>librariesFolders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>CORE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add libraries folder for the sketchbook</comment>
    <expr_stmt><expr><call><name><name>librariesFolders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getSketchbookLibrariesFolder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Scan for libraries in each library folder.</comment>
    <comment type="line">// Libraries located in the latest folders on the list can override</comment>
    <comment type="line">// other libraries with the same name.</comment>
    <expr_stmt><expr><call><name><name>librariesIndexer</name><operator>.</operator><name>setLibrariesFolders</name></name><argument_list>(<argument><expr><name>librariesFolders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getTargetPlatform</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>librariesIndexer</name><operator>.</operator><name>setArchitecturePriority</name></name><argument_list>(<argument><expr><call><name>getTargetPlatform</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>librariesIndexer</name><operator>.</operator><name>rescanLibraries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>populateImportToLibraryTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>void</name></type> <name>loadContributedHardware</name><parameter_list>(<parameter><decl><type><name>ContributionsIndexer</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>TargetPackage</name></type> <name>pack</name> <range>: <expr><call><name><name>idx</name><operator>.</operator><name>createTargetPackages</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>packages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>pack</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createToolPreferences</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ContributedTool</name></argument>&gt;</argument_list></name></type> <name>installedTools</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>removeOldKeys</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><literal type="string">"runtime.tools."</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>removeOldKeys</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>removeAllKeysWithPrefix</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>latestVersions</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ContributedTool</name></type> <name>tool</name> <range>: <expr><name>installedTools</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>installedFolder</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>toolPath</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>installedFolder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>toolPath</name> <operator>=</operator> <call><name><name>installedFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>toolPath</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>PREF_REMOVE_PLACEHOLDER</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>toolName</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>toolVersion</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <name>toolName</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>toolVersion</name> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>toolPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <call><name><name>tool</name><operator>.</operator><name>getPackager</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>toolName</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>toolVersion</name> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>toolPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// In the generic tool property put the path of the latest version if more are available</comment>
      <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>latestVersions</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>toolName</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>VersionComparator</name><operator>.</operator><name>greaterThan</name></name><argument_list>(<argument><expr><name>toolVersion</name></expr></argument>, <argument><expr><call><name><name>latestVersions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>toolName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>latestVersions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>toolName</name></expr></argument>, <argument><expr><name>toolVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>prefix</name> <operator>+</operator> <name>toolName</name> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>toolPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Ignore invalid versions</comment>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>populateImportToLibraryTable</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Populate importToLibraryTable. Each header filename maps to</comment>
    <comment type="line">// a list of libraries. Compiler.java will use only the first</comment>
    <comment type="line">// library on each list. The others are used only to advise</comment>
    <comment type="line">// user of ambiguously matched and duplicate libraries.</comment>
    <expr_stmt><expr><name>importToLibraryTable</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><call><name><name>librariesIndexer</name><operator>.</operator><name>getInstalledLibraries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name><name>headers</name><index>[]</index></name> <init>= <expr><call><name>headerListFromIncludePath</name><argument_list>(<argument><expr><call><name><name>lib</name><operator>.</operator><name>getSrcFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>header</name> <range>: <expr><name>headers</name></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>LibraryList</name></type> <name>list</name> <init>= <expr><call><name><name>importToLibraryTable</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// This is the first library found with this header</comment>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>importToLibraryTable</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>UserLibrary</name></type> <name>old</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>peekFirst</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useThisLib</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">// This is the case where 2 libraries have a .h header</comment>
            <comment type="line">// with the same name.  We must decide which library to</comment>
            <comment type="line">// use when a sketch has #include "name.h"</comment>
            <comment type="line">//</comment>
            <comment type="line">// When all other factors are equal, "libName" is</comment>
            <comment type="line">// used in preference to "oldName", because getLibraries()</comment>
            <comment type="line">// gives the library list in order from less specific to</comment>
            <comment type="line">// more specific locations.</comment>
            <comment type="line">//</comment>
            <comment type="line">// But often one library is more clearly the user's</comment>
            <comment type="line">// intention to use.  Many cases are tested, always first</comment>
            <comment type="line">// for "libName", then for "oldName".</comment>
            <comment type="line">//</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>header</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>header</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// name without ".h"</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>oldName</name> <init>= <expr><call><name><name>old</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// just the library folder name</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>libName</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// just the library folder name</comment>
            <comment type="line">//System.out.println("name conflict: " + name);</comment>
            <comment type="line">//System.out.println(" old = " + oldName + " -&gt; " + old.getInstalledFolder().getPath());</comment>
            <comment type="line">//System.out.println(" new = " + libName + " -&gt; " + lib.getInstalledFolder().getPath());</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>name_lc</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>oldName_lc</name> <init>= <expr><call><name><name>oldName</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>libName_lc</name> <init>= <expr><call><name><name>libName</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// always favor a perfect name match</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>libName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <comment type="line">// check for "-master" appended (zip file from github)</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name><operator>+</operator><literal type="string">"-master"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name><operator>+</operator><literal type="string">"-master"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <comment type="line">// next, favor a match with other stuff appended</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <comment type="line">// otherwise, favor a match with stuff prepended</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <comment type="line">// as a last resort, match if stuff prepended and appended</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <comment type="line">// repeat all the above tests, with case insensitive matching</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName_lc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName_lc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName_lc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name_lc</name><operator>+</operator><literal type="string">"-master"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName_lc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name_lc</name><operator>+</operator><literal type="string">"-master"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName_lc</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName_lc</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName_lc</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName_lc</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>libName_lc</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>oldName_lc</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>useThisLib</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <comment type="line">// none of these tests matched, so just default to "libName".</comment>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>useThisLib</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>I18n</name>
            <operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to list header files in {0}"</literal></expr></argument>, <argument><expr><call><name><name>lib</name><operator>.</operator><name>getSrcFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>initParameters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>preferencesFile</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Do a first pass over the commandline arguments, the rest of them</comment>
    <comment type="line">// will be processed by the Base constructor. Note that this loop</comment>
    <comment type="line">// does not look at the last element of args, to prevent crashing</comment>
    <comment type="line">// when no parameter was specified to an option. Later, Base() will</comment>
    <comment type="line">// then show an error for these.</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"--preferences-file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>preferencesFile</name> <operator>=</operator> <name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// run static initialization that grabs all the prefs</comment>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name>absoluteFile</name><argument_list>(<argument><expr><name>preferencesFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Produce a sanitized name that fits our standards for likely to work.
   * &lt;p/&gt;
   * Java classes have a wider range of names that are technically allowed
   * (supposedly any Unicode name) than what we support. The reason for
   * going more narrow is to avoid situations with text encodings and
   * converting during the process of moving files between operating
   * systems, i.e. uploading from a Windows machine to a Linux server,
   * or reading a FAT32 partition in OS X and using a thumb drive.
   * &lt;p/&gt;
   * This helper function replaces everything but A-Z, a-z, and 0-9 with
   * underscores. Also disallows starting the sketch name with a digit.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>sanitizeName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>origName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[]</index></name> <init>= <expr><call><name><name>origName</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
          <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
          <operator>(</operator><operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
          <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
          <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// let's not be ridiculous about the length of filenames.</comment>
    <comment type="line">// in fact, Mac OS 9 can handle 255 chars, though it can't really</comment>
    <comment type="line">// deal with filenames longer than 31 chars in the Finder.</comment>
    <comment type="line">// but limiting to that for sketches would mean setting the</comment>
    <comment type="line">// upper-bound on the character limit here to 25 characters</comment>
    <comment type="line">// (to handle the base name + ".class")</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>buffer</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>buffer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Save the content of a String into a file
   * - Save the content into a temp file
   * - Find the canonical path of the file (if it's a symlink, follow it)
   * - Remove the original file
   * - Move temp file to original path
   * This ensures that the file is not getting truncated if the disk is full
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>saveFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>temp</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>createTempFile</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Split the file content using minimum common separator \n</comment>
    <comment type="line">// then trim any other character (\r) so saveStrings can print it in the correct</comment>
    <comment type="line">// format for every OS</comment>
    <decl_stmt><decl><type><name>String</name></type> <name><name>strArray</name><index>[]</index></name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>item</name> <range>: <expr><name>strArray</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>PApplet</name><operator>.</operator><name>saveStrings</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>strArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toRealPath</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>

    <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(
      <argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(
        <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not remove old version of {0}"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>temp</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(
    <argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(
      <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not replace {0}"</literal></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>selectBoard</name><parameter_list>(<parameter><decl><type><name>TargetBoard</name></type> <name>targetBoard</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <init>= <expr><call><name><name>targetBoard</name><operator>.</operator><name>getContainerPlatform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TargetPackage</name></type> <name>targetPackage</name> <init>= <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getContainerPackage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"target_package"</literal></expr></argument>, <argument><expr><call><name><name>targetPackage</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"target_platform"</literal></expr></argument>, <argument><expr><call><name><name>targetPlatform</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>, <argument><expr><call><name><name>targetBoard</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>platformFolder</name> <init>= <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"runtime.platform.path"</literal></expr></argument>, <argument><expr><call><name><name>platformFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"runtime.hardware.path"</literal></expr></argument>, <argument><expr><call><name><name>platformFolder</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>selectSerialPort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BoardPort</name></type> <name>boardPort</name> <init>= <expr><call><name>getDiscoveryManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>boardPort</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"serial.port.iserial"</literal></expr></argument>, <argument><expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"iserial"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>portFile</name> <init>= <expr><name>port</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>port</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/dev/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>portFile</name> <operator>=</operator> <call><name><name>portFile</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"serial.port.file"</literal></expr></argument>, <argument><expr><name>portFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>showError</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Show an error message that's actually fatal to the program.
   * This is an error that can't be recovered. Use showWarning()
   * for errors that allow P5 to continue running.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>showError</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * "No cookie for you" type messages. Nothing fatal or all that
   * much of a bummer, but something to notify the user about.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Non-fatal error message with optional stack trace side dish.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showWarning</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
</unit>
