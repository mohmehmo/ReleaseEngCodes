<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/test/cc/arduino/contributions/UpdatableLibraryTest.java"><package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>ContributedLibrary</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>LibrariesIndexer</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibraryFolder</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibraryFolder</name><operator>.</operator><name>Location</name></name>;</import>

<class><specifier>public</specifier> class <name>UpdatableLibraryTest</name> <block>{

  <decl_stmt><decl><type><name>File</name></type> <name>testdata</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(
      <argument><expr><call><name><name>UpdatableLibraryTest</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><literal type="string">"../testdata/libraries"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>File</name></type> <name>index_SD_only</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"index_SD_only"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>File</name></type> <name>SD111</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"SD_1.1.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>File</name></type> <name>SD121</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"SD_1.2.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>File</name></type> <name>index_Bridge_only</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"index_Bridge_only"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>File</name></type> <name>Bridge163</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"Bridge_1.6.3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>File</name></type> <name>Bridge170</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>, <argument><expr><literal type="string">"Bridge_1.7.0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testUpdatableLibrary</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UserLibraryFolder</name></argument>&gt;</argument_list></name></type> <name>folders</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><name>SD111</name></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>IDE_BUILTIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LibrariesIndexer</name></type> <name>indexer</name> <init>= <expr><operator>new</operator> <call><name>LibrariesIndexer</name><argument_list>(<argument><expr><name>index_SD_only</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name></name> <operator>=</operator> <name>indexer</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>parseIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>setLibrariesFolders</name></name><argument_list>(<argument><expr><name>folders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>rescanLibraries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ContributedLibrary</name></type> <name>sdLib</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstalled</name><argument_list>(<argument><expr><literal type="string">"SD"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"SD lib is installed"</literal></expr></argument>, <argument><expr><call><name><name>sdLib</name><operator>.</operator><name>isLibraryInstalled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"SD installed version"</literal></expr></argument>, <argument><expr><literal type="string">"1.1.1"</literal></expr></argument>, <argument><expr><call><name><name>sdLib</name><operator>.</operator><name>getParsedVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ContributionsSelfCheck</name><operator>.</operator><name>checkForUpdatableLibraries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><name>SD121</name></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>SKETCHBOOK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>setLibrariesFolders</name></name><argument_list>(<argument><expr><name>folders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sdLib</name> <operator>=</operator> <call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstalled</name><argument_list>(<argument><expr><literal type="string">"SD"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"SD lib is installed"</literal></expr></argument>, <argument><expr><call><name><name>sdLib</name><operator>.</operator><name>isLibraryInstalled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"SD installed version"</literal></expr></argument>, <argument><expr><literal type="string">"1.2.1"</literal></expr></argument>, <argument><expr><call><name><name>sdLib</name><operator>.</operator><name>getParsedVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ContributionsSelfCheck</name><operator>.</operator><name>checkForUpdatableLibraries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testUpdatableLibraryWithBundled</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UserLibraryFolder</name></argument>&gt;</argument_list></name></type> <name>folders</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><name>Bridge163</name></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>IDE_BUILTIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LibrariesIndexer</name></type> <name>indexer</name> <init>= <expr><operator>new</operator> <call><name>LibrariesIndexer</name><argument_list>(<argument><expr><name>index_Bridge_only</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name></name> <operator>=</operator> <name>indexer</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>parseIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>setLibrariesFolders</name></name><argument_list>(<argument><expr><name>folders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>rescanLibraries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ContributedLibrary</name></type> <name>l</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstalled</name><argument_list>(<argument><expr><literal type="string">"Bridge"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Bridge lib is installed"</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>isLibraryInstalled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Bridge installed version"</literal></expr></argument>, <argument><expr><literal type="string">"1.6.3"</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>getParsedVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ContributionsSelfCheck</name><operator>.</operator><name>checkForUpdatableLibraries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UserLibraryFolder</name><argument_list>(<argument><expr><name>Bridge170</name></expr></argument>, <argument><expr><name><name>Location</name><operator>.</operator><name>SKETCHBOOK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>setLibrariesFolders</name></name><argument_list>(<argument><expr><name>folders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstalled</name><argument_list>(<argument><expr><literal type="string">"Bridge"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Bridge lib is installed"</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>isLibraryInstalled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Bridge installed version"</literal></expr></argument>, <argument><expr><literal type="string">"1.7.0"</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>getParsedVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>ContributionsSelfCheck</name><operator>.</operator><name>checkForUpdatableLibraries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
