<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/debug/Sizer.java"><comment type="block">/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Sizer - computes the size of a .hex file
  Part of the Arduino project - http://www.arduino.cc/

  Copyright (c) 2006 David A. Mellis
  Copyright (c) 2011 Cristian Maglie &lt;c.maglie@arduino.cc&gt;

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>ProcessUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>StringReplacer</name></name>;</import>

<class><specifier>public</specifier> class <name>Sizer</name> <super_list><implements>implements <super><name>MessageConsumer</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>textSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>eepromSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>RunnerException</name></type> <name>exception</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>PreferencesMap</name></type> <name>prefs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>firstLine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Pattern</name></type> <name>textPattern</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Pattern</name></type> <name>dataPattern</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Pattern</name></type> <name>eepromPattern</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>Sizer</name><parameter_list>(<parameter><decl><type><name>PreferencesMap</name></type> <name>_prefs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>prefs</name> <operator>=</operator> <name>_prefs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>textPattern</name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"recipe.size.regex"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataPattern</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>pref</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"recipe.size.regex.data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pref</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>dataPattern</name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>eepromPattern</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pref</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"recipe.size.regex.eeprom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pref</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>eepromPattern</name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name><name>long</name><index>[]</index></name></type> <name>computeSize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>pattern</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"recipe.size.pattern"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><call><name><name>StringReplacer</name><operator>.</operator><name>formatAndSplit</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>exception</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>textSize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>dataSize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>eepromSize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Process</name></type> <name>process</name> <init>= <expr><call><name><name>ProcessUtils</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MessageSiphon</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>MessageSiphon</name><argument_list>(<argument><expr><call><name><name>process</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MessageSiphon</name></type> <name>err</name> <init>= <expr><operator>new</operator> <call><name>MessageSiphon</name><argument_list>(<argument><expr><call><name><name>process</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>running</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
      <while>while<condition>(<expr><name>running</name></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>err</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>process</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>running</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>intExc</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></catch></try>
      </block_content>}</block></while>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// The default Throwable.toString() never returns null, but apparently</comment>
      <comment type="line">// some sub-class has overridden it to do so, thus we need to check for</comment>
      <comment type="line">// it.  See: http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1166589459</comment>
      <expr_stmt><expr><name>exception</name> <operator>=</operator> <operator>new</operator> <call><name>RunnerException</name><argument_list>(
        <argument><expr><ternary><condition><expr><operator>(</operator><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>e</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <name>r</name></expr> </then><else>: <expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>r</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    
    <if_stmt><if>if <condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><name>exception</name></expr>;</throw></block_content></block></if></if_stmt>
      
    <if_stmt><if>if <condition>(<expr><name>textSize</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>firstLine</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
      
    <return>return <expr><operator>new</operator> <name><name>long</name><index>[]</index></name> <block>{ <expr><name>textSize</name></expr>, <expr><name>dataSize</name></expr>, <expr><name>eepromSize</name></expr> }</block></expr>;</return>
  </block_content>}</block></function>
  
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>firstLine</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>firstLine</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>Matcher</name></type> <name>textMatcher</name> <init>= <expr><call><name><name>textPattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>textMatcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>textSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>textSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>textSize</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>textMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>dataPattern</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Matcher</name></type> <name>dataMatcher</name> <init>= <expr><call><name><name>dataPattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>dataMatcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dataSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>dataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dataSize</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>dataMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>eepromPattern</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Matcher</name></type> <name>eepromMatcher</name> <init>= <expr><call><name><name>eepromPattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>eepromMatcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>eepromSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>eepromSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>eepromSize</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>eepromMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
