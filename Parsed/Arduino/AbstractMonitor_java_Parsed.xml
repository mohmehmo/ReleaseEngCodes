<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/AbstractMonitor.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>BoardPort</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>DiscoveryManager</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowAdapter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractMonitor</name> <super_list><extends>extends <super><name>JFrame</name></super></extends> <implements>implements <super><name>ActionListener</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>updateBuffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Timer</name></type> <name>updateTimer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Timer</name></type> <name>portExistsTimer</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>BoardPort</name></type> <name>boardPort</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>String</name><index>[]</index></name></type> <name>serialRateStrings</name> <init>= <expr><block>{<expr><literal type="string">"300"</literal></expr>, <expr><literal type="string">"1200"</literal></expr>, <expr><literal type="string">"2400"</literal></expr>, <expr><literal type="string">"4800"</literal></expr>, <expr><literal type="string">"9600"</literal></expr>, <expr><literal type="string">"19200"</literal></expr>, <expr><literal type="string">"38400"</literal></expr>, <expr><literal type="string">"57600"</literal></expr>, <expr><literal type="string">"74880"</literal></expr>, <expr><literal type="string">"115200"</literal></expr>, <expr><literal type="string">"230400"</literal></expr>, <expr><literal type="string">"250000"</literal></expr>, <expr><literal type="string">"500000"</literal></expr>, <expr><literal type="string">"1000000"</literal></expr>, <expr><literal type="string">"2000000"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AbstractMonitor</name><parameter_list>(<parameter><decl><type><name>BoardPort</name></type> <name>boardPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>boardPort</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>boardPort</name></name> <operator>=</operator> <name>boardPort</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addWindowListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>WindowAdapter</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>windowClosing</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name>closed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// ignore</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// obvious, no?</comment>
    <decl_stmt><decl><type><name>KeyStroke</name></type> <name>wc</name> <init>= <expr><name><name>Editor</name><operator>.</operator><name>WINDOW_CLOSE_KEYSTROKE</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getRootPane</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInputMap</name><argument_list>(<argument><expr><name><name>JComponent</name><operator>.</operator><name>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getRootPane</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActionMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// ignore</comment>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>onCreateWindow</name><argument_list>(<argument><expr><call><name>getContentPane</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setMinimumSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><call><name>getContentPane</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMinimumSize</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getPreferredSize</name></name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Dimension</name></type> <name>screen</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getScreenSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>locationStr</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"last.serial.location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>locationStr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name> <init>= <expr><call><name><name>PApplet</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>PApplet</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>locationStr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>screen</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>screen</name><operator>.</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setPlacement</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>updateBuffer</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><literal type="number">1048576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>updateTimer</name> <operator>=</operator> <operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// redraw serial monitor at 30 Hz</comment>
    <expr_stmt><expr><call><name><name>updateTimer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ActionListener</name></type> <name>portExists</name> <init>= <expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>ae</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>Base</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>boardPort</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>closed</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>suspend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>closed</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>Editor</name><operator>.</operator><name>isUploading</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>resume</name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>portExistsTimer</name> <operator>=</operator> <operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>portExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// check if the port is still there every second</comment>
    <expr_stmt><expr><call><name><name>portExistsTimer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>closed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>onCreateWindow</name><parameter_list>(<parameter><decl><type><name>Container</name></type> <name>mainPane</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>enableWindow</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>onEnableWindow</name><argument_list>(<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>onEnableWindow</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Puts the window in suspend state, closing the serial port</comment>
  <comment type="line">// to allow other entity (the programmer) to use it</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>suspend</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>enableWindow</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>portExistsTimer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>resume</name><parameter_list>(<parameter><decl><type><name>BoardPort</name></type> <name>boardPort</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>setBoardPort</name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Enable the window</comment>
    <expr_stmt><expr><call><name>enableWindow</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If the window is visible, try to open the serial port</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>setPlacement</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name><name>int</name><index>[]</index></name></type> <name>getPlacement</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get the dimensions of the Frame</comment>
    <decl_stmt><decl><type><name>Rectangle</name></type> <name>bounds</name> <init>= <expr><call><name>getBounds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

    <return>return <expr><name>location</name></expr>;</return>
  </block_content>}</block></function>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>message</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>requiresAuthorization</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getAuthorizationKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>closed</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>open</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>closed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>closed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>BoardPort</name></type> <name>getBoardPort</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>boardPort</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setBoardPort</name><parameter_list>(<parameter><decl><type><name>BoardPort</name></type> <name>boardPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>boardPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>boardPort</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>boardPort</name></name> <operator>=</operator> <name>boardPort</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addToUpdateBuffer</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>buff</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>updateBuffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>consumeUpdateBuffer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>updateBuffer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>updateBuffer</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name>consumeUpdateBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Read and apply new values from the preferences, either because
   * the app is just starting up, or the user just finished messing
   * with things in the Preferences window.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>applyPreferences</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Empty.</comment>
  </block_content>}</block></function><empty_stmt>;</empty_stmt>
}</block></class>
</unit>
