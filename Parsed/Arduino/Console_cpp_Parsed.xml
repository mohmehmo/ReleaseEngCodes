<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/Console.cpp"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Console.h&gt;</cpp:file></cpp:include>

<comment type="line">// Default constructor uses global Bridge instance</comment>
<constructor><name><name>ConsoleClass</name><operator>::</operator><name>ConsoleClass</name></name><parameter_list>()</parameter_list> <member_init_list>:
  <call><name>bridge</name><argument_list>(<argument><expr><name>Bridge</name></expr></argument>)</argument_list></call>, <call><name>inBuffered</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>inReadPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>inBuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>,
  <call><name>autoFlush</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
  <comment type="line">// Empty</comment>
</block_content>}</block></constructor>

<comment type="line">// Constructor with a user provided BridgeClass instance</comment>
<constructor><name><name>ConsoleClass</name><operator>::</operator><name>ConsoleClass</name></name><parameter_list>(<parameter><decl><type><name>BridgeClass</name> <modifier>&amp;</modifier></type><name>_b</name></decl></parameter>)</parameter_list> <member_init_list>:
  <call><name>bridge</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call>, <call><name>inBuffered</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>inReadPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>inBuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>,
  <call><name>autoFlush</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
  <comment type="line">// Empty</comment>
</block_content>}</block></constructor>

<destructor><name><name>ConsoleClass</name><operator>::</operator><name>~ConsoleClass</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>size_t</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>autoFlush</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'P'</literal></expr>, <expr><name>c</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>outBuffer</name><index>[<expr><name>outBuffered</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>outBuffered</name> <operator>==</operator> <name>outBufferSize</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>autoFlush</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'P'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sent</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>sent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>outBuffer</name><index>[<expr><name>outBuffered</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buff</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>sent</name><operator>--</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>outBuffered</name> <operator>==</operator> <name>outBufferSize</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>flush</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>autoFlush</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>, <argument><expr><name>outBuffered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>outBuffered</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>noBuffer</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>autoFlush</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>delete</operator><index>[]</index> <name>outBuffer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>autoFlush</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>buffer</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>noBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>outBuffer</name> <operator>=</operator> <operator>new</operator> <name><name>uint8_t</name><index>[<expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>outBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <comment type="line">// WRITE tag</comment>
  <expr_stmt><expr><name>outBufferSize</name> <operator>=</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>outBuffered</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>autoFlush</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>connected</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>tmp</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tmp</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>available</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// Look if there is new data available</comment>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>inBuffered</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>read</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>inBuffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>inBuffered</name><operator>--</operator></expr>;</expr_stmt>
    <return>return <expr><name><name>inBuffer</name><index>[<expr><name>inReadPos</name><operator>++</operator></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>peek</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>inBuffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name><name>inBuffer</name><index>[<expr><name>inReadPos</name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>doBuffer</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// If there are already char in buffer exit</comment>
  <if_stmt><if>if <condition>(<expr><name>inBuffered</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// Try to buffer up to 32 characters</comment>
  <expr_stmt><expr><name>inReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'p'</literal></expr>, <expr><name>BUFFER_SIZE</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>inBuffered</name> <operator>=</operator> <call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>inBuffer</name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>begin</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>inBuffer</name> <operator>=</operator> <operator>new</operator> <name><name>uint8_t</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ConsoleClass</name><operator>::</operator><name>end</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>noBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>inBuffer</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>delete</operator><index>[]</index> <name>inBuffer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>inBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ConsoleClass</name></type> <name>Console</name></decl>;</decl_stmt>
</unit>
