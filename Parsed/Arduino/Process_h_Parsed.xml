<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/Process.h"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PROCESS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Bridge.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>Process</name> <range>: <expr><name>public</name> <name>Stream</name> <block>{
  <expr><name>public</name><operator>:</operator>
    <comment type="line">// Constructor with a user provided BridgeClass instance</comment>
    <call><name>Process</name><argument_list>(<argument><expr><name>BridgeClass</name> <operator>&amp;</operator><name>_b</name> <operator>=</operator> <name>Bridge</name></expr></argument>)</argument_list></call> <operator>:</operator>
      <call><name>bridge</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>started</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>buffered</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>readPos</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>
    <operator>~</operator><call><name>Process</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>begin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>String</name> <operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>addParameter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>String</name> <operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>unsigned</name> <name>int</name> <call><name>run</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>runAsynchronously</name><argument_list>()</argument_list></call></expr>;
    <expr><name>boolean</name> <call><name>running</name><argument_list>()</argument_list></call></expr>;
    <expr><name>unsigned</name> <name>int</name> <call><name>exitValue</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>close</name><argument_list>()</argument_list></call></expr>;

    <expr><name>unsigned</name> <name>int</name> <call><name>runShellCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>String</name> <operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>runShellCommandAsynchronously</name><argument_list>(<argument><expr><specifier>const</specifier> <name>String</name> <operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>operator</name> <macro><name>bool</name> <argument_list>()</argument_list></macro> <block>{
      <return>return <expr><name>started</name></expr>;</return>
    }</block>

    <comment type="line">// Stream methods</comment>
    <comment type="line">// (read from process stdout)</comment>
    <name>int</name> <call><name>available</name><argument_list>()</argument_list></call></expr>;
    <expr><name>int</name> <call><name>read</name><argument_list>()</argument_list></call></expr>;
    <expr><name>int</name> <call><name>peek</name><argument_list>()</argument_list></call></expr>;
    <comment type="line">// (write to process stdin)</comment>
    <expr><name>size_t</name> <call><name>write</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>flush</name><argument_list>()</argument_list></call></expr>;
    <comment type="line">// TODO: add optimized function for block write</comment>

  <expr><name>private</name><operator>:</operator>
    <name>BridgeClass</name> <operator>&amp;</operator><name>bridge</name></expr>;
    <expr><name>uint8_t</name> <name>handle</name></expr>;
    <expr><name>String</name> <operator>*</operator><name>cmdline</name></expr>;
    <expr><name>boolean</name> <name>started</name></expr>;

  <expr><name>private</name><operator>:</operator>
    <name>void</name> <call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;
    <expr><name>uint8_t</name> <name>buffered</name></expr>;
    <expr><name>uint8_t</name> <name>readPos</name></expr>;
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>BUFFER_SIZE</name> <operator>=</operator> <literal type="number">64</literal></expr>;
    <expr><name>uint8_t</name> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
