<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/Compiler.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>i18n</name><operator>.</operator><name>I18NAwareMessageConsumer</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>BoardPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>CommandLine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>DefaultExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>PumpStreamHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMapException</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>ProcessUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>StringReplacer</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>tools</name><operator>.</operator><name>DoubleQuotedArgumentsOnWindowsCommandLine</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>StandardCopyOption</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> class <name>Compiler</name> <super_list><implements>implements <super><name>MessageConsumer</name></super></implements></super_list> <block>{

  <comment type="line">//used by transifex integration</comment>
  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"'arch' folder is no longer supported! See http://goo.gl/gfFJzU for more information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Archiving built core (caching) in: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Board {0} (platform {1}, package {2}) is unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Bootloader file specified but missing: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Build options changed, rebuilding all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unable to find {0} in {1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Invalid quoting: no closing [{0}] char found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(legacy)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Multiple libraries were found for \"{0}\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">" Not used: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">" Used: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Library can't use both 'src' and 'utility' folders. Double check {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"WARNING: library {0} claims to run on {1} architecture(s) and may be incompatible with your current board which runs on {2} architecture(s)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Looking for recipes like {0}*{1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Board {0}:{1}:{2} doesn''t define a ''build.board'' preference. Auto-set to: {3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Selected board depends on '{0}' core (not installed)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} must be a folder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0}: Unknown package"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} pattern is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Platform {0} (package {1}) is unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Progress {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Missing '{0}' from library in {1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Running: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Running recipe: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Setting build path to {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unhandled type {0} in context key {1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unknown sketch file extension: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Using library {0} at version {1} in folder: {2} {3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Using library {0} in folder: {1} {2}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Using previously compiled file: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"WARNING: Category '{0}' in library {1} is not valid. Setting to '{2}'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: platform.txt from core '{0}' misses property '{1}', using default value '{2}'. Consider upgrading this core."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: platform.txt from core '{0}' contains deprecated {1}, automatically converted to {2}. Consider upgrading this core."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"WARNING: Spurious {0} folder in '{1}' library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch uses {0} bytes ({2}%%) of program storage space. Maximum is {1} bytes."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Couldn't determine program size: {0}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Global variables use {0} bytes ({2}%%) of dynamic memory, leaving {3} bytes for local variables. Maximum is {1} bytes."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Global variables use {0} bytes of dynamic memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch too big; see http://www.arduino.cc/en/Guide/Troubleshooting#size for tips on reducing it."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Not enough memory; see http://www.arduino.cc/en/Guide/Troubleshooting#size for tips on reducing your footprint."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Low memory available, stability problems may occur."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"An error occurred while verifying the sketch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"An error occurred while verifying/uploading the sketch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Can't find the sketch in the specified path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done compiling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done uploading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while uploading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while verifying"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while verifying/uploading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Mode not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Multiple files not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No command line parameters found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No sketch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No sketchbook"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Only --verify, --upload or --get-pref are supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketchbook path not defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The --upload option supports only one file at a time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Verifying and uploading..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <enum>enum <name>BuilderAction</name> <block>{
    <decl><name>COMPILE</name><argument_list>(<argument><expr><literal type="string">"-compile"</literal></expr></argument>)</argument_list></decl>, <decl><name>DUMP_PREFS</name><argument_list>(<argument><expr><literal type="string">"-dump-prefs"</literal></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

    <constructor><name>BuilderAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></enum>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>ERROR_FORMAT</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(.+\\.\\w+):(\\d+)(:\\d+)*:\\s*(fatal)?\\s*error:\\s*(.*)\\s*"</literal></expr></argument>, <argument><expr><name><name>Pattern</name><operator>.</operator><name>MULTILINE</name></name> <operator>|</operator> <name><name>Pattern</name><operator>.</operator><name>DOTALL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>pathToSketch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Sketch</name></type> <name>sketch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>buildPath</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>buildCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>verbose</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>RunnerException</name></type> <name>exception</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Compiler</name><parameter_list>(<parameter><decl><type><name>Sketch</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getPrimaryFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>Compiler</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>pathToSketch</name></decl></parameter>, <parameter><decl><type><name>Sketch</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pathToSketch</name></name> <operator>=</operator> <name>pathToSketch</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sketch</name></name> <operator>=</operator> <name>sketch</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"build.verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>CompilerProgressListener</name></type> <name>progListener</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>exportHex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument>, <argument><expr><name>PreferencesMapException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CompilerProgressListener</name></argument>&gt;</argument_list></name></type> <name>listeners</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>listeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>progListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>listeners</name></expr></argument>, <argument><expr><name>exportHex</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CompilerProgressListener</name></argument>&gt;</argument_list></name></type> <name>progListeners</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>exportHex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument>, <argument><expr><name>PreferencesMapException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>buildPath</name></name> <operator>=</operator> <call><name><name>sketch</name><operator>.</operator><name>getBuildPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>buildCache</name></name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>getCachePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TargetBoard</name></type> <name>board</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetBoard</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>board</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><literal type="string">"Board is not selected"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>platform</name> <init>= <expr><call><name><name>board</name><operator>.</operator><name>getContainerPlatform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TargetPackage</name></type> <name>aPackage</name> <init>= <expr><call><name><name>platform</name><operator>.</operator><name>getContainerPackage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>vidpid</name> <init>= <expr><call><name>VIDPID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>prefs</name> <init>= <expr><call><name>loadPreferences</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>platform</name></expr></argument>, <argument><expr><name>aPackage</name></expr></argument>, <argument><expr><name>vidpid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>MessageConsumerOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>MessageConsumerOutputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ProgressAwareMessageConsumer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>I18NAwareMessageConsumer</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progListeners</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MessageConsumerOutputStream</name></type> <name>err</name> <init>= <expr><operator>new</operator> <call><name>MessageConsumerOutputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>I18NAwareMessageConsumer</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><name><name>Compiler</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>callArduinoBuilder</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>platform</name></expr></argument>, <argument><expr><name>aPackage</name></expr></argument>, <argument><expr><name>vidpid</name></expr></argument>, <argument><expr><name><name>BuilderAction</name><operator>.</operator><name>COMPILE</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>err</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>exportHex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>runActions</name><argument_list>(<argument><expr><literal type="string">"hooks.savehex.presavehex"</literal></expr></argument>, <argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>saveHex</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>runActions</name><argument_list>(<argument><expr><literal type="string">"hooks.savehex.postsavehex"</literal></expr></argument>, <argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>sketch</name><operator>.</operator><name>getPrimaryFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileName</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>VIDPID</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>BoardPort</name></type> <name>boardPort</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>boardPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>vid</name> <init>= <expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"vid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>pid</name> <init>= <expr><call><name><name>boardPort</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>vid</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>vid</name><operator>.</operator><name>toUpperCase</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <call><name><name>pid</name><operator>.</operator><name>toUpperCase</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>PreferencesMap</name></type> <name>loadPreferences</name><parameter_list>(<parameter><decl><type><name>TargetBoard</name></type> <name>board</name></decl></parameter>, <parameter><decl><type><name>TargetPlatform</name></type> <name>platform</name></decl></parameter>, <parameter><decl><type><name>TargetPackage</name></type> <name>aPackage</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>vidpid</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>stdout</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>stderr</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MessageConsumerOutputStream</name></type> <name>err</name> <init>= <expr><operator>new</operator> <call><name>MessageConsumerOutputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>I18NAwareMessageConsumer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Compiler</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>callArduinoBuilder</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>platform</name></expr></argument>, <argument><expr><name>aPackage</name></expr></argument>, <argument><expr><name>vidpid</name></expr></argument>, <argument><expr><name><name>BuilderAction</name><operator>.</operator><name>DUMP_PREFS</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RunnerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>stderr</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch></try>
    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>prefs</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>stdout</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>prefs</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addPathFlagIfPathExists</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>folder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>folder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>callArduinoBuilder</name><parameter_list>(<parameter><decl><type><name>TargetBoard</name></type> <name>board</name></decl></parameter>, <parameter><decl><type><name>TargetPlatform</name></type> <name>platform</name></decl></parameter>, <parameter><decl><type><name>TargetPackage</name></type> <name>aPackage</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>vidpid</name></decl></parameter>, <parameter><decl><type><name>BuilderAction</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>outStream</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>errStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cmd</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"arduino-builder"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-logger=machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>installedPackagesFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSettingsFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"packages"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-hardware"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getHardwareFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-hardware"</literal></expr></argument>, <argument><expr><name>installedPackagesFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-hardware"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookHardwareFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-tools"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"tools-builder"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-tools"</literal></expr></argument>, <argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getHardwarePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tools"</literal></expr></argument>, <argument><expr><literal type="string">"avr"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-tools"</literal></expr></argument>, <argument><expr><name>installedPackagesFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-built-in-libraries"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"libraries"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addPathFlagIfPathExists</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"-libraries"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookLibrariesFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>fqbn</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>aPackage</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>platform</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>board</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>boardOptions</name><argument_list>(<argument><expr><name>board</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>joining</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-fqbn="</literal> <operator>+</operator> <name>fqbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">""</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>vidpid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-vid-pid="</literal> <operator>+</operator> <name>vidpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-ide-version="</literal> <operator>+</operator> <name><name>BaseNoGui</name><operator>.</operator><name>REVISION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-build-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>buildPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-warnings="</literal> <operator>+</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"compiler.warning_level"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"compiler.cache_core"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <name>buildCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-build-cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>buildCache</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getMap</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>subTree</name><argument_list>(<argument><expr><literal type="string">"runtime.build_properties_custom"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>kv</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-prefs="</literal> <operator>+</operator> <call><name><name>kv</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <call><name><name>kv</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-prefs=build.warn_data_percentage="</literal> <operator>+</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"build.warn_data_percentage"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getBoardPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"runtime.tools"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-prefs="</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//commandLine.addArgument("-debug-level=10", false);</comment>

    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"-verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>pathToSketch</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>Process</name></type> <name>proc</name> <init>= <expr><call><name><name>ProcessUtils</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><call><name><name>cmd</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MessageSiphon</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>MessageSiphon</name><argument_list>(<argument><expr><call><name><name>proc</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>msg</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>outStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name>exception</name> <operator>=</operator> <operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MessageSiphon</name></type> <name>err</name> <init>= <expr><operator>new</operator> <call><name>MessageSiphon</name><argument_list>(<argument><expr><call><name><name>proc</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>msg</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>errStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name>exception</name> <operator>=</operator> <operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>err</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>proc</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>

    <if_stmt><if>if <condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><name>exception</name></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} returned {1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cmd</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>RunnerException</name></type> <name>re</name> <init>= <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error compiling for board {0}."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>board</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>re</name><operator>.</operator><name>hideStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>re</name></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>saveHex</name><parameter_list>(<parameter><decl><type><name>PreferencesMap</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compiledSketches</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>subTree</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.tmp_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>copyOfCompiledSketches</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>subTree</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.save_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isExportCompiledSketchSupported</name><argument_list>(<argument><expr><name>compiledSketches</name></expr></argument>, <argument><expr><name>copyOfCompiledSketches</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: This core does not support exporting sketches. Please consider upgrading it or contacting its author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>dict</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dict</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"ide_version"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>BaseNoGui</name><operator>.</operator><name>REVISION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>withBootloaderDict</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dict</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"build.project_name"</literal></expr></argument>, <argument><expr><call><name><name>dict</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"build.project_name"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".with_bootloader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>compiledSketches</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>compiledSketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>saveHex</name><argument_list>(<argument><expr><call><name><name>compiledSketches</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>copyOfCompiledSketches</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>saveHex</name><argument_list>(<argument><expr><call><name><name>compiledSketches</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>copyOfCompiledSketches</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>withBootloaderDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>saveHex</name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getOrExcept</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.tmp_file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getOrExcept</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.save_file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>saveHex</name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getOrExcept</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.tmp_file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>prefs</name><operator>.</operator><name>getOrExcept</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.save_file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>withBootloaderDict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PreferencesMapException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></catch></try>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>saveHex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>compiledSketch</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>copyOfCompiledSketch</name></decl></parameter>, <parameter><decl><type><name>PreferencesMap</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>compiledSketch</name> <operator>=</operator> <call><name><name>StringReplacer</name><operator>.</operator><name>replaceFromMapping</name></name><argument_list>(<argument><expr><name>compiledSketch</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>copyOfCompiledSketch</name> <operator>=</operator> <call><name><name>StringReplacer</name><operator>.</operator><name>replaceFromMapping</name></name><argument_list>(<argument><expr><name>copyOfCompiledSketch</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>copyOfCompiledSketch</name> <operator>=</operator> <call><name><name>copyOfCompiledSketch</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Path</name></type> <name>compiledSketchPath</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Path</name></type> <name>compiledSketchPathInSubfolder</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"build.path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sketch"</literal></expr></argument>, <argument><expr><name>compiledSketch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Path</name></type> <name>compiledSketchPathInBuildPath</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"build.path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compiledSketch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>compiledSketchPathInSubfolder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>compiledSketchPath</name> <operator>=</operator> <name>compiledSketchPathInSubfolder</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>compiledSketchPathInBuildPath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>compiledSketchPath</name> <operator>=</operator> <name>compiledSketchPathInBuildPath</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>Path</name></type> <name>copyOfCompiledSketchFilePath</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>copyOfCompiledSketch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>compiledSketchPath</name></expr></argument>, <argument><expr><name>copyOfCompiledSketchFilePath</name></expr></argument>, <argument><expr><name><name>StandardCopyOption</name><operator>.</operator><name>REPLACE_EXISTING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isExportCompiledSketchSupported</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compiledSketches</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>copyOfCompiledSketches</name></decl></parameter>, <parameter><decl><type><name>PreferencesMap</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><call><name><name>compiledSketches</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>copyOfCompiledSketches</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>copyOfCompiledSketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>compiledSketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>prefs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.tmp_file"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>prefs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">"recipe.output.save_file"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>runActions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recipeClass</name></decl></parameter>, <parameter><decl><type><name>PreferencesMap</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument>, <argument><expr><name>PreferencesMapException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>patterns</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>key</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"recipe."</literal> <operator>+</operator> <name>recipeClass</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>key</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".pattern"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>recipe</name> <range>: <expr><name>patterns</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>runRecipe</name><argument_list>(<argument><expr><name>recipe</name></expr></argument>, <argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>runRecipe</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recipe</name></decl></parameter>, <parameter><decl><type><name>PreferencesMap</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument>, <argument><expr><name>PreferencesMapException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>dict</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dict</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"ide_version"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>BaseNoGui</name><operator>.</operator><name>REVISION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dict</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"sketch_path"</literal></expr></argument>, <argument><expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmdArray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>cmd</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getOrExcept</name></name><argument_list>(<argument><expr><name>recipe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>cmdArray</name> <operator>=</operator> <call><name><name>StringReplacer</name><operator>.</operator><name>formatAndSplit</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name>exec</name><argument_list>(<argument><expr><name>cmdArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// eliminate any empty array entries</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>string</name> <range>: <expr><name>command</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>stringList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name><name>stringList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>stringList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>command</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>c</name> <range>: <expr><name>command</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>DefaultExecutor</name></type> <name>executor</name> <init>= <expr><operator>new</operator> <call><name>DefaultExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setStreamHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>PumpStreamHandler</name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>protected</specifier> <name>Thread</name></type> <name>createPump</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closeWhenExhausted</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Thread</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MyStreamPumper</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>Compiler</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"MyStreamPumper Thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setDaemon</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>

      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CommandLine</name></type> <name>commandLine</name> <init>= <expr><operator>new</operator> <call><name>DoubleQuotedArgumentsOnWindowsCommandLine</name><argument_list>(<argument><expr><name><name>command</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>command</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>commandLine</name><operator>.</operator><name>addArgument</name></name><argument_list>(<argument><expr><name><name>command</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setExitValues</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>RunnerException</name></type> <name>re</name> <init>= <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>re</name><operator>.</operator><name>hideStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>re</name></expr>;</throw>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setExitValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// an error was queued up by message(), barf this back to compile(),</comment>
    <comment type="line">// which will barf it back to Editor. if you're having trouble</comment>
    <comment type="line">// discerning the imagery, consider how cows regurgitate their food</comment>
    <comment type="line">// to digest it, and the fact that they have five stomaches.</comment>
    <comment type="line">//</comment>
    <comment type="line">//System.out.println("throwing up " + exception);</comment>
    <if_stmt><if>if <condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><name>exception</name></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// a failure in the tool (e.g. unable to locate a sub-executable)</comment>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name>
        <operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} returned {1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>command</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>RunnerException</name></type> <name>re</name> <init>= <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error compiling."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>re</name><operator>.</operator><name>hideStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>re</name></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>boardOptions</name><parameter_list>(<parameter><decl><type><name>TargetBoard</name></type> <name>board</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>board</name><operator>.</operator><name>getMenuIds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>board</name><operator>::</operator><name>hasMenu</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>menuId</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>entry</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"custom_"</literal> <operator>+</operator> <name>menuId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>entry</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>menuId</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>entry</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"custom_"</literal> <operator>+</operator> <name>menuId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>selectionId</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>menuId</name> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <name>selectionId</name></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>joining</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Part of the MessageConsumer interface, this is called
   * whenever a piece (usually a line) of error message is spewed
   * out from the compiler. The errors are parsed for their contents
   * and line number, which is then reported back to Editor.
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>verbose</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>buildPath</name> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>buildPath</name> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name><operator>)</operator><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name> <init>= <expr><call><name><name>PApplet</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ERROR_FORMAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pieces</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>errorIdx</name> <init>= <expr><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>error</name> <init>= <expr><name><name>pieces</name><index>[<expr><name>errorIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><name><name>pieces</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name><name>PApplet</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>errorIdx</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>col</name> <operator>=</operator> <call><name><name>PApplet</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"SPI.h: No such file or directory"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Please import the SPI library from the Sketch &gt; Import Library menu."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\nAs of Arduino 0019, the Ethernet library depends on the SPI library."</literal> <operator>+</operator>
          <literal type="string">"\nYou appear to be using it or another library that depends on the SPI library.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"'BYTE' was not declared in this scope"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The 'BYTE' keyword is no longer supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\nAs of Arduino 1.0, the 'BYTE' keyword is no longer supported."</literal> <operator>+</operator>
          <literal type="string">"\nPlease use Serial.write() instead.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"no matching function for call to 'Server::Server(int)'"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The Server class has been renamed EthernetServer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\nAs of Arduino 1.0, the Server class in the Ethernet library "</literal> <operator>+</operator>
          <literal type="string">"has been renamed to EthernetServer.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"no matching function for call to 'Client::Client(byte [4], int)'"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The Client class has been renamed EthernetClient."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\nAs of Arduino 1.0, the Client class in the Ethernet library "</literal> <operator>+</operator>
          <literal type="string">"has been renamed to EthernetClient.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"'Udp' was not declared in this scope"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The Udp class has been renamed EthernetUdp."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\nAs of Arduino 1.0, the Udp class in the Ethernet library "</literal> <operator>+</operator>
          <literal type="string">"has been renamed to EthernetUdp.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"'class TwoWire' has no member named 'send'"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wire.send() has been renamed Wire.write()."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\nAs of Arduino 1.0, the Wire.send() function was renamed "</literal> <operator>+</operator>
          <literal type="string">"to Wire.write() for consistency with other libraries.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"'class TwoWire' has no member named 'receive'"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wire.receive() has been renamed Wire.read()."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\nAs of Arduino 1.0, the Wire.receive() function was renamed "</literal> <operator>+</operator>
          <literal type="string">"to Wire.read() for consistency with other libraries.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"'Mouse' was not declared in this scope"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"'Mouse' not found. Does your sketch include the line '#include &lt;Mouse.h&gt;'?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//msg = _("\nThe 'Mouse' class is only supported on the Arduino Leonardo.\n\n");</comment>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"'Keyboard' was not declared in this scope"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"'Keyboard' not found. Does your sketch include the line '#include &lt;Keyboard.h&gt;'?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//msg = _("\nThe 'Keyboard' class is only supported on the Arduino Leonardo.\n\n");</comment>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>RunnerException</name></type> <name>ex</name> <init>= <expr><call><name>placeException</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>ex</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>ex</name><operator>.</operator><name>getCodeFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrettyName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lineNum</name> <init>= <expr><call><name><name>ex</name><operator>.</operator><name>getCodeLine</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>colNum</name> <init>= <expr><call><name><name>ex</name><operator>.</operator><name>getCodeColumn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>colNum</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>s</name> <operator>=</operator> <name>fileName</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>lineNum</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>colNum</name> <operator>+</operator> <literal type="string">": error: "</literal> <operator>+</operator> <name>error</name> <operator>+</operator> <name>msg</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>s</name> <operator>=</operator> <name>fileName</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>lineNum</name> <operator>+</operator> <literal type="string">": error: "</literal> <operator>+</operator> <name>error</name> <operator>+</operator> <name>msg</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>ex</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>exception</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>exception</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>exception</name> <operator>=</operator> <name>ex</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>exception</name><operator>.</operator><name>hideStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"undefined reference to `SPIClass::begin()'"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"libraries/Robot_Control"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>error</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Please import the SPI library from the Sketch &gt; Import Library menu."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>exception</name> <operator>=</operator> <operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"undefined reference to `Wire'"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"libraries/Robot_Control"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>error</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Please import the Wire library from the Sketch &gt; Import Library menu."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>exception</name> <operator>=</operator> <operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>RunnerException</name></type> <name>placeException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SketchFile</name></type> <name>file</name> <range>: <expr><call><name><name>sketch</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>RunnerException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
