<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/SD_1.1.1/SD/src/utility/SdFatUtil.h"><comment type="block">/* Arduino SdFat Library
 * Copyright (C) 2008 by William Greiman
 *
 * This file is part of the Arduino SdFat Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with the Arduino SdFat Library.  If not, see
 * &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SdFatUtil_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SdFatUtil_h</name></cpp:macro></cpp:define>
<comment type="block" format="doxygen">/**
 * \file
 * Useful utility functions.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Arduino.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__AVR__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avr/pgmspace.h&gt;</cpp:file></cpp:include>
<comment type="block" format="doxygen">/** Store and print a string in flash memory.*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PgmPrint</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SerialPrint_P(PSTR(x))</cpp:value></cpp:define>
<comment type="block" format="doxygen">/** Store and print a string in flash memory followed by a CR/LF.*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PgmPrintln</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SerialPrintln_P(PSTR(x))</cpp:value></cpp:define>
<comment type="block" format="doxygen">/** Defined so doxygen works for function definitions. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOINLINE</name></cpp:macro> <cpp:value>__attribute__((noinline,unused))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSEDOK</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/** Return the number of bytes currently free in RAM. */</comment>
<function><type><specifier>static</specifier> <name>UNUSEDOK</name> <name>int</name></type> <name>FreeRam</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>  <name>__bss_end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name><modifier>*</modifier></type> <name>__brkval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>free_memory</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__brkval</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// if no heap use from end of bss section</comment>
    <expr_stmt><expr><name>free_memory</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>free_memory</name></expr></argument>)</argument_list></call>
                  <operator>-</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>__bss_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// use from top of stack to heap</comment>
    <expr_stmt><expr><name>free_memory</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>free_memory</name></expr></argument>)</argument_list></call>
                  <operator>-</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__brkval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>free_memory</name></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__AVR__</name></cpp:ifdef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/**
 * %Print a string in flash memory to the serial port.
 *
 * \param[in] str Pointer to string stored in flash memory.
 */</comment>
<function><type><specifier>static</specifier> <name>NOINLINE</name> <name>void</name></type> <name>SerialPrint_P</name><parameter_list>(<parameter><decl><type><name>PGM_P</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>c</name></decl>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>pgm_read_byte</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Serial</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/**
 * %Print a string in flash memory followed by a CR/LF.
 *
 * \param[in] str Pointer to string stored in flash memory.
 */</comment>
<function><type><specifier>static</specifier> <name>NOINLINE</name> <name>void</name></type> <name>SerialPrintln_P</name><parameter_list>(<parameter><decl><type><name>PGM_P</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>SerialPrint_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>Serial</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// __AVR__</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// #define SdFatUtil_h</comment>
</unit>
