<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/macosx/ThinkDifferent.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2007 Ben Fry and Casey Reas

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>macosx</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>apple</name><operator>.</operator><name>eawt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>apple</name><operator>.</operator><name>eawt</name><operator>.</operator><name>AppEvent</name><operator>.</operator><name>AppReOpenedEvent</name></name>;</import>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Base</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Editor</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Deal with issues related to thinking different. This handles the basic
 * Mac OS X menu commands (and apple events) for open, about, prefs, etc.
 * &lt;p&gt;
 * Based on OSXAdapter.java from Apple DTS.
 * &lt;/p&gt;
 * As of 0140, this code need not be built on platforms other than OS X,
 * because of the new platform structure which isolates through reflection.
 */</comment>
<class><specifier>public</specifier> class <name>ThinkDifferent</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_WAIT_FOR_BASE</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Application</name></type> <name>application</name> <init>= <expr><call><name><name>Application</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>addAppEventListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AppReOpenedListener</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>appReOpened</name><parameter_list>(<parameter><decl><type><name>AppReOpenedEvent</name></type> <name>aroe</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getEditors</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>handleNew</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// TODO Auto-generated catch block</comment>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>setAboutHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AboutHandler</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>handleAbout</name><parameter_list>(<parameter><decl><type><name><name>AppEvent</name><operator>.</operator><name>AboutEvent</name></name></type> <name>aboutEvent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>waitForBase</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>handleAbout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>setPreferencesHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>PreferencesHandler</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>handlePreferences</name><parameter_list>(<parameter><decl><type><name><name>AppEvent</name><operator>.</operator><name>PreferencesEvent</name></name></type> <name>preferencesEvent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>waitForBase</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>handlePrefs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>setOpenFileHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OpenFilesHandler</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>openFiles</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>AppEvent</name><operator>.</operator><name>OpenFilesEvent</name></name></type> <name>openFilesEvent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>waitForBase</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><call><name><name>openFilesEvent</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
              <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>handleOpen</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Editor</name></argument>&gt;</argument_list></name></type> <name>editors</name> <init>= <expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getEditors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>editors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name><name>editors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSketchController</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUntitled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>handleClose</name></name><argument_list>(<argument><expr><call><name><name>editors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
              </block_content>}</block></catch></try>
            </block_content>}</block></for>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>setQuitHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>QuitHandler</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>handleQuitRequestWith</name><parameter_list>(<parameter><decl><type><name><name>AppEvent</name><operator>.</operator><name>QuitEvent</name></name></type> <name>quitEvent</name></decl></parameter>, <parameter><decl><type><name>QuitResponse</name></type> <name>quitResponse</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>waitForBase</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>Base</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>handleQuit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>quitResponse</name><operator>.</operator><name>performQuit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name><name>quitResponse</name><operator>.</operator><name>cancelQuit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>waitForBase</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>slept</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>Base</name><operator>.</operator><name>INSTANCE</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>slept</name> <operator>&gt;=</operator> <name>MAX_WAIT_FOR_BASE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>slept</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>sleep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>millis</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">//ignore</comment>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

}</block></class>
</unit>
