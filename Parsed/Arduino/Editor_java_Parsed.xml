<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/Editor.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-09 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2
  as published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>scale</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>BorderLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Container</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Rectangle</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Toolkit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>datatransfer</name><operator>.</operator><name>DataFlavor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>datatransfer</name><operator>.</operator><name>Transferable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>InputEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowAdapter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>PageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>PrinterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>PrinterJob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLClassLoader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipFile</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>AbstractAction</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>Box</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JCheckBoxMenuItem</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JComponent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JDialog</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JFrame</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JMenu</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JMenuBar</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JMenuItem</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JOptionPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JSplitPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextArea</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>KeyStroke</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>SwingUtilities</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>TransferHandler</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>MenuEvent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>MenuListener</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>BadLocationException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>Element</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>folding</name><operator>.</operator><name>FoldManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>jcraft</name><operator>.</operator><name>jsch</name><operator>.</operator><name>JSchException</name></name>;</import>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>CompilerProgressListener</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>BoardPort</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>MonitorFactory</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>Uploader</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>uploaders</name><operator>.</operator><name>SerialUploader</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>GoToLineNumber</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>StubMenuListener</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>findreplace</name><operator>.</operator><name>FindReplace</name></name>;</import>
<import>import <name><name>jssc</name><operator>.</operator><name>SerialPortException</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>RunnerException</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetBoard</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>forms</name><operator>.</operator><name>PasswordAuthorizationDialog</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>DocumentTextChangeListener</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>Keys</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMapException</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>StringReplacer</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>PdeKeywords</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>SketchTextArea</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>tools</name><operator>.</operator><name>MenuScroller</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>tools</name><operator>.</operator><name>Tool</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Main editor panel for the Processing Development Environment.
 */</comment>
<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>Editor</name> <super_list><extends>extends <super><name>JFrame</name></super></extends> <implements>implements <super><name>RunnerListener</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_TIME_AWAITING_FOR_RESUMING_SERIAL_MONITOR</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>final</specifier> <name>Platform</name></type> <name>platform</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenu</name></type> <name>recentSketchesMenu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenu</name></type> <name>programmersMenu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Box</name></type> <name>upper</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>EditorTab</name></argument>&gt;</argument_list></name></type> <name>tabs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentTabIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ShouldSaveIfModified</name>
      <super_list><implements>implements <super><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>SketchController</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>SketchController</name></type> <name>controller</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.save_on_verify"</literal></expr></argument>)</argument_list></call>
             <operator>&amp;&amp;</operator> <call><name><name>controller</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isModified</name><argument_list>()</argument_list></call>
             <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>controller</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CanExportInSketchFolder</name>
      <super_list><implements>implements <super><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>SketchController</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>SketchController</name></type> <name>controller</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>controller</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>controller</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isModified</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.save_on_verify"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <decl_stmt><decl><type><specifier>final</specifier> <name>Base</name></type> <name>base</name></decl>;</decl_stmt>

  <comment type="line">// otherwise, if the window is resized with the message label</comment>
  <comment type="line">// set to blank, it's preferredSize() will be fukered</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EMPTY</name> <init>=
    <expr><literal type="string">"                                                                     "</literal> <operator>+</operator>
    <literal type="string">"                                                                     "</literal> <operator>+</operator>
    <literal type="string">"                                                                     "</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/** Command on Mac OS X, Ctrl on Windows and Linux */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHORTCUT_KEY_MASK</name> <init>=
    <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMenuShortcutKeyMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Command-W on Mac OS X, Ctrl-W on Windows and Linux */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>KeyStroke</name></type> <name>WINDOW_CLOSE_KEYSTROKE</name> <init>=
    <expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><name>SHORTCUT_KEY_MASK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/** Command-Option on Mac OS X, Ctrl-Alt on Windows and Linux */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHORTCUT_ALT_KEY_MASK</name> <init>= <expr><name><name>ActionEvent</name><operator>.</operator><name>ALT_MASK</name></name> <operator>|</operator>
    <call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMenuShortcutKeyMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * true if this file has not yet been given a name by the user
   */</comment>
  <decl_stmt><decl><type><name>boolean</name></type> <name>untitled</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>PageFormat</name></type> <name>pageFormat</name></decl>;</decl_stmt>

  <comment type="line">// file, sketch, and tools menus for re-inserting items</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenu</name></type> <name>fileMenu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenu</name></type> <name>toolsMenu</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numTools</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>avoidMultipleOperations</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EditorToolbar</name></type> <name>toolbar</name></decl>;</decl_stmt>
  <comment type="line">// these menus are shared so that they needn't be rebuilt for all windows</comment>
  <comment type="line">// each time a sketch is created, renamed, or moved.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JMenu</name></type> <name>toolbarMenu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JMenu</name></type> <name>sketchbookMenu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JMenu</name></type> <name>examplesMenu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JMenu</name></type> <name>importMenu</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>JMenu</name></type> <name>portMenu</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>AbstractMonitor</name></type> <name>serialMonitor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>AbstractMonitor</name></type> <name>serialPlotter</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>final</specifier> <name>EditorHeader</name></type> <name>header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EditorStatus</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EditorConsole</name></type> <name>console</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>JSplitPane</name></type> <name>splitPane</name></decl>;</decl_stmt>

  <comment type="line">// currently opened program</comment>
  <decl_stmt><decl><type><name>SketchController</name></type> <name>sketchController</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sketch</name></type> <name>sketch</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>EditorLineStatus</name></type> <name>lineStatus</name></decl>;</decl_stmt>

  <comment type="line">//JEditorPane editorPane;</comment>

  <comment type="block" format="javadoc">/** Contains all EditorTabs, of which only one will be visible */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JPanel</name></type> <name>codePanel</name></decl>;</decl_stmt>

  <comment type="line">//Runner runtime;</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>saveMenuItem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>saveAsMenuItem</name></decl>;</decl_stmt>

  <comment type="line">//boolean presenting;</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <name>boolean</name></type> <name>uploading</name></decl>;</decl_stmt>

  <comment type="line">// undo fellers</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>undoItem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>redoItem</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>FindReplace</name></type> <name>find</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Runnable</name></type> <name>runHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Runnable</name></type> <name>presentHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Runnable</name></type> <name>runAndSaveHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Runnable</name></type> <name>presentAndSaveHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>UploadHandler</name></type> <name>uploadHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>UploadHandler</name></type> <name>uploadUsingProgrammerHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Runnable</name></type> <name>timeoutUploadHandler</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Tool</name></argument>&gt;</argument_list></name></type> <name>internalToolCache</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Tool</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Editor</name><parameter_list>(<parameter><decl><type><name>Base</name></type> <name>ibase</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>storedLocation</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>defaultLocation</name></decl></parameter>, <parameter><decl><type><name>Platform</name></type> <name>platform</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"Arduino"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>ibase</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>platform</name></name> <operator>=</operator> <name>platform</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Install default actions for Run, Present, etc.</comment>
    <expr_stmt><expr><call><name>resetHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// add listener to handle window close box hit event</comment>
    <expr_stmt><expr><call><name>addWindowListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>WindowAdapter</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>windowClosing</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>handleClose</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// don't close the window when clicked, the app will take care</comment>
    <comment type="line">// of that via the handleQuitInternal() methods</comment>
    <comment type="line">// http://dev.processing.org/bugs/show_bug.cgi?id=440</comment>
    <expr_stmt><expr><call><name>setDefaultCloseOperation</name><argument_list>(<argument><expr><name><name>JFrame</name><operator>.</operator><name>DO_NOTHING_ON_CLOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// When bringing a window to front, let the Base know</comment>
    <expr_stmt><expr><call><name>addWindowListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>WindowAdapter</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>windowActivated</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>handleActivated</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="line">// added for 1.0.5</comment>
        <comment type="line">// http://dev.processing.org/bugs/show_bug.cgi?id=1260</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>windowDeactivated</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>toolsMenuItemsToRemove</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>Component</name></type> <name>menuItem</name> <range>: <expr><call><name><name>toolsMenu</name><operator>.</operator><name>getMenuComponents</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>menuItem</name> <operator>instanceof</operator> <name>JComponent</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>Object</name></type> <name>removeOnWindowDeactivation</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JComponent</name><operator>)</operator> <name>menuItem</name><operator>)</operator><operator>.</operator><call><name>getClientProperty</name><argument_list>(<argument><expr><literal type="string">"removeOnWindowDeactivation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>removeOnWindowDeactivation</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>removeOnWindowDeactivation</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>toolsMenuItemsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>menuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
          <for>for <control>(<init><decl><type><name>Component</name></type> <name>menuItem</name> <range>: <expr><name>toolsMenuItemsToRemove</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>menuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>portMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//PdeKeywords keywords = new PdeKeywords();</comment>
    <comment type="line">//sketchbook = new Sketchbook(this);</comment>

    <expr_stmt><expr><call><name>buildMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// For rev 0120, placing things inside a JPanel</comment>
    <decl_stmt><decl><type><name>Container</name></type> <name>contentPain</name> <init>= <expr><call><name>getContentPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentPain</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JPanel</name></type> <name>pane</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pane</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentPain</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pane</name></expr></argument>, <argument><expr><name><name>BorderLayout</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Box</name></type> <name>box</name> <init>= <expr><call><name><name>Box</name><operator>.</operator><name>createVerticalBox</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>upper</name> <operator>=</operator> <call><name><name>Box</name><operator>.</operator><name>createVerticalBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>toolbarMenu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>toolbarMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildToolbarMenu</name></name><argument_list>(<argument><expr><name>toolbarMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>toolbar</name> <operator>=</operator> <operator>new</operator> <call><name>EditorToolbar</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>toolbarMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>upper</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>new</operator> <call><name>EditorHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>upper</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// assemble console panel, consisting of status area and the console itself</comment>
    <decl_stmt><decl><type><name>JPanel</name></type> <name>consolePanel</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>consolePanel</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>status</name> <operator>=</operator> <operator>new</operator> <call><name>EditorStatus</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>consolePanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>BorderLayout</name><operator>.</operator><name>NORTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>console</name> <operator>=</operator> <operator>new</operator> <call><name>EditorConsole</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"console"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// windows puts an ugly border on this guy</comment>
    <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>setBorder</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>consolePanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><name><name>BorderLayout</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>lineStatus</name> <operator>=</operator> <operator>new</operator> <call><name>EditorLineStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>consolePanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lineStatus</name></expr></argument>, <argument><expr><name><name>BorderLayout</name><operator>.</operator><name>SOUTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>codePanel</name> <operator>=</operator> <operator>new</operator> <call><name>JPanel</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>upper</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>codePanel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>splitPane</name> <operator>=</operator> <operator>new</operator> <call><name>JSplitPane</name><argument_list>(<argument><expr><name><name>JSplitPane</name><operator>.</operator><name>VERTICAL_SPLIT</name></name></expr></argument>, <argument><expr><name>upper</name></expr></argument>, <argument><expr><name>consolePanel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// repaint child panes while resizing</comment>
    <expr_stmt><expr><call><name><name>splitPane</name><operator>.</operator><name>setContinuousLayout</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// if window increases in size, give all of increase to</comment>
    <comment type="line">// the textarea in the uppper pane</comment>
    <expr_stmt><expr><call><name><name>splitPane</name><operator>.</operator><name>setResizeWeight</name></name><argument_list>(<argument><expr><literal type="number">1D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// to fix ugliness.. normally macosx java 1.3 puts an</comment>
    <comment type="line">// ugly white border around this object, so turn it off.</comment>
    <expr_stmt><expr><call><name><name>splitPane</name><operator>.</operator><name>setBorder</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// By default, the split pane binds Ctrl-Tab and Ctrl-Shift-Tab for changing</comment>
    <comment type="line">// focus. Since we do not use that, but want to use these shortcuts for</comment>
    <comment type="line">// switching tabs, remove the bindings from the split pane. This allows the</comment>
    <comment type="line">// events to bubble up and be handled by the EditorHeader.</comment>
    <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>killBinding</name></name><argument_list>(<argument><expr><name>splitPane</name></expr></argument>, <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrl</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>killBinding</name></name><argument_list>(<argument><expr><name>splitPane</name></expr></argument>, <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrlShift</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>splitPane</name><operator>.</operator><name>setDividerSize</name></name><argument_list>(<argument><expr><call><name>scale</name><argument_list>(<argument><expr><call><name><name>splitPane</name><operator>.</operator><name>getDividerSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// the following changed from 600, 400 for netbooks</comment>
    <comment type="line">// http://code.google.com/p/arduino/issues/detail?id=52</comment>
    <expr_stmt><expr><call><name><name>splitPane</name><operator>.</operator><name>setMinimumSize</name></name><argument_list>(<argument><expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">600</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>box</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>splitPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// hopefully these are no longer needed w/ swing</comment>
    <comment type="line">// (har har har.. that was wishful thinking)</comment>
    <comment type="line">// listener = new EditorListener(this, textarea);</comment>
    <expr_stmt><expr><call><name><name>pane</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>pane</name><operator>.</operator><name>setTransferHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileDropHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the minimum size for the editor window</comment>
    <expr_stmt><expr><call><name>setMinimumSize</name><argument_list>(<argument><expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(
        <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"editor.window.width.min"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"editor.window.height.min"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Bring back the general options for the editor</comment>
    <expr_stmt><expr><call><name>applyPreferences</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Finish preparing Editor (formerly found in Base)</comment>
    <expr_stmt><expr><call><name>pack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the window bounds and the divider location before setting it visible</comment>
    <expr_stmt><expr><call><name>setPlacement</name><argument_list>(<argument><expr><name>storedLocation</name></expr></argument>, <argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Open the document that was passed in</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>loaded</name> <init>= <expr><call><name>handleOpenInternal</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>loaded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sketchController</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// default the console output to the last opened editor</comment>
    <expr_stmt><expr><call><name><name>EditorConsole</name><operator>.</operator><name>setCurrentEditorConsole</name></name><argument_list>(<argument><expr><name>console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>


  <comment type="block" format="javadoc">/**
   * Handles files dragged &amp; dropped from the desktop and into the editor
   * window. Dragging files into the editor window is the same as using
   * "Sketch &amp;rarr; Add File" for each file.
   */</comment>
  <class><specifier>private</specifier> class <name>FileDropHandler</name> <super_list><extends>extends <super><name>TransferHandler</name></super></extends></super_list> <block>{
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canImport</name><parameter_list>(<parameter><decl><type><name>JComponent</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name><name>DataFlavor</name><index>[]</index></name></type> <name>flavors</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>importData</name><parameter_list>(<parameter><decl><type><name>JComponent</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Transferable</name></type> <name>transferable</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>successful</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>DataFlavor</name></type> <name>uriListFlavor</name> <init>=
          <expr><operator>new</operator> <call><name>DataFlavor</name><argument_list>(<argument><expr><literal type="string">"text/uri-list;class=java.lang.String"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>transferable</name><operator>.</operator><name>isDataFlavorSupported</name></name><argument_list>(<argument><expr><name><name>DataFlavor</name><operator>.</operator><name>javaFileListFlavor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name><operator>)</operator>
            <call><name><name>transferable</name><operator>.</operator><name>getTransferData</name></name><argument_list>(<argument><expr><name><name>DataFlavor</name><operator>.</operator><name>javaFileListFlavor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>sketchController</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>successful</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>transferable</name><operator>.</operator><name>isDataFlavorSupported</name></name><argument_list>(<argument><expr><name>uriListFlavor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="line">// Some platforms (Mac OS X and Linux, when this began) preferred</comment>
          <comment type="line">// this method of moving files.</comment>
          <decl_stmt><decl><type><name>String</name></type> <name>data</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>transferable</name><operator>.</operator><name>getTransferData</name></name><argument_list>(<argument><expr><name>uriListFlavor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name> <init>= <expr><call><name><name>PApplet</name><operator>.</operator><name>splitTokens</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>String</name></type> <name>piece</name> <range>: <expr><name>pieces</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>piece</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>piece</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"file:///"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>piece</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>piece</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"file:/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>piece</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>sketchController</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>successful</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></catch></try>

      <if_stmt><if>if <condition>(<expr><name>successful</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No files were added to the sketch."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>successful</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"One file added to the sketch."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} files added to the sketch."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>successful</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setPlacement</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>storedLocation</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>defaultLocation</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>storedLocation</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>storedLocation</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setExtendedState</name><argument_list>(<argument><expr><name><name>storedLocation</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setPlacement</name><argument_list>(<argument><expr><name>defaultLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setPlacement</name><argument_list>(<argument><expr><name>storedLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setPlacement</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>location</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>splitPane</name><operator>.</operator><name>setDividerLocation</name></name><argument_list>(<argument><expr><name><name>location</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name><name>int</name><index>[]</index></name></type> <name>getPlacement</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get the dimensions of the Frame</comment>
    <decl_stmt><decl><type><name>Rectangle</name></type> <name>bounds</name> <init>= <expr><call><name>getBounds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

    <comment type="line">// Get the current placement of the divider</comment>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name><name>splitPane</name><operator>.</operator><name>getDividerLocation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>getExtendedState</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>MAXIMIZED_BOTH</name></expr>;</expr_stmt>

    <return>return <expr><name>location</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <comment type="block" format="javadoc">/**
   * Read and apply new values from the preferences, either because
   * the app is just starting up, or the user just finished messing
   * with things in the Preferences window.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>applyPreferences</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>boolean</name></type> <name>external</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.external"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>saveMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><name>external</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>saveAsMenuItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><name>external</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>EditorTab</name></type> <name>tab</name><range>: <expr><name>tabs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>applyPreferences</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>applyPreferences</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>applyPreferences</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>buildMenuBar</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuBar</name></type> <name>menubar</name> <init>= <expr><operator>new</operator> <call><name>JMenuBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>JMenu</name></type> <name>fileMenu</name> <init>= <expr><call><name>buildFileMenu</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>addMenuListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>StubMenuListener</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>menuSelected</name><parameter_list>(<parameter><decl><type><name>MenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>fileMenu</name><operator>.</operator><name>getMenuComponents</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>sketchbookMenu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>sketchbookMenu</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>examplesMenu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>examplesMenu</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>revalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menubar</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fileMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menubar</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>buildEditMenu</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>JMenu</name></type> <name>sketchMenu</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>setMnemonic</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_S</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>addMenuListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>StubMenuListener</name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>menuSelected</name><parameter_list>(<parameter><decl><type><name>MenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>buildSketchMenu</name><argument_list>(<argument><expr><name>sketchMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>revalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>buildSketchMenu</name><argument_list>(<argument><expr><name>sketchMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menubar</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sketchMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>JMenu</name></type> <name>toolsMenu</name> <init>= <expr><call><name>buildToolsMenu</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>addMenuListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>StubMenuListener</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>menuSelected</name><parameter_list>(<parameter><decl><type><name>MenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>toolsMenu</name><operator>.</operator><name>getMenuComponents</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>JMenu</name></type> <name>menu</name> <range>: <expr><call><name><name>base</name><operator>.</operator><name>getBoardsCustomMenus</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>numTools</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>portMenu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>portMenu</name></expr></argument>, <argument><expr><name>numTools</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>programmersMenu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>getProgrammerMenus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>programmersMenu</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>revalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menubar</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>toolsMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menubar</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>buildHelpMenu</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setJMenuBar</name><argument_list>(<argument><expr><name>menubar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>JMenu</name></type> <name>buildFileMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>fileMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"File"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>setMnemonic</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"New"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>handleNew</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name><name>Editor</name><operator>.</operator><name>newJMenuItem</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>handleOpenPrompt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildRecentSketchesMenuItems</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>recentSketchesMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open Recent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>rebuildRecentSketchesMenu</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>recentSketchesMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sketchbookMenu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sketchbookMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketchbook"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>sketchbookMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildSketchbookMenu</name></name><argument_list>(<argument><expr><name>sketchbookMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sketchbookMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>examplesMenu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>examplesMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Examples"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>examplesMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildExamplesMenu</name></name><argument_list>(<argument><expr><name>examplesMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>examplesMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name><name>Editor</name><operator>.</operator><name>newJMenuItem</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Close"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>base</name><operator>.</operator><name>handleClose</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>saveMenuItem</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>saveMenuItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleSave</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>saveMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>saveAsMenuItem</name> <operator>=</operator> <call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save As..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>saveAsMenuItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleSaveAs</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>saveAsMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Page Setup"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handlePageSetup</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Print"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handlePrint</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// macosx already has its own preferences and quit menu</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>OSUtils</name><operator>.</operator><name>hasMacOSStyleMenus</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Preferences"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>base</name><operator>.</operator><name>handlePrefs</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Quit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>base</name><operator>.</operator><name>handleQuit</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fileMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>fileMenu</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildRecentSketchesMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>recentSketchesMenu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>JMenuItem</name></type> <name>recentSketchMenuItem</name>  <range>: <expr><call><name><name>base</name><operator>.</operator><name>getRecentSketchesMenuItems</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>recentSketchesMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>recentSketchMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>buildSketchMenu</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>sketchMenu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Verify/Compile"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleRun</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>presentHandler</name></expr></argument>, <argument><expr><name>runHandler</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Upload"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleExport</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Upload Using Programmer"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleExport</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItemAlt</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Export compiled Binary"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>new</operator> <call><name>CanExportInSketchFolder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>test</name><argument_list>(<argument><expr><name>sketchController</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Export canceled, changes must first be saved."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>handleRun</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>CanExportInSketchFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>presentAndSaveHandler</name></expr></argument>, <argument><expr><name>runAndSaveHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//    item = new JMenuItem("Stop");</comment>
<comment type="line">//    item.addActionListener(event -&gt; handleStop());</comment>
<comment type="line">//    sketchMenu.add(item);</comment>

    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Show Sketch Folder"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>openFolder</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>Base</name><operator>.</operator><name>openFolderAvailable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>importMenu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>importMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Include Library"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>importMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildImportMenu</name></name><argument_list>(<argument><expr><name>importMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>importMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Add File..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>sketchController</name><operator>.</operator><name>handleAddFile</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketchMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>JMenu</name></type> <name>buildToolsMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>toolsMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Tools"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>setMnemonic</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_T</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addInternalTools</name><argument_list>(<argument><expr><name>toolsMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Manage Libraries..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>base</name><operator>.</operator><name>openLibraryManager</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial Monitor"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleSerial</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial Plotter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handlePlotter</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addTools</name><argument_list>(<argument><expr><name>toolsMenu</name></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getToolsFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>sketchbookTools</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tools"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>addTools</name><argument_list>(<argument><expr><name>toolsMenu</name></expr></argument>, <argument><expr><name>sketchbookTools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numTools</name> <operator>=</operator> <call><name><name>toolsMenu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// XXX: DAM: these should probably be implemented using the Tools plugin</comment>
    <comment type="line">// API, if possible (i.e. if it supports custom actions, etc.)</comment>

    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>getBoardsCustomMenus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>toolsMenu</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>portMenu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>portMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>populatePortMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>portMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>portMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Get Board Info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleBoardInfo</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildProgrammerMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>programmersMenu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Programmer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>programmersMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>getProgrammerMenus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>programmersMenu</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>programmersMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Burn Bootloader"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleBurnBootloader</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>toolsMenu</name><operator>.</operator><name>addMenuListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>StubMenuListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>menuSelected</name><parameter_list>(<parameter><decl><type><name>MenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">//System.out.println("Tools menu selected.");</comment>
        <expr_stmt><expr><call><name>populatePortMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Component</name></type> <name>c</name> <range>: <expr><call><name><name>toolsMenu</name><operator>.</operator><name>getMenuComponents</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>instanceof</operator> <name>JMenu</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>c</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>JMenu</name></type> <name>menu</name> <init>= <expr><operator>(</operator><name>JMenu</name><operator>)</operator><name>c</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>basename</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>basename</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sel</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>item</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>sel</name> <operator>=</operator> <call><name><name>item</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>sel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>sel</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name><name>sel</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sel</name> <operator>=</operator> <call><name><name>sel</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"..."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>newname</name> <init>= <expr><name>basename</name> <operator>+</operator> <literal type="string">": \""</literal> <operator>+</operator> <name>sel</name> <operator>+</operator> <literal type="string">"\""</literal></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>toolsMenu</name></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>addTools</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>sourceFolder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sourceFolder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>JMenuItem</name></argument>&gt;</argument_list></name></type> <name>toolItems</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>folders</name> <init>= <expr><call><name><name>sourceFolder</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FileFilter</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>folder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="line">//System.out.println("checking " + folder);</comment>
          <decl_stmt><decl><type><name>File</name></type> <name>subfolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><literal type="string">"tool"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name><name>subfolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>folders</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>folders</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>File</name></type> <name>folder</name> <range>: <expr><name>folders</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>toolDirectory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><literal type="string">"tool"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <try>try <block>{<block_content>
        <comment type="line">// add dir to classpath for .classes</comment>
        <comment type="line">//urlList.add(toolDirectory.toURL());</comment>

        <comment type="line">// add .jar files to classpath</comment>
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>archives</name> <init>= <expr><call><name><name>toolDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list> <block>{
          <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>name</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">".jar"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
              <call><name><name>name</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">".zip"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
          </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>URL</name><index>[]</index></name></type> <name>urlList</name> <init>= <expr><operator>new</operator> <name><name>URL</name><index>[<expr><name><name>archives</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>urlList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>urlList</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>archives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>toURI</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toURL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>URLClassLoader</name></type> <name>loader</name> <init>= <expr><operator>new</operator> <call><name>URLClassLoader</name><argument_list>(<argument><expr><name>urlList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>archive</name> <range>: <expr><name>archives</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><name>className</name> <operator>=</operator> <call><name>findClassInZipFile</name><argument_list>(<argument><expr><call><name><name>folder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>className</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="block">/*
        // Alternatively, could use manifest files with special attributes:
        // http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html
        // Example code for loading from a manifest file:
        // http://forums.sun.com/thread.jspa?messageID=3791501
        File infoFile = new File(toolDirectory, "tool.txt");
        if (!infoFile.exists()) continue;

        String[] info = PApplet.loadStrings(infoFile);
        //Main-Class: org.poo.shoe.AwesomerTool
        //String className = folders[i].getName();
        String className = null;
        for (int k = 0; k &lt; info.length; k++) {
          if (info[k].startsWith(";")) continue;

          String[] pieces = PApplet.splitTokens(info[k], ": ");
          if (pieces.length == 2) {
            if (pieces[0].equals("Main-Class")) {
              className = pieces[1];
            }
          }
        }
        */</comment>
        <comment type="line">// If no class name found, just move on.</comment>
        <if_stmt><if>if <condition>(<expr><name>className</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>toolClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Tool</name></type> <name>tool</name> <init>= <expr><operator>(</operator><name>Tool</name><operator>)</operator> <call><name><name>toolClass</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>tool</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getMenuTitle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
          <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">//new Thread(tool).start();</comment>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//menu.add(item);</comment>
        <expr_stmt><expr><call><name><name>toolItems</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toolList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>toolItems</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>toolList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>toolList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>title</name> <range>: <expr><name>toolList</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>toolItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>String</name></type> <name>findClassInZipFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Class file to search for</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>classFileName</name> <init>= <expr><literal type="string">"/"</literal> <operator>+</operator> <name>base</name> <operator>+</operator> <literal type="string">".class"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ZipFile</name></type> <name>zipFile</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>zipFile</name> <operator>=</operator> <operator>new</operator> <call><name>ZipFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name><name>zipFile</name><operator>.</operator><name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>entries</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>ZipEntry</name><operator>)</operator> <call><name><name>entries</name><operator>.</operator><name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entry</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">//System.out.println("entry: " + name);</comment>

          <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>classFileName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">//int slash = name.lastIndexOf('/');</comment>
            <comment type="line">//String packageName = (slash == -1) ? "" : name.substring(0, slash);</comment>
            <comment type="line">// Remove .class and convert slashes to periods.</comment>
            <return>return <expr><call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">//System.err.println("Ignoring " + filename + " (" + e.getMessage() + ")");</comment>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>zipFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
           <expr_stmt><expr><call><name><name>zipFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <comment type="line">// noop</comment>
         </block_content>}</block></catch></try>
       </block_content>}</block></if></if_stmt>
     </block_content>}</block></finally></try>
     <return>return <expr><literal type="null">null</literal></expr>;</return>
   </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>updateKeywords</name><parameter_list>(<parameter><decl><type><name>PdeKeywords</name></type> <name>keywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>EditorTab</name></type> <name>tab</name> <range>: <expr><name>tabs</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>updateKeywords</name></name><argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></function>

  <function><type><name>JMenuItem</name></type> <name>createToolMenuItem</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Tool</name></type> <name>tool</name> <init>= <expr><call><name>getOrCreateToolInstance</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name><name>tool</name><operator>.</operator><name>getMenuTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>tool</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>item</name></expr>;</return>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Tool</name></type> <name>getOrCreateToolInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Tool</name></type> <name>internalTool</name> <init>= <expr><call><name><name>internalToolCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>internalTool</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>toolClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>internalTool</name> <operator>=</operator> <operator>(</operator><name>Tool</name><operator>)</operator> <call><name><name>toolClass</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><call><name><name>internalToolCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>internalTool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>internalTool</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>addInternalTools</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>createToolMenuItem</name><argument_list>(<argument><expr><literal type="string">"cc.arduino.packages.formatter.AStyle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"Tool cc.arduino.packages.formatter.AStyle unavailable"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"menuToolsAutoFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMenuShortcutKeyMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//menu.add(createToolMenuItem("processing.app.tools.CreateFont"));</comment>
    <comment type="line">//menu.add(createToolMenuItem("processing.app.tools.ColorSelector"));</comment>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createToolMenuItem</name><argument_list>(<argument><expr><literal type="string">"processing.app.tools.Archiver"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createToolMenuItem</name><argument_list>(<argument><expr><literal type="string">"processing.app.tools.FixEncoding"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>selectSerialPort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>portMenu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"serialMenu is null"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"name is null"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>JCheckBoxMenuItem</name></type> <name>selection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>portMenu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>menuItem</name> <init>= <expr><call><name><name>portMenu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>menuItem</name> <operator>instanceof</operator> <name>JCheckBoxMenuItem</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>JCheckBoxMenuItem</name></type> <name>checkBoxMenuItem</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JCheckBoxMenuItem</name><operator>)</operator> <name>menuItem</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>checkBoxMenuItem</name><operator>.</operator><name>setState</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>checkBoxMenuItem</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>selection</name> <operator>=</operator> <name>checkBoxMenuItem</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>selection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>setState</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="line">//System.out.println(item.getLabel());</comment>

    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>selectSerialPort</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>reopenMonitor</name> <init>= <expr><operator>(</operator><operator>(</operator><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>serialMonitor</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
                                <name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>serialPlotter</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>reopenMonitor</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>handleSerial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// ignore</comment>
    </block_content>}</block></catch></try>

    <expr_stmt><expr><call><name>onBoardOrPortChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//System.out.println("set to " + get("serial.port"));</comment>
  </block_content>}</block></function>

  <class>class <name>BoardPortJCheckBoxMenuItem</name> <super_list><extends>extends <super><name>JCheckBoxMenuItem</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>BoardPort</name></type> <name>port</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BoardPortJCheckBoxMenuItem</name><parameter_list>(<parameter><decl><type><name>BoardPort</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addActionListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
        <expr_stmt><expr><call><name>selectSerialPort</name><argument_list>(<argument><expr><call><name><name>port</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// This is required for serialPrompt()</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><call><name><name>port</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>port</name><operator>.</operator><name>getBoardName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>port</name><operator>.</operator><name>getBoardName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>label</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name><name>port</name><operator>.</operator><name>getBoardName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>label</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>populatePortMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>PROTOCOLS_ORDER</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><literal type="string">"network"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>PROTOCOLS_LABELS</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial ports"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Network ports"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>portMenu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>selectedPort</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>ports</name> <init>= <expr><call><name><name>Base</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>discovery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ports</name> <operator>=</operator> <call><name><name>platform</name><operator>.</operator><name>filterPorts</name></name><argument_list>(<argument><expr><name>ports</name></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"serial.ports.showall"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ports</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call> <comment type="line">//</comment>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>port</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>port</name><operator>.</operator><name>getProtocolLabel</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>port</name><operator>.</operator><name>getProtocolLabel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>port</name></decl></parameter></parameter_list> -&gt; <block>{
          <expr><name>int</name> <name>labelIdx</name> <operator>=</operator> <call><name><name>PROTOCOLS_ORDER</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name><name>port</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;
          if <argument><expr><operator>(</operator><name>labelIdx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <block>{
            <expr><call><name><name>port</name><operator>.</operator><name>setProtocolLabel</name></name><argument_list>(<argument><expr><call><name><name>PROTOCOLS_LABELS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>labelIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
          }</block></expr></argument> <if_stmt><else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>port</name><operator>.</operator><name>setProtocolLabel</name></name><argument_list>(<argument><expr><call><name><name>port</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt></argument_list></call></expr></expr_stmt>
        </block_content>}</block></function>)</block>;</class>

    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>ports</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>port1</name></decl></parameter>, <parameter><decl><name>port2</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>pr1</name> <init>= <expr><call><name><name>port1</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>pr2</name> <init>= <expr><call><name><name>port2</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>prIdx1</name> <init>= <expr><ternary><condition><expr><call><name><name>PROTOCOLS_ORDER</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>pr1</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>PROTOCOLS_ORDER</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>pr1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">999</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>prIdx2</name> <init>= <expr><ternary><condition><expr><call><name><name>PROTOCOLS_ORDER</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>pr2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>PROTOCOLS_ORDER</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>pr2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">999</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>prIdx1</name> <operator>-</operator> <name>prIdx2</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>port1</name><operator>.</operator><name>getProtocolLabel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>port2</name><operator>.</operator><name>getProtocolLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><call><name><name>port1</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>port2</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>lastProtocol</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>lastProtocolLabel</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>BoardPort</name></type> <name>port</name> <range>: <expr><name>ports</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>port</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>lastProtocol</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>port</name><operator>.</operator><name>getProtocolLabel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>lastProtocolLabel</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>lastProtocol</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>portMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>lastProtocol</name> <operator>=</operator> <call><name><name>port</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastProtocolLabel</name> <operator>=</operator> <call><name><name>port</name><operator>.</operator><name>getProtocolLabel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><name>lastProtocolLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>portMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>port</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>BoardPortJCheckBoxMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>BoardPortJCheckBoxMenuItem</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>selectedPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>portMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>portMenu</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>portMenu</name><operator>.</operator><name>getMenuComponentCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }


  private <function><type><name>JMenu</name></type> <name>buildHelpMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenu</name></type> <name>menu</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Help"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>setMnemonic</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_H</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Getting Started"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showArduinoGettingStarted</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Environment"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showEnvironment</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Troubleshooting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showTroubleshooting</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Reference"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Galileo Help"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Getting Started"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>(<argument><expr><literal type="string">"reference/Galileo_help_files"</literal></expr></argument>, <argument><expr><literal type="string">"ArduinoIDE_guide_galileo"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Troubleshooting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>(<argument><expr><literal type="string">"reference/Galileo_help_files"</literal></expr></argument>, <argument><expr><literal type="string">"Guide_Troubleshooting_Galileo"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Edison Help"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Getting Started"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>(<argument><expr><literal type="string">"reference/Edison_help_files"</literal></expr></argument>, <argument><expr><literal type="string">"ArduinoIDE_guide_edison"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Troubleshooting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>(<argument><expr><literal type="string">"reference/Edison_help_files"</literal></expr></argument>, <argument><expr><literal type="string">"Guide_Troubleshooting_Edison"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find in Reference"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>handleFindReference</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Frequently Asked Questions"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>showFAQ</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Visit Arduino.cc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Base</name><operator>.</operator><name>openURL</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"http://www.arduino.cc/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// macosx already has its own about menu</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>OSUtils</name><operator>.</operator><name>hasMacOSStyleMenus</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"About Arduino"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>base</name><operator>.</operator><name>handleAbout</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>menu</name></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>JMenu</name></type> <name>buildEditMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenu</name></type> <name>menu</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Edit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"menuEdit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>setMnemonic</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_E</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>undoItem</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Undo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>undoItem</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"menuEditUndo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>undoItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleUndo</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>undoItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>redoItem</name> <operator>=</operator> <call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Redo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>redoItem</name> <operator>=</operator> <call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Redo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>redoItem</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"menuEditRedo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>redoItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleRedo</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>redoItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>cutItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cut"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cutItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleCut</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cutItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>copyItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copyItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call><operator>.</operator><call><name>copy</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copyItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>copyForumItem</name> <init>= <expr><call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy for Forum"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copyForumItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleDiscourseCopy</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copyForumItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>copyHTMLItem</name> <init>= <expr><call><name>newJMenuItemAlt</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy as HTML"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copyHTMLItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleHTMLCopy</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copyHTMLItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>pasteItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Paste"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pasteItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handlePaste</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pasteItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>selectAllItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Select All"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>selectAllItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleSelectAll</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>selectAllItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>gotoLine</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Go to line..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gotoLine</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>GoToLineNumber</name></type> <name>goToLineNumber</name> <init>= <expr><operator>new</operator> <call><name>GoToLineNumber</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>goToLineNumber</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>goToLineNumber</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>gotoLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>commentItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Comment/Uncomment"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"editor.keys.shortcut_comment"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>commentItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleCommentUncomment</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>commentItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>increaseIndentItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Increase Indent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>increaseIndentItem</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>increaseIndentItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleIndentOutdent</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>increaseIndentItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>decreseIndentItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Decrease Indent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>decreseIndentItem</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>, <argument><expr><name><name>InputEvent</name><operator>.</operator><name>SHIFT_MASK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>decreseIndentItem</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"menuDecreaseIndent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>decreseIndentItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleIndentOutdent</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>decreseIndentItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>increaseFontSizeItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Increase Font Size"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_PLUS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>increaseFontSizeItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>base</name><operator>.</operator><name>handleFontSizeChange</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>increaseFontSizeItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Many keyboards have '+' and '=' on the same key. Allowing "CTRL +",</comment>
    <comment type="line">// "CTRL SHIFT +" and "CTRL =" covers the generally expected behavior.</comment>
    <decl_stmt><decl><type><name>KeyStroke</name></type> <name>ctrlShiftEq</name> <init>= <expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_EQUALS</name></name></expr></argument>, <argument><expr><name>SHORTCUT_KEY_MASK</name> <operator>|</operator> <name><name>ActionEvent</name><operator>.</operator><name>SHIFT_MASK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>getInputMap</name></name><argument_list>(<argument><expr><name><name>JComponent</name><operator>.</operator><name>WHEN_IN_FOCUSED_WINDOW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>ctrlShiftEq</name></expr></argument>, <argument><expr><literal type="string">"IncreaseFontSize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>KeyStroke</name></type> <name>ctrlEq</name> <init>= <expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_EQUALS</name></name></expr></argument>, <argument><expr><name>SHORTCUT_KEY_MASK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>getInputMap</name></name><argument_list>(<argument><expr><name><name>JComponent</name><operator>.</operator><name>WHEN_IN_FOCUSED_WINDOW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>ctrlEq</name></expr></argument>, <argument><expr><literal type="string">"IncreaseFontSize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>getActionMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><literal type="string">"IncreaseFontSize"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>handleFontSizeChange</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>decreaseFontSizeItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Decrease Font Size"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_MINUS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>decreaseFontSizeItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>base</name><operator>.</operator><name>handleFontSizeChange</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>decreaseFontSizeItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>findItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>findItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>find</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>find</name> <operator>=</operator> <operator>new</operator> <call><name>FindReplace</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>Base</name><operator>.</operator><name>FIND_DIALOG_STATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>find</name><operator>.</operator><name>setFindText</name></name><argument_list>(<argument><expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>find</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>find</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>findItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>findNextItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find Next"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>findNextItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>find</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>find</name><operator>.</operator><name>findNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>findNextItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>findPreviousItem</name> <init>= <expr><call><name>newJMenuItemShift</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find Previous"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>findPreviousItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>find</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>find</name><operator>.</operator><name>findPrevious</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>findPreviousItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>useSelectionForFindItem</name> <init>= <expr><call><name>newJMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Use Selection For Find"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>useSelectionForFindItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>find</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>find</name> <operator>=</operator> <operator>new</operator> <call><name>FindReplace</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>Base</name><operator>.</operator><name>FIND_DIALOG_STATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>find</name><operator>.</operator><name>setFindText</name></name><argument_list>(<argument><expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>useSelectionForFindItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addMenuListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>MenuListener</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>menuSelected</name><parameter_list>(<parameter><decl><type><name>MenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>enabled</name> <init>= <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedText</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cutItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>copyItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>menuDeselected</name><parameter_list>(<parameter><decl><type><name>MenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>menuCanceled</name><parameter_list>(<parameter><decl><type><name>MenuEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>menu</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * A software engineer, somewhere, needs to have his abstraction
   * taken away. In some countries they jail or beat people for writing
   * the sort of API that would require a five line helper function
   * just to set the command key for a menu item.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>JMenuItem</name></type> <name>newJMenuItem</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>menuItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menuItem</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>SHORTCUT_KEY_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>menuItem</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Like newJMenuItem() but adds shift as a modifier for the key command.
   */</comment>
  <comment type="line">// Control + Shift + K seems to not be working on linux (Xubuntu 17.04, 2017-08-19)</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>JMenuItem</name></type> <name>newJMenuItemShift</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>menuItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menuItem</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>SHORTCUT_KEY_MASK</name> <operator>|</operator> <name><name>ActionEvent</name><operator>.</operator><name>SHIFT_MASK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>menuItem</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Same as newJMenuItem(), but adds the ALT (on Linux and Windows)
   * or OPTION (on Mac OS X) key as a modifier.
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>JMenuItem</name></type> <name>newJMenuItemAlt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>menuItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menuItem</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><name>SHORTCUT_ALT_KEY_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>menuItem</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateUndoRedoState</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SketchTextArea</name></type> <name>textArea</name> <init>= <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>undoItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>textArea</name><operator>.</operator><name>canUndo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>redoItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>textArea</name><operator>.</operator><name>canRedo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <comment type="line">// these will be done in a more generic way soon, more like:</comment>
  <comment type="line">// setHandler("action name", Runnable);</comment>
  <comment type="line">// but for the time being, working out the kinks of how many things to</comment>
  <comment type="line">// abstract from the editor in this fashion.</comment>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>resetHandlers</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>runHandler</name> <operator>=</operator> <operator>new</operator> <call><name>BuildHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>presentHandler</name> <operator>=</operator> <operator>new</operator> <call><name>BuildHandler</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>runAndSaveHandler</name> <operator>=</operator> <operator>new</operator> <call><name>BuildHandler</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>presentAndSaveHandler</name> <operator>=</operator> <operator>new</operator> <call><name>BuildHandler</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>uploadHandler</name> <operator>=</operator> <operator>new</operator> <call><name>UploadHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uploadHandler</name><operator>.</operator><name>setUsingProgrammer</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>uploadUsingProgrammerHandler</name> <operator>=</operator> <operator>new</operator> <call><name>UploadHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uploadUsingProgrammerHandler</name><operator>.</operator><name>setUsingProgrammer</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeoutUploadHandler</name> <operator>=</operator> <operator>new</operator> <call><name>TimeoutUploadHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <comment type="block" format="javadoc">/**
   * Gets the current sketch controller.
   */</comment>
  <function><type><specifier>public</specifier> <name>SketchController</name></type> <name>getSketchController</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>sketchController</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets the current sketch.
   */</comment>
  <function><type><specifier>public</specifier> <name>Sketch</name></type> <name>getSketch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>sketch</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets the currently displaying tab.
   */</comment>
  <function><type><specifier>public</specifier> <name>EditorTab</name></type> <name>getCurrentTab</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tabs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentTabIndex</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets the index of the currently displaying tab.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentTabIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>currentTabIndex</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns an (unmodifiable) list of currently opened tabs.
   */</comment>
  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>EditorTab</name></argument>&gt;</argument_list></name></type> <name>getTabs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>tabs</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>
  <comment type="block" format="javadoc">/**
   * Change the currently displayed tab.
   * Note that the GUI might not update immediately, since this needs
   * to run in the Event dispatch thread.
   * @param index The index of the tab to select
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>selectTab</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>currentTabIndex</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateUndoRedoState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>rebuild</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>activated</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// This must be run in the GUI thread</comment>
    <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
      <expr_stmt><expr><call><name><name>codePanel</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>codePanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tabs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BorderLayout</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tabs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>requestFocusInWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// get the caret blinking</comment>
      <comment type="line">// For some reason, these are needed. Revalidate says it should be</comment>
      <comment type="line">// automatically called when components are added or removed, but without</comment>
      <comment type="line">// it, the component switched to is not displayed. repaint() is needed to</comment>
      <comment type="line">// clear the entire text area of any previous text.</comment>
      <expr_stmt><expr><call><name><name>codePanel</name><operator>.</operator><name>revalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>codePanel</name><operator>.</operator><name>repaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>selectNextTab</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>selectTab</name><argument_list>(<argument><expr><operator>(</operator><name>currentTabIndex</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name><name>tabs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>selectPrevTab</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>selectTab</name><argument_list>(<argument><expr><operator>(</operator><name>currentTabIndex</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <call><name><name>tabs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <call><name><name>tabs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>EditorTab</name></type> <name>findTab</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SketchFile</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tabs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>findTabIndex</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Finds the index of the tab showing the given file. Matches the file against
   * EditorTab.getSketchFile() using ==.
   *
   * @returns The index of the tab for the given file, or -1 if no such tab was
   *          found.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>findTabIndex</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SketchFile</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tabs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>tabs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call> <operator>==</operator> <name>file</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Finds the index of the tab showing the given file. Matches the file against
   * EditorTab.getSketchFile().getFile() using equals.
   *
   * @returns The index of the tab for the given file, or -1 if no such tab was
   *          found.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>findTabIndex</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tabs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>tabs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Create tabs for each of the current sketch's files, removing any existing
   * tabs.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>createTabs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tabs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>currentTabIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tabs</name><operator>.</operator><name>ensureCapacity</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getCodeCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>SketchFile</name></type> <name>file</name> <range>: <expr><call><name><name>sketch</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>addTab</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// TODO: Improve / move error handling</comment>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>selectTab</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Reorders tabs as per current sketch's files order
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>reorderTabs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>x</name></decl></parameter>, <parameter><decl><name>y</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Sketch</name><operator>.</operator><name>CODE_DOCS_COMPARATOR</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>getSketchFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>y</name><operator>.</operator><name>getSketchFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Add a new tab.
   *
   * @param file
   *          The file to show in the tab.
   * @param contents
   *          The contents to show in the tab, or null to load the contents from
   *          the given file.
   * @throws IOException
   */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>addTab</name><parameter_list>(<parameter><decl><type><name>SketchFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contents</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>EditorTab</name></type> <name>tab</name> <init>= <expr><operator>new</operator> <call><name>EditorTab</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>getTextArea</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDocument</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>addDocumentListener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DocumentTextChangeListener</name><argument_list>(
            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>updateUndoRedoState</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tabs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reorderTabs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeTab</name><parameter_list>(<parameter><decl><type><name>SketchFile</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>findTabIndex</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tabs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>

  <function><type><name>void</name></type> <name>handleFindReference</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentKeyword</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>referenceFile</name> <init>= <expr><call><name><name>base</name><operator>.</operator><name>getPdeKeywords</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReference</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>referenceFile</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No reference available for \"{0}\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>referenceFile</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"Serial_"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>(<argument><expr><literal type="string">"Serial/"</literal> <operator>+</operator> <call><name><name>referenceFile</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="string">"Serial_"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>(<argument><expr><literal type="string">"Reference/"</literal> <operator>+</operator> <name>referenceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <comment type="block" format="javadoc">/**
   * Implements Sketch &amp;rarr; Run.
   * @param verbose Set true to run with verbose output.
   * @param verboseHandler
   * @param nonVerboseHandler
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleRun</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>verboseHandler</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>nonVerboseHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>handleRun</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ShouldSaveIfModified</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verboseHandler</name></expr></argument>, <argument><expr><name>nonVerboseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>handleRun</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>SketchController</name></argument>&gt;</argument_list></name></type> <name>shouldSavePredicate</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>verboseHandler</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>nonVerboseHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>shouldSavePredicate</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>sketchController</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>handleSave</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>activateRun</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>progress</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Compiling sketch..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// do this to advance/clear the terminal window / dos prompt / etc</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="line">// clear the console on each run, unless the user doesn't want to</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"console.auto_clear"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Cannot use invokeLater() here, otherwise it gets</comment>
    <comment type="line">// placed on the event thread and causes a hang--bad idea all around.</comment>
    <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><ternary><condition><expr><name>verbose</name></expr> ?</condition><then> <expr><name>verboseHandler</name></expr> </then><else>: <expr><name>nonVerboseHandler</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <class>class <name>BuildHandler</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>verbose</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>saveHex</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BuildHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>BuildHandler</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>BuildHandler</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>saveHex</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>saveHex</name></name> <operator>=</operator> <name>saveHex</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>removeAllLineHighlights</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sketchController</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>saveHex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done compiling."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PreferencesMapException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(
                <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while compiling: missing '{0}' configuration parameter"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>unprogress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>

      <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>unprogress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>deactivateRun</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>avoidMultipleOperations</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAllLineHighlights</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>EditorTab</name></type> <name>tab</name> <range>: <expr><name>tabs</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>getTextArea</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeAllLineHighlights</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>addLineHighlight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>BadLocationException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SketchTextArea</name></type> <name>textArea</name> <init>= <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FoldManager</name></type> <name>foldManager</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getFoldManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>foldManager</name><operator>.</operator><name>isLineHidden</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>foldManager</name><operator>.</operator><name>getFoldCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>foldManager</name><operator>.</operator><name>getFold</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>containsLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>foldManager</name><operator>.</operator><name>getFold</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCollapsed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>addLineHighlight</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.2f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setCaretPosition</name></name><argument_list>(<argument><expr><call><name><name>textArea</name><operator>.</operator><name>getLineStartOffset</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Implements Sketch &amp;rarr; Stop, or pressing Stop on the toolbar.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStop</name><parameter_list>()</parameter_list> <block>{<block_content>  <comment type="line">// called by menu or buttons</comment>
<comment type="line">//    toolbar.activate(EditorToolbar.STOP);</comment>

    <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>deactivateRun</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    toolbar.deactivate(EditorToolbar.STOP);</comment>

    <comment type="line">// focus the PDE again after quitting presentation mode [toxi 030903]</comment>
    <expr_stmt><expr><call><name>toFront</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Check if the sketch is modified and ask user to save changes.
   * @return false if canceling the close/quit operation
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>checkModified</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sketch</name><operator>.</operator><name>isModified</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// As of Processing 1.0.10, this always happens immediately.</comment>
    <comment type="line">// http://dev.processing.org/bugs/show_bug.cgi?id=1456</comment>

    <expr_stmt><expr><call><name>toFront</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>prompt</name> <init>= <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save changes to \"{0}\"?  "</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>sketch</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>OSUtils</name><operator>.</operator><name>hasMacOSStyleMenus</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>=
        <expr><call><name><name>JOptionPane</name><operator>.</operator><name>showConfirmDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Close"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>YES_NO_CANCEL_OPTION</name></name></expr></argument>,
                                      <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>QUESTION_MESSAGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>JOptionPane</name><operator>.</operator><name>YES_OPTION</name></name></expr>:</case>
          <return>return <expr><call><name>handleSave</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>JOptionPane</name><operator>.</operator><name>NO_OPTION</name></name></expr>:</case>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>  <comment type="line">// ok to continue</comment>
        <case>case <expr><name><name>JOptionPane</name><operator>.</operator><name>CANCEL_OPTION</name></name></expr>:</case>
        <case>case <expr><name><name>JOptionPane</name><operator>.</operator><name>CLOSED_OPTION</name></name></expr>:</case>  <comment type="line">// Escape key pressed</comment>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <default>default:</default>
          <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
      </block_content>}</block></switch>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// This code is disabled unless Java 1.5 is being used on Mac OS X</comment>
      <comment type="line">// because of a Java bug that prevents the initial value of the</comment>
      <comment type="line">// dialog from being set properly (at least on my MacBook Pro).</comment>
      <comment type="line">// The bug causes the "Don't Save" option to be the highlighted,</comment>
      <comment type="line">// blinking, default. This sucks. But I'll tell you what doesn't</comment>
      <comment type="line">// suck--workarounds for the Mac and Apple's snobby attitude about it!</comment>
      <comment type="line">// I think it's nifty that they treat their developers like dirt.</comment>

      <decl_stmt><decl><type><name>JOptionPane</name></type> <name>pane</name> <init>=
        <expr><operator>new</operator> <call><name>JOptionPane</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&lt;html&gt; "</literal> <operator>+</operator>
                          <literal type="string">"&lt;head&gt; &lt;style type=\"text/css\"&gt;"</literal><operator>+</operator>
                          <literal type="string">"b { font: 13pt \"Lucida Grande\" }"</literal><operator>+</operator>
                          <literal type="string">"p { font: 11pt \"Lucida Grande\"; margin-top: 8px }"</literal><operator>+</operator>
                          <literal type="string">"&lt;/style&gt; &lt;/head&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;b&gt;Do you want to save changes to this sketch&lt;BR&gt;"</literal> <operator>+</operator>
                          <literal type="string">" before closing?&lt;/b&gt;"</literal> <operator>+</operator>
                          <literal type="string">"&lt;p&gt;If you don't save, your changes will be lost."</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>QUESTION_MESSAGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>options</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
        <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Don't Save"</literal></expr></argument>)</argument_list></call></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>pane</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// highlight the safest option ala apple hig</comment>
      <expr_stmt><expr><call><name><name>pane</name><operator>.</operator><name>setInitialValue</name></name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>JDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>pane</name><operator>.</operator><name>createDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Object</name></type> <name>result</name> <init>= <expr><call><name><name>pane</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>  <comment type="line">// save (and close/quit)</comment>
        <return>return <expr><call><name>handleSave</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>result</name> <operator>==</operator> <name><name>options</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Second stage of open, occurs after having checked to see if the
   * modifications (if any) to the previous sketch need to be saved.
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>handleOpenInternal</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>sketchFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// check to make sure that this .pde file is</comment>
    <comment type="line">// in a folder of the same name</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>sketchFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name><name>Sketch</name><operator>.</operator><name>checkSketchFile</name></name><argument_list>(<argument><expr><name>sketchFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fileName</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".ino"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>fileName</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".pde"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Bad file selected"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Arduino can only open its own sketches\n"</literal> <operator>+</operator>
          <literal type="string">"and other files ending in .ino or .pde"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>properParent</name> <init>= <expr><call><name><name>fileName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>fileName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>options</name> <init>= <expr><block>{<expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>prompt</name> <init>= <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The file \"{0}\" needs to be inside\n"</literal> <operator>+</operator>
            <literal type="string">"a sketch folder named \"{1}\".\n"</literal> <operator>+</operator>
            <literal type="string">"Create this folder, move the file, and continue?"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>fileName</name></expr></argument>,
          <argument><expr><name>properParent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>JOptionPane</name><operator>.</operator><name>showOptionDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Moving"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>YES_NO_OPTION</name></name></expr></argument>, <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>QUESTION_MESSAGE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>JOptionPane</name><operator>.</operator><name>YES_OPTION</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// create properly named folder</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>properFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>sketchFile</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>properParent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>properFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"A folder named \"{0}\" already exists. "</literal> <operator>+</operator>
            <literal type="string">"Can't open sketch."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>properParent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>properFolder</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="line">//throw new IOException("Couldn't create sketch folder");</comment>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not create the sketch folder."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// copy the sketch inside</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>properPdeFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>properFolder</name></expr></argument>, <argument><expr><call><name><name>sketchFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>sketchFile</name></expr></argument>, <argument><expr><name>properPdeFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not copy to a proper location."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>

        <comment type="line">// remove the original file, so user doesn't get confused</comment>
        <expr_stmt><expr><call><name><name>sketchFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// update with the new path</comment>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <name>properPdeFile</name></expr>;</expr_stmt>

      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><name>sketch</name> <operator>=</operator> <operator>new</operator> <call><name>Sketch</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not create the sketch."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><name>sketchController</name> <operator>=</operator> <operator>new</operator> <call><name>SketchController</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createTabs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Disable untitled setting from previous document, if any</comment>
    <expr_stmt><expr><name>untitled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

    <comment type="line">// opening was successful</comment>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>updateTitle</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sketchController</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SketchFile</name></type> <name>current</name> <init>= <expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>customFormat</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"editor.custom_title_format"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>customFormat</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>customFormat</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>titleMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>titleMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>titleMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"folder"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>titleMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>titleMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"project"</literal></expr></argument>, <argument><expr><call><name><name>sketch</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>titleMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>BaseNoGui</name><operator>.</operator><name>VERSION_NAME_LONG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>StringReplacer</name><operator>.</operator><name>replaceFromMapping</name></name><argument_list>(<argument><expr><name>customFormat</name></expr></argument>, <argument><expr><name>titleMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isPrimary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} | Arduino {1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sketch</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><name><name>BaseNoGui</name><operator>.</operator><name>VERSION_NAME_LONG</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} - {1} | Arduino {2}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sketch</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>current</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BaseNoGui</name><operator>.</operator><name>VERSION_NAME_LONG</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Actually handle the save command. If 'immediately' is set to false,
   * this will happen in another thread so that the message area
   * will update and the save button will stay highlighted while the
   * save is happening. If 'immediately' is true, then it will happen
   * immediately. This is used during a quit, because invokeLater()
   * won't run properly while a quit is happening. This fixes
   * &lt;A HREF="http://dev.processing.org/bugs/show_bug.cgi?id=276"&gt;Bug 276&lt;/A&gt;.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handleSave</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>immediately</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">//stopRunner();</comment>
    <expr_stmt><expr><call><name>handleStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// 0136</comment>
    <expr_stmt><expr><call><name>removeAllLineHighlights</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>untitled</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>handleSaveAs</name><argument_list>()</argument_list></call></expr>;</return>
      <comment type="line">// need to get the name, user might also cancel here</comment>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>immediately</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>handleSave2</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
          <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>handleSave2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>handleSave2</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>activateSave</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Saving..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>saved</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.autoformat_currentfile_before_saving"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Tool</name></type> <name>formatTool</name> <init>= <expr><call><name>getOrCreateToolInstance</name><argument_list>(<argument><expr><literal type="string">"cc.arduino.packages.formatter.AStyle"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>formatTool</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>wasReadOnly</name> <init>= <expr><call><name><name>sketchController</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>previousMainFilePath</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getMainFilePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>saved</name> <operator>=</operator> <call><name><name>sketchController</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>saved</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done Saving."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>wasReadOnly</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>removeRecentSketchPath</name></name><argument_list>(<argument><expr><name>previousMainFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>storeRecentSketches</name></name><argument_list>(<argument><expr><name>sketchController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildRecentSketchesMenuItems</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>statusEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <comment type="line">// rebuild sketch menu in case a save-as was forced</comment>
      <comment type="line">// Disabling this for 0125, instead rebuild the menu inside</comment>
      <comment type="line">// the Save As method of the Sketch object, since that's the</comment>
      <comment type="line">// only one who knows whether something was renamed.</comment>
      <comment type="line">//sketchbook.rebuildMenus();</comment>
      <comment type="line">//sketchbook.rebuildMenusAsync();</comment>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// show the error as a message in the window</comment>
      <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// zero out the current action,</comment>
      <comment type="line">// so that checkModified2 will just do nothing</comment>
      <comment type="line">//checkModifiedMode = 0;</comment>
      <comment type="line">// this is used when another operation calls a save</comment>
    </block_content>}</block></catch></try>
    <comment type="line">//toolbar.clear();</comment>
    <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>deactivateSave</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>saved</name></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handleSaveAs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//stopRunner();  // formerly from 0135</comment>
    <expr_stmt><expr><call><name>handleStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>activateSave</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//SwingUtilities.invokeLater(new Runnable() {</comment>
    <comment type="line">//public void run() {</comment>
    <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Saving..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>sketchController</name><operator>.</operator><name>saveAs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>storeRecentSketches</name></name><argument_list>(<argument><expr><name>sketchController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>rebuildRecentSketchesMenuItems</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done Saving."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Disabling this for 0125, instead rebuild the menu inside</comment>
        <comment type="line">// the Save As method of the Sketch object, since that's the</comment>
        <comment type="line">// only one who knows whether something was renamed.</comment>
        <comment type="line">//sketchbook.rebuildMenusAsync();</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save Canceled."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// show the error as a message in the window</comment>
      <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <comment type="line">// make sure the toolbar button deactivates</comment>
      <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>deactivateSave</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Update editor window title in case of "Save as..."</comment>
      <expr_stmt><expr><call><name>updateTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>rebuild</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>serialPrompt</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPortJCheckBoxMenuItem</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>portMenu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>portMenu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>BoardPortJCheckBoxMenuItem</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>BoardPortJCheckBoxMenuItem</name><operator>)</operator> <call><name><name>portMenu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>String</name></type> <name>port</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>port</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial port not selected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial port {0} not found."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>question</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Retry the upload with another serial port?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BoardPortJCheckBoxMenuItem</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>BoardPortJCheckBoxMenuItem</name><operator>)</operator> <call><name><name>JOptionPane</name>
        <operator>.</operator><name>showInputDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>title</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <name>question</name></expr></argument>, <argument><expr><name>title</name></expr></argument>,
                         <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>PLAIN_MESSAGE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>items</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>doClick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Called by Sketch &amp;rarr; Export.
   * Handles calling the export() function on sketch, and
   * queues all the gui status stuff that comes along with it.
   * &lt;p/&gt;
   * Made synchronized to (hopefully) avoid problems of people
   * hitting export twice, quickly, and horking things up.
   */</comment>
  <comment type="block" format="javadoc">/**
   * Handles calling the export() function on sketch, and
   * queues all the gui status stuff that comes along with it.
   *
   * Made synchronized to (hopefully) avoid problems of people
   * hitting export twice, quickly, and horking things up.
   */</comment>
  <function><type><specifier>synchronized</specifier> <specifier>public</specifier> <name>void</name></type> <name>handleExport</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>usingProgrammer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.save_on_verify"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>sketch</name><operator>.</operator><name>isModified</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>sketchController</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>handleSave</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>activateExport</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>progress</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Uploading to I/O Board..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>avoidMultipleOperations</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>timeoutUploadHandler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><ternary><condition><expr><name>usingProgrammer</name></expr> ?</condition><then> <expr><name>uploadUsingProgrammerHandler</name></expr> </then><else>: <expr><name>uploadHandler</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <class>class <name>UploadHandler</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>usingProgrammer</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUsingProgrammer</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>usingProgrammer</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>usingProgrammer</name></name> <operator>=</operator> <name>usingProgrammer</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>uploading</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>removeAllLineHighlights</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>suspend</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>suspend</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><call><name><name>sketchController</name><operator>.</operator><name>exportApplet</name></name><argument_list>(<argument><expr><name>usingProgrammer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done uploading."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SerialNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>portMenu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial port not selected."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>serialPrompt</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Upload canceled."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>PreferencesMapException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(
                    <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while uploading: missing '{0}' configuration parameter"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>RunnerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">//statusError("Error during upload.");</comment>
        <comment type="line">//e.printStackTrace();</comment>
        <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>unprogress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name>populatePortMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>avoidMultipleOperations</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      </block_content>}</block></finally></try>
      <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>unprogress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>uploading</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <comment type="line">//toolbar.clear();</comment>
      <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>deactivateExport</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>resumeOrCloseSerialMonitor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>resumeOrCloseSerialPlotter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>isUploading</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>uploading</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>resumeOrCloseSerialMonitor</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Return the serial monitor window to its initial state</comment>
    <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>BoardPort</name></type> <name>boardPort</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>sleptFor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>boardPort</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>sleptFor</name> <operator>&lt;</operator> <name>MAX_TIME_AWAITING_FOR_RESUMING_SERIAL_MONITOR</name></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>sleptFor</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>boardPort</name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// noop</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></while>
      <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>resume</name></name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>boardPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handleSerial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>resume</name></name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
   </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>resumeOrCloseSerialPlotter</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Return the serial plotter window to its initial state</comment>
    <if_stmt><if>if <condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>BoardPort</name></type> <name>boardPort</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>resume</name></name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>boardPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>handlePlotter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>resume</name></name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
   </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <class>class <name>TimeoutUploadHandler</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <comment type="line">//10 seconds, than reactivate upload functionality and let the programmer pid being killed</comment>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>uploading</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>avoidMultipleOperations</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// noop</comment>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleSerial</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>serialPlotter</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>serialPlotter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial monitor not available while plotter is open"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// The serial monitor already exists</comment>

      <if_stmt><if>if <condition>(<expr><call><name><name>serialMonitor</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// If it's closed, clear the refrence to the existing</comment>
        <comment type="line">// monitor and create a new one</comment>
        <expr_stmt><expr><name>serialMonitor</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>
        <comment type="line">// If it's not closed, give it the focus</comment>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>toFront</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// noop</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>BoardPort</name></type> <name>port</name> <init>= <expr><call><name><name>Base</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Board at {0} is not available"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>serialMonitor</name> <operator>=</operator> <operator>new</operator> <call><name>MonitorFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newMonitor</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>board</name> <init>= <expr><call><name><name>port</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>boardName</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>resolveDeviceByBoardID</name><argument_list>(<argument><expr><name><name>BaseNoGui</name><operator>.</operator><name>packages</name></name></expr></argument>, <argument><expr><name>board</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Serial monitor is not supported on network ports such as {0} for the {1} in this release"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>boardName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>addEditorFontResizeListeners</name></name><argument_list>(<argument><expr><name>serialMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>serialMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If currently uploading, disable the monitor (it will be later</comment>
    <comment type="line">// enabled when done uploading)</comment>
    <if_stmt><if>if <condition>(<expr><name>uploading</name> <operator>||</operator> <name>avoidMultipleOperations</name></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>suspend</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>serialMonitor</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>PreferencesData</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><call><name><name>serialMonitor</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PasswordAuthorizationDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>PasswordAuthorizationDialog</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Type board password to access its console"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>dialog</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unable to open serial monitor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>serialMonitor</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dialog</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>avoidMultipleOperations</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ConnectException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unable to connect: is the sketch using the bridge?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>JSchException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unable to connect: wrong password?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SerialException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>errorMessage</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>SerialPortException</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>errorMessage</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>SerialPortException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getExceptionType</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>serialMonitor</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialMonitor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// noop</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>serialMonitor</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>serialMonitor</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></finally></try>

    </block_content>}</block> while <condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>serialMonitor</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>success</name></expr>)</condition>;</do>

  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>handlePlotter</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>serialMonitor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name><name>serialMonitor</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>serialMonitor</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Plotter not available while serial monitor is open"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// The serial plotter already exists</comment>

      <if_stmt><if>if <condition>(<expr><call><name><name>serialPlotter</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// If it's closed, clear the refrence to the existing</comment>
        <comment type="line">// plotter and create a new one</comment>
        <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>serialPlotter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>
        <comment type="line">// If it's not closed, give it the focus</comment>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>toFront</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// noop</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>BoardPort</name></type> <name>port</name> <init>= <expr><call><name><name>Base</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Board at {0} is not available"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>serialPlotter</name> <operator>=</operator> <operator>new</operator> <call><name>SerialPlotter</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>serialPlotter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If currently uploading, disable the plotter (it will be later</comment>
    <comment type="line">// enabled when done uploading)</comment>
    <if_stmt><if>if <condition>(<expr><name>uploading</name></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>suspend</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>serialPlotter</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>PreferencesData</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><call><name><name>serialPlotter</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PasswordAuthorizationDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>PasswordAuthorizationDialog</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Type board password to access its console"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>dialog</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unable to open serial plotter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>serialPlotter</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dialog</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serialPlotter</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ConnectException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unable to connect: is the sketch using the bridge?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>JSchException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unable to connect: wrong password?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SerialException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>errorMessage</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>SerialPortException</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>errorMessage</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>SerialPortException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getExceptionType</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>serialPlotter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>serialPlotter</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>serialPlotter</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></finally></try>

    </block_content>}</block> while <condition>(<expr><name>serialPlotter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>serialPlotter</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>success</name></expr>)</condition>;</do>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>handleBurnBootloader</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EditorConsole</name><operator>.</operator><name>setCurrentEditorConsole</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>console</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Burning bootloader to I/O Board (this may take a minute)..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>Uploader</name></type> <name>uploader</name> <init>= <expr><operator>new</operator> <call><name>SerialUploader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>uploader</name><operator>.</operator><name>burnBootloader</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done burning bootloader."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while burning bootloader."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// error message will already be visible</comment>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SerialNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while burning bootloader: please select a serial port."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>PreferencesMapException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
          <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(
            <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while burning bootloader: missing '{0}' configuration parameter"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>RunnerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>statusError</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while burning bootloader."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>handleBoardInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>selectedPort</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>ports</name> <init>= <expr><call><name><name>Base</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>discovery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>vid</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>pid</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>iserial</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>protocol</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>BoardPort</name></type> <name>port</name> <range>: <expr><name>ports</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>port</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>selectedPort</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name><name>port</name><operator>.</operator><name>getBoardName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>vid</name> <operator>=</operator> <call><name><name>port</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"vid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name><name>port</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iserial</name> <operator>=</operator> <call><name><name>port</name><operator>.</operator><name>getPrefs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"iserial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name><name>port</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Please select a port to obtain board info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>protocol</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"network"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Network port, can't obtain info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>vid</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>vid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>vid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Native serial port, can't obtain info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>iserial</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>iserial</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>iserial</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Upload any sketch to obtain it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unknown board"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>infos</name> <init>= <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"BN: {0}\nVID: {1}\nPID: {2}\nSN: {3}"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>vid</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>iserial</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JTextArea</name></type> <name>textArea</name> <init>= <expr><operator>new</operator> <call><name>JTextArea</name><argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>JOptionPane</name><operator>.</operator><name>showMessageDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>textArea</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Board Info"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>PLAIN_MESSAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Handler for File &amp;rarr; Page Setup.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>handlePageSetup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PrinterJob</name></type> <name>printerJob</name> <init>= <expr><call><name><name>PrinterJob</name><operator>.</operator><name>getPrinterJob</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pageFormat</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pageFormat</name> <operator>=</operator> <call><name><name>printerJob</name><operator>.</operator><name>defaultPage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pageFormat</name> <operator>=</operator> <call><name><name>printerJob</name><operator>.</operator><name>pageDialog</name></name><argument_list>(<argument><expr><name>pageFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Handler for File &amp;rarr; Print.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>handlePrint</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Printing..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//printerJob = null;</comment>
    <decl_stmt><decl><type><name>PrinterJob</name></type> <name>printerJob</name> <init>= <expr><call><name><name>PrinterJob</name><operator>.</operator><name>getPrinterJob</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pageFormat</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">//System.out.println("setting page format " + pageFormat);</comment>
      <expr_stmt><expr><call><name><name>printerJob</name><operator>.</operator><name>setPrintable</name></name><argument_list>(<argument><expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pageFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>printerJob</name><operator>.</operator><name>setPrintable</name></name><argument_list>(<argument><expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// set the name of the job to the code name</comment>
    <expr_stmt><expr><call><name><name>printerJob</name><operator>.</operator><name>setJobName</name></name><argument_list>(<argument><expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrettyName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>printerJob</name><operator>.</operator><name>printDialog</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>printerJob</name><operator>.</operator><name>print</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Done printing."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PrinterException</name></type> <name>pe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error while printing."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pe</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Printing canceled."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">//printerJob = null;  // clear this out?</comment>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <comment type="block" format="javadoc">/**
   * Show an error int the status bar.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>statusError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//new Exception("deactivating RUN").printStackTrace();</comment>
    <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>deactivateRun</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Show an exception in the editor status bar.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>statusError</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    if (e == null) {</comment>
<comment type="line">//      System.err.println("Editor.statusError() was passed a null exception.");</comment>
<comment type="line">//      return;</comment>
<comment type="line">//    }</comment>

    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>RunnerException</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>RunnerException</name></type> <name>re</name> <init>= <expr><operator>(</operator><name>RunnerException</name><operator>)</operator> <name>e</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>re</name><operator>.</operator><name>hasCodeFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>selectTab</name><argument_list>(<argument><expr><call><name>findTabIndex</name><argument_list>(<argument><expr><call><name><name>re</name><operator>.</operator><name>getCodeFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>re</name><operator>.</operator><name>hasCodeLine</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name><name>re</name><operator>.</operator><name>getCodeLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// subtract one from the end so that the \n ain't included</comment>
        <if_stmt><if>if <condition>(<expr><name>line</name> <operator>&gt;=</operator> <call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLineCount</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="line">// The error is at the end of this current chunk of code,</comment>
          <comment type="line">// so the last line needs to be selected.</comment>
          <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLineCount</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLineText</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// The last line may be zero length, meaning nothing to select.</comment>
            <comment type="line">// If so, back up one more line.</comment>
            <expr_stmt><expr><name>line</name><operator>--</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;=</operator> <call><name>getCurrentTab</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextArea</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLineCount</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Bad error line: {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>addLineHighlight</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Since this will catch all Exception types, spend some time figuring</comment>
    <comment type="line">// out which kind and try to give a better error message to the user.</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>mess</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mess</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>javaLang</name> <init>= <expr><literal type="string">"java.lang."</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>mess</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>javaLang</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mess</name> <operator>=</operator> <call><name><name>mess</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>javaLang</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>rxString</name> <init>= <expr><literal type="string">"RuntimeException: "</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>mess</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>rxString</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mess</name> <operator>=</operator> <call><name><name>mess</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>rxString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>statusError</name><argument_list>(<argument><expr><name>mess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<comment type="line">//    e.printStackTrace();</comment>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Show a notice message in the editor status bar.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>statusNotice</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>notice</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Clear the status area.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>statusEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>statusNotice</name><argument_list>(<argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>onBoardOrPortChange</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TargetBoard</name></type> <name>board</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetBoard</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>board</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>lineStatus</name><operator>.</operator><name>setBoardName</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>lineStatus</name><operator>.</operator><name>setBoardName</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name><name>lineStatus</name><operator>.</operator><name>setPort</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>lineStatus</name><operator>.</operator><name>repaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>addCompilerProgressListener</name><parameter_list>(<parameter><decl><type><name>CompilerProgressListener</name></type> <name>listener</name></decl></parameter>)</parameter_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>status</name><operator>.</operator><name>addCompilerProgressListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}
</unit>
