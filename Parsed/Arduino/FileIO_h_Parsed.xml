<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/FileIO.h"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__FILEIO_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FILEIO_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Process.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_READ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_WRITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_APPEND</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>BridgeLib</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>File</name> <range>: <expr><name>public</name> <name>Stream</name> <block>{

  <expr><name>public</name><operator>:</operator>
    <call><name>File</name><argument_list>(<argument><expr><name>BridgeClass</name> <operator>&amp;</operator><name>b</name> <operator>=</operator> <name>Bridge</name></expr></argument>)</argument_list></call></expr>;
    <macro><name>File</name><argument_list>(<argument>const char *_filename</argument>, <argument>uint8_t _mode</argument>, <argument>BridgeClass &amp;b = Bridge</argument>)</argument_list></macro>;
    <expr><operator>~</operator><call><name>File</name><argument_list>()</argument_list></call></expr>;

    <expr><name>virtual</name> <name>size_t</name> <call><name>write</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <name>size_t</name> <macro><name>write</name><argument_list>(<argument>const uint8_t *buf</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <name>int</name> <call><name>read</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> <name>int</name> <call><name>peek</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> <name>int</name> <call><name>available</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> <name>void</name> <call><name>flush</name><argument_list>()</argument_list></call></expr>;
    <expr><name>int</name> <macro><name>read</name><argument_list>(<argument>void *buf</argument>, <argument>uint16_t nbyte</argument>)</argument_list></macro></expr>;
    <expr><name>boolean</name> <macro><name>seek</name><argument_list>(<argument>uint32_t pos</argument>)</argument_list></macro></expr>;
    <expr><name>uint32_t</name> <call><name>position</name><argument_list>()</argument_list></call></expr>;
    <expr><name>uint32_t</name> <call><name>size</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>close</name><argument_list>()</argument_list></call></expr>;
    <expr><name>operator</name> <call><name>bool</name><argument_list>()</argument_list></call></expr>;
    <expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <call><name>name</name><argument_list>()</argument_list></call></expr>;
    <expr><name>boolean</name> <call><name>isDirectory</name><argument_list>()</argument_list></call></expr>;
    <expr><name>File</name> <macro><name>openNextFile</name><argument_list>(<argument>uint8_t mode = FILE_READ</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>rewindDirectory</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">//using Print::write;</comment>

  <expr><name>private</name><operator>:</operator>
    <name>void</name> <call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;
    <expr><name>uint8_t</name> <name>buffered</name></expr>;
    <expr><name>uint8_t</name> <name>readPos</name></expr>;
    <expr><name>uint16_t</name> <name>dirPosition</name></expr>;
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>BUFFER_SIZE</name> <operator>=</operator> <literal type="number">64</literal></expr>;
    <expr><name>uint8_t</name> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr>;


  <expr><name>private</name><operator>:</operator>
    <name>BridgeClass</name> <operator>&amp;</operator><name>bridge</name></expr>;
    <expr><name>String</name> <name>filename</name></expr>;
    <expr><name>uint8_t</name> <name>mode</name></expr>;
    <expr><name>uint8_t</name> <name>handle</name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FileSystemClass</name> <block>{<block_content>
  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>FileSystemClass</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>bridge</name><argument_list>(<argument>Bridge</argument>)</argument_list></macro> <block>{ }</block>
    <call><name>FileSystemClass</name><argument_list>(<argument><expr><name>BridgeClass</name> <operator>&amp;</operator><name>_b</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>bridge</name><argument_list>(<argument>_b</argument>)</argument_list></macro> <block>{ }</block>

    <name>boolean</name> <call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Open the specified file/directory with the supplied mode (e.g. read or</comment>
    <comment type="line">// write, etc). Returns a File object for interacting with the file.</comment>
    <comment type="line">// Note that currently only one file can be open at a time.</comment>
    <function_decl><type><name>File</name></type> <name>open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>mode</name> <init>= <expr><name>FILE_READ</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Methods to determine if the requested file path exists.</comment>
    <function_decl><type><name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Create the requested directory hierarchy--if intermediate directories</comment>
    <comment type="line">// do not exist they will be created.</comment>
    <function_decl><type><name>boolean</name></type> <name>mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Delete the file.</comment>
    <function_decl><type><name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>boolean</name></type> <name>rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>

  <label><name>private</name>:</label>
    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>File</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>BridgeClass</name> <modifier>&amp;</modifier></type><name>bridge</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>FileSystemClass</name></type> <name>FileSystem</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// We enclose File and FileSystem classes in namespace BridgeLib to avoid</comment>
<comment type="line">// conflicts with legacy SD library.</comment>

<comment type="line">// This ensure compatibility with older sketches that uses only Bridge lib</comment>
<comment type="line">// (the user can still use File instead of BridgeFile)</comment>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>BridgeLib</name></decl>;</decl_stmt>

<comment type="line">// This allows sketches to use BridgeLib::File together with SD library</comment>
<comment type="line">// (you must use BridgeFile instead of File when needed to disambiguate)</comment>
<typedef>typedef <expr_stmt><expr><name>BridgeLib</name><operator>::</operator><name>File</name>            <name>BridgeFile</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>BridgeLib</name><operator>::</operator><name>FileSystemClass</name> <name>BridgeFileSystemClass</name></expr>;</expr_stmt></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BridgeFileSystem</name></cpp:macro>           <cpp:value>BridgeLib::FileSystem</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
