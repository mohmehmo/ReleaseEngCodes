<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/edazdarevic/commons/net/CIDRUtils.java"><comment type="block">/*
* The MIT License
*
* Copyright (c) 2013 Edin Dazdarevic (edin.dazdarevic@gmail.com)

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:

* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.

* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*
* */</comment>

<package>package <name><name>edazdarevic</name><operator>.</operator><name>commons</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A class that enables to get an IP range from CIDR specification. It supports
 * both IPv4 and IPv6.
 */</comment>
<class><specifier>public</specifier> class <name>CIDRUtils</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>cidr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>inetAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>startAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>endAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>prefixLength</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>CIDRUtils</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cidr</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cidr</name></name> <operator>=</operator> <name>cidr</name></expr>;</expr_stmt>

        <comment type="block">/* split CIDR to address and prefix part */</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>cidr</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>cidr</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>addressPart</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>cidr</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>networkPart</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>cidr</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>inetAddress</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>addressPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefixLength</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>networkPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>calculate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"not an valid CIDR format!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></constructor>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>calculate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>maskBuffer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>targetSize</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>inetAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>maskBuffer</name> <operator>=</operator>
                    <call><name><name>ByteBuffer</name>
                            <operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>targetSize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>maskBuffer</name> <operator>=</operator> <call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>targetSize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>maskBuffer</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>not</name><argument_list>()</argument_list></call><operator>.</operator><call><name>shiftRight</name><argument_list>(<argument><expr><name>prefixLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buffer</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>inetAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>ipVal</name> <init>= <expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>buffer</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>startIp</name> <init>= <expr><call><name><name>ipVal</name><operator>.</operator><name>and</name></name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>endIp</name> <init>= <expr><call><name><name>startIp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>mask</name><operator>.</operator><name>not</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>startIpArr</name> <init>= <expr><call><name>toBytes</name><argument_list>(<argument><expr><call><name><name>startIp</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>endIpArr</name> <init>= <expr><call><name>toBytes</name><argument_list>(<argument><expr><call><name><name>endIp</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startAddress</name></name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByAddress</name></name><argument_list>(<argument><expr><name>startIpArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endAddress</name></name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByAddress</name></name><argument_list>(<argument><expr><name>endIpArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>toBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>&gt;</argument_list></name></type> <name>newArr</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>counter</name> <operator>&lt;</operator> <name>targetSize</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>array</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>counter</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>newArr</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name><name>array</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>newArr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>targetSize</name> <operator>-</operator> <name>size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

            <expr_stmt><expr><call><name><name>newArr</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>newArr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>newArr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>newArr</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getNetworkAddress</name><parameter_list>()</parameter_list> <block>{<block_content>

        <return>return <expr><call><name><name>this</name><operator>.</operator><name>startAddress</name><operator>.</operator><name>getHostAddress</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getBroadcastAddress</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>endAddress</name><operator>.</operator><name>getHostAddress</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ipAddress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>ipAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>start</name> <init>= <expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>startAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>end</name> <init>= <expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>endAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>target</name> <init>= <expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><call><name><name>start</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>te</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>(</operator><name>st</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>st</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>te</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>te</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
