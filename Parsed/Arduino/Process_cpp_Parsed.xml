<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/Process.cpp"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Process.h&gt;</cpp:file></cpp:include>

<destructor><name><name>Process</name><operator>::</operator><name>~Process</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>size_t</name></type> <name><name>Process</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'I'</literal></expr>, <expr><name>handle</name></expr>, <expr><name>c</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Process</name><operator>::</operator><name>flush</name></name><parameter_list>()</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Process</name><operator>::</operator><name>available</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// Look if there is new data available</comment>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>buffered</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Process</name><operator>::</operator><name>read</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>buffered</name><operator>--</operator></expr>;</expr_stmt>
    <return>return <expr><name><name>buffer</name><index>[<expr><name>readPos</name><operator>++</operator></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>Process</name><operator>::</operator><name>peek</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name><name>buffer</name><index>[<expr><name>readPos</name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Process</name><operator>::</operator><name>doBuffer</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// If there are already char in buffer exit</comment>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// Try to buffer up to 32 characters</comment>
  <expr_stmt><expr><name>readPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'O'</literal></expr>, <expr><name>handle</name></expr>, <expr>sizeof<operator>(</operator><name>buffer</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>buffered</name> <operator>=</operator> <call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Process</name><operator>::</operator><name>begin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cmdline</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Process</name><operator>::</operator><name>addParameter</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>cmdline</name> <operator>+=</operator> <literal type="string">"\xFE"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>cmdline</name> <operator>+=</operator> <name>param</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Process</name><operator>::</operator><name>runAsynchronously</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'R'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name><name>cmdline</name><operator>-&gt;</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cmdline</name><operator>-&gt;</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>delete</operator> <name>cmdline</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cmdline</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// res[0] contains error code</comment>
    <expr_stmt><expr><name>started</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>boolean</name></type> <name><name>Process</name><operator>::</operator><name>running</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'r'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>Process</name><operator>::</operator><name>exitValue</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'W'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>Process</name><operator>::</operator><name>run</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>runAsynchronously</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>running</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><call><name>exitValue</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Process</name><operator>::</operator><name>close</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'w'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>started</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>Process</name><operator>::</operator><name>runShellCommand</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>runShellCommandAsynchronously</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>running</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><call><name>exitValue</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>Process</name><operator>::</operator><name>runShellCommandAsynchronously</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>begin</name><argument_list>(<argument><expr><literal type="string">"/bin/ash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>addParameter</name><argument_list>(<argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>addParameter</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>runAsynchronously</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// This method is currently unused</comment>
<comment type="line">//static unsigned int __commandOutputAvailable(uint8_t handle) {</comment>
<comment type="line">//  uint8_t cmd[] = {'o', handle};</comment>
<comment type="line">//  uint8_t res[1];</comment>
<comment type="line">//  Bridge.transfer(cmd, 2, res, 1);</comment>
<comment type="line">//  return res[0];</comment>
<comment type="line">//}</comment>

</unit>
