<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/PresentMode.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2005-09 Ben Fry and Casey Reas

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Vector</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Helper class for full-screen presentation mode.
 */</comment>
<class><specifier>public</specifier> class <name>PresentMode</name> <block>{

  <decl_stmt><decl><type><specifier>static</specifier> <name>GraphicsDevice</name></type> <name><name>devices</name><index>[]</index></name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Index of the default display device, probably the one that p5 was
   * started from.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>defaultIndex</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Menu object for preferences window
   */</comment>
  <comment type="line">//JMenu preferencesMenu;</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JComboBox</name></type> <name>selector</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Index of the currently selected display to be used for present mode.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>GraphicsDevice</name></type> <name>device</name></decl>;</decl_stmt>


  <static>static <block>{<block_content>
    <decl_stmt><decl><type><name>GraphicsEnvironment</name></type> <name>environment</name> <init>=
      <expr><call><name><name>GraphicsEnvironment</name><operator>.</operator><name>getLocalGraphicsEnvironment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>devices</name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>getScreenDevices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GraphicsDevice</name></type> <name>defaultDevice</name> <init>= <expr><call><name><name>environment</name><operator>.</operator><name>getDefaultScreenDevice</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Vector</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><operator>new</operator> <call><name><name>Vector</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>devices</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>devices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>defaultDevice</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>defaultIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="string">" (default)"</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>selector</name> <operator>=</operator> <operator>new</operator> <call><name>JComboBox</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selector</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>selector</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">//device = devices[index];</comment>
          <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setInteger</name></name><argument_list>(<argument><expr><literal type="string">"run.present.display"</literal></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>JComboBox</name></type> <name>getSelector</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>deviceIndex</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"run.present.display"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>selector</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>deviceIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>selector</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block">/*
  static public JFrame create() {
    int deviceIndex = PrePreferences.getInteger("run.present.display") - 1;
    if ((deviceIndex &lt; 0) || (deviceIndex &gt;= devices.length)) {
      Base.showWarning("Display doesn't exist",
                          "Present Mode is set to use display " +
                          (deviceIndex+1) +
                          " but that doesn't seem to exist.    \n" +
                          "This preference will be reset to " +
                          "use the default display.", null);
      deviceIndex = defaultIndex;
    }
    //GraphicsDevice device = devices[
    //JFrame frame = new JFrame(devices[deviceIndex]);
    PresentFrame frame = new PresentFrame(devices[deviceIndex]);
  }


  public void show() {
    setUndecorated(true);
    setResizable(false);
    device.setFullScreenWindow(this);
  }


  public Window getWindow() {
    return device.getFullScreenWindow();  // isn't this just me?
  }


  public void dispose() {
    Window window = device.getFullScreenWindow();
    if (window != null) {
      window.dispose();
    }
    device.setFullScreenWindow(null);
  }
  */</comment>
}</block></class>
</unit>
