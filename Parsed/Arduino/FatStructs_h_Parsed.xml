<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/SD_1.1.1/SD/src/utility/FatStructs.h"><comment type="block">/* Arduino SdFat Library
 * Copyright (C) 2009 by William Greiman
 *
 * This file is part of the Arduino SdFat Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino SdFat Library.  If not, see
 * &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FatStructs_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FatStructs_h</name></cpp:macro></cpp:define>
<comment type="block" format="doxygen">/**
 * \file
 * FAT file structures
 */</comment>
<comment type="block">/*
 * mostly from Microsoft document fatgen103.doc
 * http://www.microsoft.com/whdc/system/platform/firmware/fatgen.mspx
 */</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/** Value for byte 510 of boot block or MBR */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>BOOTSIG0</name> <init>= <expr><literal type="number">0X55</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Value for byte 511 of boot block or MBR */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>BOOTSIG1</name> <init>= <expr><literal type="number">0XAA</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/**
 * \struct partitionTable
 * \brief MBR partition table entry
 *
 * A partition table entry for a MBR formatted storage device.
 * The MBR partition table has four entries.
 */</comment>
<struct>struct <name>partitionTable</name> <block>{
          <comment type="block" format="doxygen">/**
           * Boot Indicator . Indicates whether the volume is the active
           * partition.  Legal values include: 0X00. Do not use for booting.
           * 0X80 Active partition.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>boot</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
            * Head part of Cylinder-head-sector address of the first block in
            * the partition. Legal values are 0-255. Only used in old PC BIOS.
            */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>beginHead</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Sector part of Cylinder-head-sector address of the first block in
           * the partition. Legal values are 1-63. Only used in old PC BIOS.
           */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>beginSector</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** High bits cylinder for first block in partition. */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>beginCylinderHigh</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Combine beginCylinderLow with beginCylinderHigh. Legal values
           * are 0-1023.  Only used in old PC BIOS.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>beginCylinderLow</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Partition type. See defines that begin with PART_TYPE_ for
           * some Microsoft partition types.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>type</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * head part of cylinder-head-sector address of the last sector in the
           * partition.  Legal values are 0-255. Only used in old PC BIOS.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>endHead</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Sector part of cylinder-head-sector address of the last sector in
           * the partition.  Legal values are 1-63. Only used in old PC BIOS.
           */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>endSector</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** High bits of end cylinder */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>endCylinderHigh</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Combine endCylinderLow with endCylinderHigh. Legal values
           * are 0-1023.  Only used in old PC BIOS.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>endCylinderLow</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Logical block address of the first block in the partition. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>firstSector</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Length of the partition, in blocks. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>totalSectors</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<comment type="block" format="doxygen">/** Type name for partitionTable */</comment>
<typedef>typedef <type><name><name>struct</name> <name>partitionTable</name></name></type> <name>part_t</name>;</typedef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/**
 * \struct masterBootRecord
 *
 * \brief Master Boot Record
 *
 * The first block of a storage device that is formatted with a MBR.
 */</comment>
<struct>struct <name>masterBootRecord</name> <block>{
           <comment type="block" format="doxygen">/** Code Area for master boot program. */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>codeArea</name><index>[<expr><literal type="number">440</literal></expr>]</index></name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Optional WindowsNT disk signature. May contain more boot code. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>diskSignature</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Usually zero but may be more boot code. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>usuallyZero</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Partition tables. */</comment>
  <decl_stmt><decl><type><name>part_t</name></type>   <name><name>part</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** First MBR signature byte. Must be 0X55 */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>mbrSig0</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Second MBR signature byte. Must be 0XAA */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>mbrSig1</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<comment type="block" format="doxygen">/** Type name for masterBootRecord */</comment>
<typedef>typedef <type><name><name>struct</name> <name>masterBootRecord</name></name></type> <name>mbr_t</name>;</typedef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/** 
 * \struct biosParmBlock
 *
 * \brief BIOS parameter block
 * 
 *  The BIOS parameter block describes the physical layout of a FAT volume.
 */</comment>
<struct>struct <name>biosParmBlock</name> <block>{
          <comment type="block" format="doxygen">/**
           * Count of bytes per sector. This value may take on only the
           * following values: 512, 1024, 2048 or 4096
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>bytesPerSector</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Number of sectors per allocation unit. This value must be a
           * power of 2 that is greater than 0. The legal values are
           * 1, 2, 4, 8, 16, 32, 64, and 128.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>sectorsPerCluster</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Number of sectors before the first FAT.
           * This value must not be zero.
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>reservedSectorCount</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/** The count of FAT data structures on the volume. This field should
           *  always contain the value 2 for any FAT volume of any type.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>fatCount</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
          * For FAT12 and FAT16 volumes, this field contains the count of
          * 32-byte directory entries in the root directory. For FAT32 volumes,
          * this field must be set to 0. For FAT12 and FAT16 volumes, this
          * value should always specify a count that when multiplied by 32
          * results in a multiple of bytesPerSector.  FAT16 volumes should
          * use the value 512.
          */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>rootDirEntryCount</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * This field is the old 16-bit total count of sectors on the volume.
           * This count includes the count of all sectors in all four regions
           * of the volume. This field can be 0; if it is 0, then totalSectors32
           * must be non-zero.  For FAT32 volumes, this field must be 0. For
           * FAT12 and FAT16 volumes, this field contains the sector count, and
           * totalSectors32 is 0 if the total sector count fits
           * (is less than 0x10000).
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>totalSectors16</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * This dates back to the old MS-DOS 1.x media determination and is
           * no longer usually used for anything.  0xF8 is the standard value
           * for fixed (non-removable) media. For removable media, 0xF0 is
           * frequently used. Legal values are 0xF0 or 0xF8-0xFF.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>mediaType</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Count of sectors occupied by one FAT on FAT12/FAT16 volumes.
           * On FAT32 volumes this field must be 0, and sectorsPerFat32
           * contains the FAT size count.
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>sectorsPerFat16</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Sectors per track for interrupt 0x13. Not used otherwise. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>sectorsPerTrtack</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Number of heads for interrupt 0x13.  Not used otherwise. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>headCount</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Count of hidden sectors preceding the partition that contains this
           * FAT volume. This field is generally only relevant for media
           *  visible on interrupt 0x13.
           */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hidddenSectors</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * This field is the new 32-bit total count of sectors on the volume.
           * This count includes the count of all sectors in all four regions
           * of the volume.  This field can be 0; if it is 0, then
           * totalSectors16 must be non-zero.
           */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>totalSectors32</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Count of sectors occupied by one FAT on FAT32 volumes.
           */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sectorsPerFat32</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * This field is only defined for FAT32 media and does not exist on
           * FAT12 and FAT16 media.
           * Bits 0-3 -- Zero-based number of active FAT.
           *             Only valid if mirroring is disabled.
           * Bits 4-6 -- Reserved.
           * Bit 7	-- 0 means the FAT is mirrored at runtime into all FATs.
	         *        -- 1 means only one FAT is active; it is the one referenced in bits 0-3.
           * Bits 8-15 	-- Reserved.
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>fat32Flags</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * FAT32 version. High byte is major revision number.
           * Low byte is minor revision number. Only 0.0 define.
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>fat32Version</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Cluster number of the first cluster of the root directory for FAT32.
           * This usually 2 but not required to be 2.
           */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>fat32RootCluster</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Sector number of FSINFO structure in the reserved area of the
           * FAT32 volume. Usually 1.
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>fat32FSInfo</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * If non-zero, indicates the sector number in the reserved area
           * of the volume of a copy of the boot record. Usually 6.
           * No value other than 6 is recommended.
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>fat32BackBootBlock</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Reserved for future expansion. Code that formats FAT32 volumes
           * should always set all of the bytes of this field to 0.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>fat32Reserved</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<comment type="block" format="doxygen">/** Type name for biosParmBlock */</comment>
<typedef>typedef <type><name><name>struct</name> <name>biosParmBlock</name></name></type> <name>bpb_t</name>;</typedef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/**
 * \struct fat32BootSector
 *
 * \brief Boot sector for a FAT16 or FAT32 volume.
 * 
 */</comment>  
<struct>struct <name>fat32BootSector</name> <block>{
           <comment type="block" format="doxygen">/** X86 jmp to boot program */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>jmpToBootCode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** informational only - don't depend on it */</comment>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>oemName</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** BIOS Parameter Block */</comment>
  <decl_stmt><decl><type><name>bpb_t</name></type>    <name>bpb</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** for int0x13 use value 0X80 for hard drive */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>driveNumber</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** used by Windows NT - should be zero for FAT */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>reserved1</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** 0X29 if next three fields are valid */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>bootSignature</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** usually generated by combining date and time */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>volumeSerialNumber</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** should match volume label in root dir */</comment>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>volumeLabel</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** informational only - don't depend on it */</comment>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>fileSystemType</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** X86 boot code */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>bootCode</name><index>[<expr><literal type="number">420</literal></expr>]</index></name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** must be 0X55 */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>bootSectorSig0</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** must be 0XAA */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>bootSectorSig1</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// End Of Chain values for FAT entries</comment>
<comment type="block" format="doxygen">/** FAT16 end of chain value used by Microsoft. */</comment>
<decl_stmt><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>FAT16EOC</name> <init>= <expr><literal type="number">0XFFFF</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Minimum value for FAT16 EOC.  Use to test for EOC. */</comment>
<decl_stmt><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>FAT16EOC_MIN</name> <init>= <expr><literal type="number">0XFFF8</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** FAT32 end of chain value used by Microsoft. */</comment>
<decl_stmt><decl><type><name>uint32_t</name> <specifier>const</specifier></type> <name>FAT32EOC</name> <init>= <expr><literal type="number">0X0FFFFFFF</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Minimum value for FAT32 EOC.  Use to test for EOC. */</comment>
<decl_stmt><decl><type><name>uint32_t</name> <specifier>const</specifier></type> <name>FAT32EOC_MIN</name> <init>= <expr><literal type="number">0X0FFFFFF8</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Mask a for FAT32 entry. Entries are 28 bits. */</comment>
<decl_stmt><decl><type><name>uint32_t</name> <specifier>const</specifier></type> <name>FAT32MASK</name> <init>= <expr><literal type="number">0X0FFFFFFF</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Type name for fat32BootSector */</comment>
<typedef>typedef <type><name><name>struct</name> <name>fat32BootSector</name></name></type> <name>fbs_t</name>;</typedef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/**
 * \struct directoryEntry
 * \brief FAT short directory entry
 *
 * Short means short 8.3 name, not the entry size.
 *  
 * Date Format. A FAT directory entry date stamp is a 16-bit field that is 
 * basically a date relative to the MS-DOS epoch of 01/01/1980. Here is the
 * format (bit 0 is the LSB of the 16-bit word, bit 15 is the MSB of the 
 * 16-bit word):
 *   
 * Bits 9-15: Count of years from 1980, valid value range 0-127 
 * inclusive (1980-2107).
 *   
 * Bits 5-8: Month of year, 1 = January, valid value range 1-12 inclusive.
 *
 * Bits 0-4: Day of month, valid value range 1-31 inclusive.
 *
 * Time Format. A FAT directory entry time stamp is a 16-bit field that has
 * a granularity of 2 seconds. Here is the format (bit 0 is the LSB of the 
 * 16-bit word, bit 15 is the MSB of the 16-bit word).
 *   
 * Bits 11-15: Hours, valid value range 0-23 inclusive.
 * 
 * Bits 5-10: Minutes, valid value range 0-59 inclusive.
 *      
 * Bits 0-4: 2-second count, valid value range 0-29 inclusive (0 - 58 seconds).
 *   
 * The valid time range is from Midnight 00:00:00 to 23:59:58.
 */</comment>
<struct>struct <name>directoryEntry</name> <block>{
           <comment type="block" format="doxygen">/**
            * Short 8.3 name.
            * The first eight bytes contain the file name with blank fill.
            * The last three bytes contain the file extension with blank fill.
            */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>name</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/** Entry attributes.
           *
           * The upper two bits of the attribute byte are reserved and should
           * always be set to 0 when a file is created and never modified or
           * looked at after that.  See defines that begin with DIR_ATT_.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>attributes</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Reserved for use by Windows NT. Set value to 0 when a file is
           * created and never modify or look at it after that.
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>reservedNT</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * The granularity of the seconds part of creationTime is 2 seconds
           * so this field is a count of tenths of a second and its valid
           * value range is 0-199 inclusive. (WHG note - seems to be hundredths)
           */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>creationTimeTenths</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Time file was created. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>creationTime</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Date file was created. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>creationDate</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * Last access date. Note that there is no last access time, only
           * a date.  This is the date of last read or write. In the case of
           * a write, this should be set to the same date as lastWriteDate.
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>lastAccessDate</name></decl>;</decl_stmt>
          <comment type="block" format="doxygen">/**
           * High word of this entry's first cluster number (always 0 for a
           * FAT12 or FAT16 volume).
           */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>firstClusterHigh</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Time of last write. File creation is considered a write. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>lastWriteTime</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Date of last write. File creation is considered a write. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>lastWriteDate</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** Low word of this entry's first cluster number. */</comment>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>firstClusterLow</name></decl>;</decl_stmt>
           <comment type="block" format="doxygen">/** 32-bit unsigned holding this file's size in bytes. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>fileSize</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Definitions for directory entries</comment>
<comment type="line">//</comment>
<comment type="block" format="doxygen">/** Type name for directoryEntry */</comment>
<typedef>typedef <type><name><name>struct</name> <name>directoryEntry</name></name></type> <name>dir_t</name>;</typedef>
<comment type="block" format="doxygen">/** escape for name[0] = 0XE5 */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_NAME_0XE5</name> <init>= <expr><literal type="number">0X05</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** name[0] value for entry that is free after being "deleted" */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_NAME_DELETED</name> <init>= <expr><literal type="number">0XE5</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** name[0] value for entry that is free and no allocated entries follow */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_NAME_FREE</name> <init>= <expr><literal type="number">0X00</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** file is read-only */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_READ_ONLY</name> <init>= <expr><literal type="number">0X01</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** File should hidden in directory listings */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_HIDDEN</name> <init>= <expr><literal type="number">0X02</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Entry is for a system file */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_SYSTEM</name> <init>= <expr><literal type="number">0X04</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Directory entry contains the volume label */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_VOLUME_ID</name> <init>= <expr><literal type="number">0X08</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Entry is for a directory */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_DIRECTORY</name> <init>= <expr><literal type="number">0X10</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Old DOS archive bit for backup support */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_ARCHIVE</name> <init>= <expr><literal type="number">0X20</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Test value for long name entry.  Test is
  (d-&gt;attributes &amp; DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME. */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_LONG_NAME</name> <init>= <expr><literal type="number">0X0F</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Test mask for long name entry */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_LONG_NAME_MASK</name> <init>= <expr><literal type="number">0X3F</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** defined attribute bits */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_DEFINED_BITS</name> <init>= <expr><literal type="number">0X3F</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Directory entry is part of a long name */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>DIR_IS_LONG_NAME</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dir_t</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>attributes</name></name> <operator>&amp;</operator> <name>DIR_ATT_LONG_NAME_MASK</name><operator>)</operator> <operator>==</operator> <name>DIR_ATT_LONG_NAME</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/** Mask for file/subdirectory tests */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DIR_ATT_FILE_TYPE_MASK</name> <init>= <expr><operator>(</operator><name>DIR_ATT_VOLUME_ID</name> <operator>|</operator> <name>DIR_ATT_DIRECTORY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Directory entry is for a file */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>DIR_IS_FILE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dir_t</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>attributes</name></name> <operator>&amp;</operator> <name>DIR_ATT_FILE_TYPE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/** Directory entry is for a subdirectory */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>DIR_IS_SUBDIR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dir_t</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>attributes</name></name> <operator>&amp;</operator> <name>DIR_ATT_FILE_TYPE_MASK</name><operator>)</operator> <operator>==</operator> <name>DIR_ATT_DIRECTORY</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/** Directory entry is for a file or subdirectory */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>DIR_IS_FILE_OR_SUBDIR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dir_t</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>attributes</name></name> <operator>&amp;</operator> <name>DIR_ATT_VOLUME_ID</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// FatStructs_h</comment>
</unit>
