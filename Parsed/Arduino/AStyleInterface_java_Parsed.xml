<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/cc/arduino/packages/formatter/AStyleInterface.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>formatter</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Base</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<class><specifier>public</specifier> class <name>AStyleInterface</name> <block>{

  <static>static <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isWindows</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>loadLib</name><argument_list>(<argument><expr><call><name><name>Base</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>mapLibraryName</name></name><argument_list>(<argument><expr><literal type="string">"msvcp100"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>loadLib</name><argument_list>(<argument><expr><call><name><name>Base</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>mapLibraryName</name></name><argument_list>(<argument><expr><literal type="string">"msvcr100"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>loadLib</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>Base</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>mapLibraryName</name></name><argument_list>(<argument><expr><literal type="string">"astylej"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>loadLib</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>lib</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name><name>lib</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Cannot load native library "</literal> <operator>+</operator> <call><name><name>lib</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"The program has terminated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Calls the AStyleMain function in Artistic Style.
   *
   * @param textIn  A string containing the source code to be formatted.
   * @param options A string of options to Artistic Style.
   * @return A String containing the formatted source from Artistic Style.
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>native</specifier> <name>String</name></type> <name>AStyleMain</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>textIn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Calls the AStyleGetVersion function in Artistic Style.
   *
   * @return A String containing the version number of Artistic Style.
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>native</specifier> <name>String</name></type> <name>AStyleGetVersion</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Error handler for messages from Artistic Style.
   * This method is called only if there are errors when AStyleMain is called.
   * This is for debugging and there should be no errors when the calling
   * parameters are correct.
   * Changing the method name requires changing Artistic Style.
   * Signature: (ILjava/lang/String;)V.
   *
   * @param errorNumber  The error number from Artistic Style.
   * @param errorMessage The error message from Artistic Style.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>ErrorHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorNumber</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>errorMessage</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"AStyle error "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>errorNumber</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" - "</literal> <operator>+</operator> <name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
</unit>
