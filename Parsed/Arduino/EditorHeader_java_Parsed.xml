<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/EditorHeader.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-08 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>Keys</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>SimpleAction</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>tools</name><operator>.</operator><name>MenuScroller</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>scale</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Sketch tabs at the top of the editor window.
 */</comment>
<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>EditorHeader</name> <super_list><extends>extends <super><name>JComponent</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>backgroundColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name><name>textColor</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>Color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Editor</name></type> <name>editor</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name><name>tabLeft</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>tabRight</name><index>[]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Font</name></type> <name>font</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FontMetrics</name></type> <name>metrics</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fontAscent</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JMenu</name></type> <name>menu</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JPopupMenu</name></type> <name>popup</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>menuLeft</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>menuRight</name></decl>;</decl_stmt>

  <comment type="line">//</comment>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name><name>STATUS</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"unsel"</literal></expr>, <expr><literal type="string">"sel"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UNSELECTED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SELECTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name><name>WHERE</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><literal type="string">"mid"</literal></expr>, <expr><literal type="string">"right"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LEFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MIDDLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RIGHT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PIECE_WIDTH</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PIECE_HEIGHT</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// value for the size bars, buttons, etc</comment>
  <comment type="line">// TODO: Should be a Theme value?</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GRID_SIZE</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name><name>Image</name><index>[]</index><index>[]</index></name></type> <name>pieces</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>Image</name></type> <name><name>menuButtons</name><index>[]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Image</name></type> <name>offscreen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sizeW</name></decl>, <decl><type ref="prev"/><name>sizeH</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>imageW</name></decl>, <decl><type ref="prev"/><name>imageH</name></decl>;</decl_stmt>

  <class><specifier>public</specifier> class <name>Actions</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Action</name></type> <name>newTab</name> <init>= <expr><operator>new</operator> <call><name>SimpleAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"New Tab"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrlShift</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_N</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleNewCode</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Action</name></type> <name>renameTab</name> <init>= <expr><operator>new</operator> <call><name>SimpleAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Rename"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleRenameCode</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Action</name></type> <name>deleteTab</name> <init>= <expr><operator>new</operator> <call><name>SimpleAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Delete"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>handleDeleteCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Action</name></type> <name>prevTab</name> <init>= <expr><operator>new</operator> <call><name>SimpleAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Previous Tab"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrlAlt</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_LEFT</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>editor</name><operator>.</operator><name>selectPrevTab</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Action</name></type> <name>nextTab</name> <init>= <expr><operator>new</operator> <call><name>SimpleAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Next Tab"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrlAlt</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_RIGHT</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>editor</name><operator>.</operator><name>selectNextTab</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>Actions</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// Explicitly bind keybindings for the actions with accelerators above</comment>
      <comment type="line">// Normally, this happens automatically for any actions bound to menu</comment>
      <comment type="line">// items, but only for menus attached to a window, not for popup menus.</comment>
      <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>EditorHeader</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>newTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>EditorHeader</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>prevTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>EditorHeader</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>nextTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Add alternative keybindings to switch tabs</comment>
      <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>EditorHeader</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>prevTab</name></expr></argument>, <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrlShift</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name><name>EditorHeader</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>nextTab</name></expr></argument>, <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrl</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>
  <decl_stmt><decl><type><specifier>public</specifier> <name>Actions</name></type> <name>actions</name> <init>= <expr><operator>new</operator> <call><name>Actions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Called whenever we, or any of our ancestors, is added to a container.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>addNotify</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addNotify</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Once we get added to a window, remove Ctrl-Tab and Ctrl-Shift-Tab from
     * the keys used for focus traversal (so our bindings for these keys will
     * work). All components inherit from the window eventually, so this should
     * work whenever the focus is inside our window. Some components (notably
     * JTextPane / JEditorPane) keep their own focus traversal keys, though, and
     * have to be treated individually (either the same as below, or by
     * disabling focus traversal entirely).
     */</comment>
    <decl_stmt><decl><type><name>Window</name></type> <name>window</name> <init>= <expr><call><name><name>SwingUtilities</name><operator>.</operator><name>getWindowAncestor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>window</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>killFocusTraversalBinding</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrl</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Keys</name><operator>.</operator><name>killFocusTraversalBinding</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><call><name><name>Keys</name><operator>.</operator><name>ctrlShift</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_TAB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <constructor><specifier>public</specifier> <name>EditorHeader</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>eddie</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <name>eddie</name></expr>;</expr_stmt> <comment type="line">// weird name for listener</comment>

    <if_stmt><if>if <condition>(<expr><name>pieces</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pieces</name> <operator>=</operator> <operator>new</operator> <name><name>Image</name><index>[<expr><name><name>STATUS</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name><name>WHERE</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>menuButtons</name> <operator>=</operator> <operator>new</operator> <name><name>Image</name><index>[<expr><name><name>STATUS</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>STATUS</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>WHERE</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><literal type="string">"tab-"</literal> <operator>+</operator> <name><name>STATUS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name><name>WHERE</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pieces</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getThemeImage</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>PIECE_WIDTH</name></expr></argument>,
                                             <argument><expr><name>PIECE_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><literal type="string">"tab-"</literal> <operator>+</operator> <name><name>STATUS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">"-menu"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>menuButtons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getThemeImage</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>PIECE_HEIGHT</name></expr></argument>,
                                             <argument><expr><name>PIECE_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>backgroundColor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>backgroundColor</name> <operator>=</operator>
        <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"header.bgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>textColor</name><index>[<expr><name>SELECTED</name></expr>]</index></name> <operator>=</operator>
        <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"header.text.selected.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>textColor</name><index>[<expr><name>UNSELECTED</name></expr>]</index></name> <operator>=</operator>
        <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"header.text.unselected.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>addMouseListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>MouseAdapter</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>mousePressed</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name>menuLeft</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name>menuRight</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name><name>EditorHeader</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>numTabs</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getTabs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numTabs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name><name>tabLeft</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name><name>tabRight</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectTab</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>paintComponent</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>screen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>screen</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SketchController</name></type> <name>sketch</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sketch</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>  <comment type="line">// ??</comment>

    <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> <init>= <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>size</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name>sizeW</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>size</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name>sizeH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// component has been resized</comment>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>size</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name>imageW</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>size</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name>imageH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// nix the image and recreate, it's too small</comment>
        <expr_stmt><expr><name>offscreen</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// who cares, just resize</comment>
        <expr_stmt><expr><name>sizeW</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizeH</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>offscreen</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sizeW</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sizeH</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>imageW</name> <operator>=</operator> <name>sizeW</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>imageH</name> <operator>=</operator> <name>sizeH</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>offscreen</name> <operator>=</operator> <call><name>createImage</name><argument_list>(<argument><expr><name>imageW</name></expr></argument>, <argument><expr><name>imageH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>setupGraphics2D</name></name><argument_list>(<argument><expr><call><name><name>offscreen</name><operator>.</operator><name>getGraphics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"header.text.font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// need to set this each time through</comment>
    <expr_stmt><expr><name>metrics</name> <operator>=</operator> <call><name><name>g</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fontAscent</name> <operator>=</operator> <call><name><name>metrics</name><operator>.</operator><name>getAscent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set the background for the offscreen</comment>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>backgroundColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>imageW</name></expr></argument>, <argument><expr><name>imageH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>EditorTab</name></argument>&gt;</argument_list></name></type> <name>tabs</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getTabs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>codeCount</name> <init>= <expr><call><name><name>tabs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tabLeft</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>tabLeft</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>codeCount</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tabLeft</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>codeCount</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tabRight</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>codeCount</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// offset from left edge of the component</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>EditorTab</name></type> <name>tab</name> <range>: <expr><name>tabs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SketchFile</name></type> <name>file</name> <init>= <expr><call><name><name>tab</name><operator>.</operator><name>getSketchFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getPrettyName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// if modified, add the li'l glyph next to the name</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><literal type="string">"  "</literal> <operator>+</operator> <name>filename</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>file</name><operator>.</operator><name>isModified</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" \u00A7"</literal></expr> </then><else>: <expr><literal type="string">"  "</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>textWidth</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator>
        <call><name><name>font</name><operator>.</operator><name>getStringBounds</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>g</name><operator>.</operator><name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>pieceCount</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>textWidth</name> <operator>/</operator> <name>PIECE_WIDTH</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>pieceWidth</name> <init>= <expr><name>pieceCount</name> <operator>*</operator> <name>PIECE_WIDTH</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <call><name><name>editor</name><operator>.</operator><name>getCurrentTabIndex</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>SELECTED</name></expr> </then><else>: <expr><name>UNSELECTED</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>LEFT</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>PIECE_WIDTH</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>contentLeft</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>tabLeft</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pieceCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>MIDDLE</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>PIECE_WIDTH</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>tabRight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>textLeft</name> <init>= <expr><name>contentLeft</name> <operator>+</operator> <operator>(</operator><name>pieceWidth</name> <operator>-</operator> <name>textWidth</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>textColor</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>baseline</name> <init>= <expr><operator>(</operator><name>sizeH</name> <operator>+</operator> <name>fontAscent</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">//g.drawString(sketch.code[i].name, textLeft, baseline);</comment>
      <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>textLeft</name></expr></argument>, <argument><expr><name>baseline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>RIGHT</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>PIECE_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// overlap by 1 pixel</comment>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>menuLeft</name> <operator>=</operator> <name>sizeW</name> <operator>-</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name><name>menuButtons</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getWidth</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>menuRight</name> <operator>=</operator> <name>sizeW</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <comment type="line">// draw the dropdown menu target</comment>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name><name>menuButtons</name><index>[<expr><ternary><condition><expr><call><name><name>popup</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>SELECTED</name></expr> </then><else>: <expr><name>UNSELECTED</name></expr></else></ternary></expr>]</index></name></expr></argument>,
                <argument><expr><name>menuLeft</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>screen</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>offscreen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Called when a new sketch is opened.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuild</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//System.out.println("rebuilding editor header");</comment>
    <expr_stmt><expr><call><name>rebuildMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>new</operator> <call><name>JMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>popup</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>getPopupMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>setLightWeightPopupEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name><name>actions</name><operator>.</operator><name>newTab</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name><name>actions</name><operator>.</operator><name>renameTab</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name><name>actions</name><operator>.</operator><name>deleteTab</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name><name>actions</name><operator>.</operator><name>prevTab</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name><name>actions</name><operator>.</operator><name>nextTab</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Sketch</name></type> <name>sketch</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sketch</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>EditorTab</name></type> <name>tab</name> <range>: <expr><call><name><name>editor</name><operator>.</operator><name>getTabs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SketchFile</name></type> <name>file</name> <init>= <expr><call><name><name>tab</name><operator>.</operator><name>getSketchFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name> <init>= <expr><name>i</name><operator>++</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>item</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getPrettyName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectTab</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getPreferredSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getMinimumSize</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMinimumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name>GRID_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>size</name><operator>.</operator><name>height</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>size</name></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMaximumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">30000</literal></expr></argument>, <argument><expr><name>GRID_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>size</name><operator>.</operator><name>height</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>size</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
