<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/syntax/PdeKeywords.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  PdeKeywords - handles text coloring and links to html reference
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-06 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>TokenMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>TokenTypes</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Base</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibrary</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetPlatform</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>


<class><specifier>public</specifier> class <name>PdeKeywords</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>KNOWN_TOKEN_TYPES</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>ALPHA</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"RESERVED_WORD"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>RESERVED_WORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"RESERVED_WORD_2"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>RESERVED_WORD_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"VARIABLE"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>VARIABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"OPERATOR"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>OPERATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>DATA_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"LITERAL_BOOLEAN"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>LITERAL_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"LITERAL_CHAR"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>LITERAL_CHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PREPROCESSOR"</literal></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>PREPROCESSOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <comment type="line">// lookup table for the TokenMarker subclass, handles coloring</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TokenMap</name></type> <name>keywordTokenType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keywordOldToken</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keywordTokenTypeAsString</name></decl>;</decl_stmt>

  <comment type="line">// lookup table that maps keywords to their html reference pages</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keywordToReference</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>PdeKeywords</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keywordTokenType</name></name> <operator>=</operator> <operator>new</operator> <call><name>TokenMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keywordOldToken</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keywordTokenTypeAsString</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keywordToReference</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Handles loading of keywords file.
   * &lt;p/&gt;
   * Uses getKeywords()  method because that's part of the
   * TokenMarker classes.
   * &lt;p/&gt;
   * It is recommended that a # sign be used for comments
   * inside keywords.txt.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>reload</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>parseKeywordsTxt</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keywords.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>tp</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetPlatform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>platformKeywords</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>tp</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keywords.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>platformKeywords</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>parseKeywordsTxt</name><argument_list>(<argument><expr><name>platformKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name><operator>.</operator><name>getInstalledLibraries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>keywords</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>lib</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keywords.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>keywords</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>parseKeywordsTxt</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showError</name></name><argument_list>(<argument><expr><literal type="string">"Problem loading keywords"</literal></expr></argument>, <argument><expr><literal type="string">"Could not load keywords.txt,\nplease re-install Arduino."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>parseKeywordsTxt</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>input</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">//System.out.println("line is " + line);</comment>
        <comment type="line">// in case there's any garbage on the line</comment>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>line</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name><name>pieces</name><index>[]</index></name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>keyword</name> <init>= <expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>keyword</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"\\#"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>keyword</name> <operator>=</operator> <call><name><name>keyword</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\\#"</literal></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>keywordOldToken</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><name><name>pieces</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>parseHTMLReferenceFileName</name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>parseRSyntaxTextAreaTokenType</name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>

      <expr_stmt><expr><call><name>fillMissingTokenType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>fillMissingTokenType</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>oldTokenEntry</name> <range>: <expr><call><name><name>keywordOldToken</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>keyword</name> <init>= <expr><call><name><name>oldTokenEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keywordTokenTypeAsString</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="string">"KEYWORD1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>oldTokenEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>parseRSyntaxTextAreaTokenType</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><literal type="string">"LITERAL1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>oldTokenEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>      
          <expr_stmt><expr><call><name>parseRSyntaxTextAreaTokenType</name><argument_list>(<argument><expr><literal type="string">"RESERVED_WORD_2"</literal></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>parseRSyntaxTextAreaTokenType</name><argument_list>(<argument><expr><literal type="string">"FUNCTION"</literal></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>parseRSyntaxTextAreaTokenType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tokenTypeAsString</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyword</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ALPHA</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>tokenTypeAsString</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>keywordTokenType</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><call><name><name>KNOWN_TOKEN_TYPES</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tokenTypeAsString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>keywordTokenTypeAsString</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>tokenTypeAsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>keywordTokenType</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>FUNCTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>keywordTokenTypeAsString</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>parseHTMLReferenceFileName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>piece</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyword</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>htmlFilename</name> <init>= <expr><call><name><name>piece</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>htmlFilename</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>keywordToReference</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>htmlFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getReference</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyword</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>keywordToReference</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getTokenTypeAsString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyword</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>keywordTokenTypeAsString</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getTokenType</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>keywordTokenType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
