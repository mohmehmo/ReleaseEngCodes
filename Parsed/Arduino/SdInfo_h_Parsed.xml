<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/SD_1.1.1/SD/src/utility/SdInfo.h"><comment type="block">/* Arduino Sd2Card Library
 * Copyright (C) 2009 by William Greiman
 *
 * This file is part of the Arduino Sd2Card Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino Sd2Card Library.  If not, see
 * &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SdInfo_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SdInfo_h</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<comment type="line">// Based on the document:</comment>
<comment type="line">//</comment>
<comment type="line">// SD Specifications</comment>
<comment type="line">// Part 1</comment>
<comment type="line">// Physical Layer</comment>
<comment type="line">// Simplified Specification</comment>
<comment type="line">// Version 2.00</comment>
<comment type="line">// September 25, 2006</comment>
<comment type="line">//</comment>
<comment type="line">// www.sdcard.org/developers/tech/sdcard/pls/Simplified_Physical_Layer_Spec.pdf</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// SD card commands</comment>
<comment type="block" format="doxygen">/** GO_IDLE_STATE - init card in spi mode if CS low */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD0</name> <init>= <expr><literal type="number">0X00</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SEND_IF_COND - verify SD Memory Card interface operating condition.*/</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD8</name> <init>= <expr><literal type="number">0X08</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SEND_CSD - read the Card Specific Data (CSD register) */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD9</name> <init>= <expr><literal type="number">0X09</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SEND_CID - read the card identification information (CID register) */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD10</name> <init>= <expr><literal type="number">0X0A</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SEND_STATUS - read the card status register */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD13</name> <init>= <expr><literal type="number">0X0D</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** READ_BLOCK - read a single data block from the card */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD17</name> <init>= <expr><literal type="number">0X11</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** WRITE_BLOCK - write a single data block to the card */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD24</name> <init>= <expr><literal type="number">0X18</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** WRITE_MULTIPLE_BLOCK - write blocks of data until a STOP_TRANSMISSION */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD25</name> <init>= <expr><literal type="number">0X19</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** ERASE_WR_BLK_START - sets the address of the first block to be erased */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD32</name> <init>= <expr><literal type="number">0X20</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** ERASE_WR_BLK_END - sets the address of the last block of the continuous
    range to be erased*/</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD33</name> <init>= <expr><literal type="number">0X21</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** ERASE - erase all previously selected blocks */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD38</name> <init>= <expr><literal type="number">0X26</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** APP_CMD - escape for application specific command */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD55</name> <init>= <expr><literal type="number">0X37</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** READ_OCR - read the OCR register of a card */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>CMD58</name> <init>= <expr><literal type="number">0X3A</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SET_WR_BLK_ERASE_COUNT - Set the number of write blocks to be
     pre-erased before writing */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>ACMD23</name> <init>= <expr><literal type="number">0X17</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SD_SEND_OP_COMD - Sends host capacity support information and
    activates the card's initialization process */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>ACMD41</name> <init>= <expr><literal type="number">0X29</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/** status for card in the ready state */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>R1_READY_STATE</name> <init>= <expr><literal type="number">0X00</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** status for card in the idle state */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>R1_IDLE_STATE</name> <init>= <expr><literal type="number">0X01</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** status bit for illegal command */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>R1_ILLEGAL_COMMAND</name> <init>= <expr><literal type="number">0X04</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** start data token for read or write single block*/</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DATA_START_BLOCK</name> <init>= <expr><literal type="number">0XFE</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** stop token for write multiple blocks*/</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>STOP_TRAN_TOKEN</name> <init>= <expr><literal type="number">0XFD</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** start data token for write multiple blocks*/</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>WRITE_MULTIPLE_TOKEN</name> <init>= <expr><literal type="number">0XFC</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** mask for data response tokens after a write block operation */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DATA_RES_MASK</name> <init>= <expr><literal type="number">0X1F</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** write data accepted token */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>DATA_RES_ACCEPTED</name> <init>= <expr><literal type="number">0X05</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//------------------------------------------------------------------------------</comment>
<typedef>typedef <type><struct>struct <name>CID</name> <block>{
  <comment type="line">// byte 0</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>mid</name></decl>;</decl_stmt>  <comment type="line">// Manufacturer ID</comment>
  <comment type="line">// byte 1-2</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>oid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// OEM/Application ID</comment>
  <comment type="line">// byte 3-7</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>pnm</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// Product name</comment>
  <comment type="line">// byte 8</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>prv_m</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>  <comment type="line">// Product revision n.m</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>prv_n</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 9-12</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>psn</name></decl>;</decl_stmt>  <comment type="line">// Product serial number</comment>
  <comment type="line">// byte 13</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>mdt_year_high</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>  <comment type="line">// Manufacturing date</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 14</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>mdt_month</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>mdt_year_low</name> <range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 15</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>always1</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>crc</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type><name>cid_t</name>;</typedef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// CSD for version 1.00 cards</comment>
<typedef>typedef <type><struct>struct <name>CSDV1</name> <block>{
  <comment type="line">// byte 0</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved1</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>csd_ver</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 1</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>taac</name></decl>;</decl_stmt>
  <comment type="line">// byte 2</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>nsac</name></decl>;</decl_stmt>
  <comment type="line">// byte 3</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>tran_speed</name></decl>;</decl_stmt>
  <comment type="line">// byte 4</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>ccc_high</name></decl>;</decl_stmt>
  <comment type="line">// byte 5</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>read_bl_len</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>ccc_low</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 6</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>c_size_high</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved2</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>dsr_imp</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>read_blk_misalign</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_blk_misalign</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>read_bl_partial</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 7</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>c_size_mid</name></decl>;</decl_stmt>
  <comment type="line">// byte 8</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>vdd_r_curr_max</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>vdd_r_curr_min</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>c_size_low</name> <range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 9</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>c_size_mult_high</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>vdd_w_cur_max</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>vdd_w_curr_min</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 10</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sector_size_high</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>erase_blk_en</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>c_size_mult_low</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 11</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>wp_grp_size</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sector_size_low</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 12</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_bl_len_high</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>r2w_factor</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved3</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>wp_grp_enable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 13</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved4</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_partial</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_bl_len_low</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 14</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved5</name><range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>file_format</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>tmp_write_protect</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>perm_write_protect</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>copy</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>file_format_grp</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 15</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>always1</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>crc</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type><name>csd1_t</name>;</typedef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// CSD for version 2.00 cards</comment>
<typedef>typedef <type><struct>struct <name>CSDV2</name> <block>{
  <comment type="line">// byte 0</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved1</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>csd_ver</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 1</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>taac</name></decl>;</decl_stmt>
  <comment type="line">// byte 2</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>nsac</name></decl>;</decl_stmt>
  <comment type="line">// byte 3</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>tran_speed</name></decl>;</decl_stmt>
  <comment type="line">// byte 4</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>ccc_high</name></decl>;</decl_stmt>
  <comment type="line">// byte 5</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>read_bl_len</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>ccc_low</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 6</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved2</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>dsr_imp</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>read_blk_misalign</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_blk_misalign</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>read_bl_partial</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 7</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved3</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>c_size_high</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 8</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>c_size_mid</name></decl>;</decl_stmt>
  <comment type="line">// byte 9</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>c_size_low</name></decl>;</decl_stmt>
  <comment type="line">// byte 10</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sector_size_high</name> <range>: <expr><literal type="number">6</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>erase_blk_en</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved4</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 11</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>wp_grp_size</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sector_size_low</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 12</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_bl_len_high</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>r2w_factor</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved5</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>wp_grp_enable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 13</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved6</name> <range>: <expr><literal type="number">5</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_partial</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>write_bl_len_low</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 14</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>reserved7</name><range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>file_format</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>tmp_write_protect</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>perm_write_protect</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>copy</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>file_format_grp</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <comment type="line">// byte 15</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>always1</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>crc</name> <range>: <expr><literal type="number">7</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type><name>csd2_t</name>;</typedef>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// union of old and new style CSD register</comment>
<union>union <name>csd_t</name> <block>{
  <decl_stmt><decl><type><name>csd1_t</name></type> <name>v1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>csd2_t</name></type> <name>v2</name></decl>;</decl_stmt>
}</block>;</union>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SdInfo_h</comment>
</unit>
