<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/SketchController.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-10 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>Compiler</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>CompilerProgressListener</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>UploaderUtils</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>Uploader</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>RunnerException</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>forms</name><operator>.</operator><name>PasswordAuthorizationDialog</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMapException</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>LibraryList</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibrary</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Handles various tasks related to a sketch, in response to user inter-action.
 */</comment>
<class><specifier>public</specifier> class <name>SketchController</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Editor</name></type> <name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Sketch</name></type> <name>sketch</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SketchController</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>_editor</name></decl></parameter>, <parameter><decl><type><name>Sketch</name></type> <name>_sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>editor</name> <operator>=</operator> <name>_editor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sketch</name> <operator>=</operator> <name>_sketch</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>renamingCode</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Handler for the New Code menu option.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleNewCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>clearState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// make sure the user didn't hide the sketch folder</comment>
    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if read-only, give an error</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// if the files are read-only, need to first do a "save as".</comment>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch is Read-Only"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Some files are marked \"read-only\", so you'll\n"</literal> <operator>+</operator>
                         <literal type="string">"need to re-save the sketch in another location,\n"</literal> <operator>+</operator>
                         <literal type="string">"and try again."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>renamingCode</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>edit</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Name for new file:"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Handler for the Rename Code menu option.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleRenameCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SketchFile</name></type> <name>current</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>clearState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// make sure the user didn't hide the sketch folder</comment>
    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isPrimary</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>editor</name><operator>.</operator><name>untitled</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch is Untitled"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"How about saving the sketch first \n"</literal> <operator>+</operator>
                         <literal type="string">"before trying to rename it?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if read-only, give an error</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// if the files are read-only, need to first do a "save as".</comment>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch is Read-Only"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Some files are marked \"read-only\", so you'll\n"</literal> <operator>+</operator>
                         <literal type="string">"need to re-save the sketch in another location,\n"</literal> <operator>+</operator>
                         <literal type="string">"and try again."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ask for new name of file (internal to window)</comment>
    <comment type="line">// TODO maybe just popup a text area?</comment>
    <expr_stmt><expr><name>renamingCode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>prompt</name> <init>= <expr><ternary><condition><expr><call><name><name>current</name><operator>.</operator><name>isPrimary</name></name><argument_list>()</argument_list></call></expr> ?</condition><then>
      <expr><literal type="string">"New name for sketch:"</literal></expr> </then><else>: <expr><literal type="string">"New name for file:"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>oldName</name> <init>= <expr><call><name><name>current</name><operator>.</operator><name>getPrettyName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>edit</name></name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>oldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * This is called upon return from entering a new file name.
   * (that is, from either newCode or renameCode after the prompt)
   * This code is almost identical for both the newCode and renameCode
   * cases, so they're kept merged except for right in the middle
   * where they diverge.
   */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>nameCode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// make sure the user didn't hide the sketch folder</comment>
    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>newName</name> <operator>=</operator> <call><name><name>newName</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>newName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>newName</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem with rename"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The name cannot start with a period."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>FileUtils</name><operator>.</operator><name>SplitFile</name></name></type> <name>split</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>splitFilename</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>split</name><operator>.</operator><name>extension</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>split</name><operator>.</operator><name>extension</name></name> <operator>=</operator> <name><name>Sketch</name><operator>.</operator><name>DEFAULT_SKETCH_EXTENSION</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Sketch</name><operator>.</operator><name>EXTENSIONS</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>split</name><operator>.</operator><name>extension</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"\".{0}\" is not a valid extension."</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>split</name><operator>.</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem with rename"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Sanitize name</comment>
    <expr_stmt><expr><name><name>split</name><operator>.</operator><name>basename</name></name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>sanitizeName</name></name><argument_list>(<argument><expr><name><name>split</name><operator>.</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newName</name> <operator>=</operator> <call><name><name>split</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>renamingCode</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SketchFile</name></type> <name>current</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isPrimary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>split</name><operator>.</operator><name>extension</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Sketch</name><operator>.</operator><name>DEFAULT_SKETCH_EXTENSION</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem with rename"</literal></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The main file cannot use an extension"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Primary file, rename the entire sketch</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>parent</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParentFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>newFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>split</name><operator>.</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>newFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// This does not pass on e, to prevent showing a backtrace for</comment>
          <comment type="line">// "normal" errors.</comment>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>rebuildSketchbookMenus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Non-primary file, rename just that file</comment>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// This does not pass on e, to prevent showing a backtrace for</comment>
          <comment type="line">// "normal" errors.</comment>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// creating a new file</comment>
      <decl_stmt><decl><type><name>SketchFile</name></type> <name>file</name></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>sketch</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// This does not pass on e, to prevent showing a backtrace for</comment>
        <comment type="line">// "normal" errors.</comment>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectTab</name></name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>findTabIndex</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// update the tabs</comment>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>header</name><operator>.</operator><name>rebuild</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Remove a piece of code from the sketch and from the disk.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleDeleteCode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>SketchFile</name></type> <name>current</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>clearState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// make sure the user didn't hide the sketch folder</comment>
    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if read-only, give an error</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// if the files are read-only, need to first do a "save as".</comment>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch is Read-Only"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Some files are marked \"read-only\", so you'll\n"</literal> <operator>+</operator>
                       <literal type="string">"need to re-save the sketch in another location,\n"</literal> <operator>+</operator>
                       <literal type="string">"and try again."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// confirm deletion with user, yes/no</comment>
    <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>options</name> <init>= <expr><block>{ <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>prompt</name> <init>= <expr><ternary><condition><expr><call><name><name>current</name><operator>.</operator><name>isPrimary</name></name><argument_list>()</argument_list></call></expr> ?</condition><then>
      <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Are you sure you want to delete this sketch?"</literal></expr></argument>)</argument_list></call></expr> </then><else>:
      <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Are you sure you want to delete \"{0}\"?"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><call><name><name>current</name><operator>.</operator><name>getPrettyName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>JOptionPane</name><operator>.</operator><name>showOptionDialog</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>,
                                              <argument><expr><name>prompt</name></expr></argument>,
                                              <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Delete"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>YES_NO_OPTION</name></name></expr></argument>,
                                              <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>QUESTION_MESSAGE</name></name></expr></argument>,
                                              <argument><expr><literal type="null">null</literal></expr></argument>,
                                              <argument><expr><name>options</name></expr></argument>,
                                              <argument><expr><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name><name>JOptionPane</name><operator>.</operator><name>YES_OPTION</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isPrimary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>handleClose</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>

        <decl_stmt><decl><type><name>boolean</name></type> <name>neverSavedTab</name> <init>= <expr><operator>!</operator><call><name><name>current</name><operator>.</operator><name>fileExists</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// delete the file</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>current</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getBuildPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>neverSavedTab</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Couldn't do it"</literal></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not delete \"{0}\"."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>neverSavedTab</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// remove the file from the sketch list</comment>
          <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>removeFile</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>removeTab</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// just set current tab to the main tab</comment>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectTab</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// update the tabs</comment>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>header</name><operator>.</operator><name>repaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Called whenever the modification status of one of the tabs changes. TODO:
   * Move this code into Editor and improve decoupling from EditorTab
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>calcModified</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>header</name><operator>.</operator><name>repaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// http://developer.apple.com/qa/qa2001/qa1146.html</comment>
      <decl_stmt><decl><type><name>Object</name></type> <name>modifiedParam</name> <init>= <expr><ternary><condition><expr><call><name><name>sketch</name><operator>.</operator><name>isModified</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getRootPane</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putClientProperty</name><argument_list>(<argument><expr><literal type="string">"windowModified"</literal></expr></argument>, <argument><expr><name>modifiedParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getRootPane</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putClientProperty</name><argument_list>(<argument><expr><literal type="string">"Window.documentModified"</literal></expr></argument>, <argument><expr><name>modifiedParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>



  <comment type="block" format="javadoc">/**
   * Save all code in the current sketch.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>save</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// make sure the user didn't hide the sketch folder</comment>
    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch is read-only"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Some files are marked \"read-only\", so you'll\n"</literal> <operator>+</operator>
          <literal type="string">"need to re-save this sketch to another location."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>saveAs</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// rename .pde files to .ino</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SketchFile</name></argument>&gt;</argument_list></name></type> <name>oldFiles</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>SketchFile</name></type> <name>file</name> <range>: <expr><call><name><name>sketch</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isExtension</name></name><argument_list>(<argument><expr><name><name>Sketch</name><operator>.</operator><name>OLD_SKETCH_EXTENSIONS</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>oldFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>oldFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"editor.update_extension"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>options</name> <init>= <expr><block>{<expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>JOptionPane</name><operator>.</operator><name>showOptionDialog</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>,
          <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"In Arduino 1.0, the default file extension has changed\n"</literal> <operator>+</operator>
            <literal type="string">"from .pde to .ino.  New sketches (including those created\n"</literal> <operator>+</operator>
            <literal type="string">"by \"Save-As\") will use the new extension.  The extension\n"</literal> <operator>+</operator>
            <literal type="string">"of existing sketches will be updated on save, but you can\n"</literal> <operator>+</operator>
            <literal type="string">"disable this in the Preferences dialog.\n"</literal> <operator>+</operator>
            <literal type="string">"\n"</literal> <operator>+</operator>
            <literal type="string">"Save sketch and update its extension?"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">".pde -&gt; .ino"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>OK_CANCEL_OPTION</name></name></expr></argument>,
          <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>QUESTION_MESSAGE</name></name></expr></argument>,
          <argument><expr><literal type="null">null</literal></expr></argument>,
          <argument><expr><name>options</name></expr></argument>,
          <argument><expr><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>JOptionPane</name><operator>.</operator><name>OK_OPTION</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// save cancelled</comment>

        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.update_extension"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.update_extension"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Do rename of all .pde files to new .ino extension</comment>
        <for>for <control>(<init><decl><type><name>SketchFile</name></type> <name>file</name> <range>: <expr><name>oldFiles</name></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>File</name></type> <name>newName</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>replaceExtension</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Sketch</name><operator>.</operator><name>DEFAULT_SKETCH_EXTENSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><call><name><name>newName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Handles 'Save As' for a sketch.
   * &lt;P&gt;
   * This basically just duplicates the current sketch folder to
   * a new location, and then calls 'Save'. (needs to take the current
   * state of the open files and save them to the new folder..
   * but not save over the old versions for the old sketch..)
   * &lt;P&gt;
   * Also removes the previously-generated .class and .jar files,
   * because they can cause trouble.
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>saveAs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// get new name for folder</comment>
    <decl_stmt><decl><type><name>FileDialog</name></type> <name>fd</name> <init>= <expr><operator>new</operator> <call><name>FileDialog</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Save sketch folder as..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>FileDialog</name><operator>.</operator><name>SAVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isReadOnly</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isUntitled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// default to the sketchbook folder</comment>
      <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setDirectory</name></name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// default to the parent folder of where this was</comment>
      <comment type="line">// on macs a .getParentFile() method is required</comment>

      <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setDirectory</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParentFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>oldName</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setFile</name></name><argument_list>(<argument><expr><name>oldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>newParentDir</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>getDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// user canceled selection</comment>
    <if_stmt><if>if <condition>(<expr><name>newName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>newName</name> <operator>=</operator> <call><name><name>SketchController</name><operator>.</operator><name>checkName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>newFolder</name></decl>;</decl_stmt>
    <comment type="line">// User may want to overwrite a .ino</comment>
    <comment type="line">// check if the parent folder name ends with the sketch name</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>newName</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".ino"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>newParentDir</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><call><name><name>newName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>newName</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>newFolder</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>newParentDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>newFolder</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>newParentDir</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// check if the paths are identical</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>newFolder</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// just use "save" here instead, because the user will have received a</comment>
      <comment type="line">// message (from the operating system) about "do you want to replace?"</comment>
      <return>return <expr><call><name>save</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check to see if the user is trying to save this sketch inside itself</comment>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>newPath</name> <init>= <expr><call><name><name>newFolder</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>oldPath</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>newPath</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>oldPath</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"How very Borges of you"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"You cannot save the sketch into a folder\n"</literal> <operator>+</operator>
                        <literal type="string">"inside itself. This would go on forever."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">//ignore</comment>
    </block_content>}</block></catch></try>

    <comment type="line">// if the new folder already exists, then need to remove</comment>
    <comment type="line">// its contents before copying everything over</comment>
    <comment type="line">// (user will have already been warned)</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>newFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>recursiveDelete</name></name><argument_list>(<argument><expr><name>newFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// in fact, you can't do this on windows because the file dialog</comment>
    <comment type="line">// will instead put you inside the folder, but it happens on osx a lot.</comment>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>saveAs</name></name><argument_list>(<argument><expr><name>newFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// This does not pass on e, to prevent showing a backtrace for "normal"</comment>
      <comment type="line">// errors.</comment>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <comment type="line">// Name changed, rebuild the sketch menus</comment>
    <comment type="line">//editor.sketchbook.rebuildMenusAsync();</comment>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>base</name><operator>.</operator><name>rebuildSketchbookMenus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>header</name><operator>.</operator><name>rebuild</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>updateTitle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Make sure that it's not an untitled sketch</comment>
    <expr_stmt><expr><call><name>setUntitled</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// let Editor know that the save was successful</comment>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Prompt the user for a new file to the sketch, then call the
   * other addFile() function to actually add it.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleAddFile</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// make sure the user didn't hide the sketch folder</comment>
    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if read-only, give an error</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// if the files are read-only, need to first do a "save as".</comment>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch is Read-Only"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Some files are marked \"read-only\", so you'll\n"</literal> <operator>+</operator>
                         <literal type="string">"need to re-save the sketch in another location,\n"</literal> <operator>+</operator>
                         <literal type="string">"and try again."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get a dialog, select a file to add to the sketch</comment>
    <decl_stmt><decl><type><name>FileDialog</name></type> <name>fd</name> <init>= <expr><operator>new</operator> <call><name>FileDialog</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Select an image or other data file to copy to your sketch"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>FileDialog</name><operator>.</operator><name>LOAD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>directory</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>getDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// copy the file into the folder. if people would rather</comment>
    <comment type="line">// it move instead of copy, they can do it by hand</comment>
    <decl_stmt><decl><type><name>File</name></type> <name>sourceFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// now do the work of adding the file</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name>addFile</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>statusNotice</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"One file added to the sketch."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"last.folder"</literal></expr></argument>, <argument><expr><call><name><name>sourceFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Add a file to the sketch.
   *
   * Supported code files will be copied to the sketch folder. All other files
   * will be copied to the "data" folder (which is created if it does not exist
   * yet).
   * 
   * @return true if successful.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>addFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>sourceFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>sourceFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>destFile</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>isData</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>replacement</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>FileUtils</name><operator>.</operator><name>hasExtension</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name><name>Sketch</name><operator>.</operator><name>EXTENSIONS</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>destFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>prepareDataFolder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>destFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getDataFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>isData</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sourceFile</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// The typical case here is adding a file from somewhere else.</comment>
      <comment type="line">// This however fails if the source and destination are equal</comment>

      <comment type="line">// check whether this file already exists</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>destFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>options</name> <init>= <expr><block>{ <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>prompt</name> <init>= <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Replace the existing version of {0}?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>JOptionPane</name><operator>.</operator><name>showOptionDialog</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>,
                                                  <argument><expr><name>prompt</name></expr></argument>,
                                                  <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Replace"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>YES_NO_OPTION</name></name></expr></argument>,
                                                  <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>QUESTION_MESSAGE</name></name></expr></argument>,
                                                  <argument><expr><literal type="null">null</literal></expr></argument>,
                                                  <argument><expr><name>options</name></expr></argument>,
                                                  <argument><expr><name><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name><name>JOptionPane</name><operator>.</operator><name>YES_OPTION</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>replacement</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// If it's a replacement, delete the old file first,</comment>
      <comment type="line">// otherwise case changes will not be preserved.</comment>
      <comment type="line">// http://dev.processing.org/bugs/show_bug.cgi?id=969</comment>
      <if_stmt><if>if <condition>(<expr><name>replacement</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>destFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error adding file"</literal></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not delete the existing ''{0}'' file."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// perform the copy</comment>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error adding file"</literal></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not add ''{0}'' to the sketch."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></catch></try>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <comment type="line">// If the source and destination are equal, a code file is handled</comment>
      <comment type="line">//   - as a replacement, if there is a corresponding tab,</comment>
      <comment type="line">//    (eg. user wants to update the file after modifying it outside the editor)</comment>
      <comment type="line">//   - as an addition, otherwise.</comment>
      <comment type="line">//    (eg. the user copied the file to the sketch folder and wants to edit it)</comment>
      <comment type="line">// For a data file, this is a no-op.</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>editor</name><operator>.</operator><name>findTabIndex</name></name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>replacement</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// open/refresh the tab</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isData</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>tabIndex</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>replacement</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tabIndex</name> <operator>=</operator> <call><name><name>editor</name><operator>.</operator><name>findTabIndex</name></name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getTabs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>tabIndex</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SketchFile</name></type> <name>sketchFile</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name>sketchFile</name> <operator>=</operator> <call><name><name>sketch</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><call><name><name>destFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><name>sketchFile</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// This does not pass on e, to prevent showing a backtrace for</comment>
          <comment type="line">// "normal" errors.</comment>
          <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><name>tabIndex</name> <operator>=</operator> <call><name><name>editor</name><operator>.</operator><name>findTabIndex</name></name><argument_list>(<argument><expr><name>sketchFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectTab</name></name><argument_list>(<argument><expr><name>tabIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Add import statements to the current tab for the specified library
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>importLibrary</name><parameter_list>(<parameter><decl><type><name>UserLibrary</name></type> <name>lib</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// make sure the user didn't hide the sketch folder</comment>
    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>getIncludes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>srcFolder</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>getSrcFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>headers</name> <init>= <expr><call><name><name>Base</name><operator>.</operator><name>headerListFromIncludePath</name></name><argument_list>(<argument><expr><name>srcFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// import statements into the main sketch file (code[0])</comment>
    <comment type="line">// if the current code is a .java file, insert into current</comment>
    <comment type="line">//if (current.flavor == PDE) {</comment>
    <decl_stmt><decl><type><name>SketchFile</name></type> <name>file</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSketchFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isExtension</name></name><argument_list>(<argument><expr><name><name>Sketch</name><operator>.</operator><name>SKETCH_EXTENSIONS</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectTab</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// could also scan the text in the file to see if each import</comment>
    <comment type="line">// statement is already in there, but if the user has the import</comment>
    <comment type="line">// commented out, then this will be a problem.</comment>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>aList</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"#include &lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>aList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// scroll to start</comment>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Preprocess and compile all the code for this sketch.
   *
   * In an advanced program, the returned class name could be different,
   * which is why the className is set based on the return value.
   * A compilation error will burp up a RunnerException.
   *
   * @return null if compilation failed, main class name if not
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>save</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RunnerException</name></expr></argument>, <argument><expr><name>PreferencesMapException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// run the preprocessor</comment>
    <for>for <control>(<init><decl><type><name>CompilerProgressListener</name></type> <name>progressListener</name> <range>: <expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>getCompilerProgressListeners</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{<block_content>
      <expr_stmt><expr><call><name><name>progressListener</name><operator>.</operator><name>progress</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>EditorConsole</name><operator>.</operator><name>setCurrentEditorConsole</name></name><argument_list>(<argument><expr><name><name>editor</name><operator>.</operator><name>console</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ensureExistence</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       

    <decl_stmt><decl><type><name>boolean</name></type> <name>deleteTemp</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>pathToSketch</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getPrimaryFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketch</name><operator>.</operator><name>isModified</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// If any files are modified, make a copy of the sketch with the changes</comment>
      <comment type="line">// saved, so arduino-builder will see the modifications.</comment>
      <expr_stmt><expr><name>pathToSketch</name> <operator>=</operator> <call><name>saveSketchInTempFolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>deleteTemp</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>Compiler</name><argument_list>(<argument><expr><name>pathToSketch</name></expr></argument>, <argument><expr><name>sketch</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>getCompilerProgressListeners</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <comment type="line">// Make sure we clean up any temporary sketch copy</comment>
      <if_stmt><if>if <condition>(<expr><name>deleteTemp</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>recursiveDelete</name></name><argument_list>(<argument><expr><call><name><name>pathToSketch</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>File</name></type> <name>saveSketchInTempFolder</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>tempFolder</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>createTempFolder</name></name><argument_list>(<argument><expr><literal type="string">"arduino_modified_sketch_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tempFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>SketchFile</name></type> <name>file</name> <range>: <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>SketchFile</name><operator>::</operator><name>isModified</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getProgram</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>tempFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sketch</name><operator>.</operator><name>getPrimaryFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Handle export to applet.
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>exportApplet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>usingProgrammer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// build the sketch</comment>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>progressNotice</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Compiling sketch..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>foundName</name> <init>= <expr><call><name>build</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// (already reported) error during export, exit this function</comment>
    <if_stmt><if>if <condition>(<expr><name>foundName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

<comment type="line">//    // If name != exportSketchName, then that's weirdness</comment>
<comment type="line">//    // BUG unfortunately, that can also be a bug in the preproc :(</comment>
<comment type="line">//    if (!name.equals(foundName)) {</comment>
<comment type="line">//      Base.showWarning("Error during export",</comment>
<comment type="line">//                       "Sketch name is " + name + " but the sketch\n" +</comment>
<comment type="line">//                       "name in the code was " + foundName, null);</comment>
<comment type="line">//      return false;</comment>
<comment type="line">//    }</comment>

    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>progressNotice</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Uploading..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><call><name>upload</name><argument_list>(<argument><expr><name>foundName</name></expr></argument>, <argument><expr><name>usingProgrammer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>status</name><operator>.</operator><name>progressUpdate</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>success</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>upload</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>suggestedClassName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>usingProgrammer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>UploaderUtils</name></type> <name>uploaderInstance</name> <init>= <expr><operator>new</operator> <call><name>UploaderUtils</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Uploader</name></type> <name>uploader</name> <init>= <expr><call><name><name>uploaderInstance</name><operator>.</operator><name>getUploaderByPreferences</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>EditorConsole</name><operator>.</operator><name>setCurrentEditorConsole</name></name><argument_list>(<argument><expr><name><name>editor</name><operator>.</operator><name>console</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>uploader</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>PreferencesData</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><call><name><name>uploader</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PasswordAuthorizationDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>PasswordAuthorizationDialog</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Type board password to upload a new sketch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>dialog</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>statusNotice</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Upload cancelled"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>uploader</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dialog</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>warningsAccumulator</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>uploaderInstance</name><operator>.</operator><name>upload</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>, <argument><expr><name>uploader</name></expr></argument>, <argument><expr><name>suggestedClassName</name></expr></argument>, <argument><expr><name>usingProgrammer</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>warningsAccumulator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <finally>finally <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>uploader</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>uploader</name><operator>.</operator><name>getAuthorizationKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></finally></try>

      <for>for <control>(<init><decl><type><name>String</name></type> <name>warning</name> <range>: <expr><name>warningsAccumulator</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

    </block_content>}</block> while <condition>(<expr><call><name><name>uploader</name><operator>.</operator><name>requiresAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>success</name></expr>)</condition>;</do>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>errorMessage</name> <init>= <expr><call><name><name>uploader</name><operator>.</operator><name>getFailureMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>errorMessage</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errorMessage</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"An error occurred while uploading the sketch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>success</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Make sure the sketch hasn't been moved or deleted by some
   * nefarious user. If they did, try to re-create it and save.
   * Only checks to see if the main folder is still around,
   * but not its contents.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>ensureExistence</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch Disappeared"</literal></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The sketch folder has disappeared.\n "</literal> <operator>+</operator>
                       <literal type="string">"Will attempt to re-save in the same location,\n"</literal> <operator>+</operator>
                       <literal type="string">"but anything besides the code will be lost."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mkdirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>SketchFile</name></type> <name>file</name> <range>: <expr><call><name><name>sketch</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// this will force a save</comment>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>calcModified</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not re-save sketch"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not properly re-save the sketch. "</literal> <operator>+</operator>
                         <literal type="string">"You may be in trouble at this point,\n"</literal> <operator>+</operator>
                         <literal type="string">"and it might be time to copy and paste "</literal> <operator>+</operator>
                         <literal type="string">"your code to another text editor."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Returns true if this is a read-only sketch. Used for the
   * examples directory, or when sketches are loaded from read-only
   * volumes or folders without appropriate permissions.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReadOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>libraries</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name><operator>.</operator><name>getInstalledLibraries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>examplesPath</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getExamplesPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>apath</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>UserLibrary</name></argument>&gt;</argument_list></name></type> <name>libraryThatIncludesSketch</name> <init>= <expr><call><name><name>libraries</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lib</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>apath</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>lib</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>libraryThatIncludesSketch</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>libraryThatIncludesSketch</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>onGoingDevelopment</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>sketchIsSystemExample</name><argument_list>(<argument><expr><name>apath</name></expr></argument>, <argument><expr><name>examplesPath</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>sketchFilesAreReadOnly</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>sketchIsSystemExample</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>apath</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>examplesPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>apath</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>examplesPath</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>sketchFilesAreReadOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>SketchFile</name></type> <name>file</name> <range>: <expr><call><name><name>sketch</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isModified</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>fileReadOnly</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>fileExists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>



  <function><type><specifier>private</specifier> <name>void</name></type> <name>setUntitled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>editor</name><operator>.</operator><name>untitled</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUntitled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>editor</name><operator>.</operator><name>untitled</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Sketch</name></type> <name>getSketch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>sketch</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// .................................................................</comment>


  <comment type="block" format="javadoc">/**
   * Convert to sanitized name and alert the user
   * if changes were made.
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>checkName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>origName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>sanitizeName</name></name><argument_list>(<argument><expr><name>origName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>origName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>=
        <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The sketch name had to be modified.\n"</literal> <operator>+</operator>
          <literal type="string">"Sketch names must start with a letter or number, followed by letters,\n"</literal> <operator>+</operator>
          <literal type="string">"numbers, dashes, dots and underscores. Maximum length is 63 characters."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>newName</name></expr>;</return>
  </block_content>}</block></function>


}</block></class>
</unit>
