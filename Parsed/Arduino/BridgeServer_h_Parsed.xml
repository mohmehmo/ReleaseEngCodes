<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/BridgeServer.h"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_BRIDGE_SERVER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BRIDGE_SERVER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Bridge.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Server.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BridgeClient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BridgeServer</name> <range>: <expr><name>public</name> <name>Server</name> <block>{
  <expr><name>public</name><operator>:</operator>
    <comment type="line">// Constructor with a user provided BridgeClass instance</comment>
    <macro><name>BridgeServer</name><argument_list>(<argument>uint16_t port = <literal type="number">5555</literal></argument>, <argument>BridgeClass &amp;_b = Bridge</argument>)</argument_list></macro></expr>;

    <expr><name>void</name> <call><name>begin</name><argument_list>()</argument_list></call></expr>;
    <expr><name>BridgeClient</name> <call><name>accept</name><argument_list>()</argument_list></call></expr>;

    <expr><name>virtual</name> <name>size_t</name> <macro><name>write</name><argument_list>(<argument>uint8_t c</argument>)</argument_list></macro></expr>;

    <expr><name>void</name> <macro><name>listenOnLocalhost</name><argument_list>()</argument_list></macro>   <block>{
      <expr><name>useLocalhost</name> <operator>=</operator> <name>true</name></expr>;
    }</block>
    <name>void</name> <macro><name>noListenOnLocalhost</name><argument_list>()</argument_list></macro> <block>{
      <expr><name>useLocalhost</name> <operator>=</operator> <name>false</name></expr>;
    }</block>

  <name>private</name><operator>:</operator>
    <name>BridgeClass</name> <operator>&amp;</operator><name>bridge</name></expr>;
    <expr><name>uint16_t</name> <name>port</name></expr>;
    <expr><name>bool</name> <name>listening</name></expr>;
    <expr><name>bool</name> <name>useLocalhost</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// _BRIDGE_SERVER_H_</comment>
</unit>
