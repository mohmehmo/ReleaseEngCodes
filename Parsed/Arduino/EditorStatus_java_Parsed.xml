<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/EditorStatus.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-08 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>CompilerProgressListener</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>datatransfer</name><operator>.</operator><name>Clipboard</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>datatransfer</name><operator>.</operator><name>StringSelection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyAdapter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>scale</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Panel just below the editing area that contains status messages.
 */</comment>
<class><specifier>public</specifier> class <name>EditorStatus</name> <super_list><extends>extends <super><name>JPanel</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOTICE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ERR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EDIT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PROGRESS</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NO_MESSAGE</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Color</name><index>[]</index></name></type> <name>BGCOLOR</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Color</name><index>[]</index></name></type> <name>FGCOLOR</name></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <expr_stmt><expr><name>BGCOLOR</name> <operator>=</operator> <operator>new</operator> <name><name>Color</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>BGCOLOR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.notice.bgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>BGCOLOR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.error.bgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>BGCOLOR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.edit.bgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>BGCOLOR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>BGCOLOR</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>BGCOLOR</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.notice.bgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>FGCOLOR</name> <operator>=</operator> <operator>new</operator> <name><name>Color</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>FGCOLOR</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.notice.fgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>FGCOLOR</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.error.fgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>FGCOLOR</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.edit.fgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>FGCOLOR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>FGCOLOR</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>FGCOLOR</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"status.notice.fgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <comment type="line">// value for the size bars, buttons, etc</comment>
  <comment type="line">// TODO: Should be a Theme value?</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GRID_SIZE</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Editor</name></type> <name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Font</name></type> <name>font</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Image</name></type> <name>offscreen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>sizeW</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>sizeH</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>imageW</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>imageH</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>JButton</name></type> <name>cancelButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JButton</name></type> <name>okButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>editField</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JProgressBar</name></type> <name>progressBar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>JButton</name></type> <name>copyErrorButton</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CompilerProgressListener</name></argument>&gt;</argument_list></name></type> <name>compilerProgressListeners</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EditorStatus</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>editor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <name>editor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>NO_MESSAGE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>NOTICE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>font</name></name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"status.font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compilerProgressListeners</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>compilerProgressListeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>progressUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>clearState</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeState</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>changeState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>newMode</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>newMode</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>cancelButton</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>doClick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>message</name> <operator>=</operator> <name>NO_MESSAGE</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>notice</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeState</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>copyErrorButton</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeState</name><argument_list>(<argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>copyErrorButton</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>edit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dflt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeState</name><argument_list>(<argument><expr><name>EDIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>dflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>selectAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>requestFocusInWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>unedit</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clearState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>progress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>changeState</name><argument_list>(<argument><expr><name>PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCursor</name><argument_list>(<argument><expr><call><name><name>Cursor</name><operator>.</operator><name>getPredefinedCursor</name></name><argument_list>(<argument><expr><name><name>Cursor</name><operator>.</operator><name>WAIT_CURSOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>progressNotice</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unprogress</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.beep.compile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>progressBar</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCursor</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>progressUpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>progressBar</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>paintComponent</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>screen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> <init>= <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>size</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name>sizeW</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>size</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name>sizeH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// component has been resized</comment>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>size</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name>imageW</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>size</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name>imageH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// nix the image and recreate, it's too small</comment>
        <expr_stmt><expr><name>offscreen</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// who cares, just resize</comment>
        <expr_stmt><expr><name>sizeW</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizeH</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setButtonBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>offscreen</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sizeW</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sizeH</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setButtonBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>imageW</name> <operator>=</operator> <name>sizeW</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>imageH</name> <operator>=</operator> <name>sizeH</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>offscreen</name> <operator>=</operator> <call><name>createImage</name><argument_list>(<argument><expr><name>imageW</name></expr></argument>, <argument><expr><name>imageH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>setupGraphics2D</name></name><argument_list>(<argument><expr><call><name><name>offscreen</name><operator>.</operator><name>getGraphics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>BGCOLOR</name><index>[<expr><name>mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>imageW</name></expr></argument>, <argument><expr><name>imageH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>FGCOLOR</name><index>[<expr><name>mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// needs to be set each time on osx</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ascent</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAscent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <assert>assert <expr><name>message</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Preferences</name><operator>.</operator><name>GUI_SMALL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sizeH</name> <operator>+</operator> <name>ascent</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>screen</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>offscreen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>cancelButton</name> <operator>=</operator> <operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><name><name>I18n</name><operator>.</operator><name>PROMPT_CANCEL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>okButton</name> <operator>=</operator> <operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><name><name>I18n</name><operator>.</operator><name>PROMPT_OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>EDIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <comment type="line">// answering to rename/new code question</comment>
      <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>EDIT</name></expr>)</condition> <block>{<block_content>  <comment type="line">// this if() isn't (shouldn't be?) necessary</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>answer</name> <init>= <expr><call><name><name>editField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nameCode</name><argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>BGCOLOR</name><index>[<expr><name>EDIT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>BGCOLOR</name><index>[<expr><name>EDIT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>cancelButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>okButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>editField</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>addKeyListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>KeyAdapter</name></super><argument_list>()</argument_list> <block>{

      <comment type="line">// Grab ESC with keyPressed, because it's not making it to keyTyped</comment>
      <function><type><specifier>public</specifier> <name>void</name></type> <name>keyPressed</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getKeyChar</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_ESCAPE</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>unedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>event</name><operator>.</operator><name>consume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>

      <comment type="line">// use keyTyped to catch when the feller is actually</comment>
      <comment type="line">// added to the text field. with keyTyped, as opposed to</comment>
      <comment type="line">// keyPressed, the keyCode will be zero, even if it's</comment>
      <comment type="line">// enter or backspace or whatever, so the keychar should</comment>
      <comment type="line">// be used instead. grr.</comment>
      <function><type><specifier>public</specifier> <name>void</name></type> <name>keyTyped</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getKeyChar</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_ENTER</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// accept the input</comment>
          <decl_stmt><decl><type><name>String</name></type> <name>answer</name> <init>= <expr><call><name><name>editField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nameCode</name><argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>unedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>event</name><operator>.</operator><name>consume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// easier to test the affirmative case than the negative</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_BACK_SPACE</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_DELETE</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_RIGHT</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_LEFT</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_UP</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_DOWN</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_HOME</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_END</name></name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_SHIFT</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <comment type="line">// these events are ignored</comment>

        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_SPACE</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>t</name> <init>= <expr><call><name><name>editField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>editField</name><operator>.</operator><name>getSelectionStart</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>editField</name><operator>.</operator><name>getSelectionEnd</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator>
            <call><name><name>t</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setCaretPosition</name></name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>event</name><operator>.</operator><name>consume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// allow .pde and .java</comment>
          <comment type="line">// these are ok, allow them through</comment>

        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <comment type="line">// these are ok, allow them through</comment>

        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>event</name><operator>.</operator><name>consume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>editField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>progressBar</name> <operator>=</operator> <operator>new</operator> <call><name>JProgressBar</name><argument_list>(<argument><expr><name><name>JScrollBar</name><operator>.</operator><name>HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setBorderPainted</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>progressBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>copyErrorButton</name> <operator>=</operator> <operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy error messages"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>copyErrorButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>message1</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>message1</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Arduino: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>BaseNoGui</name><operator>.</operator><name>VERSION_NAME_LONG</name></name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"), "</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>message1</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Board: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\""</literal> <operator>+</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>getBoardPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\"\n\n"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>message1</name> <operator>+=</operator> <call><name><name>editor</name><operator>.</operator><name>console</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"build.verbose"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>message1</name> <operator>+=</operator> <literal type="string">"\n\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>message1</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"This report would have more information with\n"</literal> <operator>+</operator>
                       <literal type="string">"\"Show verbose output during compilation\"\n"</literal> <operator>+</operator>
                       <literal type="string">"option enabled in File -&gt; Preferences.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>Clipboard</name></type> <name>clipboard</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemClipboard</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>StringSelection</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>StringSelection</name><argument_list>(<argument><expr><name>message1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>clipboard</name><operator>.</operator><name>setContents</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Clipboard</name></type> <name>unixclipboard</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemSelection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>unixclipboard</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>unixclipboard</name><operator>.</operator><name>setContents</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>setButtonBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><operator>(</operator><name>sizeH</name> <operator>-</operator> <name><name>Preferences</name><operator>.</operator><name>BUTTON_HEIGHT</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eachButton</name> <init>= <expr><name><name>Preferences</name><operator>.</operator><name>GUI_SMALL</name></name> <operator>+</operator> <name><name>Preferences</name><operator>.</operator><name>BUTTON_WIDTH</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>cancelLeft</name> <init>= <expr><name>sizeW</name> <operator>-</operator> <name>eachButton</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>noLeft</name> <init>= <expr><name>cancelLeft</name> <operator>-</operator> <name>eachButton</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>yesLeft</name> <init>= <expr><name>noLeft</name> <operator>-</operator> <name>eachButton</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><name>cancelLeft</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><name>noLeft</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><name>noLeft</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name><name>Preferences</name><operator>.</operator><name>BUTTON_WIDTH</name></name></expr></argument>, <argument><expr><name><name>Preferences</name><operator>.</operator><name>BUTTON_HEIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name><name>Preferences</name><operator>.</operator><name>BUTTON_WIDTH</name></name></expr></argument>, <argument><expr><name><name>Preferences</name><operator>.</operator><name>BUTTON_HEIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>Preferences</name><operator>.</operator><name>BUTTON_WIDTH</name></name></expr></argument>, <argument><expr><name><name>Preferences</name><operator>.</operator><name>BUTTON_HEIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// edit field height is awkward, and very different between mac and pc,</comment>
    <comment type="line">// so use at least the preferred height for now.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>editWidth</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>Preferences</name><operator>.</operator><name>BUTTON_WIDTH</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>editHeight</name> <init>= <expr><call><name><name>editField</name><operator>.</operator><name>getPreferredSize</name></name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>editTop</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>sizeH</name> <operator>-</operator> <name>editHeight</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// add 1 for ceil</comment>
    <expr_stmt><expr><call><name><name>editField</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>yesLeft</name> <operator>-</operator> <name><name>Preferences</name><operator>.</operator><name>BUTTON_WIDTH</name></name></expr></argument>, <argument><expr><name>editTop</name></expr></argument>, <argument><expr><name>editWidth</name></expr></argument>, <argument><expr><name>editHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>noLeft</name></expr></argument>, <argument><expr><name>editTop</name></expr></argument>, <argument><expr><name>editWidth</name></expr></argument>, <argument><expr><name>editHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Dimension</name></type> <name>copyErrorButtonSize</name> <init>= <expr><call><name><name>copyErrorButton</name><operator>.</operator><name>getPreferredSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><name>sizeW</name> <operator>-</operator> <name><name>copyErrorButtonSize</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>copyErrorButton</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name><name>copyErrorButtonSize</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>Preferences</name><operator>.</operator><name>BUTTON_HEIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getPreferredSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getMinimumSize</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMinimumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name>GRID_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMaximumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><name>GRID_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isErr</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>mode</name> <operator>==</operator> <name>ERR</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>addCompilerProgressListener</name><parameter_list>(<parameter><decl><type><name>CompilerProgressListener</name></type> <name>listener</name></decl></parameter>)</parameter_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>compilerProgressListeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CompilerProgressListener</name></argument>&gt;</argument_list></name></type> <name>getCompilerProgressListeners</name><parameter_list>()</parameter_list><block>{<block_content>
    <return>return <expr><name>compilerProgressListeners</name></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
