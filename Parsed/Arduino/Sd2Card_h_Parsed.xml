<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/SD_1.1.1/SD/src/utility/Sd2Card.h"><comment type="block">/* Arduino Sd2Card Library
 * Copyright (C) 2009 by William Greiman
 *
 * This file is part of the Arduino Sd2Card Library
 *
 * This Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Arduino Sd2Card Library.  If not, see
 * &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Sd2Card_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sd2Card_h</name></cpp:macro></cpp:define>
<comment type="block" format="doxygen">/**
 * \file
 * Sd2Card class
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Sd2PinMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SdInfo.h"</cpp:file></cpp:include>
<comment type="block" format="doxygen">/** Set SCK to max rate of F_CPU/2. See Sd2Card::setSckRate(). */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SPI_FULL_SPEED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Set SCK rate to F_CPU/4. See Sd2Card::setSckRate(). */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SPI_HALF_SPEED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Set SCK rate to F_CPU/8. Sd2Card::setSckRate(). */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SPI_QUARTER_SPEED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * USE_SPI_LIB: if set, use the SPI library bundled with Arduino IDE, otherwise
 * run with a standalone driver for AVR.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SPI_LIB</name></cpp:macro></cpp:define>
<comment type="block" format="doxygen">/**
 * Define MEGA_SOFT_SPI non-zero to use software SPI on Mega Arduinos.
 * Pins used are SS 10, MOSI 11, MISO 12, and SCK 13.
 *
 * MEGA_SOFT_SPI allows an unmodified Adafruit GPS Shield to be used
 * on Mega Arduinos.  Software SPI works well with GPS Shield V1.1
 * but many SD cards will fail with GPS Shield V1.0.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEGA_SOFT_SPI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<comment type="line">//------------------------------------------------------------------------------</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MEGA_SOFT_SPI</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVR_ATmega1280__</name></expr></argument>)</argument_list></call><operator>||</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVR_ATmega2560__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOFTWARE_SPI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// MEGA_SOFT_SPI</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// SPI pin definitions</comment>
<comment type="line">//</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SOFTWARE_SPI</name></cpp:ifndef>
<comment type="line">// hardware pin defs</comment>

<comment type="line">// include pins_arduino.h or variant.h depending on architecture, via Arduino.h</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Arduino.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * SD Chip Select pin
 *
 * Warning if this pin is redefined the hardware SS will pin will be enabled
 * as an output by init().  An avr processor will not function as an SPI
 * master unless SS is set to output mode.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SDCARD_SS_PIN</name></cpp:ifndef>
<comment type="block" format="doxygen">/** The default chip select pin for the SD card is SS. */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SD_CHIP_SELECT_PIN</name> <init>= <expr><name>SS</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SD_CHIP_SELECT_PIN</name> <init>= <expr><name>SDCARD_SS_PIN</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// The following three pins must not be redefined for hardware SPI,</comment>
<comment type="line">// so ensure that they are taken from pins_arduino.h or variant.h, depending on architecture.</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SDCARD_MOSI_PIN</name></cpp:ifndef>
<comment type="block" format="doxygen">/** SPI Master Out Slave In pin */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SPI_MOSI_PIN</name> <init>= <expr><name>MOSI</name></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SPI Master In Slave Out pin */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SPI_MISO_PIN</name> <init>= <expr><name>MISO</name></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SPI Clock pin */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SPI_SCK_PIN</name> <init>= <expr><name>SCK</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SPI_MOSI_PIN</name> <init>= <expr><name>SDCARD_MOSI_PIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SPI_MISO_PIN</name> <init>= <expr><name>SDCARD_MISO_PIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type>  <name>SPI_SCK_PIN</name> <init>= <expr><name>SDCARD_SCK_PIN</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** optimize loops for hardware SPI */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_SPI_LIB</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTIMIZE_HARDWARE_SPI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="line">// SOFTWARE_SPI</comment>
<comment type="line">// define software SPI pins so Mega can use unmodified GPS Shield</comment>
<comment type="block" format="doxygen">/** SPI chip select pin */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CHIP_SELECT_PIN</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SPI Master Out Slave In pin */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SPI_MOSI_PIN</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SPI Master In Slave Out pin */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SPI_MISO_PIN</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SPI Clock pin */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SPI_SCK_PIN</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SOFTWARE_SPI</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/** Protect block zero from write if nonzero */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD_PROTECT_BLOCK_ZERO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<comment type="block" format="doxygen">/** init timeout ms */</comment>
<decl_stmt><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>SD_INIT_TIMEOUT</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** erase timeout ms */</comment>
<decl_stmt><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>SD_ERASE_TIMEOUT</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** read timeout ms */</comment>
<decl_stmt><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>SD_READ_TIMEOUT</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** write time out ms */</comment>
<decl_stmt><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>SD_WRITE_TIMEOUT</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// SD card errors</comment>
<comment type="block" format="doxygen">/** timeout error for command CMD0 */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_CMD0</name> <init>= <expr><literal type="number">0X1</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** CMD8 was not accepted - not a valid SD card*/</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_CMD8</name> <init>= <expr><literal type="number">0X2</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card returned an error response for CMD17 (read block) */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_CMD17</name> <init>= <expr><literal type="number">0X3</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card returned an error response for CMD24 (write block) */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_CMD24</name> <init>= <expr><literal type="number">0X4</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**  WRITE_MULTIPLE_BLOCKS command failed */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_CMD25</name> <init>= <expr><literal type="number">0X05</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card returned an error response for CMD58 (read OCR) */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_CMD58</name> <init>= <expr><literal type="number">0X06</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** SET_WR_BLK_ERASE_COUNT failed */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_ACMD23</name> <init>= <expr><literal type="number">0X07</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card's ACMD41 initialization process timeout */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_ACMD41</name> <init>= <expr><literal type="number">0X08</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card returned a bad CSR version field */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_BAD_CSD</name> <init>= <expr><literal type="number">0X09</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** erase block group command failed */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_ERASE</name> <init>= <expr><literal type="number">0X0A</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card not capable of single block erase */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_ERASE_SINGLE_BLOCK</name> <init>= <expr><literal type="number">0X0B</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Erase sequence timed out */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_ERASE_TIMEOUT</name> <init>= <expr><literal type="number">0X0C</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card returned an error token instead of read data */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_READ</name> <init>= <expr><literal type="number">0X0D</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** read CID or CSD failed */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_READ_REG</name> <init>= <expr><literal type="number">0X0E</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** timeout while waiting for start of read data */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_READ_TIMEOUT</name> <init>= <expr><literal type="number">0X0F</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card did not accept STOP_TRAN_TOKEN */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_STOP_TRAN</name> <init>= <expr><literal type="number">0X10</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card returned an error token as a response to a write operation */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_WRITE</name> <init>= <expr><literal type="number">0X11</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** attempt to write protected block zero */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_WRITE_BLOCK_ZERO</name> <init>= <expr><literal type="number">0X12</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card did not go ready for a multiple block write */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_WRITE_MULTIPLE</name> <init>= <expr><literal type="number">0X13</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** card returned an error to a CMD13 status check after a write */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_WRITE_PROGRAMMING</name> <init>= <expr><literal type="number">0X14</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** timeout occurred during write programming */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_WRITE_TIMEOUT</name> <init>= <expr><literal type="number">0X15</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** incorrect rate selected */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_ERROR_SCK_RATE</name> <init>= <expr><literal type="number">0X16</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// card types</comment>
<comment type="block" format="doxygen">/** Standard capacity V1 SD card */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_TYPE_SD1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Standard capacity V2 SD card */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_TYPE_SD2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** High Capacity SD card */</comment>
<decl_stmt><decl><type><name>uint8_t</name> <specifier>const</specifier></type> <name>SD_CARD_TYPE_SDHC</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="block" format="doxygen">/**
 * \class Sd2Card
 * \brief Raw access to SD and SDHC flash memory cards.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Sd2Card</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="block" format="doxygen">/** Construct an instance of Sd2Card. */</comment>
  <expr_stmt><expr><call><name>Sd2Card</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>errorCode_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>inBlock_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>partialBlockRead_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>type_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>
  <name>uint32_t</name> <call><name>cardSize</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>uint8_t</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>firstBlock</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>lastBlock</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>eraseSingleBlockEnable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <comment type="block" format="doxygen">/**
   * \return error code for last error. See Sd2Card.h for a list of error codes.
   */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>errorCode</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const <block>{<block_content><return>return <expr><name>errorCode_</name></expr>;</return></block_content>}</block></decl></decl_stmt>
  <comment type="block" format="doxygen">/** \return error data for last error. */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>errorData</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const <block>{<block_content><return>return <expr><name>status_</name></expr>;</return></block_content>}</block></decl></decl_stmt>
  <comment type="block" format="doxygen">/**
   * Initialize an SD flash memory card with default clock rate and chip
   * select pin.  See sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin).
   */</comment>
  <function><type><name>uint8_t</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>SPI_FULL_SPEED</name></expr></argument>, <argument><expr><name>SD_CHIP_SELECT_PIN</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <comment type="block" format="doxygen">/**
   * Initialize an SD flash memory card with the selected SPI clock rate
   * and the default SD chip select pin.
   * See sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin).
   */</comment>
  <function><type><name>uint8_t</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>sckRateID</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>init</name><argument_list>(<argument><expr><name>sckRateID</name></expr></argument>, <argument><expr><name>SD_CHIP_SELECT_PIN</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function_decl><type><name>uint8_t</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>sckRateID</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chipSelectPin</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>partialBlockRead</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
  <comment type="block" format="doxygen">/** Returns the current value, true or false, for partial block read. */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>partialBlockRead</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const <block>{<block_content><return>return <expr><name>partialBlockRead_</name></expr>;</return></block_content>}</block></decl></decl_stmt>
  <function_decl><type><name>uint8_t</name></type> <name>readBlock</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>readData</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>block</name></decl></parameter>,
          <parameter><decl><type><name>uint16_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
  <comment type="block" format="doxygen">/**
   * Read a cards CID register. The CID contains card identification
   * information such as Manufacturer ID, Product name, Product serial
   * number and Manufacturing date. */</comment>
  <function><type><name>uint8_t</name></type> <name>readCID</name><parameter_list>(<parameter><decl><type><name>cid_t</name><modifier>*</modifier></type> <name>cid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>readRegister</name><argument_list>(<argument><expr><name>CMD10</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <comment type="block" format="doxygen">/**
   * Read a cards CSD register. The CSD contains Card-Specific Data that
   * provides information regarding access to the card's contents. */</comment>
  <function><type><name>uint8_t</name></type> <name>readCSD</name><parameter_list>(<parameter><decl><type><name>csd_t</name><modifier>*</modifier></type> <name>csd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>readRegister</name><argument_list>(<argument><expr><name>CMD9</name></expr></argument>, <argument><expr><name>csd</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function_decl><type><name>void</name></type> <name>readEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>setSckRate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>sckRateID</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SPI_LIB</name></cpp:ifdef>
  <function_decl><type><name>uint8_t</name></type> <name>setSpiClock</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>clock</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block" format="doxygen">/** Return the card type: SD V1, SD V2 or SDHC */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> const <block>{<block_content><return>return <expr><name>type_</name></expr>;</return></block_content>}</block></decl></decl_stmt>
  <function_decl><type><name>uint8_t</name></type> <name>writeBlock</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>blockNumber</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>writeData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>writeStart</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>blockNumber</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>eraseCount</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>writeStop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>block_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>chipSelectPin_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>errorCode_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>inBlock_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>offset_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>partialBlockRead_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>status_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>type_</name></decl>;</decl_stmt>
  <comment type="line">// private functions</comment>
  <function><type><name>uint8_t</name></type> <name>cardAcmd</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>cardCommand</name><argument_list>(<argument><expr><name>CMD55</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>cardCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function_decl><type><name>uint8_t</name></type> <name>cardCommand</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><name>errorCode_</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt></block_content>}</block></function>
  <function_decl><type><name>uint8_t</name></type> <name>readRegister</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>sendWriteCommand</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>blockNumber</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>eraseCount</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>chipSelectHigh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>chipSelectLow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><name>void</name></type> <name>type</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><name>type_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content>}</block></function>
  <function_decl><type><name>uint8_t</name></type> <name>waitNotBusy</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>timeoutMillis</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>writeData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint8_t</name></type> <name>waitStartBlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// Sd2Card_h</comment>
</unit>
