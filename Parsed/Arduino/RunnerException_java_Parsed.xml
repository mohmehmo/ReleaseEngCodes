<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/debug/RunnerException.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-08 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>SketchFile</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An exception with a line number attached that occurs
 * during either compile time or run time.
 */</comment>
<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>RunnerException</name> <super_list><extends>extends <super><name>Exception</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>message</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>SketchFile</name></type> <name>codeFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>codeLine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>codeColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>showStackTrace</name></decl>;</decl_stmt>

  
  <constructor><specifier>public</specifier> <name>RunnerException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>RunnerException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showStackTrace</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>showStackTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>RunnerException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>SketchFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  
  <constructor><specifier>public</specifier> <name>RunnerException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>SketchFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  
  <constructor><specifier>public</specifier> <name>RunnerException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>SketchFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, 
                         <parameter><decl><type><name>boolean</name></type> <name>showStackTrace</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>codeFile</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>codeLine</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>codeColumn</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showStackTrace</name></name> <operator>=</operator> <name>showStackTrace</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  
  <constructor><specifier>public</specifier> <name>RunnerException</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showStackTrace</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/** 
   * Override getMessage() in Throwable, so that I can set 
   * the message text outside the constructor.
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>message</name></expr>;</return>
  </block_content>}</block></function>
  
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  
  <function><type><specifier>public</specifier> <name>SketchFile</name></type> <name>getCodeFile</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>codeFile</name></expr>;</return>
  </block_content>}</block></function>
  
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCodeFile</name><parameter_list>(<parameter><decl><type><name>SketchFile</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>codeFile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasCodeFile</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>codeFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getCodeLine</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>codeLine</name></expr>;</return>
  </block_content>}</block></function>
  
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCodeLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>codeLine</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasCodeLine</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>codeLine</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
  
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setCodeColumn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>codeColumn</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>getCodeColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>codeColumn</name></expr>;</return>
  </block_content>}</block></function>

  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>showStackTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>showStackTrace</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>hideStackTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>showStackTrace</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
  

  <comment type="block" format="javadoc">/**
   * Nix the java.lang crap out of an exception message
   * because it scares the children.
   * &lt;P&gt;
   * This function must be static to be used with super()
   * in each of the constructors above.
   */</comment>
  <comment type="block">/*
  static public final String massage(String msg) {
    if (msg.indexOf("java.lang.") == 0) {
      //int dot = msg.lastIndexOf('.');
      msg = msg.substring("java.lang.".length());
    }
    return msg;
    //return (dot == -1) ? msg : msg.substring(dot+1);
  }
  */</comment>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>printStackTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>showStackTrace</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
