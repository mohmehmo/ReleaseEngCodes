<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/SD_1.1.1/SD/src/SD.h"><comment type="block">/*

 SD - a slightly more friendly wrapper for sdfatlib

 This library aims to expose a subset of SD card functionality
 in the form of a higher level "wrapper" object.

 License: GNU General Public License V3
          (Because sdfatlib is licensed with this.)

 (C) Copyright 2010 SparkFun Electronics

 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__SD_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SD_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Arduino.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility/SdFat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility/SdFatUtil.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_READ</name></cpp:macro> <cpp:value>O_READ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_WRITE</name></cpp:macro> <cpp:value>(O_READ | O_WRITE | O_CREAT)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>SDLib</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>File</name> <range>: <expr><name>public</name> <name>Stream</name> <block>{
 <expr><name>private</name><operator>:</operator>
  <name>char</name> <name><name>_name</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>; <comment type="line">// our name</comment>
  <expr><name>SdFile</name> <operator>*</operator><name>_file</name></expr>;  <comment type="line">// underlying file pointer</comment>

<expr><name>public</name><operator>:</operator>
  <macro><name>File</name><argument_list>(<argument>SdFile f</argument>, <argument>const char *name</argument>)</argument_list></macro></expr>;     <comment type="line">// wraps an underlying SdFile</comment>
  <expr><call><name>File</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;      <comment type="line">// 'empty' constructor</comment>
  <expr><name>virtual</name> <name>size_t</name> <call><name>write</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>size_t</name> <macro><name>write</name><argument_list>(<argument>const uint8_t *buf</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;
  <expr><name>virtual</name> <name>int</name> <call><name>read</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> <name>int</name> <call><name>peek</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> <name>int</name> <call><name>available</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> <name>void</name> <call><name>flush</name><argument_list>()</argument_list></call></expr>;
  <expr><name>int</name> <macro><name>read</name><argument_list>(<argument>void *buf</argument>, <argument>uint16_t nbyte</argument>)</argument_list></macro></expr>;
  <expr><name>boolean</name> <macro><name>seek</name><argument_list>(<argument>uint32_t pos</argument>)</argument_list></macro></expr>;
  <expr><name>uint32_t</name> <call><name>position</name><argument_list>()</argument_list></call></expr>;
  <expr><name>uint32_t</name> <call><name>size</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>close</name><argument_list>()</argument_list></call></expr>;
  <expr><name>operator</name> <call><name>bool</name><argument_list>()</argument_list></call></expr>;
  <expr><name>char</name> <operator>*</operator> <call><name>name</name><argument_list>()</argument_list></call></expr>;

  <expr><name>boolean</name> <call><name>isDirectory</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>File</name> <macro><name>openNextFile</name><argument_list>(<argument>uint8_t mode = O_RDONLY</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>rewindDirectory</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
  
  <expr><name>using</name> <name>Print</name><operator>::</operator><name>write</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SDClass</name> <block>{<block_content>

<label><name>private</name>:</label>
  <comment type="line">// These are required for initialisation and use of sdfatlib</comment>
  <decl_stmt><decl><type><name>Sd2Card</name></type> <name>card</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SdVolume</name></type> <name>volume</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SdFile</name></type> <name>root</name></decl>;</decl_stmt>
  
  <comment type="line">// my quick&amp;dirty iterator, should be replaced</comment>
  <function_decl><type><name>SdFile</name></type> <name>getParentDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>indx</name></decl></parameter>)</parameter_list>;</function_decl>
<label><name>public</name>:</label>
  <comment type="line">// This needs to be called to set up the connection to the SD card</comment>
  <comment type="line">// before other methods are used.</comment>
  <function_decl><type><name>boolean</name></type> <name>begin</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>csPin</name> <init>= <expr><name>SD_CHIP_SELECT_PIN</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>boolean</name></type> <name>begin</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>clock</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>csPin</name></decl></parameter>)</parameter_list>;</function_decl>
  
  <comment type="line">// Open the specified file/directory with the supplied mode (e.g. read or</comment>
  <comment type="line">// write, etc). Returns a File object for interacting with the file.</comment>
  <comment type="line">// Note that currently only one file can be open at a time.</comment>
  <function_decl><type><name>File</name></type> <name>open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>mode</name> <init>= <expr><name>FILE_READ</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><name>File</name></type> <name>open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>mode</name> <init>= <expr><name>FILE_READ</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>open</name><argument_list>( <argument><expr><call><name><name>filename</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</return> </block_content>}</block></function>

  <comment type="line">// Methods to determine if the requested file path exists.</comment>
  <function_decl><type><name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>exists</name><argument_list>(<argument><expr><call><name><name>filepath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

  <comment type="line">// Create the requested directory heirarchy--if intermediate directories</comment>
  <comment type="line">// do not exist they will be created.</comment>
  <function_decl><type><name>boolean</name></type> <name>mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><name>boolean</name></type> <name>mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mkdir</name><argument_list>(<argument><expr><call><name><name>filepath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
  
  <comment type="line">// Delete the file.</comment>
  <function_decl><type><name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>filepath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
  
  <function_decl><type><name>boolean</name></type> <name>rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><name>boolean</name></type> <name>rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>&amp;</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>rmdir</name><argument_list>(<argument><expr><call><name><name>filepath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>

  <comment type="line">// This is used to determine the mode used to open a file</comment>
  <comment type="line">// it's here because it's the easiest place to pass the </comment>
  <comment type="line">// information through the directory walking function. But</comment>
  <comment type="line">// it's probably not the best place for it.</comment>
  <comment type="line">// It shouldn't be set directly--it is set via the parameters to `open`.</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>fileOpenMode</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>File</name></decl>;</decl_stmt>
  <function_decl><type><name>friend</name> <name>boolean</name></type> <name>callback_openPath</name><parameter_list>(<parameter><decl><type><name>SdFile</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>boolean</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SDClass</name></type> <name>SD</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// We enclose File and SD classes in namespace SDLib to avoid conflicts</comment>
<comment type="line">// with others legacy libraries that redefines File class.</comment>

<comment type="line">// This ensure compatibility with sketches that uses only SD library</comment>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>SDLib</name></decl>;</decl_stmt>

<comment type="line">// This allows sketches to use SDLib::File with other libraries (in the</comment>
<comment type="line">// sketch you must use SDFile instead of File to disambiguate)</comment>
<typedef>typedef <expr_stmt><expr><name>SDLib</name><operator>::</operator><name>File</name>    <name>SDFile</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>SDLib</name><operator>::</operator><name>SDClass</name> <name>SDFileSystemClass</name></expr>;</expr_stmt></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDFileSystem</name></cpp:macro>   <cpp:value>SDLib::SD</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
