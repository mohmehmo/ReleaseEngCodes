<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/contributions/packages/ContributedToolReference.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2014 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ContributedToolReference</name> <block>{

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getVersion</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getPackager</name><parameter_list>()</parameter_list>;</function_decl>

  <function><type><specifier>public</specifier> <name>ContributedTool</name></type> <name>resolve</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ContributedPackage</name></argument>&gt;</argument_list></name></type> <name>packages</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>ContributedPackage</name></type> <name>pack</name> <range>: <expr><name>packages</name></expr></range></decl></init>)</control> <block>{<block_content>
      <assert>assert <expr><call><name><name>pack</name><operator>.</operator><name>getTools</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
      <for>for <control>(<init><decl><type><name>ContributedTool</name></type> <name>tool</name> <range>: <expr><call><name><name>pack</name><operator>.</operator><name>getTools</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name><name>tool</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name><name>pack</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getPackager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>tool</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></for>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"name="</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" version="</literal> <operator>+</operator> <call><name>getVersion</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" packager="</literal> <operator>+</operator>
        <call><name>getPackager</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
