<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/contributions/packages/ContributionInstaller.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2014 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>DownloadableContribution</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>DownloadableContributionsDownloader</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>ProgressListener</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>SignatureVerifier</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>filters</name><operator>.</operator><name>FileExecutablePredicate</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>ArchiveExtractor</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>MultiStepProgress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>CommandLine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>DefaultExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>PumpStreamHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>LogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>PreferencesData</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>filefilters</name><operator>.</operator><name>OnlyDirs</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> class <name>ContributionInstaller</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LogManager</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ContributionInstaller</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Platform</name></type> <name>platform</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SignatureVerifier</name></type> <name>signatureVerifier</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ContributionInstaller</name><parameter_list>(<parameter><decl><type><name>Platform</name></type> <name>platform</name></decl></parameter>, <parameter><decl><type><name>SignatureVerifier</name></type> <name>signatureVerifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>platform</name></name> <operator>=</operator> <name>platform</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>signatureVerifier</name></name> <operator>=</operator> <name>signatureVerifier</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>install</name><parameter_list>(<parameter><decl><type><name>ContributedPlatform</name></type> <name>contributedPlatform</name></decl></parameter>, <parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errors</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>contributedPlatform</name><operator>.</operator><name>isInstalled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Platform is already installed!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Do not download already installed tools</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContributedTool</name></argument>&gt;</argument_list></name></type> <name>tools</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ContributedTool</name></type> <name>tool</name> <range>: <expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getResolvedTools</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>DownloadableContribution</name></type> <name>downloadable</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getDownloadableContribution</name></name><argument_list>(<argument><expr><name>platform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>downloadable</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Tool {0} is not available for your operating system."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// Download the tool if it's not installed or it's a built-in tool</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tool</name><operator>.</operator><name>isInstalled</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>tool</name><operator>.</operator><name>isBuiltIn</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tools</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>DownloadableContributionsDownloader</name></type> <name>downloader</name> <init>= <expr><operator>new</operator> <call><name>DownloadableContributionsDownloader</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getStagingFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Calculate progress increases</comment>
    <decl_stmt><decl><type><name>MultiStepProgress</name></type> <name>progress</name> <init>= <expr><operator>new</operator> <call><name>MultiStepProgress</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>tools</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Download all</comment>
    <try>try <block>{<block_content>
      <comment type="line">// Download platform</comment>
      <expr_stmt><expr><call><name><name>downloader</name><operator>.</operator><name>download</name></name><argument_list>(<argument><expr><name>contributedPlatform</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Downloading boards definitions."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>stepDone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Download tools</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>ContributedTool</name></type> <name>tool</name> <range>: <expr><name>tools</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Downloading tools ({0}/{1})."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>tools</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>downloader</name><operator>.</operator><name>download</name></name><argument_list>(<argument><expr><call><name><name>tool</name><operator>.</operator><name>getDownloadableContribution</name></name><argument_list>(<argument><expr><name>platform</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>stepDone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Download interrupted... just exit</comment>
      <return>return <expr><name>errors</name></expr>;</return>
    </block_content>}</block></catch></try>

    <decl_stmt><decl><type><name>ContributedPackage</name></type> <name>pack</name> <init>= <expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getParentPackage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>packageFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getPackagesFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pack</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// TODO: Extract to temporary folders and move to the final destination only</comment>
    <comment type="line">// once everything is successfully unpacked. If the operation fails remove</comment>
    <comment type="line">// all the temporary folders and abort installation.</comment>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ContributedToolReference</name></argument>, <argument><name>ContributedTool</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>resolvedToolReferences</name> <init>= <expr><call><name><name>contributedPlatform</name>
      <operator>.</operator><name>getResolvedToolReferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>entry</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isInstalled</name><argument_list>()</argument_list></call>
        <operator>||</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isBuiltIn</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ContributedToolReference</name></argument>, <argument><name>ContributedTool</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><name>resolvedToolReferences</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Installing tools ({0}/{1})..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>resolvedToolReferences</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>progressListener</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ContributedTool</name></type> <name>tool</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Path</name></type> <name>destFolder</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getPackagesFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tools"</literal></expr></argument>, <argument><expr><call><name><name>tool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tool</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>createDirectories</name></name><argument_list>(<argument><expr><name>destFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>DownloadableContribution</name></type> <name>toolContrib</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getDownloadableContribution</name></name><argument_list>(<argument><expr><name>platform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <assert>assert <expr><call><name><name>toolContrib</name><operator>.</operator><name>getDownloadedFile</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
      <expr_stmt><expr><operator>new</operator> <call><name>ArchiveExtractor</name><argument_list>(<argument><expr><name>platform</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>extract</name><argument_list>(<argument><expr><call><name><name>toolContrib</name><operator>.</operator><name>getDownloadedFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>destFolder</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>findAndExecutePostInstallScriptIfAny</name><argument_list>(<argument><expr><call><name><name>destFolder</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getParentPackage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isTrusted</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>areInsecurePackagesAllowed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error running post install script"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><call><name><name>tool</name><operator>.</operator><name>setInstalled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tool</name><operator>.</operator><name>setInstalledFolder</name></name><argument_list>(<argument><expr><call><name><name>destFolder</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>stepDone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Unpack platform on the correct location</comment>
    <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Installing boards..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressListener</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>platformFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>packageFolder</name></expr></argument>, <argument><expr><literal type="string">"hardware"</literal> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <call><name><name>contributedPlatform</name><operator>.</operator><name>getArchitecture</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>destFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>platformFolder</name></expr></argument>, <argument><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getParsedVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>createDirectories</name></name><argument_list>(<argument><expr><call><name><name>destFolder</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>ArchiveExtractor</name><argument_list>(<argument><expr><name>platform</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>extract</name><argument_list>(<argument><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getDownloadedFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>destFolder</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>setInstalled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>setInstalledFolder</name></name><argument_list>(<argument><expr><name>destFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>findAndExecutePostInstallScriptIfAny</name><argument_list>(<argument><expr><name>destFolder</name></expr></argument>, <argument><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getParentPackage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isTrusted</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>areInsecurePackagesAllowed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error running post install script"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>stepDone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Installation completed!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>progressListener</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>errors</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>findAndExecutePostInstallScriptIfAny</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trusted</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trustAll</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>scripts</name> <init>= <expr><call><name><name>platform</name><operator>.</operator><name>postInstallScripts</name></name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileExecutablePredicate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>scripts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>subfolders</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OnlyDirs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>subfolders</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>findAndExecutePostInstallScriptIfAny</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name><name>subfolders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trusted</name></expr></argument>, <argument><expr><name>trustAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>executeScripts</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>trusted</name></expr></argument>, <argument><expr><name>trustAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>findAndExecutePreUninstallScriptIfAny</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trusted</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trustAll</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>scripts</name> <init>= <expr><call><name><name>platform</name><operator>.</operator><name>preUninstallScripts</name></name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileExecutablePredicate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>scripts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>subfolders</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OnlyDirs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>subfolders</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>findAndExecutePreUninstallScriptIfAny</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name><name>subfolders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trusted</name></expr></argument>, <argument><expr><name>trustAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>executeScripts</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>trusted</name></expr></argument>, <argument><expr><name>trustAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>executeScripts</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>postInstallScripts</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trusted</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trustAll</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>script</name> <init>= <expr><call><name><name>postInstallScripts</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>trusted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>trustAll</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: non trusted contribution, skipping script execution ({0})"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>trustAll</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: forced untrusted script execution ({0})"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>stdout</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>stderr</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Executor</name></type> <name>executor</name> <init>= <expr><operator>new</operator> <call><name>DefaultExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setStreamHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PumpStreamHandler</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setExitValues</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>exitValue</name> <init>= <expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CommandLine</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setExitValues</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>stdout</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>stderr</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>executor</name><operator>.</operator><name>isFailure</name></name><argument_list>(<argument><expr><name>exitValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>ContributedPlatform</name></type> <name>contributedPlatform</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>contributedPlatform</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>contributedPlatform</name><operator>.</operator><name>isBuiltIn</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errors</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>findAndExecutePreUninstallScriptIfAny</name><argument_list>(<argument><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getParentPackage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isTrusted</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>areInsecurePackagesAllowed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error running post install script"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <comment type="line">// Check if the tools are no longer needed</comment>
    <for>for <control>(<init><decl><type><name>ContributedTool</name></type> <name>tool</name> <range>: <expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getResolvedTools</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// Do not remove used tools</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>isContributedToolUsed</name></name><argument_list>(<argument><expr><name>contributedPlatform</name></expr></argument>, <argument><expr><name>tool</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="line">// Do not remove built-in tools</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>tool</name><operator>.</operator><name>isBuiltIn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="line">// Ok, delete the tool</comment>
      <decl_stmt><decl><type><name>File</name></type> <name>destFolder</name> <init>= <expr><call><name><name>tool</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>recursiveDelete</name></name><argument_list>(<argument><expr><name>destFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tool</name><operator>.</operator><name>setInstalled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tool</name><operator>.</operator><name>setInstalledFolder</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// We removed the version folder (.../tools/TOOL_NAME/VERSION)</comment>
      <comment type="line">// now try to remove the containing TOOL_NAME folder</comment>
      <comment type="line">// (and silently fail if another version of the tool is installed)</comment>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name><name>destFolder</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ignore</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"The directory is not empty there is another version installed. directory {}"</literal></expr></argument>,
          <argument><expr><call><name><name>destFolder</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPath</name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>recursiveDelete</name></name><argument_list>(<argument><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>setInstalled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contributedPlatform</name><operator>.</operator><name>setInstalledFolder</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>errors</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>updateIndex</name><parameter_list>(<parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>MultiStepProgress</name></type> <name>progress</name> <init>= <expr><operator>new</operator> <call><name>MultiStepProgress</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DownloadableContributionsDownloader</name></type> <name>downloader</name> <init>= <expr><operator>new</operator> <call><name>DownloadableContributionsDownloader</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getStagingFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>packageIndexURLs</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(
      <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getCollection</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_BOARDS_MANAGER_ADDITIONAL_URLS</name></name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>packageIndexURLs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PACKAGE_INDEX_URL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>downloadedPackageIndexFilesAccumulator</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>packageIndexURLString</name> <range>: <expr><name>packageIndexURLs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <try>try <block>{<block_content>
        <comment type="line">// Extract the file name from the URL</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>URL</name></type> <name>packageIndexURL</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>packageIndexURLString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>indexFileName</name> <init>= <expr><call><name><name>FilenameUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name><name>packageIndexURL</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>downloadedPackageIndexFilesAccumulator</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getIndexFile</name></name><argument_list>(<argument><expr><name>indexFileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Start download and signature check of={}"</literal></expr></argument>, <argument><expr><name>packageIndexURLs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>downloader</name><operator>.</operator><name>downloadIndexAndSignature</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>packageIndexURL</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><name>signatureVerifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>stepDone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Downloaded package index URL={}"</literal></expr></argument>, <argument><expr><name>packageIndexURLs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>downloadedPackageIndexFilesAccumulator</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>deleteUnknownFiles</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>downloadedPackageIndexFiles</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>preferencesFolder</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getIndexFile</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getParentFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>additionalPackageIndexFiles</name> <init>= <expr><call><name><name>preferencesFolder</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PackageIndexFilenameFilter</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_INDEX_FILE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>additionalPackageIndexFiles</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Check unknown files. Additional package index folder files={}, Additional package index url downloaded={}"</literal></expr></argument>, <argument><expr><name>downloadedPackageIndexFiles</name></expr></argument>, <argument><expr><name>additionalPackageIndexFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>File</name></type> <name>additionalPackageIndexFile</name> <range>: <expr><name>additionalPackageIndexFiles</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>downloadedPackageIndexFiles</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>additionalPackageIndexFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Delete this unknown file={} because not included in this list={}"</literal></expr></argument>, <argument><expr><name>additionalPackageIndexFile</name></expr></argument>, <argument><expr><name>additionalPackageIndexFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><call><name><name>additionalPackageIndexFile</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
}</block></class>
</unit>
