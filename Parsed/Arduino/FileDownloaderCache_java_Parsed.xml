<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/utils/network/FileDownloaderCache.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2019 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>


<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>network</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>FileHash</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonIgnore</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonIgnoreProperties</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>type</name><operator>.</operator><name>TypeReference</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JsonNode</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>SerializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>node</name><operator>.</operator><name>ObjectNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>LogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>PreferencesData</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>FileUtils</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>script</name><operator>.</operator><name>ScriptException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>ProtocolException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>format</name><operator>.</operator><name>DateTimeFormatter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BiFunction</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<class><specifier>public</specifier> class <name>FileDownloaderCache</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CACHE_ENABLE_PREFERENCE_KEY</name> <init>= <expr><literal type="string">"cache.enable"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LogManager</name>
    <operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>FileDownloaderCache</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FileCached</name></argument>&gt;</argument_list></name></type> <name>cachedFiles</name> <init>= <expr><call><name><name>Collections</name>
    <operator>.</operator><name>synchronizedMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>cacheFolder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>enableCache</name></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <expr_stmt><expr><name>enableCache</name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>CACHE_ENABLE_PREFERENCE_KEY</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enableCache</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"The cache is disable cache.enable=false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>CACHE_ENABLE_PREFERENCE_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>enableCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>settingsFolder</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>settingsFolder</name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>getSettingsFolder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>settingsFolder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cacheFolder</name> <operator>=</operator> <call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>settingsFolder</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cache"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>enableCache</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>cacheFolder</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"The cache will disable because the setting folder is null, cannot generate the cache path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>pathCacheInfo</name> <init>= <expr><call><name>getCachedInfoPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cache folder {}"</literal></expr></argument>, <argument><expr><name>cacheFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>pathCacheInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>JsonNode</name></type> <name>jsonNode</name> <init>= <expr><call><name><name>mapper</name><operator>.</operator><name>readTree</name></name><argument_list>(<argument><expr><call><name><name>pathCacheInfo</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Read the files array</comment>
        <decl_stmt><decl><type><name><name>TypeReference</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>typeRef</name> <init>= <expr><operator>new</operator> <class><super><name><name>TypeReference</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><call><name><name>mapper</name>
          <operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><call><name><name>mapper</name><operator>.</operator><name>treeAsTokens</name></name><argument_list>(<argument><expr><call><name><name>jsonNode</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>typeRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Update the map with the remote url as a key and the file cache info as a value</comment>
        <expr_stmt><expr><call><name><name>cachedFiles</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>Collections</name>
          <operator>.</operator><name>synchronizedMap</name></name><argument_list>(<argument><expr><call><name><name>files</name>
            <operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>FileCached</name><operator>::</operator><name>exists</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toMap</name></name><argument_list>(<argument><expr><name>FileCached</name><operator>::</operator><name>getRemoteURL</name></expr></argument>, <argument><expr><call><name><name>Function</name><operator>.</operator><name>identity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Number of file already in the cache {}"</literal></expr></argument>, <argument><expr><call><name><name>cachedFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot initialized the cache"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></static>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></type> <name>getFileCached</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>URL</name></type> <name>remoteURL</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>URISyntaxException</name></expr></argument>, <argument><expr><name>NoSuchMethodException</name></expr></argument>, <argument><expr><name>ScriptException</name></expr></argument>,
    <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>getFileCached</name><argument_list>(<argument><expr><name>remoteURL</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></type> <name>getFileCached</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>URL</name></type> <name>remoteURL</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enableCache</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>URISyntaxException</name></expr></argument>, <argument><expr><name>NoSuchMethodException</name></expr></argument>, <argument><expr><name>ScriptException</name></expr></argument>,
    <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Return always and empty file if the cache is not enable</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>enableCache</name> <operator>&amp;&amp;</operator> <name><name>FileDownloaderCache</name><operator>.</operator><name>enableCache</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"The cache is not enable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>splitPath</name> <init>= <expr><call><name><name>remoteURL</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>splitPath</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The remote path as no file name {}"</literal></expr></argument>, <argument><expr><name>remoteURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Create the path where the cached file should exist</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Deque</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>addFirstRemoteURL</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>splitPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>addFirstRemoteURL</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><call><name><name>remoteURL</name><operator>.</operator><name>getHost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>cacheFilePath</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>cacheFolder</name></expr></argument>, <argument><expr><call><name><name>addFirstRemoteURL</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Take from the cache the file info or build from scratch</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FileCached</name></type> <name>fileCached</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>cachedFiles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>remoteURL</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>orElseGet</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>FileCached</name><argument_list>(<argument><expr><call><name><name>remoteURL</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cacheFilePath</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// If the file is change of the cache is disable run the HEAD request to check if the file is changed</comment>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Get file cached is expire {}, exist {}, info {} "</literal></expr></argument>, <argument><expr><call><name><name>fileCached</name><operator>.</operator><name>isExpire</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fileCached</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>fileCached</name><operator>.</operator><name>isExpire</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>fileCached</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Update remote etag and cache control header</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></type> <name>fileCachedInfoUpdated</name> <init>=
        <expr><call><name><name>FileDownloaderCache</name><operator>.</operator><name>updateCacheInfo</name></name><argument_list>(<argument><expr><name>remoteURL</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>remoteETagClean</name></decl></parameter>, <parameter><decl><name>cacheControl</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
          <comment type="line">// Check cache control data</comment>
          <if_stmt><if>if <condition>(<expr><call><name><name>cacheControl</name><operator>.</operator><name>isNoCache</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>cacheControl</name><operator>.</operator><name>isMustRevalidate</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>cacheControl</name><operator>.</operator><name>isNoStore</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The file {} must not be cache due to cache control header {}"</literal></expr></argument>,
              <argument><expr><name>remoteURL</name></expr></argument>, <argument><expr><name>cacheControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Update cached info of {}, createdAt {}, previous eTag {}, last eTag {}, cache control header {} "</literal></expr></argument>,
            <argument><expr><name>remoteURL</name></expr></argument>, <argument><expr><name><name>fileCached</name><operator>.</operator><name>createdAt</name></name></expr></argument>, <argument><expr><name><name>fileCached</name><operator>.</operator><name>eTag</name></name></expr></argument>, <argument><expr><name>remoteETagClean</name></expr></argument>, <argument><expr><name>cacheControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>FileCached</name></type> <name>fileCachedUpdateETag</name> <init>= <expr><operator>new</operator> <call><name>FileCached</name><argument_list>(
            <argument><expr><call><name><name>remoteURL</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>cacheFilePath</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name><name>fileCached</name><operator>.</operator><name>eTag</name></name></expr></argument>,
            <argument><expr><name>remoteETagClean</name></expr></argument>, <comment type="line">// Set the lastETag</comment>
            <argument><expr><name><name>fileCached</name><operator>.</operator><name>md5</name></name></expr></argument>,
            <argument><expr><name>cacheControl</name></expr></argument> <comment type="line">// Set the new cache control</comment>
          )</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>cachedFiles</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>remoteURL</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileCachedUpdateETag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>fileCachedUpdateETag</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>FileDownloaderCache</name><operator>.</operator><name>updateCacheFilesInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>fileCachedInfoUpdated</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>fileCached</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></type> <name>updateCacheInfo</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>remoteURL</name></decl></parameter>, <parameter><decl><type><name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CacheControl</name></argument>, <argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>FileCached</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getNewFile</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>URISyntaxException</name></expr></argument>, <argument><expr><name>NoSuchMethodException</name></expr></argument>, <argument><expr><name>ScriptException</name></expr></argument>,
    <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Update the headers of the cached file</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>HttpURLConnection</name></type> <name>headRequest</name> <init>= <expr><operator>new</operator> <call><name>HttpConnectionManager</name><argument_list>(
      <argument><expr><name>remoteURL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>makeConnection</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>connection</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>connection</name><operator>.</operator><name>setRequestMethod</name></name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ProtocolException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid protocol"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>responseCode</name> <init>= <expr><call><name><name>headRequest</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>headRequest</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Something bad is happening return a conservative true to try to download the file</comment>
    <if_stmt><if>if <condition>(<expr><name>responseCode</name> <operator>&lt;</operator> <literal type="number">200</literal> <operator>||</operator> <name>responseCode</name> <operator>&gt;=</operator> <literal type="number">300</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The head request return a bad response code "</literal> <operator>+</operator> <name>responseCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// if something bad happend</comment>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Get all the useful headers</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>remoteETag</name> <init>= <expr><call><name><name>headRequest</name><operator>.</operator><name>getHeaderField</name></name><argument_list>(<argument><expr><literal type="string">"ETag"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>cacheControlHeader</name> <init>= <expr><call><name><name>headRequest</name><operator>.</operator><name>getHeaderField</name></name><argument_list>(<argument><expr><literal type="string">"Cache-Control"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>remoteETag</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>cacheControlHeader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>remoteETagClean</name> <init>= <expr><call><name><name>remoteETag</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>CacheControl</name></type> <name>cacheControl</name> <init>= <expr><call><name><name>CacheControl</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>cacheControlHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>getNewFile</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>remoteETagClean</name></expr></argument>, <argument><expr><name>cacheControl</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The head request do not return the ETag {} or the Cache-Control {}"</literal></expr></argument>, <argument><expr><name>remoteETag</name></expr></argument>, <argument><expr><name>cacheControlHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateCacheFilesInfo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Generate a pretty json</comment>
    <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name><name>SerializationFeature</name><operator>.</operator><name>INDENT_OUTPUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ObjectNode</name></type> <name>objectNode</name> <init>= <expr><call><name><name>mapper</name><operator>.</operator><name>createObjectNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Generate a json {"files":[...{files_info}...]}</comment>
    <expr_stmt><expr><call><name><name>objectNode</name><operator>.</operator><name>putArray</name></name><argument_list>(<argument><expr><literal type="string">"files"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(
      <argument><expr><call><name><name>cachedFiles</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>mapper</name><operator>.</operator><name>convertValue</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>JsonNode</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Create the path Arduino15/cache</comment>
    <decl_stmt><decl><type><name>Path</name></type> <name>cachedFileInfo</name> <init>= <expr><call><name>getCachedInfoPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>Files</name><operator>.</operator><name>notExists</name></name><argument_list>(<argument><expr><name>cachedFileInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>createDirectories</name></name><argument_list>(<argument><expr><call><name><name>cachedFileInfo</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Update cache file info in {}, number of cached files is {}"</literal></expr></argument>, <argument><expr><call><name><name>cachedFileInfo</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cachedFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Write to cache.json</comment>
    <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><call><name><name>cachedFileInfo</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>objectNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Path</name></type> <name>getCachedInfoPath</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>cacheFolder</name></expr></argument>, <argument><expr><literal type="string">"cache.json"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <class><annotation>@<name>JsonIgnoreProperties</name><argument_list>(<argument><expr><name>ignoreUnknown</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
  <specifier>static</specifier> class <name>FileCached</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>remoteURL</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>localPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>eTag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>lastETag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>md5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>createdAt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CacheControl</name></type> <name>cacheControl</name></decl>;</decl_stmt>

    <constructor><name>FileCached</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteURL</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localPath</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastETag</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>eTag</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>md5</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>createdAt</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>cacheControl</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>FileCached</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>remoteURL</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteURL</name></name> <operator>=</operator> <name>remoteURL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localPath</name></name> <operator>=</operator> <name>localPath</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastETag</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>eTag</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>md5</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>createdAt</name> <operator>=</operator> <call><name><name>LocalDateTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name><name>DateTimeFormatter</name><operator>.</operator><name>ISO_DATE_TIME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cacheControl</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>FileCached</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>remoteURL</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localPath</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>eTag</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lastETag</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>md5</name></decl></parameter>, <parameter><decl><type><name>CacheControl</name></type> <name>cacheControl</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteURL</name></name> <operator>=</operator> <name>remoteURL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localPath</name></name> <operator>=</operator> <name>localPath</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eTag</name></name> <operator>=</operator> <name>eTag</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastETag</name></name> <operator>=</operator> <name>lastETag</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>md5</name></name> <operator>=</operator> <name>md5</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdAt</name></name> <operator>=</operator> <call><name><name>LocalDateTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name><name>DateTimeFormatter</name><operator>.</operator><name>ISO_DATE_TIME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cacheControl</name></name> <operator>=</operator> <name>cacheControl</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>JsonIgnore</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isExpire</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// Check if the file is expire</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>LocalDateTime</name></type> <name>now</name> <init>= <expr><call><name><name>LocalDateTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>getExpiresTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isBefore</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>this</name><operator>.</operator><name>getExpiresTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEqual</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>JsonIgnore</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isNotChange</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><operator>!</operator><call><name>isChange</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>JsonIgnore</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isChange</name><parameter_list>()</parameter_list> <block>{<block_content>
      <comment type="line">// Check if the file is expire</comment>
      <decl_stmt><decl><type><name>boolean</name></type> <name>isChange</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>isExpire</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"The file \"{}\" is expire. Expire time: {}"</literal></expr></argument>, <argument><expr><name>localPath</name></expr></argument>,
          <argument><expr><call><name><name>this</name><operator>.</operator><name>getExpiresTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name><name>DateTimeFormatter</name><operator>.</operator><name>ISO_DATE_TIME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isChange</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>lastETag</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>lastETag</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>eTag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// If are different means that the file is change</comment>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"The file \"{}\" is changed last ETag != now Etag ({}!={})"</literal></expr></argument>, <argument><expr><name>localPath</name></expr></argument>, <argument><expr><name>lastETag</name></expr></argument>, <argument><expr><name>eTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isChange</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>isChange</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>JsonIgnore</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>localPath</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>localPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>JsonIgnore</name></annotation>
    <type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getFileFromCache</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>md5Check</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>localPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateCacheFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>fileToCache</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>Path</name></type> <name>cacheFilePath</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>localPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// If the cache directory does not exist create it</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><call><name><name>cacheFilePath</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>createDirectories</name></name><argument_list>(<argument><expr><call><name><name>cacheFilePath</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyFile</name></name><argument_list>(<argument><expr><name>fileToCache</name></expr></argument>, <argument><expr><call><name><name>cacheFilePath</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>md5</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>calculateMD5</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>eTag</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastETag</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The eTag was not calculate this time, is not the right behaviour fileCached={}, md5={}"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>eTag</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>eTag</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>eTag</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>lastETag</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <decl_stmt><decl><type><name>FileCached</name></type> <name>newFileCached</name> <init>= <expr><operator>new</operator> <call><name>FileCached</name><argument_list>(
        <argument><expr><name><name>this</name><operator>.</operator><name>remoteURL</name></name></expr></argument>,
        <argument><expr><name><name>this</name><operator>.</operator><name>localPath</name></name></expr></argument>,
        <argument><expr><name>eTag</name></expr></argument>, <comment type="line">// Initialize the right eTag with the last eTag because the file was updated</comment>
        <argument><expr><name>eTag</name></expr></argument>,
        <argument><expr><name>md5</name></expr></argument>,
        <argument><expr><name><name>this</name><operator>.</operator><name>cacheControl</name></name></expr></argument>
      )</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Update cache file: {}"</literal></expr></argument>, <argument><expr><name>newFileCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cachedFiles</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>remoteURL</name></expr></argument>, <argument><expr><name>newFileCached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateCacheFilesInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>invalidateCache</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
      <expr_stmt><expr><call><name><name>cachedFiles</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>remoteURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>deleteIfExists</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>localPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>calculateMD5</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>NoSuchAlgorithmException</name></expr></argument></throws> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>FileHash</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>localPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MD5"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>JsonIgnore</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>md5Check</name><parameter_list>()</parameter_list> <block>{<block_content>
      <try>try <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>isNull</name></name><argument_list>(<argument><expr><call><name>getMD5</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>calculateMD5</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getMD5</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Fail to calculate the MD5. file={}"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>JsonIgnore</name></annotation>
    <type><specifier>public</specifier> <name>LocalDateTime</name></type> <name>getExpiresTime</name><parameter_list>()</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxAge</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>cacheControl</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>maxAge</name> <operator>=</operator> <call><name><name>cacheControl</name><operator>.</operator><name>getMaxAge</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>maxAge</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>createdAt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>LocalDateTime</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>createdAt</name></expr></argument>, <argument><expr><name><name>DateTimeFormatter</name><operator>.</operator><name>ISO_DATE_TIME</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>plusSeconds</name><argument_list>(<argument><expr><name>maxAge</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name><name>LocalDateTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getExpires</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><call><name>getExpiresTime</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMD5</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>md5</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>geteTag</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>eTag</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRemoteURL</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>remoteURL</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLocalPath</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>localPath</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCreatedAt</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>createdAt</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CacheControl</name></type> <name>getCacheControl</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>cacheControl</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="string">"FileCached{"</literal> <operator>+</operator>
        <literal type="string">"eTag='"</literal> <operator>+</operator> <name>eTag</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", lastETag='"</literal> <operator>+</operator> <name>lastETag</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", remoteURL='"</literal> <operator>+</operator> <name>remoteURL</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", localPath='"</literal> <operator>+</operator> <name>localPath</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", md5='"</literal> <operator>+</operator> <name>md5</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", createdAt='"</literal> <operator>+</operator> <name>createdAt</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", cacheControl="</literal> <operator>+</operator> <name>cacheControl</name> <operator>+</operator>
        <literal type="char">'}'</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
</unit>
