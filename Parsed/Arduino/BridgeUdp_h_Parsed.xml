<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/BridgeUdp.h"><comment type="block">/*
  Copyright (c) 2015 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Udp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Bridge.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BridgeUDP</name> <range>: <expr><name>public</name> <name>UDP</name> <block>{

  <expr><name>public</name><operator>:</operator>
    <call><name>BridgeUDP</name><argument_list>(<argument><expr><name>BridgeClass</name> <operator>&amp;</operator><name>_b</name> <operator>=</operator> <name>Bridge</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <name>uint8_t</name> <call><name>begin</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <name>void</name> <call><name>stop</name><argument_list>()</argument_list></call></expr>;

    <expr><name>virtual</name> <name>int</name> <macro><name>beginPacket</name><argument_list>(<argument>IPAddress ip</argument>, <argument>uint16_t port</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <name>int</name> <macro><name>beginPacket</name><argument_list>(<argument>const char *host</argument>, <argument>uint16_t port</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <name>int</name> <macro><name>beginBroadcastPacket</name><argument_list>(<argument>uint16_t port</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <name>int</name> <call><name>endPacket</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> <name>size_t</name> <macro><name>write</name><argument_list>(<argument>uint8_t d</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>
    <name>virtual</name> <name>size_t</name> <macro><name>write</name><argument_list>(<argument>const uint8_t *buffer</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;

    <expr><name>using</name> <name>Print</name><operator>::</operator><name>write</name></expr>;

    <expr><name>virtual</name> <name>int</name> <call><name>parsePacket</name><argument_list>()</argument_list></call></expr>;
    <comment type="block">/* return number of bytes available in the current packet,
       will return zero if parsePacket hasn't been called yet */</comment>
    <expr><name>virtual</name> <name>int</name> <macro><name>available</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>avail</name></expr>;</return> }</block>
    <name>virtual</name> <name>int</name> <call><name>read</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> <name>int</name> <macro><name>read</name><argument_list>(<argument>unsigned char* buffer</argument>, <argument>size_t len</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <name>int</name> <macro><name>read</name><argument_list>(<argument>char* buffer</argument>, <argument>size_t len</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>read</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr>;
    <expr><name>virtual</name> <name>int</name> <call><name>peek</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> <name>void</name> <macro><name>flush</name><argument_list>()</argument_list></macro> <block>{ <expr><name>avail</name> <operator>=</operator> <literal type="number">0</literal></expr>; }</block>

    <name>virtual</name> <name>IPAddress</name> <call><name>remoteIP</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> <name>uint16_t</name> <call><name>remotePort</name><argument_list>()</argument_list></call></expr>;

  <expr><name>private</name><operator>:</operator>
    <name>BridgeClass</name> <operator>&amp;</operator><name>bridge</name></expr>;
    <expr><name>uint8_t</name> <name>handle</name></expr>;
    <expr><name>boolean</name> <name>opened</name></expr>;

  <expr><name>private</name><operator>:</operator>
    <name>void</name> <call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;
    <expr><name>uint16_t</name> <name>avail</name></expr>;
    <expr><name>uint8_t</name> <name>buffered</name></expr>;
    <expr><name>uint8_t</name> <name>readPos</name></expr>;
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>BUFFER_SIZE</name> <operator>=</operator> <literal type="number">64</literal></expr>;
    <expr><name>uint8_t</name> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</unit>
