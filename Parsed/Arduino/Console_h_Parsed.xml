<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/Console.h"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CONSOLE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONSOLE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Bridge.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>ConsoleClass</name> <range>: <expr><name>public</name> <name>Stream</name> <block>{
  <expr><name>public</name><operator>:</operator>
    <comment type="line">// Default constructor uses global Bridge instance</comment>
    <call><name>ConsoleClass</name><argument_list>()</argument_list></call></expr>;
    <comment type="line">// Constructor with a user provided BridgeClass instance</comment>
    <expr><call><name>ConsoleClass</name><argument_list>(<argument><expr><name>BridgeClass</name> <operator>&amp;</operator><name>_b</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>ConsoleClass</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>begin</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>end</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <macro><name>buffer</name><argument_list>(<argument>uint8_t size</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>noBuffer</name><argument_list>()</argument_list></call></expr>;

    <expr><name>bool</name> <call><name>connected</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// Stream methods</comment>
    <comment type="line">// (read from console socket)</comment>
    <expr><name>int</name> <call><name>available</name><argument_list>()</argument_list></call></expr>;
    <expr><name>int</name> <call><name>read</name><argument_list>()</argument_list></call></expr>;
    <expr><name>int</name> <call><name>peek</name><argument_list>()</argument_list></call></expr>;
    <comment type="line">// (write to console socket)</comment>
    <expr><name>size_t</name> <call><name>write</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>size_t</name> <macro><name>write</name><argument_list>(<argument>const uint8_t *buffer</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>flush</name><argument_list>()</argument_list></call></expr>;

    <expr><name>operator</name> <macro><name>bool</name> <argument_list>()</argument_list></macro> <block>{
      <return>return <expr><call><name>connected</name><argument_list>()</argument_list></call></expr>;</return>
    }</block>

  <name>private</name><operator>:</operator>
    <name>BridgeClass</name> <operator>&amp;</operator><name>bridge</name></expr>;

    <expr><name>void</name> <call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;
    <expr><name>uint8_t</name> <name>inBuffered</name></expr>;
    <expr><name>uint8_t</name> <name>inReadPos</name></expr>;
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>BUFFER_SIZE</name> <operator>=</operator> <literal type="number">32</literal></expr>;
    <expr><name>uint8_t</name> <operator>*</operator><name>inBuffer</name></expr>;

    <expr><name>bool</name> <name>autoFlush</name></expr>;
    <expr><name>uint8_t</name> <name>outBuffered</name></expr>;
    <expr><name>uint8_t</name> <name>outBufferSize</name></expr>;
    <expr><name>uint8_t</name> <operator>*</operator><name>outBuffer</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ConsoleClass</name></type> <name>Console</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
