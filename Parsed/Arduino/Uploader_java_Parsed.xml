<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/packages/Uploader.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Uploader - abstract uploading baseclass (common to both uisp and avrdude)
 *
 * Copyright (c) 2004-05
 * Hernando Barragan
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>PreferencesData</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>MessageConsumer</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>MessageSiphon</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>ProcessUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Uploader</name> <super_list><implements>implements <super><name>MessageConsumer</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>STRINGS_TO_SUPPRESS</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>AVRDUDE_PROBLEMS</name></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <expr_stmt><expr><name>STRINGS_TO_SUPPRESS</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"Connecting to programmer:"</literal></expr>,
            <expr><literal type="string">"Found programmer: Id = \"CATERIN\"; type = S"</literal></expr>,
            <expr><literal type="string">"Software Version = 1.0; No Hardware Version given."</literal></expr>,
            <expr><literal type="string">"Programmer supports auto addr increment."</literal></expr>,
            <expr><literal type="string">"Programmer supports buffered memory access with buffersize=128 bytes."</literal></expr>,
            <expr><literal type="string">"Programmer supports the following devices:"</literal></expr>, <expr><literal type="string">"Device code: 0x44"</literal></expr>}</block></expr>;</expr_stmt>

    <expr_stmt><expr><name>AVRDUDE_PROBLEMS</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"Programmer is not responding"</literal></expr>,
            <expr><literal type="string">"programmer is not responding"</literal></expr>,
            <expr><literal type="string">"protocol error"</literal></expr>, <expr><literal type="string">"avrdude: ser_open(): can't open device"</literal></expr>,
            <expr><literal type="string">"avrdude: ser_drain(): read error"</literal></expr>,
            <expr><literal type="string">"avrdude: ser_send(): write error"</literal></expr>,
            <expr><literal type="string">"avrdude: error: buffered memory access not supported."</literal></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></static>

  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>verbose</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>verifyUpload</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>error</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>notFoundError</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>noUploadPort</name></decl>;</decl_stmt>

  <constructor><specifier>protected</specifier> <name>Uploader</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"upload.verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verifyUpload</name></name> <operator>=</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"upload.verify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>protected</specifier> <name>Uploader</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>nup</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"upload.verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verifyUpload</name></name> <operator>=</operator> <call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"upload.verify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>nup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>nup</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>error</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notFoundError</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>noUploadPort</name></name> <operator>=</operator> <name>nup</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>uploadUsingPreferences</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>sourcePath</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>buildPath</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>usingProgrammer</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>warningsAccumulator</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>burnBootloader</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>requiresAuthorization</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getAuthorizationKey</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// static field for last executed programmer process ID</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <name>Process</name></type> <name>programmerPid</name></decl>;</decl_stmt>

  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>executeUploadCommand</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>command</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>executeUploadCommand</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>command</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>executeUploadCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name><name>command</name><index>[]</index></name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Skip empty commands</comment>
    <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>command</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>notFoundError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>c</name> <range>: <expr><name>command</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>Process</name></type> <name>process</name> <init>= <expr><call><name><name>ProcessUtils</name><operator>.</operator><name>exec</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>programmerPid</name> <operator>=</operator> <name>process</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>new</operator> <call><name>MessageSiphon</name><argument_list>(<argument><expr><call><name><name>process</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>new</operator> <call><name>MessageSiphon</name><argument_list>(<argument><expr><call><name><name>process</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// wait for the process to finish, but not forever</comment>
      <comment type="line">// kill the flasher process after 5 minutes to avoid 100% cpu spinning</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>process</name><operator>.</operator><name>waitFor</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>process</name><operator>.</operator><name>destroyForcibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>process</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>process</name><operator>.</operator><name>exitValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <return>return <expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getFailureMessage</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>error</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// selectively suppress a bunch of avrdude output for AVR109/Caterina that should already be quelled but isn't</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>verbose</name> <operator>&amp;&amp;</operator> <call><name><name>StringUtils</name><operator>.</operator><name>containsAny</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>STRINGS_TO_SUPPRESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ignore cautions</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>notFoundError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>error</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>notFoundError</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"the selected serial port {0} does not exist or your board is not connected"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"Device is not responding"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Device is not responding, check the right serial port is selected or RESET the board right before exporting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>containsAny</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AVRDUDE_PROBLEMS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem uploading to board.  See http://www.arduino.cc/en/Guide/Troubleshooting#upload for suggestions."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"Expected signature"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wrong microcontroller found.  Did you select the right board from the Tools &gt; Board menu?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
