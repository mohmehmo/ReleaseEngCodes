<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/test/processing/app/UpdateTextAreaActionTest.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>fest</name><operator>.</operator><name>assertions</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertThat</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>BoardPort</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>

<class><specifier>public</specifier> class <name>UpdateTextAreaActionTest</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TIMESTAMP_REGEX</name> <init>= <expr><literal type="string">"\\d\\d:\\d\\d:\\d\\d.\\d\\d\\d"</literal></expr></init></decl>;</decl_stmt>

  <class>class <name>DummyTextMonitor</name> <super_list><extends>extends <super><name>AbstractTextMonitor</name></super></extends></super_list> <block>{
    <constructor><specifier>public</specifier> <name>DummyTextMonitor</name><parameter_list>(<parameter><decl><type><name>BoardPort</name></type> <name>boardPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>boardPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><annotation>@<name>Before</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>PreferencesData</name><operator>.</operator><name>defaults</name></name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>, <argument><expr><literal type="string">"Monospaced,plain,12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"gui.scale"</literal></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Theme</name><operator>.</operator><name>defaults</name></name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Theme</name><operator>.</operator><name>table</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"console.font"</literal></expr></argument>, <argument><expr><literal type="string">"Monospaced,plain,12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>noTimestampAdded</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DummyTextMonitor</name></type> <name>textMon</name> <init>= <expr><operator>new</operator> <call><name>DummyTextMonitor</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BoardPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>addTimeStampBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">"line1\nline2\r\nline3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><literal type="string">"line1\nline2\r\nline3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>all3LinesHaveTimestampAdded</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DummyTextMonitor</name></type> <name>textMon</name> <init>= <expr><operator>new</operator> <call><name>DummyTextMonitor</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BoardPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>addTimeStampBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">"line1\nline2\r\nline3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; line1\\n"</literal> <operator>+</operator> <comment type="line">//</comment>
                 <name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; line2\\r\\n"</literal> <operator>+</operator> <comment type="line">//</comment>
                 <name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; line3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>emptyLinesHaveTimestampToo</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DummyTextMonitor</name></type> <name>textMon</name> <init>= <expr><operator>new</operator> <call><name>DummyTextMonitor</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BoardPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>addTimeStampBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">"line_1\n\nline_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; line_1\\n"</literal> <operator>+</operator> <comment type="line">//</comment>
                 <name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; \\n"</literal> <operator>+</operator> <comment type="line">//</comment>
                 <name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; line_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>newLinesAreRememberedWhenNewBufferIsUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DummyTextMonitor</name></type> <name>textMon</name> <init>= <expr><operator>new</operator> <call><name>DummyTextMonitor</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BoardPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>addTimeStampBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">"no newline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; no newline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">" more text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; no newline more text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; no newline more text\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; no newline more text\n"</literal> <operator>+</operator> <comment type="line">//</comment>
                 <name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textMon</name><operator>.</operator><name>updateTextArea</name></name><argument_list>(<argument><expr><literal type="string">"third line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><call><name><name>textMon</name><operator>.</operator><name>textArea</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; no newline more text\n"</literal> <operator>+</operator> <comment type="line">//</comment>
                 <name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; \n"</literal> <operator>+</operator> <comment type="line">//</comment>
                 <name>TIMESTAMP_REGEX</name> <operator>+</operator> <literal type="string">" -&gt; third line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class></unit>
