<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/Base.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-10 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2
  as published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>Compiler</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>UpdatableBoardsLibsFakeURLsHandler</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>UploaderUtils</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>ContributedLibrary</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>LibrariesIndexer</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>LibraryInstaller</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>LibraryOfSameTypeComparator</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name><operator>.</operator><name>ui</name><operator>.</operator><name>LibraryManagerUI</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ContributedPlatform</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ContributionInstaller</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ContributionsIndexer</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>packages</name><operator>.</operator><name>ui</name><operator>.</operator><name>ContributionManagerUI</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>files</name><operator>.</operator><name>DeleteFilesOnShutdown</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>DiscoveryManager</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>Uploader</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>JMenuUtils</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>SplashScreenHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>zafarkhaja</name><operator>.</operator><name>semver</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetBoard</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetPackage</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetPlatform</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>filefilters</name><operator>.</operator><name>OnlyDirs</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>filefilters</name><operator>.</operator><name>OnlyFilesWithExtension</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>filechooser</name><operator>.</operator><name>FileNameExtensionFilter</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>macosx</name><operator>.</operator><name>ThinkDifferent</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>LibraryList</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibrary</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibraryFolder</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>PdeKeywords</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name><operator>.</operator><name>SketchTextAreaDefaultInputMap</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>tools</name><operator>.</operator><name>MenuScroller</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>tools</name><operator>.</operator><name>ZipDeflater</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Timer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Level</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>


<comment type="block" format="javadoc">/**
 * The base class for the main processing application.
 * Primary role of this class is for platform identification and
 * general interaction with the system (launching URLs, loading
 * files and images, etc) that comes from that.
 */</comment>
<class><specifier>public</specifier> class <name>Base</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RECENT_SKETCHES_MAX_SIZE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>commandLine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>Base</name></type> <name>INSTANCE</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>FIND_DIALOG_STATE</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ContributionInstaller</name></type> <name>contributionInstaller</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>LibraryInstaller</name></type> <name>libraryInstaller</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>ContributionsSelfCheck</name></type> <name>contributionsSelfCheck</name></decl>;</decl_stmt>

  <comment type="line">// set to true after the first time the menu is built.</comment>
  <comment type="line">// so that the errors while building don't show up again.</comment>
  <decl_stmt><decl><type><name>boolean</name></type> <name>builtOnce</name></decl>;</decl_stmt>

  <comment type="line">// classpath for all known libraries for p5</comment>
  <comment type="line">// (both those in the p5/libs folder and those with lib subfolders</comment>
  <comment type="line">// found in the sketchbook)</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>librariesClassPath</name></decl>;</decl_stmt>

  <comment type="line">// Location for untitled items</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>File</name></type> <name>untitledFolder</name></decl>;</decl_stmt>

  <comment type="line">// p5 icon for the window</comment>
<comment type="line">//  static Image icon;</comment>

  <comment type="line">//  int editorCount;</comment>
  <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Editor</name></argument>&gt;</argument_list></name></type> <name>editors</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>synchronizedList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Editor</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Editor</name></type> <name>activeEditor</name></decl>;</decl_stmt>

  <comment type="line">// these menus are shared so that the board and serial port selections</comment>
  <comment type="line">// are the same for all windows (since the board and serial port that are</comment>
  <comment type="line">// actually used are determined by the preferences, which are shared)</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenu</name></argument>&gt;</argument_list></name></type> <name>boardsCustomMenus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenuItem</name></argument>&gt;</argument_list></name></type> <name>programmerMenus</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>PdeKeywords</name></type> <name>pdeKeywords</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenuItem</name></argument>&gt;</argument_list></name></type> <name>recentSketchesMenuItems</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>OSUtils</name><operator>.</operator><name>isWindows</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Those properties helps enabling anti-aliasing on Linux</comment>
      <comment type="line">// (but not on Windows where they made things worse actually</comment>
      <comment type="line">// and the font rendering becomes ugly).</comment>

      <comment type="line">// Those properties must be set before initializing any</comment>
      <comment type="line">// graphic object, otherwise they don't have any effect.</comment>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"awt.useSystemAAFontSettings"</literal></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"swing.aatext"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.net.useSystemProxies"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"apple.laf.useScreenMenuBar"</literal></expr></argument>,
        <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.version"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"10.13"</literal></expr></argument>)</argument_list></call>
          <operator>||</operator> <call><name><name>com</name><operator>.</operator><name>apple</name><operator>.</operator><name>eawt</name><operator>.</operator><name>Application</name><operator>.</operator><name>getApplication</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAboutMenuItemPresent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ThinkDifferent</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><name>INSTANCE</name> <operator>=</operator> <operator>new</operator> <call><name>Base</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>initLogger</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Handler</name></type> <name>consoleHandler</name> <init>= <expr><operator>new</operator> <call><name>ConsoleLogger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>consoleHandler</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>ALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>consoleHandler</name><operator>.</operator><name>setFormatter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LogFormatter</name><argument_list>(<argument><expr><literal type="string">"%1$tl:%1$tM:%1$tS [%4$7s] %2$s: %5$s%n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Logger</name></type> <name>globalLogger</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Logger</name><operator>.</operator><name>GLOBAL_LOGGER_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>globalLogger</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><call><name><name>consoleHandler</name><operator>.</operator><name>getLevel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Remove default</comment>
    <decl_stmt><decl><type><name><name>Handler</name><index>[]</index></name></type> <name>handlers</name> <init>= <expr><call><name><name>globalLogger</name><operator>.</operator><name>getHandlers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>Handler</name></type> <name>handler</name> <range>: <expr><name>handlers</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>globalLogger</name><operator>.</operator><name>removeHandler</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>Logger</name></type> <name>root</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>handlers</name> <operator>=</operator> <call><name><name>root</name><operator>.</operator><name>getHandlers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>Handler</name></type> <name>handler</name> <range>: <expr><name>handlers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>removeHandler</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>globalLogger</name><operator>.</operator><name>addHandler</name></name><argument_list>(<argument><expr><name>consoleHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><literal type="string">"cc.arduino.packages.autocomplete"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setParent</name><argument_list>(<argument><expr><name>globalLogger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><literal type="string">"br.com.criativasoft.cpluslibparser"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setParent</name><argument_list>(<argument><expr><name>globalLogger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><call><name><name>Base</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setParent</name><argument_list>(<argument><expr><name>globalLogger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>boolean</name></type> <name>isCommandLine</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>commandLine</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Returns a File object for the given pathname. If the pathname</comment>
  <comment type="line">// is not absolute, it is interpreted relative to the current</comment>
  <comment type="line">// directory when starting the IDE (which is not the same as the</comment>
  <comment type="line">// current working directory!).</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>absoluteFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>absoluteFile</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <constructor><specifier>public</specifier> <name>Base</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Thread</name></type> <name>deleteFilesOnShutdownThread</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name><name>DeleteFilesOnShutdown</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>deleteFilesOnShutdownThread</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><literal type="string">"DeleteFilesOnShutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addShutdownHook</name><argument_list>(<argument><expr><name>deleteFilesOnShutdownThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initLogger</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initLogger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initPlatform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initPortableFolder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// This configure the logs root folder</comment>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Set log4j store directory "</literal> <operator>+</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>getSettingsFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"log4j.dir"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSettingsFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Look for a possible "--preferences-file" parameter and load preferences</comment>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initParameters</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CommandlineParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>CommandlineParser</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parseArgumentsPhase1</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>commandLine</name> <operator>=</operator> <operator>!</operator><call><name><name>parser</name><operator>.</operator><name>isGuiMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>checkInstallationFolder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If no path is set, get the default sketchbook folder for this platform</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookPath</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>defaultFolder</name> <init>= <expr><call><name>getDefaultSketchbookFolderOrPromptForIt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPortableFolder</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPortableSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>, <argument><expr><call><name><name>defaultFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>defaultFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>defaultFolder</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SplashScreenHelper</name></type> <name>splash</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isGuiMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Setup all notification widgets</comment>
      <expr_stmt><expr><name>splash</name> <operator>=</operator> <operator>new</operator> <call><name>SplashScreenHelper</name><argument_list>(<argument><expr><call><name><name>SplashScreen</name><operator>.</operator><name>getSplashScreen</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>BaseNoGui</name><operator>.</operator><name>notifier</name></name> <operator>=</operator> <operator>new</operator> <call><name>GUIUserNotifier</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Setup the theme coloring fun</comment>
      <expr_stmt><expr><call><name><name>Theme</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"swing.aatext"</literal></expr></argument>, <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"editor.antialias"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Set the look and feel before opening the window</comment>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLookAndFeel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ignore</comment>
      </block_content>}</block></catch></try>

      <comment type="line">// Use native popups so they don't look so crappy on osx</comment>
      <expr_stmt><expr><call><name><name>JPopupMenu</name><operator>.</operator><name>setDefaultLightWeightPopupEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>splash</name> <operator>=</operator> <operator>new</operator> <call><name>SplashScreenHelper</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>splash</name><operator>.</operator><name>splashText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Loading configuration..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Don't put anything above this line that might make GUI,</comment>
    <comment type="line">// because the platform has to be inited properly first.</comment>

    <comment type="line">// Create a location for untitled sketches</comment>
    <expr_stmt><expr><name>untitledFolder</name> <operator>=</operator> <call><name><name>FileUtils</name><operator>.</operator><name>createTempFolder</name></name><argument_list>(<argument><expr><literal type="string">"untitled"</literal> <operator>+</operator> <operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DeleteFilesOnShutdown</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>untitledFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>splash</name><operator>.</operator><name>splashText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Initializing packages..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initPackages</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>getUploadPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><name>BaseNoGui</name><operator>::</operator><name>selectSerialPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>splash</name><operator>.</operator><name>splashText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Preparing boards..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isCommandLine</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>rebuildBoardsMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rebuildProgrammerMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>TargetBoard</name></type> <name>lastSelectedBoard</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetBoard</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>lastSelectedBoard</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>selectBoard</name></name><argument_list>(<argument><expr><name>lastSelectedBoard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Setup board-dependent variables.</comment>
    <expr_stmt><expr><call><name>onBoardOrPortChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pdeKeywords</name> <operator>=</operator> <operator>new</operator> <call><name>PdeKeywords</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pdeKeywords</name><operator>.</operator><name>reload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>GPGDetachedSignatureVerifier</name></type> <name>gpgDetachedSignatureVerifier</name> <init>= <expr><operator>new</operator> <call><name>GPGDetachedSignatureVerifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>contributionInstaller</name> <operator>=</operator> <operator>new</operator> <call><name>ContributionInstaller</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gpgDetachedSignatureVerifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>libraryInstaller</name> <operator>=</operator> <operator>new</operator> <call><name>LibraryInstaller</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gpgDetachedSignatureVerifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parseArgumentsPhase2</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Save the preferences. For GUI mode, this happens in the quit</comment>
    <comment type="line">// handler, but for other modes we should also make sure to save</comment>
    <comment type="line">// them.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isForceSavePrefs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isInstallBoard</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ContributionsIndexer</name></type> <name>indexer</name> <init>= <expr><operator>new</operator> <call><name>ContributionsIndexer</name><argument_list>(
          <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSettingsFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getHardwareFolder</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gpgDetachedSignatureVerifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ProgressListener</name></type> <name>progressListener</name> <init>= <expr><operator>new</operator> <call><name>ConsoleProgressListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>downloadedPackageIndexFiles</name> <init>= <expr><call><name><name>contributionInstaller</name><operator>.</operator><name>updateIndex</name></name><argument_list>(<argument><expr><name>progressListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>contributionInstaller</name><operator>.</operator><name>deleteUnknownFiles</name></name><argument_list>(<argument><expr><name>downloadedPackageIndexFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>parseIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>syncWithFilesystem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>boardToInstallParts</name> <init>= <expr><call><name><name>parser</name><operator>.</operator><name>getBoardToInstall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>ContributedPlatform</name></type> <name>selected</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>boardToInstallParts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Version</name></argument>&gt;</argument_list></name></type> <name>version</name> <init>= <expr><call><name><name>VersionHelper</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>version</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Invalid version {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findPlatform</name><argument_list>(<argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>version</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>boardToInstallParts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContributedPlatform</name></argument>&gt;</argument_list></name></type> <name>platformsByName</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findPlatforms</name><argument_list>(<argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>platformsByName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DownloadableContributionVersionComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>platformsByName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>platformsByName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>platformsByName</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>selected</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Selected board is not available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>ContributedPlatform</name></type> <name>installed</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getInstalled</name></name><argument_list>(<argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>boardToInstallParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>selected</name><operator>.</operator><name>isBuiltIn</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>contributionInstaller</name><operator>.</operator><name>install</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>installed</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>installed</name><operator>.</operator><name>isBuiltIn</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>contributionInstaller</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isInstallLibrary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>ProgressListener</name></type> <name>progressListener</name> <init>= <expr><operator>new</operator> <call><name>ConsoleProgressListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>libraryInstaller</name><operator>.</operator><name>updateIndex</name></name><argument_list>(<argument><expr><name>progressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>LibrariesIndexer</name></type> <name>indexer</name> <init>= <expr><operator>new</operator> <call><name>LibrariesIndexer</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSettingsFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>parseIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>setLibrariesFolders</name></name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getLibrariesFolders</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>indexer</name><operator>.</operator><name>rescanLibraries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>String</name></type> <name>library</name> <range>: <expr><call><name><name>parser</name><operator>.</operator><name>getLibraryToInstall</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>libraryToInstallParts</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ContributedLibrary</name></type> <name>selected</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>libraryToInstallParts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Version</name></argument>&gt;</argument_list></name></type> <name>version</name> <init>= <expr><call><name><name>VersionHelper</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>libraryToInstallParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>version</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Invalid version {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>libraryToInstallParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name><name>libraryToInstallParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>version</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>libraryToInstallParts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContributedLibrary</name></argument>&gt;</argument_list></name></type> <name>librariesByName</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name><name>libraryToInstallParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>librariesByName</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DownloadableContributionVersionComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>librariesByName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>librariesByName</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>librariesByName</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>selected</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Selected library is not available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ContributedLibrary</name></argument>&gt;</argument_list></name></type> <name>mayInstalled</name> <init>= <expr><call><name><name>indexer</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstalled</name><argument_list>(<argument><expr><name><name>libraryToInstallParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>mayInstalled</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>selected</name><operator>.</operator><name>isIDEBuiltIn</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><call><name><name>I18n</name>
              <operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Library {0} is available as built-in in the IDE.\nRemoving the other version {1} installed in the sketchbook..."</literal></expr></argument>,
                      <argument><expr><name>library</name></expr></argument>, <argument><expr><call><name><name>mayInstalled</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParsedVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>libraryInstaller</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>mayInstalled</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>libraryInstaller</name><operator>.</operator><name>install</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isVerifyOrUploadMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Set verbosity for command line build</comment>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="string">"build.verbose"</literal></expr></argument>, <argument><expr><call><name><name>parser</name><operator>.</operator><name>isDoVerboseBuild</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="string">"upload.verbose"</literal></expr></argument>, <argument><expr><call><name><name>parser</name><operator>.</operator><name>isDoVerboseUpload</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Set preserve-temp flag</comment>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="string">"runtime.preserve.temp.files"</literal></expr></argument>, <argument><expr><call><name><name>parser</name><operator>.</operator><name>isPreserveTempFiles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Make sure these verbosity preferences are only for the current session</comment>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setDoSave</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Sketch</name></type> <name>sketch</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>outputFile</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <try>try <block>{<block_content>
        <comment type="line">// Build</comment>
        <expr_stmt><expr><call><name><name>splash</name><operator>.</operator><name>splashText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Verifying..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>sketchFile</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>absoluteFile</name></name><argument_list>(<argument><expr><call><name><name>parser</name><operator>.</operator><name>getFilenames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sketch</name> <operator>=</operator> <operator>new</operator> <call><name>Sketch</name><argument_list>(<argument><expr><name>sketchFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>outputFile</name> <operator>=</operator> <operator>new</operator> <call><name>Compiler</name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>progress</name></decl></parameter></parameter_list> -&gt; <block>{<block_content/>}</block></lambda></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Error during build</comment>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>

      <if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isUploadMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Upload</comment>
        <expr_stmt><expr><call><name><name>splash</name><operator>.</operator><name>splashText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Uploading..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>warnings</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>UploaderUtils</name></type> <name>uploader</name> <init>= <expr><operator>new</operator> <call><name>UploaderUtils</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><call><name><name>uploader</name><operator>.</operator><name>upload</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>,
                                        <argument><expr><call><name><name>parser</name><operator>.</operator><name>isDoUseProgrammer</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <argument><expr><call><name><name>parser</name><operator>.</operator><name>isNoUploadPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>warnings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>String</name></type> <name>warning</name> <range>: <expr><name>warnings</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>()</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// Error during upload</comment>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name>
              <operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"An error occurred while uploading the sketch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// No errors exit gracefully</comment>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isGuiMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>splash</name><operator>.</operator><name>splashText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Starting..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>String</name></type> <name>path</name> <range>: <expr><call><name><name>parser</name><operator>.</operator><name>getFilenames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <comment type="line">// Correctly resolve relative paths</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name>absoluteFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Fix a problem with systems that use a non-ASCII languages. Paths are</comment>
        <comment type="line">// being passed in with 8.3 syntax, which makes the sketch loader code</comment>
        <comment type="line">// unhappy, since the sketch folder naming doesn't match up correctly.</comment>
        <comment type="line">// http://dev.processing.org/bugs/show_bug.cgi?id=1089</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isWindows</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>getCanonicalFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>parser</name><operator>.</operator><name>isForceSavePrefs</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setDoSave</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>retrieveSketchLocation</name><argument_list>(<argument><expr><literal type="string">".default"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>mess</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Failed to open sketch: \"{0}\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">// Open failure is fatal in upload/verify mode</comment>
          <if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isVerifyOrUploadMode</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
          <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>mess</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>installKeyboardInputMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Check if there were previously opened sketches to be restored</comment>
      <expr_stmt><expr><call><name>restoreSketches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Create a new empty window (will be replaced with any files to be opened)</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>editors</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>handleNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BuiltInCoreIsNewerCheck</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Check for boards which need an additional core</comment>
      <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NewBoardListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Check for updates</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"update.check"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>UpdateCheck</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contributionsSelfCheck</name> <operator>=</operator> <operator>new</operator> <call><name>ContributionsSelfCheck</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>UpdatableBoardsLibsFakeURLsHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contributionInstaller</name></expr></argument>, <argument><expr><name>libraryInstaller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>schedule</name><argument_list>(<argument><expr><name>contributionsSelfCheck</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>BOARDS_LIBS_UPDATABLE_CHECK_START_PERIOD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isNoOpMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Do nothing (intended for only changing preferences)</comment>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isGetPrefMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>dumpPrefs</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>isVersionMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Arduino: "</literal> <operator>+</operator> <name><name>BaseNoGui</name><operator>.</operator><name>VERSION_NAME_LONG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>installKeyboardInputMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"RSyntaxTextAreaUI.inputMap"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>SketchTextAreaDefaultInputMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Post-constructor setup for the editor area. Loads the last
   * sketch that was used (if any), and restores other Editor settings.
   * The complement to "storePreferences", this is called when the
   * application is first launched.
   *
   * @throws Exception
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>restoreSketches</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// Iterate through all sketches that were open last time p5 was running.</comment>
    <comment type="line">// If !windowPositionValid, then ignore the coordinates found for each.</comment>

    <comment type="line">// Save the sketch path and window placement for each open sketch</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"last.sketch.count"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>opened</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"last.sketch"</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPortableFolder</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>absolute</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPortableFolder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>absolute</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// path unchanged.</comment>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name> <init>= <expr><call><name>retrieveSketchLocation</name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// If file did not exist, null will be returned for the Editor</comment>
      <if_stmt><if>if <condition>(<expr><call><name>handleOpen</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><call><name>nextEditorLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>opened</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>opened</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Store screen dimensions on last close
   */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>storeScreenDimensions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Save the width and height of the screen</comment>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>screen</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getScreenSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setInteger</name></name><argument_list>(<argument><expr><literal type="string">"last.screen.width"</literal></expr></argument>, <argument><expr><name><name>screen</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setInteger</name></name><argument_list>(<argument><expr><literal type="string">"last.screen.height"</literal></expr></argument>, <argument><expr><name><name>screen</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Store list of sketches that are currently open.
   * Called when the application is quitting and documents are still open.
   */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>storeSketches</name><parameter_list>()</parameter_list> <block>{<block_content>

    <comment type="line">// If there is only one sketch opened save his position as default</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>editors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>storeSketchLocation</name><argument_list>(<argument><expr><call><name><name>editors</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Save the sketch path and window placement for each open sketch</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>untitledPath</name> <init>= <expr><call><name><name>untitledFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Editor</name></argument>&gt;</argument_list></name></type> <name>reversedEditors</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>editors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>reversedEditors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Editor</name></type> <name>editor</name> <range>: <expr><name>reversedEditors</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Sketch</name></type> <name>sketch</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>getMainFilePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Skip untitled sketches if they do not contains changes.</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>untitledPath</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>sketch</name><operator>.</operator><name>isModified</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>storeSketchLocation</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setInteger</name></name><argument_list>(<argument><expr><literal type="string">"last.sketch.count"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>storeSketchLocation</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>editor</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMainFilePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>loc</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>getPlacement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"last.sketch"</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">".path"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"last.sketch"</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">".location"</literal></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>retrieveSketchLocation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"last.screen.height"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>defaultEditorLocation</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// if screen size has changed, the window coordinates no longer</comment>
    <comment type="line">// make sense, so don't use them unless they're identical</comment>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>screen</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getScreenSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>screenW</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"last.screen.width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>screenH</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"last.screen.height"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>screen</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name>screenW</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>screen</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name>screenH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>defaultEditorLocation</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>locationStr</name> <init>= <expr><call><name><name>PreferencesData</name>
        <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"last.sketch"</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">".location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>locationStr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>defaultEditorLocation</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>PApplet</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>PApplet</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>locationStr</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>storeRecentSketches</name><parameter_list>(<parameter><decl><type><name>SketchController</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketch</name><operator>.</operator><name>isUntitled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sketches</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sketches</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMainFilePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sketches</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getCollection</name></name><argument_list>(<argument><expr><literal type="string">"recent.sketches"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setCollection</name></name><argument_list>(<argument><expr><literal type="string">"recent.sketches"</literal></expr></argument>, <argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeRecentSketchPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sketches</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getCollection</name></name><argument_list>(<argument><expr><literal type="string">"recent.sketches"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sketches</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setCollection</name></name><argument_list>(<argument><expr><literal type="string">"recent.sketches"</literal></expr></argument>, <argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// Because of variations in native windowing systems, no guarantees about</comment>
  <comment type="line">// changes to the focused and active Windows can be made. Developers must</comment>
  <comment type="line">// never assume that this Window is the focused or active Window until this</comment>
  <comment type="line">// Window receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event.</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleActivated</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>whichEditor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>activeEditor</name> <operator>=</operator> <name>whichEditor</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>rebuildRecentSketchesMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.external"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <try>try <block>{<block_content>
        <comment type="line">// If the list of files on disk changed, recreate the tabs for them</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>activeEditor</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reload</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>createTabs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <comment type="line">// Let the current tab know it was activated, so it can reload</comment>
          <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>activated</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name><name>int</name><index>[]</index></name></type> <name>defaultEditorLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>defaultWidth</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"editor.window.width.default"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>defaultHeight</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"editor.window.height.default"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Rectangle</name></type> <name>screen</name> <init>= <expr><call><name><name>GraphicsEnvironment</name><operator>.</operator><name>getLocalGraphicsEnvironment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultScreenDevice</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBounds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{
            <expr><operator>(</operator><name><name>screen</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>defaultWidth</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>,
            <expr><operator>(</operator><name><name>screen</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>defaultHeight</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>,
            <expr><name>defaultWidth</name></expr>, <expr><name>defaultHeight</name></expr>, <expr><literal type="number">0</literal></expr>
    }</block></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name><name>int</name><index>[]</index></name></type> <name>nextEditorLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>activeEditor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// If no current active editor, use default placement</comment>
      <return>return <expr><call><name>defaultEditorLocation</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>Dimension</name></type> <name>screen</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getScreenSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// With a currently active editor, open the new window</comment>
    <comment type="line">// using the same dimensions, but offset slightly.</comment>
    <synchronized>synchronized <init>(<expr><name>editors</name></expr>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name> <init>= <expr><call><name><name>activeEditor</name><operator>.</operator><name>getPlacement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Just in case the bounds for that window are bad</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>OVER</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>OVER</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>OVER</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OVER</name> <operator>||</operator> <name><name>location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>OVER</name>
          <operator>||</operator> <name><name>location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>screen</name><operator>.</operator><name>width</name></name>
          <operator>||</operator> <name><name>location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>screen</name><operator>.</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Warp the next window to a randomish location on screen.</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>l</name> <init>= <expr><call><name>defaultEditorLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <return>return <expr><name>l</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>location</name></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>


  <decl_stmt><decl><type><name>boolean</name></type> <name>breakTime</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>months</name> <init>= <expr><block>{
          <expr><literal type="string">"jan"</literal></expr>, <expr><literal type="string">"feb"</literal></expr>, <expr><literal type="string">"mar"</literal></expr>, <expr><literal type="string">"apr"</literal></expr>, <expr><literal type="string">"may"</literal></expr>, <expr><literal type="string">"jun"</literal></expr>,
          <expr><literal type="string">"jul"</literal></expr>, <expr><literal type="string">"aug"</literal></expr>, <expr><literal type="string">"sep"</literal></expr>, <expr><literal type="string">"oct"</literal></expr>, <expr><literal type="string">"nov"</literal></expr>, <expr><literal type="string">"dec"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <function><type><specifier>protected</specifier> <name>File</name></type> <name>createNewUntitled</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>newbieDir</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>newbieName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// In 0126, untitled sketches will begin in the temp folder,</comment>
    <comment type="line">// and then moved to a new location because Save will default to Save As.</comment>
    <decl_stmt><decl><type><name>File</name></type> <name>sketchbookDir</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>newbieParentDir</name> <init>= <expr><name>untitledFolder</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Use a generic name like sketch_031008a, the date plus a char</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//SimpleDateFormat formatter = new SimpleDateFormat("yyMMdd");</comment>
    <comment type="line">//SimpleDateFormat formatter = new SimpleDateFormat("MMMdd");</comment>
    <comment type="line">//String purty = formatter.format(new Date()).toLowerCase();</comment>
    <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// 1..31</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// 0..11</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>purty</name> <init>= <expr><name><name>months</name><index>[<expr><name>month</name></expr>]</index></name> <operator>+</operator> <call><name><name>PApplet</name><operator>.</operator><name>nf</name></name><argument_list>(<argument><expr><name>day</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">26</literal><operator>*</operator><literal type="number">26</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// In 0166, avoid running past zz by sending people outdoors.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>breakTime</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Time for a Break"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"You've reached the limit for auto naming of new sketches\n"</literal> <operator>+</operator>
                          <literal type="string">"for the day. How about going for a walk instead?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>breakTime</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sunshine"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No really, time for some fresh air for you."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>multiples</name> <init>= <expr><name>index</name> <operator>/</operator> <literal type="number">26</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if<condition>(<expr><name>multiples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>newbieName</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><name>multiples</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="string">""</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><name>index</name> <operator>%</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>newbieName</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>+</operator> <name>index</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>newbieName</name> <operator>=</operator> <literal type="string">"sketch_"</literal> <operator>+</operator> <name>purty</name> <operator>+</operator> <name>newbieName</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>newbieDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>newbieParentDir</name></expr></argument>, <argument><expr><name>newbieName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
      <comment type="line">// Make sure it's not in the temp folder *and* it's not in the sketchbook</comment>
    </block_content>}</block> while <condition>(<expr><call><name><name>newbieDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>sketchbookDir</name></expr></argument>, <argument><expr><name>newbieName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition>;</do>

    <comment type="line">// Make the directory for the new sketch</comment>
    <expr_stmt><expr><call><name><name>newbieDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make an empty pde file</comment>
    <decl_stmt><decl><type><name>File</name></type> <name>newbieFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>newbieDir</name></expr></argument>, <argument><expr><name>newbieName</name> <operator>+</operator> <literal type="string">".ino"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newbieFile</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Initialize the pde file with the BareMinimum sketch.</comment>
    <comment type="line">// Apply user-defined tab settings.</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>sketch</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>readFileToString</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getContentFile</name><argument_list>(<argument><expr><literal type="string">"examples"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"01.Basics"</literal> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name>
            <operator>+</operator> <literal type="string">"BareMinimum"</literal> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"BareMinimum.ino"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>currentTab</name> <init>= <expr><literal type="string">"  "</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>newTab</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.tabs.expand"</literal></expr></argument>)</argument_list></call></expr>
        ?</condition><then> <expr><call><name><name>StringUtils</name><operator>.</operator><name>repeat</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>,
            <argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"editor.tabs.size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
        </then><else>: <expr><literal type="string">"\t"</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sketch</name> <operator>=</operator> <call><name><name>sketch</name><operator>.</operator><name>replaceAll</name></name><argument_list>(
        <argument><expr><literal type="string">"(?&lt;=(^|\n)("</literal> <operator>+</operator> <name>currentTab</name> <operator>+</operator> <literal type="string">"){0,50})"</literal> <operator>+</operator> <name>currentTab</name></expr></argument>, <argument><expr><name>newTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>writeStringToFile</name></name><argument_list>(<argument><expr><name>newbieFile</name></expr></argument>, <argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>newbieFile</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Create a new untitled document in a new sketch window.
   *
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleNew</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name>createNewUntitled</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>activeEditor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Prompt for a sketch to open, and open it in a new window.
   *
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleOpenPrompt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">// get the frontmost window frame for placing file dialog</comment>
    <decl_stmt><decl><type><name>FileDialog</name></type> <name>fd</name> <init>= <expr><operator>new</operator> <call><name>FileDialog</name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open an Arduino sketch..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>FileDialog</name><operator>.</operator><name>LOAD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>lastFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"last.folder"</literal></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>lastFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>lastFolder</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastFolder</name> <operator>=</operator> <call><name><name>lastFolder</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setDirectory</name></name><argument_list>(<argument><expr><call><name><name>lastFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Only show .pde files as eligible bachelors</comment>
    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setFilenameFilter</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>name</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">".ino"</literal></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">".pde"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>directory</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>getDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>fd</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// User canceled selection</comment>
    <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>inputFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"last.folder"</literal></expr></argument>, <argument><expr><call><name><name>inputFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>inputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Open a sketch in a new window.
   *
   * @param file File to open
   * @return the Editor object, so that properties (like 'untitled')
   * can be set by the caller
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <name>Editor</name></type> <name>handleOpen</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Editor</name></type> <name>handleOpen</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>untitled</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>nextEditorLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>untitled</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>Editor</name></type> <name>handleOpen</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>untitled</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>untitled</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>Editor</name></type> <name>handleOpen</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>storedLocation</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>defaultLocation</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>storeOpenedSketches</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>untitled</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Cycle through open windows to make sure that it's not already open.</comment>
    <for>for <control>(<init><decl><type><name>Editor</name></type> <name>editor</name> <range>: <expr><name>editors</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>editor</name><operator>.</operator><name>getSketch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrimaryFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>toFront</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>editor</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>Editor</name></type> <name>editor</name> <init>= <expr><operator>new</operator> <call><name>Editor</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>storedLocation</name></expr></argument>, <argument><expr><name>defaultLocation</name></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Make sure that the sketch actually loaded</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>  <comment type="line">// Just walk away quietly</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>editor</name><operator>.</operator><name>untitled</name></name> <operator>=</operator> <name>untitled</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>editors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>storeOpenedSketches</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Store information on who's open and running</comment>
      <comment type="line">// (in case there's a crash or something that can't be recovered)</comment>
      <expr_stmt><expr><call><name>storeSketches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>storeRecentSketches</name><argument_list>(<argument><expr><call><name><name>editor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rebuildRecentSketchesMenuItems</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// now that we're ready, show the window</comment>
    <comment type="line">// (don't do earlier, cuz we might move it based on a window being closed)</comment>
    <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>editor</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>editor</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>rebuildRecentSketchesMenuItems</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>recentSketches</name> <init>= <expr><operator>new</operator> <class><super><name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>RECENT_SKETCHES_MAX_SIZE</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>path</name> <range>: <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getCollection</name></name><argument_list>(<argument><expr><literal type="string">"recent.sketches"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>recentSketches</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>recentSketchesMenuItems</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>recentSketch</name> <range>: <expr><name>recentSketches</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>recentSketchMenuItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name><name>recentSketch</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>recentSketchMenuItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>recentSketch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>recentSketchesMenuItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>recentSketchMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Close a sketch as specified by its editor window.
   *
   * @param editor Editor object of the sketch to be closed.
   * @return true if succeeded in closing, false if canceled.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handleClose</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>editor</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <if_stmt><if>if <condition>(<expr><call><name><name>editors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>handleQuit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// Everything called after handleQuit will only affect OSX</comment>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>editors</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// More than one editor window open,</comment>
      <comment type="line">// proceed with closing the current window.</comment>
      <comment type="line">// Check if modified</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>editor</name><operator>.</operator><name>checkModified</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>editors</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Handler for File &amp;rarr; Quit.
   *
   * @return false if canceled, true otherwise.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>handleQuit</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// If quit is canceled, this will be replaced anyway</comment>
    <comment type="line">// by a later handleQuit() that is not canceled.</comment>
    <expr_stmt><expr><call><name>storeScreenDimensions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>storeSketches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>Editor</name><operator>.</operator><name>serialMonitor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// ignore</comment>
    </block_content>}</block></catch></try>

    <comment type="line">// kill uploader (if still alive)</comment>
    <decl_stmt><decl><type><name>UploaderUtils</name></type> <name>uploaderInstance</name> <init>= <expr><operator>new</operator> <call><name>UploaderUtils</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Uploader</name></type> <name>uploader</name> <init>= <expr><call><name><name>uploaderInstance</name><operator>.</operator><name>getUploaderByPreferences</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>uploader</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>uploader</name><operator>.</operator><name>programmerPid</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>uploader</name><operator>.</operator><name>programmerPid</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// kill the stuck programmer</comment>
        <expr_stmt><expr><call><name><name>uploader</name><operator>.</operator><name>programmerPid</name><operator>.</operator><name>destroyForcibly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>handleQuitEach</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Save out the current prefs state</comment>
      <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// If this was fired from the menu or an AppleEvent (the Finder),</comment>
        <comment type="line">// then Mac OS X will send the terminate signal itself.</comment>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Attempt to close each open sketch in preparation for quitting.
   *
   * @return false if canceled along the way
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>handleQuitEach</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>Editor</name></type> <name>editor</name> <range>: <expr><name>editors</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>editor</name><operator>.</operator><name>checkModified</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>


  <comment type="block" format="javadoc">/**
   * Asynchronous version of menu rebuild to be used on save and rename
   * to prevent the interface from locking up until the menus are done.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildSketchbookMenus</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//System.out.println("async enter");</comment>
    <comment type="line">//new Exception().printStackTrace();</comment>
    <expr_stmt><expr><call><name><name>SwingUtilities</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">//System.out.println("starting rebuild");</comment>
        <expr_stmt><expr><call><name>rebuildSketchbookMenu</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>sketchbookMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildToolbarMenu</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>toolbarMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//System.out.println("done with rebuild");</comment>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//System.out.println("async exit");</comment>
  </block_content>}</block></function>


  <function><type><specifier>protected</specifier> <name>void</name></type> <name>rebuildToolbarMenu</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add the single "Open" item</comment>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name><name>Editor</name><operator>.</operator><name>newJMenuItem</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Open..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name>handleOpenPrompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add a list of all sketches and subfolders</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>sketches</name> <init>= <expr><call><name>addSketches</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sketches</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add each of the subfolders of examples directly to the menu</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><call><name>addSketches</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getExamplesFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></function>


  <function><type><specifier>protected</specifier> <name>void</name></type> <name>rebuildSketchbookMenu</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addSketches</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenu</name></type> <name>librariesMenu</name> <init>= <expr><call><name><name>JMenuUtils</name><operator>.</operator><name>findSubMenuWithLabel</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><literal type="string">"libraries"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>librariesMenu</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>librariesMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>JMenu</name></type> <name>hardwareMenu</name> <init>= <expr><call><name><name>JMenuUtils</name><operator>.</operator><name>findSubMenuWithLabel</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><literal type="string">"hardware"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hardwareMenu</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>hardwareMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>LibraryList</name></type> <name>getSortedLibraries</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>installedLibraries</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name><operator>.</operator><name>getInstalledLibraries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>installedLibraries</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>LibraryOfSameTypeComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>installedLibraries</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildImportMenu</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>importMenu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>importMenu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>menu</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Manage Libraries..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Ctrl+Shift+I on Windows and Linux, Command+Shift+I on macOS</comment>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>setAccelerator</name></name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,
        <argument><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMenuShortcutKeyMask</name><argument_list>()</argument_list></call> <operator>|</operator>
        <name><name>ActionEvent</name><operator>.</operator><name>SHIFT_MASK</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>openLibraryManager</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>addLibraryMenuItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Add .ZIP Library..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>addLibraryMenuItem</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>this</name><operator>.</operator><name>handleAddLibrary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name><operator>.</operator><name>rescanLibraries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>this</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>this</name><operator>.</operator><name>rebuildImportMenu</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>importMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>this</name><operator>.</operator><name>rebuildExamplesMenu</name></name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>examplesMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addLibraryMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Split between user supplied libraries and IDE libraries</comment>
    <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetPlatform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>targetPlatform</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>LibraryList</name></type> <name>libs</name> <init>= <expr><call><name>getSortedLibraries</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>lastLibType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>libs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>libType</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>libType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>lastLibType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>lastLibType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>lastLibType</name> <operator>=</operator> <name>libType</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>JMenuItem</name></type> <name>platformItem</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} libraries"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><name>lastLibType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>platformItem</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>platformItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>AbstractAction</name></type> <name>action</name> <init>= <expr><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>(<argument><expr><call><name><name>lib</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
          <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>UserLibrary</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>UserLibrary</name><operator>)</operator> <call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"library"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
              <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>importLibrary</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
              <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Unable to list header files in {0}"</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>getSrcFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
          </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><literal type="string">"library"</literal></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add new element at the bottom</comment>
        <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>putClientProperty</name></name><argument_list>(<argument><expr><literal type="string">"library"</literal></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>importMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildExamplesMenu</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add examples from distribution "example" folder</comment>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>label</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Built-in Examples"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><call><name>addSketches</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getExamplesFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Libraries can come from 4 locations: collect info about all four</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>boardId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>referencedPlatformName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>myArch</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetPlatform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>targetPlatform</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>myArch</name> <operator>=</operator> <call><name><name>targetPlatform</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>boardId</name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetBoard</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>core</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getBoardPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"build.core"</literal></expr></argument>, <argument><expr><literal type="string">"arduino"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>core</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>refcore</name> <init>= <expr><call><name><name>core</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>referencedPlatform</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetPlatform</name></name><argument_list>(<argument><expr><name>refcore</name></expr></argument>, <argument><expr><name>myArch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>referencedPlatform</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>referencedPlatformName</name> <operator>=</operator> <call><name><name>referencedPlatform</name><operator>.</operator><name>getPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Divide the libraries into 7 lists, corresponding to the 4 locations</comment>
    <comment type="line">// with the retired IDE libs further divided into their own list, and</comment>
    <comment type="line">// any incompatible sketchbook libs further divided into their own list.</comment>
    <comment type="line">// The 7th list of "other" libraries should always be empty, but serves</comment>
    <comment type="line">// as a safety feature to prevent any library from vanishing.</comment>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>allLibraries</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>librariesIndexer</name><operator>.</operator><name>getInstalledLibraries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>ideLibs</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>retiredIdeLibs</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>platformLibs</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>referencedPlatformLibs</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>sketchbookLibs</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>sketchbookIncompatibleLibs</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LibraryList</name></type> <name>otherLibs</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>allLibraries</name></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// Get the library's location - used for sorting into categories</comment>
      <decl_stmt><decl><type><name>Location</name></type> <name>location</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Is this library compatible?</comment>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>arch</name> <init>= <expr><call><name><name>lib</name><operator>.</operator><name>getArchitectures</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>compatible</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>myArch</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>arch</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>arch</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>compatible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>compatible</name> <operator>=</operator> <call><name><name>arch</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>myArch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <comment type="line">// IDE Libaries (including retired)</comment>
      <if_stmt><if>if <condition>(<expr><name>location</name> <operator>==</operator> <name><name>Location</name><operator>.</operator><name>IDE_BUILTIN</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compatible</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// only compatible IDE libs are shown</comment>
          <if_stmt><if>if <condition>(<expr><call><name><name>lib</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"Retired"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>retiredIdeLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>ideLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      <comment type="line">// Platform Libraries</comment>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>location</name> <operator>==</operator> <name><name>Location</name><operator>.</operator><name>CORE</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// all platform libs are assumed to be compatible</comment>
        <expr_stmt><expr><call><name><name>platformLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Referenced Platform Libraries</comment>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>location</name> <operator>==</operator> <name><name>Location</name><operator>.</operator><name>REFERENCED_CORE</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// all referenced platform libs are assumed to be compatible</comment>
        <expr_stmt><expr><call><name><name>referencedPlatformLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Sketchbook Libraries (including incompatible)</comment>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>location</name> <operator>==</operator> <name><name>Location</name><operator>.</operator><name>SKETCHBOOK</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compatible</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// libraries promoted from sketchbook (behave as builtin)</comment>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>lib</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>lib</name><operator>.</operator><name>getTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"Arduino"</literal></expr></argument>)</argument_list></call>
              <operator>&amp;&amp;</operator> <call><name><name>lib</name><operator>.</operator><name>getArchitectures</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ideLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>sketchbookLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>sketchbookIncompatibleLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      <comment type="line">// Other libraries of unknown type (should never occur)</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>otherLibs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Add examples from libraries</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ideLibs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ideLibs</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Examples for any board"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>ideLibs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>retiredIdeLibs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>retiredIdeLibs</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>JMenu</name></type> <name>retired</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"RETIRED"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>retired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>retiredIdeLibs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>retired</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>platformLibs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>platformLibs</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Examples for {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>boardId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>platformLibs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>referencedPlatformLibs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>referencedPlatformLibs</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Examples for {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>referencedPlatformName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>referencedPlatformLibs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sketchbookLibs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sketchbookLibs</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Examples from Custom Libraries"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>sketchbookLibs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sketchbookIncompatibleLibs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sketchbookIncompatibleLibs</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>JMenu</name></type> <name>incompatible</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"INCOMPATIBLE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>incompatible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>incompatible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>sketchbookIncompatibleLibs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>incompatible</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>otherLibs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>otherLibs</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>label</name> <operator>=</operator> <operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Examples from Other Libraries"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>otherLibs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>priorPlatformFolder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>newLibraryImported</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>onBoardOrPortChange</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// reload keywords when package/platform changes</comment>
    <decl_stmt><decl><type><name>TargetPlatform</name></type> <name>tp</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getTargetPlatform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>platformFolder</name> <init>= <expr><call><name><name>tp</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>priorPlatformFolder</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>priorPlatformFolder</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>platformFolder</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>newLibraryImported</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pdeKeywords</name> <operator>=</operator> <operator>new</operator> <call><name>PdeKeywords</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pdeKeywords</name><operator>.</operator><name>reload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>priorPlatformFolder</name> <operator>=</operator> <name>platformFolder</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>newLibraryImported</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Editor</name></type> <name>editor</name> <range>: <expr><name>editors</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>updateKeywords</name></name><argument_list>(<argument><expr><name>pdeKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Update editors status bar</comment>
    <for>for <control>(<init><decl><type><name>Editor</name></type> <name>editor</name> <range>: <expr><name>editors</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>onBoardOrPortChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>openLibraryManager</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>filterText</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dropdownItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>contributionsSelfCheck</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>contributionsSelfCheck</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
    <type><name>LibraryManagerUI</name></type> <name>managerUI</name> <init>= <expr><operator>new</operator> <class><super><name>LibraryManagerUI</name></super><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>, <argument><expr><name>libraryInstaller</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>protected</specifier> <name>void</name></type> <name>onIndexesUpdated</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initPackages</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildBoardsMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildProgrammerMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBoardOrPortChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotEmpty</name></name><argument_list>(<argument><expr><name>dropdownItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>selectDropdownItemByClassName</name><argument_list>(<argument><expr><name>dropdownItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotEmpty</name></name><argument_list>(<argument><expr><name>filterText</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setFilterText</name><argument_list>(<argument><expr><name>filterText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>managerUI</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>managerUI</name><operator>.</operator><name>updateUI</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>managerUI</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Manager dialog is modal, waits here until closed</comment>

    <comment type="line">//handleAddLibrary();</comment>
    <expr_stmt><expr><name>newLibraryImported</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>onBoardOrPortChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rebuildImportMenu</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>importMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rebuildExamplesMenu</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>examplesMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>openBoardsManager</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>filterText</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dropdownItem</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>contributionsSelfCheck</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>contributionsSelfCheck</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
    <type><name>ContributionManagerUI</name></type> <name>managerUI</name> <init>= <expr><operator>new</operator> <class><super><name>ContributionManagerUI</name></super><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>, <argument><expr><name>contributionInstaller</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>protected</specifier> <name>void</name></type> <name>onIndexesUpdated</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initPackages</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildBoardsMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildProgrammerMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotEmpty</name></name><argument_list>(<argument><expr><name>dropdownItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>selectDropdownItemByClassName</name><argument_list>(<argument><expr><name>dropdownItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotEmpty</name></name><argument_list>(<argument><expr><name>filterText</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setFilterText</name><argument_list>(<argument><expr><name>filterText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>managerUI</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>managerUI</name><operator>.</operator><name>updateUI</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>managerUI</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Installer dialog is modal, waits here until closed</comment>

    <comment type="line">// Reload all boards (that may have been installed/updated/removed)</comment>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>initPackages</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rebuildBoardsMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rebuildProgrammerMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>onBoardOrPortChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildBoardsMenu</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>boardsCustomMenus</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The first custom menu is the "Board" selection submenu</comment>
    <decl_stmt><decl><type><name>JMenu</name></type> <name>boardMenu</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Board"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>boardMenu</name><operator>.</operator><name>putClientProperty</name></name><argument_list>(<argument><expr><literal type="string">"removeOnWindowDeactivation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>boardMenu</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setTopFixedCount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>boardMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Boards Manager..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionevent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>filterText</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dropdownItem</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>actionevent</name> <operator>instanceof</operator> <name>Event</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>filterText</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Event</name><operator>)</operator> <name>actionevent</name><operator>)</operator><operator>.</operator><call><name>getPayload</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"filterText"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>dropdownItem</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Event</name><operator>)</operator> <name>actionevent</name><operator>)</operator><operator>.</operator><call><name>getPayload</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"dropdownItem"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
          <expr_stmt><expr><call><name>openBoardsManager</name><argument_list>(<argument><expr><name>filterText</name></expr></argument>, <argument><expr><name>dropdownItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">//TODO show error</comment>
          <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>boardsCustomMenus</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>boardMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If there are no platforms installed we are done</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>BaseNoGui</name><operator>.</operator><name>packages</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// Separate "Install boards..." command from installed boards</comment>
    <expr_stmt><expr><call><name><name>boardMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSeparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Generate custom menus for all platforms</comment>
    <for>for <control>(<init><decl><type><name>TargetPackage</name></type> <name>targetPackage</name> <range>: <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>packages</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <range>: <expr><call><name><name>targetPackage</name><operator>.</operator><name>platforms</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>customMenuTitle</name> <range>: <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getCustomMenus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>JMenu</name></type> <name>customMenu</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><name>customMenuTitle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>customMenu</name><operator>.</operator><name>putClientProperty</name></name><argument_list>(<argument><expr><literal type="string">"platform"</literal></expr></argument>, <argument><expr><call><name>getPlatformUniqueId</name><argument_list>(<argument><expr><name>targetPlatform</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>customMenu</name><operator>.</operator><name>putClientProperty</name></name><argument_list>(<argument><expr><literal type="string">"removeOnWindowDeactivation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>boardsCustomMenus</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>customMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenuItem</name></argument>&gt;</argument_list></name></type> <name>menuItemsToClickAfterStartup</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ButtonGroup</name></type> <name>boardsButtonGroup</name> <init>= <expr><operator>new</operator> <call><name>ButtonGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ButtonGroup</name></argument>&gt;</argument_list></name></type> <name>buttonGroupsMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Cycle through all packages</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>TargetPackage</name></type> <name>targetPackage</name> <range>: <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>packages</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <comment type="line">// For every package cycle through all platform</comment>
      <for>for <control>(<init><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <range>: <expr><call><name><name>targetPackage</name><operator>.</operator><name>platforms</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>

        <comment type="line">// Add a separator from the previous platform</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>boardMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSeparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <comment type="line">// Add a title for each platform</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>platformLabel</name> <init>= <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>platformLabel</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>targetPlatform</name><operator>.</operator><name>getBoards</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>JMenuItem</name></type> <name>menuLabel</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><name>platformLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>menuLabel</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>boardMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>menuLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Cycle through all boards of this platform</comment>
        <for>for <control>(<init><decl><type><name>TargetBoard</name></type> <name>board</name> <range>: <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getBoards</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>board</name><operator>.</operator><name>getPreferences</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"hide"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
          <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><call><name>createBoardMenusAndCustomMenus</name><argument_list>(<argument><expr><name>boardsCustomMenus</name></expr></argument>, <argument><expr><name>menuItemsToClickAfterStartup</name></expr></argument>,
                  <argument><expr><name>buttonGroupsMap</name></expr></argument>,
                  <argument><expr><name>board</name></expr></argument>, <argument><expr><name>targetPlatform</name></expr></argument>, <argument><expr><name>targetPackage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>boardMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>boardsButtonGroup</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>menuItemsToClickAfterStartup</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menuItemsToClickAfterStartup</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>selectFirstEnabledMenuItem</name><argument_list>(<argument><expr><name>boardMenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>JMenuItem</name></type> <name>menuItemToClick</name> <range>: <expr><name>menuItemsToClickAfterStartup</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menuItemToClick</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menuItemToClick</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>actionPerformed</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActionEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>getPlatformUniqueId</name><parameter_list>(<parameter><decl><type><name>TargetPlatform</name></type> <name>platform</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>platform</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <call><name><name>platform</name><operator>.</operator><name>getFolder</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>JRadioButtonMenuItem</name></type> <name>createBoardMenusAndCustomMenus</name><parameter_list>(
          <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenu</name></argument>&gt;</argument_list></name></type> <name>boardsCustomMenus</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenuItem</name></argument>&gt;</argument_list></name></type> <name>menuItemsToClickAfterStartup</name></decl></parameter>,
          <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ButtonGroup</name></argument>&gt;</argument_list></name></type> <name>buttonGroupsMap</name></decl></parameter>,
          <parameter><decl><type><name>TargetBoard</name></type> <name>board</name></decl></parameter>, <parameter><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name></decl></parameter>, <parameter><decl><type><name>TargetPackage</name></type> <name>targetPackage</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>selPackage</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"target_package"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>selPlatform</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"target_platform"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>selBoard</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>boardId</name> <init>= <expr><call><name><name>board</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>packageName</name> <init>= <expr><call><name><name>targetPackage</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>platformName</name> <init>= <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Setup a menu item for the current board</comment>
    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
    <type><name>Action</name></type> <name>action</name> <init>= <expr><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionevent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>selectBoard</name></name><argument_list>(<argument><expr><operator>(</operator><name>TargetBoard</name><operator>)</operator> <call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>filterVisibilityOfSubsequentBoardMenus</name><argument_list>(<argument><expr><name>boardsCustomMenus</name></expr></argument>, <argument><expr><operator>(</operator><name>TargetBoard</name><operator>)</operator> <call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>onBoardOrPortChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildImportMenu</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>importMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildExamplesMenu</name><argument_list>(<argument><expr><name><name>Editor</name><operator>.</operator><name>examplesMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>board</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JRadioButtonMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JRadioButtonMenuItem</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>selBoard</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>boardId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>selPackage</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>selPlatform</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>platformName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menuItemsToClickAfterStartup</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>customMenus</name> <init>= <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getCustomMenus</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>menuId</name> <range>: <expr><call><name><name>customMenus</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>customMenus</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>JMenu</name></type> <name>menu</name> <init>= <expr><call><name>getBoardCustomMenu</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getPlatformUniqueId</name><argument_list>(<argument><expr><name>targetPlatform</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>board</name><operator>.</operator><name>hasMenu</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>boardCustomMenu</name> <init>= <expr><call><name><name>board</name><operator>.</operator><name>getMenuLabels</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>customMenuOption</name> <range>: <expr><call><name><name>boardCustomMenu</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
          <type><name>Action</name></type> <name>subAction</name> <init>= <expr><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><call><name><name>boardCustomMenu</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>customMenuOption</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
              <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"custom_"</literal> <operator>+</operator> <name>menuId</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>TargetBoard</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"custom_menu_option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>onBoardOrPortChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
          }</block></class></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TargetBoard</name></argument>&gt;</argument_list></name></type> <name>boards</name> <init>= <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>TargetBoard</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>subAction</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>boards</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>boards</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TargetBoard</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>boards</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>board</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>subAction</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>, <argument><expr><name>boards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>subAction</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><literal type="string">"custom_menu_option"</literal></expr></argument>, <argument><expr><name>customMenuOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>buttonGroupsMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buttonGroupsMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ButtonGroup</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <decl_stmt><decl><type><name>JRadioButtonMenuItem</name></type> <name>subItem</name> <init>= <expr><operator>new</operator> <call><name>JRadioButtonMenuItem</name><argument_list>(<argument><expr><name>subAction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>buttonGroupsMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>menuId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>subItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>String</name></type> <name>selectedCustomMenuEntry</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"custom_"</literal> <operator>+</operator> <name>menuId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>selBoard</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>boardId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>boardId</name> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <name>customMenuOption</name><operator>)</operator><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>selectedCustomMenuEntry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>menuItemsToClickAfterStartup</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>item</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>filterVisibilityOfSubsequentBoardMenus</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenu</name></argument>&gt;</argument_list></name></type> <name>boardsCustomMenus</name></decl></parameter>, <parameter><decl><type><name>TargetBoard</name></type> <name>board</name></decl></parameter>,
                                                      <parameter><decl><type><name>int</name></type> <name>fromIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>fromIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>boardsCustomMenus</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>JMenu</name></type> <name>menu</name> <init>= <expr><call><name><name>boardsCustomMenus</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <call><name><name>menu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>JMenuItem</name></type> <name>menuItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>TargetBoard</name></type> <name>t_board</name> <range>: <expr><operator>(</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>TargetBoard</name></argument>&gt;</argument_list></name><operator>)</operator><call><name><name>menuItem</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"board"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>menuItem</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>t_board</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>board</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name>ifThereAreVisibleItemsOn</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>menu</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>JMenuItem</name></type> <name>visibleSelectedOrFirstMenuItem</name> <init>= <expr><call><name>selectVisibleSelectedOrFirstMenuItem</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>visibleSelectedOrFirstMenuItem</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>visibleSelectedOrFirstMenuItem</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>visibleSelectedOrFirstMenuItem</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>actionPerformed</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>ifThereAreVisibleItemsOn</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>menu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>menu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>JMenu</name></type> <name>getBoardCustomMenu</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>platformUniqueId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>JMenu</name></type> <name>menu</name> <range>: <expr><name>boardsCustomMenus</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>label</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>menu</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>menu</name><operator>.</operator><name>getClientProperty</name></name><argument_list>(<argument><expr><literal type="string">"platform"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>platformUniqueId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>menu</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Custom menu not found!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenuItem</name></argument>&gt;</argument_list></name></type> <name>getProgrammerMenus</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>programmerMenus</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>JMenuItem</name></type> <name>selectVisibleSelectedOrFirstMenuItem</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JMenuItem</name></type> <name>firstVisible</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>menu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>item</name><operator>.</operator><name>isVisible</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>item</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>firstVisible</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>firstVisible</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>firstVisible</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>firstVisible</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Menu has no enabled items"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>JMenuItem</name></type> <name>selectFirstEnabledMenuItem</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>menu</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>item</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>item</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Menu has no enabled items"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildProgrammerMenu</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>programmerMenus</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ButtonGroup</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>ButtonGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>TargetPackage</name></type> <name>targetPackage</name> <range>: <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>packages</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <range>: <expr><call><name><name>targetPackage</name><operator>.</operator><name>platforms</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>programmer</name> <range>: <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getProgrammers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>targetPackage</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>programmer</name></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
          <type><name>AbstractAction</name></type> <name>action</name> <init>= <expr><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>(<argument><expr><call><name><name>targetPlatform</name><operator>.</operator><name>getProgrammer</name></name><argument_list>(<argument><expr><name>programmer</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionevent</name></decl></parameter>)</parameter_list> <block>{<block_content>
              <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"programmer"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
          }</block></class></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JRadioButtonMenuItem</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"programmer"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>programmerMenus</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Scan a folder recursively, and add any sketches found to the menu
   * specified. Set the openReplaces parameter to true when opening the sketch
   * should replace the sketch in the current window, or false when the
   * sketch should open in a new window.
   */</comment>
  <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>addSketches</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>folder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>folder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// If a bad folder or unreadable or whatever, this will come back null</comment>
    <if_stmt><if>if <condition>(<expr><name>files</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Alphabetize files, since it's not always alpha order</comment>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><call><name><name>file2</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>ifound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>File</name></type> <name>subfolder</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>FileUtils</name><operator>.</operator><name>isSCCSOrHiddenFile</name></name><argument_list>(<argument><expr><name>subfolder</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>subfolder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call>
          <operator>&amp;&amp;</operator> <call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name><name>subfolder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subfolder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ifound</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ifound</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>addSketchesSubmenu</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>UserLibrary</name></type> <name>lib</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>addSketchesSubmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name><name>lib</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>lib</name><operator>.</operator><name>getInstalledFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>addSketchesSubmenu</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>ActionListener</name></type> <name>listener</name> <init>= <expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getActionCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>handleOpen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Sketch Does Not Exist"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The selected sketch no longer exists.\n"</literal>
                          <operator>+</operator> <literal type="string">"You may need to restart Arduino to update\n"</literal>
                          <operator>+</operator> <literal type="string">"the sketchbook menu."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="string">".ino"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entry</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="string">".pde"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="string">".pde"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// if a .pde file of the same prefix as the folder exists..</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>BaseNoGui</name><operator>.</operator><name>isSanitaryName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>builtOnce</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>complaining</name> <init>= <expr><call><name><name>I18n</name>
                  <operator>.</operator><name>format</name></name><argument_list>(
                          <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The sketch \"{0}\" cannot be used.\n"</literal>
                                  <operator>+</operator> <literal type="string">"Sketch names must contain only basic letters and numbers\n"</literal>
                                  <operator>+</operator> <literal type="string">"(ASCII-only with no spaces, "</literal>
                                  <operator>+</operator> <literal type="string">"and it cannot start with a number).\n"</literal>
                                  <operator>+</operator> <literal type="string">"To get rid of this message, remove the sketch from\n"</literal>
                                  <operator>+</operator> <literal type="string">"{1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Ignoring sketch with bad name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>complaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setActionCommand</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// don't create an extra menu level for a folder named "examples"</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>folder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"examples"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>addSketches</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// not a sketch folder, but maybe a subfolder containing sketches</comment>
    <decl_stmt><decl><type><name>JMenu</name></type> <name>submenu</name> <init>= <expr><operator>new</operator> <call><name>JMenu</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><call><name>addSketches</name><argument_list>(<argument><expr><name>submenu</name></expr></argument>, <argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>submenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>MenuScroller</name><operator>.</operator><name>setScrollerFor</name></name><argument_list>(<argument><expr><name>submenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>found</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>void</name></type> <name>addLibraries</name><parameter_list>(<parameter><decl><type><name>JMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>LibraryList</name></type> <name>libs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

    <decl_stmt><decl><type><name>LibraryList</name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name>LibraryList</name><argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>UserLibrary</name></type> <name>lib</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
      <type><name>AbstractAction</name></type> <name>action</name> <init>= <expr><operator>new</operator> <class><super><name>AbstractAction</name></super><argument_list>(<argument><expr><call><name><name>lib</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>UserLibrary</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>UserLibrary</name><operator>)</operator> <call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"library"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>getSketchController</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>importLibrary</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Unable to list header files in {0}"</literal></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>getSrcFolder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></catch></try>
        </block_content>}</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><literal type="string">"library"</literal></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Add new element at the bottom</comment>
      <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>JMenuItem</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>putClientProperty</name></name><argument_list>(<argument><expr><literal type="string">"library"</literal></expr></argument>, <argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// XXX: DAM: should recurse here so that library folders can be nested</comment>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Given a folder, return a list of the header files in that folder (but not
   * the header files in its sub-folders, as those should be included from
   * within the header files at the top-level).
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>headerListFromIncludePath</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>path</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>list</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OnlyFilesWithExtension</name><argument_list>(<argument><expr><literal type="string">".h"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>list</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Show the About box.
   */</comment>
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>handleAbout</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Image</name></type> <name>image</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>getLibImage</name></name><argument_list>(<argument><expr><literal type="string">"about"</literal></expr></argument>, <argument><expr><name>activeEditor</name></expr></argument>,
                                          <argument><expr><call><name><name>Theme</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">475</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Theme</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Window</name></type> <name>window</name> <init>= <expr><operator>new</operator> <class><super><name>Window</name></super><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>paint</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>graphics</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>setupGraphics2D</name></name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"SansSerif"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><call><name><name>Theme</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">151</literal></expr></argument>,<argument><expr><literal type="number">156</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name><name>BaseNoGui</name><operator>.</operator><name>VERSION_NAME_LONG</name></name></expr></argument>, <argument><expr><call><name><name>Theme</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Theme</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>addMouseListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>MouseAdapter</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>mousePressed</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>getWidth</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>image</name><operator>.</operator><name>getHeight</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>screen</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getScreenSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>screen</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>screen</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>h</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Show the Preferences window.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handlePrefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>preferences</name><operator>.</operator><name>Preferences</name></name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>preferences</name><operator>.</operator><name>Preferences</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>activeEditor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Adjust font size
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFontSizeChange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>change</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name><name>pieces</name><index>[]</index></name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>newSize</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>change</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>newSize</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>newSize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pieces</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// ignore</comment>
      <return>return;</return>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>pieces</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getEditors</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>Editor</name><operator>::</operator><name>applyPreferences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Adds a {@link MouseWheelListener} and {@link KeyListener} to the given
   * component that will make "CTRL scroll" and "CTRL +/-"
   * (with optional SHIFT for +) increase/decrease the editor text size.
   * This method is equivalent to calling
   * {@link #addEditorFontResizeMouseWheelListener(Component)} and
   * {@link #addEditorFontResizeKeyListener(Component)} on the given component.
   * Note that this also affects components that use the editor font settings.
   * @param comp - The component to add the listener to.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>addEditorFontResizeListeners</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>comp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>addEditorFontResizeMouseWheelListener</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addEditorFontResizeKeyListener</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Adds a {@link MouseWheelListener} to the given component that will
   * make "CTRL scroll" increase/decrease the editor text size.
   * When CTRL is not pressed while scrolling, mouse wheel events are passed
   * on to the parent of the given component.
   * Note that this also affects components that use the editor font settings.
   * @param comp - The component to add the listener to.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>addEditorFontResizeMouseWheelListener</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>comp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>comp</name><operator>.</operator><name>addMouseWheelListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>isControlDown</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getWheelRotation</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>handleFontSizeChange</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>handleFontSizeChange</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getComponent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>getComponent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>getComponent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>dispatchEvent</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Adds a {@link KeyListener} to the given component that will make "CTRL +/-"
   * (with optional SHIFT for +) increase/decrease the editor text size.
   * Note that this also affects components that use the editor font settings.
   * @param comp - The component to add the listener to.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>addEditorFontResizeKeyListener</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>comp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>comp</name><operator>.</operator><name>addKeyListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>KeyAdapter</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <type><specifier>public</specifier> <name>void</name></type> <name>keyPressed</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getModifiersEx</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>CTRL_DOWN_MASK</name></name>
            <operator>||</operator> <call><name><name>e</name><operator>.</operator><name>getModifiersEx</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name><name>KeyEvent</name><operator>.</operator><name>CTRL_DOWN_MASK</name></name>
                                      <operator>|</operator> <name><name>KeyEvent</name><operator>.</operator><name>SHIFT_DOWN_MASK</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <switch>switch <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <case>case <expr><name><name>KeyEvent</name><operator>.</operator><name>VK_PLUS</name></name></expr>:</case>
          <case>case <expr><name><name>KeyEvent</name><operator>.</operator><name>VK_EQUALS</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>this</name><operator>.</operator><name>handleFontSizeChange</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name><name>KeyEvent</name><operator>.</operator><name>VK_MINUS</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>e</name><operator>.</operator><name>isShiftDown</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>this</name><operator>.</operator><name>handleFontSizeChange</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
          </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenu</name></argument>&gt;</argument_list></name></type> <name>getBoardsCustomMenus</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>boardsCustomMenus</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>File</name></type> <name>getDefaultSketchbookFolderOrPromptForIt</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>sketchbookFolder</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getDefaultSketchbookFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>sketchbookFolder</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isCommandLine</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sketchbookFolder</name> <operator>=</operator> <call><name>promptSketchbookLocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// create the folder if it doesn't exist already</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sketchbookFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>sketchbookFolder</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"You forgot your sketchbook"</literal></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Arduino cannot run because it could not\n"</literal> <operator>+</operator>
                      <literal type="string">"create a folder to store your sketchbook."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>sketchbookFolder</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Check for a new sketchbook location.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>File</name></type> <name>promptSketchbookLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>folder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>folder</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.home"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sketchbook"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>folder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>folder</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>prompt</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Select (or create new) folder for sketches..."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>folder</name> <operator>=</operator> <call><name>selectFolder</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>folder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>folder</name></expr>;</return>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>


  <comment type="block" format="javadoc">/**
   * Implements the cross-platform headache of opening URLs
   * TODO This code should be replaced by PApplet.link(),
   * however that's not a static method (because it requires
   * an AppletContext when used as an applet), so it's mildly
   * trickier than just removing this method.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>openURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openURL</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem Opening URL"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not open the URL\n{0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Used to determine whether to disable the "Show Sketch Folder" option.
   *
   * @return true If a means of opening a folder is known to be available.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>boolean</name></type> <name>openFolderAvailable</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openFolderAvailable</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Implements the other cross-platform headache of opening
   * a folder in the machine's native file browser.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>openFolder</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openFolder</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem Opening Folder"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not open the folder\n{0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>selectFolder</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prompt</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>, <parameter><decl><type><name>Component</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JFileChooser</name></type> <name>fc</name> <init>= <expr><operator>new</operator> <call><name>JFileChooser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fc</name><operator>.</operator><name>setDialogTitle</name></name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>folder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fc</name><operator>.</operator><name>setSelectedFile</name></name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>fc</name><operator>.</operator><name>setFileSelectionMode</name></name><argument_list>(<argument><expr><name><name>JFileChooser</name><operator>.</operator><name>DIRECTORIES_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>returned</name> <init>= <expr><call><name><name>fc</name><operator>.</operator><name>showOpenDialog</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>returned</name> <operator>==</operator> <name><name>JFileChooser</name><operator>.</operator><name>APPROVE_OPTION</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>fc</name><operator>.</operator><name>getSelectedFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>


  <comment type="block" format="javadoc">/**
   * Give this Frame an icon.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setIcon</name><parameter_list>(<parameter><decl><type><name>Frame</name></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Image</name></argument>&gt;</argument_list></name></type> <name>icons</name> <init>= <expr><call><name><name>Stream</name>
      <operator>.</operator><name>of</name></name><argument_list>(<argument><expr><literal type="string">"16"</literal></expr></argument>, <argument><expr><literal type="string">"24"</literal></expr></argument>, <argument><expr><literal type="string">"32"</literal></expr></argument>, <argument><expr><literal type="string">"48"</literal></expr></argument>, <argument><expr><literal type="string">"64"</literal></expr></argument>, <argument><expr><literal type="string">"72"</literal></expr></argument>, <argument><expr><literal type="string">"96"</literal></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>, <argument><expr><literal type="string">"256"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>res</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="string">"/lib/icons/"</literal> <operator>+</operator> <name>res</name> <operator>+</operator> <literal type="string">"x"</literal> <operator>+</operator> <name>res</name> <operator>+</operator> <literal type="string">"/apps/arduino.png"</literal></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>path</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>absPath</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createImage</name><argument_list>(<argument><expr><name>absPath</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setIconImages</name></name><argument_list>(<argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Registers key events for a Ctrl-W and ESC with an ActionListener
   * that will take care of disposing the window.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>registerWindowCloseKeys</name><parameter_list>(<parameter><decl><type><name>JRootPane</name></type> <name>root</name></decl></parameter>,
                                             <parameter><decl><type><name>ActionListener</name></type> <name>disposer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>KeyStroke</name></type> <name>stroke</name> <init>= <expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_ESCAPE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>registerKeyboardAction</name></name><argument_list>(<argument><expr><name>disposer</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>,
            <argument><expr><name><name>JComponent</name><operator>.</operator><name>WHEN_IN_FOCUSED_WINDOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMenuShortcutKeyMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>stroke</name> <operator>=</operator> <call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>registerKeyboardAction</name></name><argument_list>(<argument><expr><name>disposer</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>,
            <argument><expr><name><name>JComponent</name><operator>.</operator><name>WHEN_IN_FOCUSED_WINDOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showReference</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"reference/www.arduino.cc/en"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showReference</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>referenceFolder</name> <init>= <expr><call><name>getContentFile</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>referenceFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>referenceFolder</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>referenceFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>referenceFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>referenceFolder</name></expr></argument>, <argument><expr><name>filename</name> <operator>+</operator> <literal type="string">".html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name><name>referenceFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>openURL</name><argument_list>(<argument><expr><call><name><name>referenceFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>showWarning</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Problem Opening URL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not open the URL\n{0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>referenceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>showEdisonGettingStarted</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"reference/Edison_help_files"</literal></expr></argument>, <argument><expr><literal type="string">"ArduinoIDE_guide_edison"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showArduinoGettingStarted</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"Guide/MacOSX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isWindows</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"Guide/Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>openURL</name><argument_list>(<argument><expr><literal type="string">"http://www.arduino.cc/playground/Learning/Linux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showReference</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"Reference/HomePage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showEnvironment</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"Guide/Environment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showTroubleshooting</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"Guide/Troubleshooting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showFAQ</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showReference</name><argument_list>(<argument><expr><literal type="string">"Main/FAQ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>


  <comment type="block" format="javadoc">/**
   * "No cookie for you" type messages. Nothing fatal or all that
   * much of a bummer, but something to notify the user about.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>showMessage</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Non-fatal error message with optional stack trace side dish.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showWarning</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>showWarning</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>showError</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Show an error message that's actually fatal to the program.
   * This is an error that can't be recovered. Use showWarning()
   * for errors that allow P5 to continue running.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>showError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>showError</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>File</name></type> <name>getContentFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <comment type="line">// ...................................................................</comment>


  <comment type="block" format="javadoc">/**
   * Get the number of lines in a file by counting the number of newline
   * characters inside a String (and adding 1).
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>countLines</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>countLines</name></name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Same as PApplet.loadBytes(), however never does gzip decoding.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>loadBytesRaw</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FileInputStream</name></type> <name>input</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name><name>buffer</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>bytesRead</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></while>
      <return>return <expr><name>buffer</name></expr>;</return>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Read from a file with a bunch of attribute/value pairs
   * that are separated by = and ignore comments with #.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readSettings</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>inputFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>outgoing</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>inputFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>outgoing</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="line">// return empty hash</comment>

    <decl_stmt><decl><type><name>String</name></type> <name><name>lines</name><index>[]</index></name> <init>= <expr><call><name><name>PApplet</name><operator>.</operator><name>loadStrings</name></name><argument_list>(<argument><expr><name>inputFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lines</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>hash</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>
              <expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>equals</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>equals</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ignoring illegal line in "</literal> <operator>+</operator> <name>inputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  "</literal> <operator>+</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>attr</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>equals</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>valu</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>equals</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>outgoing</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>valu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>outgoing</name></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>copyFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>sourceFile</name></decl></parameter>,
                              <parameter><decl><type><name>File</name></type> <name>targetFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>from</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OutputStream</name></type> <name>to</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>from</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>to</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedOutputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>bytesRead</name> <operator>=</operator> <call><name><name>from</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>to</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name><name>to</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

    <expr_stmt><expr><call><name><name>targetFile</name><operator>.</operator><name>setLastModified</name></name><argument_list>(<argument><expr><call><name><name>sourceFile</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Grab the contents of a file as a string.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>loadFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>loadFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Spew the contents of a String object out to a file.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>saveFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>saveFile</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="block" format="javadoc">/**
   * Calculate the size of the contents of a folder.
   * Used to determine whether sketches are empty or not.
   * Note that the function calls itself recursively.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>calcFolderSize</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name><name>files</name><index>[]</index></name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// null if folder doesn't exist, happens when deleting sketch</comment>
    <if_stmt><if>if <condition>(<expr><name>files</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
              <name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">".DS_Store"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>fella</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>folder</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>fella</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>calcFolderSize</name><argument_list>(<argument><expr><name>fella</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>fella</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>size</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>handleAddLibrary</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>JFileChooser</name></type> <name>fileChooser</name> <init>= <expr><operator>new</operator> <call><name>JFileChooser</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.home"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>setDialogTitle</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Select a zip file or a folder containing the library you'd like to add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>setFileSelectionMode</name></name><argument_list>(<argument><expr><name><name>JFileChooser</name><operator>.</operator><name>FILES_AND_DIRECTORIES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>setFileFilter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileNameExtensionFilter</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"ZIP files or folders"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zip"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Dimension</name></type> <name>preferredSize</name> <init>= <expr><call><name><name>fileChooser</name><operator>.</operator><name>getPreferredSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>setPreferredSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><name><name>preferredSize</name><operator>.</operator><name>width</name></name> <operator>+</operator> <literal type="number">200</literal></expr></argument>, <argument><expr><name><name>preferredSize</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>returnVal</name> <init>= <expr><call><name><name>fileChooser</name><operator>.</operator><name>showOpenDialog</name></name><argument_list>(<argument><expr><name>activeEditor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>returnVal</name> <operator>!=</operator> <name><name>JFileChooser</name><operator>.</operator><name>APPROVE_OPTION</name></name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>sourceFile</name> <init>= <expr><call><name><name>fileChooser</name><operator>.</operator><name>getSelectedFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>tmpFolder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{<block_content>
      <comment type="line">// unpack ZIP</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sourceFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <expr_stmt><expr><name>tmpFolder</name> <operator>=</operator> <call><name><name>FileUtils</name><operator>.</operator><name>createTempFolder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>ZipDeflater</name></type> <name>zipDeflater</name> <init>= <expr><operator>new</operator> <call><name>ZipDeflater</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>tmpFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>zipDeflater</name><operator>.</operator><name>deflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>foldersInTmpFolder</name> <init>= <expr><call><name><name>tmpFolder</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OnlyDirs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>foldersInTmpFolder</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Zip doesn't contain a library"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>sourceFile</name> <operator>=</operator> <name><name>foldersInTmpFolder</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>File</name></type> <name>libFolder</name> <init>= <expr><name>sourceFile</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>FileUtils</name><operator>.</operator><name>isSubDirectory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>libFolder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"A subfolder of your sketchbook is not a valid library"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>FileUtils</name><operator>.</operator><name>isSubDirectory</name></name><argument_list>(<argument><expr><name>libFolder</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"sketchbook.path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"You can't import a folder that contains your sketchbook"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>libName</name> <init>= <expr><call><name><name>libFolder</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>BaseNoGui</name><operator>.</operator><name>isSanitaryName</name></name><argument_list>(<argument><expr><name>libName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mess</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The library \"{0}\" cannot be used.\n"</literal>
                        <operator>+</operator> <literal type="string">"Library names must contain only basic letters and numbers.\n"</literal>
                        <operator>+</operator> <literal type="string">"(ASCII only and no spaces, and it cannot start with a number)"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>libName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><name>mess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>headers</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>libProp</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>libFolder</name></expr></argument>, <argument><expr><literal type="string">"library.properties"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>File</name></type> <name>srcFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>libFolder</name></expr></argument>, <argument><expr><literal type="string">"src"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>libProp</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>srcFolder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>headerListFromIncludePath</name></name><argument_list>(<argument><expr><name>srcFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>headerListFromIncludePath</name></name><argument_list>(<argument><expr><name>libFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>headers</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Specified folder/zip file does not contain a valid library"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// copy folder</comment>
      <decl_stmt><decl><type><name>File</name></type> <name>destinationFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getSketchbookLibrariesFolder</name></name><argument_list>()</argument_list></call><operator>.</operator><name>folder</name></expr></argument>, <argument><expr><call><name><name>sourceFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>destinationFolder</name><operator>.</operator><name>mkdir</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"A library named {0} already exists"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sourceFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>destinationFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><call><name><name>activeEditor</name><operator>.</operator><name>statusNotice</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Library added to your libraries. Check \"Include library\" menu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// FIXME error when importing. ignoring :(</comment>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <comment type="line">// delete zip created temp folder, if exists</comment>
      <expr_stmt><expr><name>newLibraryImported</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>recursiveDelete</name></name><argument_list>(<argument><expr><name>tmpFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DiscoveryManager</name></type> <name>getDiscoveryManager</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getDiscoveryManager</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Editor</name></type> <name>getActiveEditor</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>activeEditor</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasActiveEditor</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>activeEditor</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Editor</name></argument>&gt;</argument_list></name></type> <name>getEditors</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>editors</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>PdeKeywords</name></type> <name>getPdeKeywords</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>pdeKeywords</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>JMenuItem</name></argument>&gt;</argument_list></name></type> <name>getRecentSketchesMenuItems</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>recentSketchesMenuItems</name></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
