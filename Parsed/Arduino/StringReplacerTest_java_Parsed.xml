<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/test/processing/app/helpers/StringReplacerTest.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>StringReplacerTest</name> <block>{
  
  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>quotingCheck</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>in</name> <init>= <expr><literal type="string">"a\"bc ab'c   'abc abc' "</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="string">"\"abc abc\" '\"abc abc\"' "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="string">"\"'abc abc'\""</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>res</name> <init>= <expr><call><name><name>StringReplacer</name><operator>.</operator><name>quotedSplit</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"\"'"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"a\"bc"</literal></expr>, <expr><literal type="string">"ab'c"</literal></expr>, <expr><literal type="string">"abc abc"</literal></expr>,
        <expr><literal type="string">"abc abc"</literal></expr>, <expr><literal type="string">"\"abc abc\""</literal></expr>, <expr><literal type="string">"'abc abc'"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>quotingCheckWithEmptyStringsAccepted</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>in</name> <init>= <expr><literal type="string">"a\"bc ab'c   'abc abc' "</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="string">"\"abc abc\" '\"abc abc\"' "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="string">"\"'abc abc'\""</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>res</name> <init>= <expr><call><name><name>StringReplacer</name><operator>.</operator><name>quotedSplit</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"\"'"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"a\"bc"</literal></expr>, <expr><literal type="string">"ab'c"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"abc abc"</literal></expr>,
        <expr><literal type="string">"abc abc"</literal></expr>, <expr><literal type="string">"\"abc abc\""</literal></expr>, <expr><literal type="string">"'abc abc'"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
}</block></class>
</unit>
