<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/helpers/filefilters/OnlyFilesWithExtension.java"><comment type="block">/*
  OnlyFilesWithExtension - FilenameFilter that accepts only files with a 
  specific extension.
  Part of the Arduino project - http://www.arduino.cc/

  Copyright (c) 2011 Cristian Maglie

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */</comment>
<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>filefilters</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameFilter</name></name>;</import>

<class><specifier>public</specifier> class <name>OnlyFilesWithExtension</name> <super_list><implements>implements <super><name>FilenameFilter</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><name>String</name></type> <name><name>extensions</name><index>[]</index></name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>OnlyFilesWithExtension</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extensions</name></name> <operator>=</operator> <name>ext</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>ext</name> <range>: <expr><name>extensions</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
