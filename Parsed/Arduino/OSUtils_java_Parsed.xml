<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/helpers/OSUtils.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<class><specifier>public</specifier> class <name>OSUtils</name> <block>{

  <comment type="block" format="javadoc">/**
   * returns true if running on windows.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>isWindows</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//return PApplet.platform == PConstants.WINDOWS;</comment>
    <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"Windows"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * true if running on linux.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>isLinux</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//return PApplet.platform == PConstants.LINUX;</comment>
    <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"Linux"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * returns true if Processing is running on a Mac OS X machine.
   */</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>isMacOS</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">//return PApplet.platform == PConstants.MACOSX;</comment>
    <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"Mac"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>hasMacOSStyleMenus</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"true"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"apple.laf.useScreenMenuBar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>version</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.version"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
