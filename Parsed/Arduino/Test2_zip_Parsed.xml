<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="home/mmm/Projects/Arduino/app/test/Test2.zip">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="Test.h" hash="52da4ef9bee9b9a5dc6f88687159ce8adf500424"><comment type="block">/*
  Test.h - Test library for Wiring - description
  Copyright (c) 2006 John Doe.  All right reserved.
*/</comment>

<comment type="line">// ensure this library description is only included once</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Test_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Test_h</name></cpp:macro></cpp:define>

<comment type="line">// include types &amp; constants of Wiring core API</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WConstants.h"</cpp:file></cpp:include>

<comment type="line">// library interface description</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Test</name>
<block>{<block_content>
  <comment type="line">// user-accessible "public" interface</comment>
  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>Test</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>void</name></type> <name>doSomething</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// library-accessible "private" interface</comment>
  <label><name>private</name>:</label>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> <name>doSomethingSecret</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="Test.cpp" hash="39117040398a55ad9fbb7a77e4145cd907ba877e"><comment type="block">/*
  Test.h - Test library for Wiring - implementation
  Copyright (c) 2006 John Doe.  All right reserved.
*/</comment>

<comment type="line">// include core Wiring API</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WProgram.h"</cpp:file></cpp:include>

<comment type="line">// include this library's description file</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Test.h"</cpp:file></cpp:include>

<comment type="line">// include description files for other libraries used (if any)</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"HardwareSerial.h"</cpp:file></cpp:include>

<comment type="line">// Constructor /////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Function that handles the creation and setup of instances</comment>

<constructor><name><name>Test</name><operator>::</operator><name>Test</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>givenValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="line">// initialize this instance's variables</comment>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <name>givenValue</name></expr>;</expr_stmt>

  <comment type="line">// do whatever is required to initialize the library</comment>
  <expr_stmt><expr><call><name>pinMode</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>Serial</name><operator>.</operator><name>begin</name></name><argument_list>(<argument><expr><literal type="number">9600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<comment type="line">// Public Methods //////////////////////////////////////////////////////////////</comment>
<comment type="line">// Functions available in Wiring sketches, this library, and other libraries</comment>

<function><type><name>void</name></type> <name><name>Test</name><operator>::</operator><name>doSomething</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="line">// eventhough this function is public, it can access</comment>
  <comment type="line">// and modify this library's private variables</comment>
  <expr_stmt><expr><call><name><name>Serial</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"value is "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>Serial</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// it can also call private functions of this library</comment>
  <expr_stmt><expr><call><name>doSomethingSecret</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Private Methods /////////////////////////////////////////////////////////////</comment>
<comment type="line">// Functions only available to other functions in this library</comment>

<function><type><name>void</name></type> <name><name>Test</name><operator>::</operator><name>doSomethingSecret</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>digitalWrite</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>digitalWrite</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>

</unit>
