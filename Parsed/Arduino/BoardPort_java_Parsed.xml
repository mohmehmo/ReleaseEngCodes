<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/packages/BoardPort.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 *
 * Copyright 2013 Arduino LLC (http://www.arduino.cc/)
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetBoard</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetPackage</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetPlatform</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>

<class><specifier>public</specifier> class <name>BoardPort</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>address</name></decl>;</decl_stmt>   <comment type="line">// unique name for this port, used by Preferences</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>protocol</name></decl>;</decl_stmt>  <comment type="line">// how to communicate, used for Ports menu sections</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>protocolLabel</name></decl>;</decl_stmt> <comment type="line">// protocol extended name to display on GUI</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>boardName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>label</name></decl>;</decl_stmt>     <comment type="line">// friendly name shown in Ports menu</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PreferencesMap</name></type> <name>identificationPrefs</name></decl>;</decl_stmt> <comment type="line">// data to match with boards.txt</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PreferencesMap</name></type> <name>prefs</name></decl>;</decl_stmt> <comment type="line">// "vendorId", "productId", "serialNumber"</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>online</name></decl>;</decl_stmt>   <comment type="line">// used by SerialBoardsLister (during upload??)</comment>

  <constructor><specifier>public</specifier> <name>BoardPort</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefs</name></name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identificationPrefs</name></name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>BoardPort</name><parameter_list>(<parameter><decl><type><name>BoardPort</name></type> <name>bp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>prefs</name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>prefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>identificationPrefs</name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>identificationPrefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>address</name> <operator>=</operator> <name><name>bp</name><operator>.</operator><name>address</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>protocol</name> <operator>=</operator> <name><name>bp</name><operator>.</operator><name>protocol</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>boardName</name> <operator>=</operator> <name><name>bp</name><operator>.</operator><name>boardName</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>bp</name><operator>.</operator><name>label</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>online</name> <operator>=</operator> <name><name>bp</name><operator>.</operator><name>online</name></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getAddress</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>address</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setAddress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getProtocol</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>protocol</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setProtocol</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>protocol</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <name>protocol</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getProtocolLabel</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>protocolLabel</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setProtocolLabel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>protocolLabel</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>protocolLabel</name></name> <operator>=</operator> <name>protocolLabel</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getBoardName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>boardName</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setBoardName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>boardName</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>boardName</name></name> <operator>=</operator> <name>boardName</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>PreferencesMap</name></type> <name>getPrefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>prefs</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>PreferencesMap</name></type> <name>getIdentificationPrefs</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>identificationPrefs</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>label</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnlineStatus</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>online</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>online</name></name> <operator>=</operator> <name>online</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOnline</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>online</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>address</name></name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Search for the board which matches identificationPrefs.</comment>
  <comment type="line">// If found, boardName is set to the name from boards.txt</comment>
  <comment type="line">// and the board is returned.  If not found, null is returned.</comment>
  <function><type><specifier>public</specifier> <name>TargetBoard</name></type> <name>searchMatchingBoard</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>identificationPrefs</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>identificationPrefs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>TargetPackage</name></type> <name>targetPackage</name> <range>: <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>packages</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <range>: <expr><call><name><name>targetPackage</name><operator>.</operator><name>getPlatforms</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TargetBoard</name></type> <name>board</name> <range>: <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getBoards</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>matchesBoard</name><argument_list>(<argument><expr><name>board</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setBoardName</name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>board</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>matchesBoard</name><parameter_list>(<parameter><decl><type><name>TargetBoard</name></type> <name>board</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>identificationProps</name> <init>= <expr><call><name>getIdentificationPrefs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>boardProps</name> <init>= <expr><call><name><name>board</name><operator>.</operator><name>getPreferences</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>wildMatcher</name> <init>= <expr><call><name><name>identificationProps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>wildMatcher</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>wildMatcher</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>wildMatcher</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getFQBN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Identification properties are defined in boards.txt with a ".N" suffix</comment>
    <comment type="line">// for example:</comment>
    <comment type="line">//</comment>
    <comment type="line">// uno.name=Arduino/Genuino Uno</comment>
    <comment type="line">// uno.vid.0=0x2341</comment>
    <comment type="line">// uno.pid.0=0x0043</comment>
    <comment type="line">// uno.vid.1=0x2341</comment>
    <comment type="line">// uno.pid.1=0x0001</comment>
    <comment type="line">// uno.vid.2=0x2A03</comment>
    <comment type="line">// uno.pid.2=0x0043</comment>
    <comment type="line">// uno.vid.3=0x2341</comment>
    <comment type="line">// uno.pid.3=0x0243</comment>
    <comment type="line">//</comment>
    <comment type="line">// so we must search starting from suffix ".0" and increasing until we</comment>
    <comment type="line">// found a match or the board has no more identification properties defined</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>suffix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>suffix</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>prop</name> <range>: <expr><call><name><name>identificationProps</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>identificationProps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>prop</name> <operator>+=</operator> <literal type="string">"."</literal> <operator>+</operator> <name>suffix</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>boardProps</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name><name>boardProps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

}</block></class>
</unit>
