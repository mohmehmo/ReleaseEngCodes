<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/EditorConsole.java"><comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-06 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>ConsoleOutputStream</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintStream</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>scale</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Message console that sits below the editing area.
 */</comment>
<class><specifier>public</specifier> class <name>EditorConsole</name> <super_list><extends>extends <super><name>JScrollPane</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ConsoleOutputStream</name></type> <name>out</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ConsoleOutputStream</name></type> <name>err</name></decl>;</decl_stmt>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>SimpleAttributeSet</name></type> <name>outStyle</name></decl></parameter>, <parameter><decl><type><name>PrintStream</name></type> <name>outStream</name></decl></parameter>, <parameter><decl><type><name>SimpleAttributeSet</name></type> <name>errStyle</name></decl></parameter>, <parameter><decl><type><name>PrintStream</name></type> <name>errStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>new</operator> <call><name>ConsoleOutputStream</name><argument_list>(<argument><expr><name>outStyle</name></expr></argument>, <argument><expr><name>outStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setOut</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <operator>new</operator> <call><name>ConsoleOutputStream</name><argument_list>(<argument><expr><name>errStyle</name></expr></argument>, <argument><expr><name>errStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setErr</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCurrentEditorConsole</name><parameter_list>(<parameter><decl><type><name>EditorConsole</name></type> <name>console</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setCurrentEditorConsole</name></name><argument_list>(<argument><expr><name>console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>err</name><operator>.</operator><name>setCurrentEditorConsole</name></name><argument_list>(<argument><expr><name>console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DefaultStyledDocument</name></type> <name>document</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JTextPane</name></type> <name>consoleTextPane</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>SimpleAttributeSet</name></type> <name>stdOutStyle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>SimpleAttributeSet</name></type> <name>stdErrStyle</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EditorConsole</name><parameter_list>(<parameter><decl><type><name>Base</name></type> <name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>document</name> <operator>=</operator> <operator>new</operator> <call><name>DefaultStyledDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>consoleTextPane</name> <operator>=</operator> <operator>new</operator> <call><name>JTextPane</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>consoleTextPane</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DefaultCaret</name></type> <name>caret</name> <init>= <expr><operator>(</operator><name>DefaultCaret</name><operator>)</operator> <call><name><name>consoleTextPane</name><operator>.</operator><name>getCaret</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>caret</name><operator>.</operator><name>setUpdatePolicy</name></name><argument_list>(<argument><expr><name><name>DefaultCaret</name><operator>.</operator><name>NEVER_UPDATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>consoleTextPane</name><operator>.</operator><name>setFocusTraversalKeysEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Color</name></type> <name>backgroundColour</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"console.color"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>consoleTextPane</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name>backgroundColour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Font</name></type> <name>consoleFont</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"console.font"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Font</name></type> <name>editorFont</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Font</name></type> <name>actualFont</name> <init>= <expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><call><name><name>consoleFont</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>consoleFont</name><operator>.</operator><name>getStyle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>scale</name><argument_list>(<argument><expr><call><name><name>editorFont</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>stdOutStyle</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleAttributeSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"console.output.color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><name>backgroundColour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setFontSize</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setFontFamily</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>getFamily</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setBold</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>isBold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setItalic</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>isItalic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>consoleTextPane</name><operator>.</operator><name>setParagraphAttributes</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>stdErrStyle</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleAttributeSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"console.error.color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><name>backgroundColour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setFontSize</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setFontFamily</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>getFamily</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setBold</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>isBold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setItalic</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>isItalic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JPanel</name></type> <name>noWrapPanel</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>noWrapPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>consoleTextPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setViewportView</name><argument_list>(<argument><expr><name>noWrapPanel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getVerticalScrollBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setUnitIncrement</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// calculate height of a line of text in pixels</comment>
    <comment type="line">// and size window accordingly</comment>
    <decl_stmt><decl><type><name>FontMetrics</name></type> <name>metrics</name> <init>= <expr><call><name>getFontMetrics</name><argument_list>(<argument><expr><name>actualFont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>metrics</name><operator>.</operator><name>getAscent</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>metrics</name><operator>.</operator><name>getDescent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lines</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"console.lines"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setPreferredSize</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name>height</name> <operator>*</operator> <name>lines</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setMinimumSize</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name>height</name> <operator>*</operator> <name>lines</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>EditorConsole</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><name><name>System</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add font size adjustment listeners.</comment>
    <expr_stmt><expr><call><name><name>base</name><operator>.</operator><name>addEditorFontResizeListeners</name></name><argument_list>(<argument><expr><name>consoleTextPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>applyPreferences</name><parameter_list>()</parameter_list> <block>{<block_content>

    <comment type="line">// Update the console text pane font from the preferences.</comment>
    <decl_stmt><decl><type><name>Font</name></type> <name>consoleFont</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"console.font"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Font</name></type> <name>editorFont</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"editor.font"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Font</name></type> <name>actualFont</name> <init>= <expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><call><name><name>consoleFont</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>consoleFont</name><operator>.</operator><name>getStyle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>scale</name><argument_list>(<argument><expr><call><name><name>editorFont</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AttributeSet</name></type> <name>stdOutStyleOld</name> <init>= <expr><call><name><name>stdOutStyle</name><operator>.</operator><name>copyAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttributeSet</name></type> <name>stdErrStyleOld</name> <init>= <expr><call><name><name>stdErrStyle</name><operator>.</operator><name>copyAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setFontSize</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>StyleConstants</name><operator>.</operator><name>setFontSize</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>, <argument><expr><call><name><name>actualFont</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Re-insert console text with the new preferences if there were changes.</comment>
    <comment type="line">// This assumes that the document has single-child paragraphs (default).</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>stdOutStyle</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>stdOutStyleOld</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>stdErrStyle</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>stdOutStyleOld</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setAttibutes</name></name><argument_list>(<argument><expr><name>stdOutStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>err</name><operator>.</operator><name>setAttibutes</name></name><argument_list>(<argument><expr><name>stdErrStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>elem</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getParagraphElement</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>elem</name><operator>.</operator><name>getStartOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AttributeSet</name></type> <name>attrs</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>getElement</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttributes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AttributeSet</name></type> <name>newAttrs</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>attrs</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>stdErrStyleOld</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>newAttrs</name> <operator>=</operator> <name>stdErrStyle</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>attrs</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>stdOutStyleOld</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>newAttrs</name> <operator>=</operator> <name>stdOutStyle</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></else></if_stmt>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>insertString</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>newAttrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// Should only happen when text is async removed (through clear()).</comment>
          <comment type="line">// Accept this case, but throw an error when text could mess up.</comment>
          <if_stmt><if>if <condition>(<expr><call><name><name>document</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></catch></try>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>document</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// ignore the error otherwise this will cause an infinite loop</comment>
      <comment type="line">// maybe not a good idea in the long run?</comment>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>scrollDown</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>getHorizontalScrollBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getVerticalScrollBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><call><name>getVerticalScrollBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMaximum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>document</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>insertString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>SimpleAttributeSet</name></type> <name>attributes</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>BadLocationException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"\r"</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>insertString</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>consoleTextPane</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
