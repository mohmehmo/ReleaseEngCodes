<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/syntax/SketchTextAreaDefaultInputMap.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxTextAreaDefaultInputMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxTextAreaEditorKit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>RTextArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>RTextAreaEditorKit</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>PreferencesData</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>DefaultEditorKit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>InputEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>

<class><specifier>public</specifier> class <name>SketchTextAreaDefaultInputMap</name> <super_list><extends>extends <super><name>RSyntaxTextAreaDefaultInputMap</name></super></extends></super_list> <block>{

  <constructor><specifier>public</specifier> <name>SketchTextAreaDefaultInputMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>defaultModifier</name> <init>= <expr><call><name>getDefaultModifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ctrl</name> <init>= <expr><name><name>InputEvent</name><operator>.</operator><name>CTRL_MASK</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>alt</name> <init>= <expr><name><name>InputEvent</name><operator>.</operator><name>ALT_MASK</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name><name>InputEvent</name><operator>.</operator><name>SHIFT_MASK</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>isOSX</name> <init>= <expr><call><name><name>RTextArea</name><operator>.</operator><name>isOSX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>moveByWordMod</name> <init>= <expr><ternary><condition><expr><name>isOSX</name></expr> ?</condition><then> <expr><name>alt</name></expr> </then><else>: <expr><name>defaultModifier</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_K</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Remove a troublesome binding for the / key. By default, RSyntaxTextArea</comment>
    <comment type="line">// binds the / KEY_TYPED event to insert a / and optionally complete any XML</comment>
    <comment type="line">// tags. However, since this also triggeres on ctrl-slash, this means that</comment>
    <comment type="line">// in addition to toggling comments on ctrl-slash, it also inserts a slash.</comment>
    <comment type="line">// Since we don't need the XML completion feature anyway, just unbind it</comment>
    <comment type="line">// here. A future version of RSyntaxTextArea might fix this, see</comment>
    <comment type="line">// https://github.com/bobbylight/RSyntaxTextArea/issues/157.</comment>
    <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.advanced"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_DOWN</name></name></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RTextAreaEditorKit</name><operator>.</operator><name>rtaLineDownAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_UP</name></name></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RTextAreaEditorKit</name><operator>.</operator><name>rtaLineUpAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_DOWN</name></name></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_UP</name></name></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_BACK_SPACE</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_BACK_SPACE</name></name></expr></argument>, <argument><expr><name>moveByWordMod</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RTextAreaEditorKit</name><operator>.</operator><name>rtaDeletePrevWordAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>isOSX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_BACK_SPACE</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>SketchTextAreaEditorKit</name><operator>.</operator><name>rtaDeleteLineToCursorAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_UP</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>beginAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_DOWN</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>endAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_LEFT</name></name></expr></argument>, <argument><expr><name>defaultModifier</name> <operator>|</operator> <name>shift</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>selectionBeginLineAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_RIGHT</name></name></expr></argument>, <argument><expr><name>defaultModifier</name> <operator>|</operator> <name>shift</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>selectionEndLineAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_J</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_OPEN_BRACKET</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RSyntaxTextAreaEditorKit</name><operator>.</operator><name>rstaDecreaseIndentAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_CLOSE_BRACKET</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>SketchTextAreaEditorKit</name><operator>.</operator><name>rtaIncreaseIndentAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_UP</name></name></expr></argument>, <argument><expr><name>defaultModifier</name> <operator>|</operator> <name>shift</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>selectionBeginAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_DOWN</name></name></expr></argument>, <argument><expr><name>defaultModifier</name> <operator>|</operator> <name>shift</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>selectionEndAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.keys.home_and_end_beginning_end_of_doc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_HOME</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>beginLineAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_END</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>endLineAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_A</name></name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>beginLineAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_E</name></name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>endLineAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_N</name></name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>downAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_P</name></name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>upAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_B</name></name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>backwardAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_F</name></name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>forwardAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_D</name></name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>deleteNextCharAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// VK_DIVIDE is the keypad; should this be added to VK_SLASH as well?</comment>
    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_DIVIDE</name></name></expr></argument>, <argument><expr><name>defaultModifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>RSyntaxTextAreaEditorKit</name><operator>.</operator><name>rstaToggleCommentAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_KP_LEFT</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>backwardAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_KP_RIGHT</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>forwardAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_KP_DOWN</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>downAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_KP_UP</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>DefaultEditorKit</name><operator>.</operator><name>upAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></constructor>
}</block></class>
</unit>
