<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/helpers/PreferencesHelper.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PreferencesHelper</name> <block>{

<comment type="line">//  /**</comment>
<comment type="line">//   * Create a Color with the value of the specified key. The format of the color</comment>
<comment type="line">//   * should be an hexadecimal number of 6 digit, eventually prefixed with a '#'.</comment>
<comment type="line">//   * </comment>
<comment type="line">//   * @param name</comment>
<comment type="line">//   * @return A Color object or &lt;b&gt;null&lt;/b&gt; if the key is not found or the format</comment>
<comment type="line">//   *         is wrong</comment>
<comment type="line">//   */</comment>
<comment type="line">//  static public Color getColor(PreferencesMap prefs, String name) {</comment>
<comment type="line">//    Color parsed = parseColor(prefs.get(name));</comment>
<comment type="line">//    if (parsed != null)</comment>
<comment type="line">//      return parsed;</comment>
<comment type="line">//    return Color.GRAY; // set a default</comment>
<comment type="line">//  }</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//  static public void setColor(PreferencesMap prefs, String attr, Color what) {</comment>
<comment type="line">//    putColor(prefs, attr, what);</comment>
<comment type="line">//  }</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<comment type="line">//  static public Font getFontWithDefault(PreferencesMap prefs, PreferencesMap defaults, String attr) {</comment>
<comment type="line">//    Font font = getFont(prefs, attr);</comment>
<comment type="line">//    if (font == null) {</comment>
<comment type="line">//      String value = defaults.get(attr);</comment>
<comment type="line">//      prefs.put(attr, value);</comment>
<comment type="line">//      font = getFont(prefs, attr);</comment>
<comment type="line">//    }</comment>
<comment type="line">//    return font;</comment>
<comment type="line">//  }</comment>
<comment type="line">//</comment>
<comment type="line">//  static public SyntaxStyle getStyle(PreferencesMap prefs, String what) {</comment>
<comment type="line">//    String str = prefs.get("editor." + what + ".style");</comment>
<comment type="line">//</comment>
<comment type="line">//    StringTokenizer st = new StringTokenizer(str, ",");</comment>
<comment type="line">//</comment>
<comment type="line">//    String s = st.nextToken();</comment>
<comment type="line">//    if (s.indexOf("#") == 0) s = s.substring(1);</comment>
<comment type="line">//    Color color = Color.DARK_GRAY;</comment>
<comment type="line">//    try {</comment>
<comment type="line">//      color = new Color(Integer.parseInt(s, 16));</comment>
<comment type="line">//    } catch (Exception e) { }</comment>
<comment type="line">//</comment>
<comment type="line">//    s = st.nextToken();</comment>
<comment type="line">//    boolean bold = (s.indexOf("bold") != -1);</comment>
<comment type="line">//    boolean italic = (s.indexOf("italic") != -1);</comment>
<comment type="line">//    boolean underlined = (s.indexOf("underlined") != -1);</comment>
<comment type="line">//</comment>
<comment type="line">//    return new SyntaxStyle(color, italic, bold, underlined);</comment>
<comment type="line">//  }</comment>

  <comment type="block" format="javadoc">/**
   * Set the value of the specified key based on the Color passed as parameter.
   * 
   * @param attr
   * @param color
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>putColor</name><parameter_list>(<parameter><decl><type><name>PreferencesMap</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"#"</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%06x"</literal></expr></argument>, <argument><expr><call><name><name>color</name><operator>.</operator><name>getRGB</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Color</name></type> <name>parseColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Font</name></type> <name>getFont</name><parameter_list>(<parameter><decl><type><name>PreferencesMap</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>split</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>split</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>style</name> <init>= <expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"bold"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>style</name> <operator>|=</operator> <name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"italic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>style</name> <operator>|=</operator> <name><name>Font</name><operator>.</operator><name>ITALIC</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <comment type="line">// ParseDouble handle numbers with decimals too</comment>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>split</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Do not allow negative or zero size</comment>
        <throw>throw <expr><operator>new</operator> <call><name>NumberFormatException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// for wrong formatted size pick the default</comment>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <return>return <expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
