<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/helpers/CircularBuffer.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>

<class><specifier>public</specifier> class <name>CircularBuffer</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>elements</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>capacity</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>capacity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>elements</name><index>[<expr><name>end</name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>end</name> <operator>||</operator> <name>start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>capacity</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>double</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>elements</name><index>[<expr><operator>(</operator><name>start</name> <operator>+</operator> <name>index</name><operator>)</operator> <operator>%</operator> <name>capacity</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>

  <constructor><specifier>public</specifier> <name>CircularBuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>elements</name> <operator>=</operator> <operator>new</operator> <name><name>double</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>double</name></type> <name>min</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>out</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>out</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>double</name></type> <name>max</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>out</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>out</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <name>capacity</name><operator>)</operator> <operator>%</operator> <name>capacity</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>capacity</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>capacity</name></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
