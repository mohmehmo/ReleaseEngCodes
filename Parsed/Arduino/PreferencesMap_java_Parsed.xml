<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/helpers/PreferencesMap.java"><comment type="block">/*
 PreferencesMap - A Map&lt;String, String&gt; with some useful features 
 to handle preferences.
 Part of the Arduino project - http://www.arduino.cc/

 Copyright (c) 2014 Cristian Maglie

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */</comment>
<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>PreferencesMap</name> <super_list><extends>extends <super><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

  <constructor><specifier>public</specifier> <name>PreferencesMap</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Create a PreferencesMap and load the content of the file passed as
   * argument.
   * 
   * Is equivalent to:
   * 
   * &lt;pre&gt;
   * PreferencesMap map = new PreferencesMap();
   * map.load(file);
   * &lt;/pre&gt;
   * 
   * @param file
   * @throws IOException
   */</comment>
  <constructor><specifier>public</specifier> <name>PreferencesMap</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>PreferencesMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Parse a property list file and put kev/value pairs into the Map
   * 
   * @param file
   * @throws FileNotFoundException
   * @throws IOException
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fileInputStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>fileInputStream</name> <operator>=</operator> <operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>fileInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>fileInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><type><specifier>protected</specifier> <name>String</name></type> <name>processPlatformSuffix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCurrentPlatform</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// Key does not end with the given suffix? Process as normal</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>key</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// Not the current platform? Ignore this key</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isCurrentPlatform</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// Strip the suffix from the key</comment>
    <return>return <expr><call><name><name>key</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>suffix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Parse a property list stream and put key/value pairs into the Map
   * 
   * @param input
   * @throws IOException
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>input</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>lines</name> <init>= <expr><call><name><name>PApplet</name><operator>.</operator><name>loadStrings</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>line</name> <range>: <expr><name>lines</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>equals</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>equals</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>equals</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>equals</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>processPlatformSuffix</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">".linux"</literal></expr></argument>, <argument><expr><call><name><name>OSUtils</name><operator>.</operator><name>isLinux</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>processPlatformSuffix</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">".windows"</literal></expr></argument>, <argument><expr><call><name><name>OSUtils</name><operator>.</operator><name>isWindows</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>processPlatformSuffix</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">".macosx"</literal></expr></argument>, <argument><expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Create a new PreferenceMap that contains all the top level pairs of the
   * current mapping. E.g. the folowing mapping:&lt;br /&gt;
   * 
   * &lt;pre&gt;
   * Map (
   *     alpha = Alpha
   *     alpha.some.keys = v1
   *     alpha.other.keys = v2
   *     beta = Beta
   *     beta.some.keys = v3
   *   )
   * &lt;/pre&gt;
   * 
   * will generate the following result:
   * 
   * &lt;pre&gt;
   * Map (
   *     alpha = Alpha
   *     beta = Beta
   *   )
   * &lt;/pre&gt;
   * 
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <name>PreferencesMap</name></type> <name>topLevelMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Create a new Map&lt;String, PreferenceMap&gt; where keys are the first level of
   * the current mapping. Top level pairs are discarded. E.g. the folowing
   * mapping:&lt;br /&gt;
   * 
   * &lt;pre&gt;
   * Map (
   *     alpha = Alpha
   *     alpha.some.keys = v1
   *     alpha.other.keys = v2
   *     beta = Beta
   *     beta.some.keys = v3
   *   )
   * &lt;/pre&gt;
   * 
   * will generate the following result:
   * 
   * &lt;pre&gt;
   * alpha = Map(
   *     some.keys = v1
   *     other.keys = v2
   *   )
   * beta = Map(
   *     some.keys = v3
   *   )
   * &lt;/pre&gt;
   * 
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>PreferencesMap</name></argument>&gt;</argument_list></name></type> <name>firstLevelMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>PreferencesMap</name></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>dot</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>dot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>parent</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>child</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>dot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>res</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Create a new PreferenceMap using a subtree of the current mapping. Top
   * level pairs are ignored. E.g. with the following mapping:&lt;br /&gt;
   * 
   * &lt;pre&gt;
   * Map (
   *     alpha = Alpha
   *     alpha.some.keys = v1
   *     alpha.other.keys = v2
   *     beta = Beta
   *     beta.some.keys = v3
   *   )
   * &lt;/pre&gt;
   * 
   * a call to createSubTree("alpha") will generate the following result:
   * 
   * &lt;pre&gt;
   * Map(
   *     some.keys = v1
   *     other.keys = v2
   *   )
   * &lt;/pre&gt;
   * 
   * @param parent
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <name>PreferencesMap</name></type> <name>subTree</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>subTree</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>PreferencesMap</name></type> <name>subTree</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sublevels</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>parent</name> <operator>+=</operator> <literal type="string">"."</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>parentLen</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>newKey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>parentLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>keySubLevels</name> <init>= <expr><call><name><name>newKey</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sublevels</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>keySubLevels</name> <operator>==</operator> <name>sublevels</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>newKey</name></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>indent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><name>indent</name> <operator>+</operator> <literal type="string">"{\n"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>SortedSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>treeSet</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>keySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>k</name> <range>: <expr><name>treeSet</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>indent</name> <operator>+</operator> <literal type="string">"  "</literal> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <call><name>get</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>indent</name> <operator>+</operator> <literal type="string">"}\n"</literal></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the value to which the specified key is mapped, or throws a
   * PreferencesMapException if not found
   * 
   * @param k
   *          the key whose associated value is to be returned
   * @return the value to which the specified key is mapped
   * @throws PreferencesMapException
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getOrExcept</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>k</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PreferencesMapException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>r</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>PreferencesMapException</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>toString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Creates a new File instance by converting the value of the key into an
   * abstract pathname. If the the given key doesn't exists or his value is the
   * empty string, the result is &lt;b&gt;null&lt;/b&gt;.
   * 
   * @param key
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <name>File</name></type> <name>getFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Creates a new File instance by converting the value of the key into an
   * abstract pathname with the specified sub folder. If the the given key
   * doesn't exists or his value is the empty string, the result is &lt;b&gt;null&lt;/b&gt;.
   * 
   * @param key
   * @param subFolder
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <name>File</name></type> <name>getFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>subFolder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name>getFile</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>subFolder</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Return the value of the specified key as boolean.
   * 
   * @param key
   * @return &lt;b&gt;true&lt;/b&gt; if the value of the key is the string "true" (case
   *         insensitive compared), &lt;b&gt;false&lt;/b&gt; in any other case
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the value of the specified key to the string &lt;b&gt;"true"&lt;/b&gt; or
   * &lt;b&gt;"false"&lt;/b&gt; based on value of the boolean parameter
   * 
   * @param key
   * @param value
   * @return &lt;b&gt;true&lt;/b&gt; if the previous value of the key was the string "true"
   *         (case insensitive compared), &lt;b&gt;false&lt;/b&gt; in any other case
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>putBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>prev</name> <init>= <expr><call><name>put</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>Boolean</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>defaultValue</name></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
