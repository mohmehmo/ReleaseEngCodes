<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/SD_1.1.1/SD/src/File.cpp"><comment type="block">/*

 SD - a slightly more friendly wrapper for sdfatlib

 This library aims to expose a subset of SD card functionality
 in the form of a higher level "wrapper" object.

 License: GNU General Public License V3
          (Because sdfatlib is licensed with this.)

 (C) Copyright 2010 SparkFun Electronics

 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SD.h&gt;</cpp:file></cpp:include>

<comment type="block">/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/</comment>

<constructor><name><name>File</name><operator>::</operator><name>File</name></name><parameter_list>(<parameter><decl><type><name>SdFile</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// oh man you are kidding me, new() doesnt exist? Ok we do it by hand!</comment>
  <expr_stmt><expr><name>_file</name> <operator>=</operator> <operator>(</operator><name>SdFile</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SdFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <if_stmt><if>if <condition>(<expr><name>_file</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SdFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>_name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_name</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    
    <comment type="block">/* for debugging file open/close leaks
       nfilecount++;
       Serial.print("Created \"");
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></constructor>

<constructor><name><name>File</name><operator>::</operator><name>File</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="line">//Serial.print("Created empty file object");</comment>
</block_content>}</block></constructor>

<comment type="line">// returns a pointer to the file name</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name><name>File</name><operator>::</operator><name>name</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>_name</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// a directory is a special type of file</comment>
<function><type><name>boolean</name></type> <name><name>File</name><operator>::</operator><name>isDirectory</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>_file</name> <operator>&amp;&amp;</operator> <call><name><name>_file</name><operator>-&gt;</operator><name>isDir</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name><name>File</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>File</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>t</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>_file</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setWriteError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>_file</name><operator>-&gt;</operator><name>clearWriteError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name>_file</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>_file</name><operator>-&gt;</operator><name>getWriteError</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setWriteError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>peek</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>_file</name></expr>)</condition><block type="pseudo"><block_content> 
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>_file</name><operator>-&gt;</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>_file</name><operator>-&gt;</operator><name>seekCur</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>read</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>_file</name></expr>)</condition><block type="pseudo"><block_content> 
    <return>return <expr><call><name><name>_file</name><operator>-&gt;</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// buffered read for more efficient, high speed reading</comment>
<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>read</name></name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>nbyte</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>_file</name></expr>)</condition><block type="pseudo"><block_content> 
    <return>return <expr><call><name><name>_file</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbyte</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>available</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>position</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0X7FFF</literal></expr> ?</condition><then> <expr><literal type="number">0X7FFF</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>File</name><operator>::</operator><name>flush</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>_file</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>_file</name><operator>-&gt;</operator><name>sync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>boolean</name></type> <name><name>File</name><operator>::</operator><name>seek</name></name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name><name>_file</name><operator>-&gt;</operator><name>seekSet</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name><name>File</name><operator>::</operator><name>position</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>_file</name><operator>-&gt;</operator><name>curPosition</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name><name>File</name><operator>::</operator><name>size</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>_file</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>_file</name><operator>-&gt;</operator><name>fileSize</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>File</name><operator>::</operator><name>close</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>_file</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>_file</name><operator>-&gt;</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><name>_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* for debugging file open/close leaks
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function type="operator"><name><name>File</name><operator>::</operator><name>operator <name>bool</name></name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>_file</name></expr>)</condition><block type="pseudo"><block_content> 
    <return>return  <expr><call><name><name>_file</name><operator>-&gt;</operator><name>isOpen</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

</unit>
