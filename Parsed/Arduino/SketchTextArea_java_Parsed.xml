<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/syntax/SketchTextArea.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Ricardo JL Rufino (ricardo@criativasoft.com.br)
 * Copyright 2015 Arduino LLC
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Insets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>InputEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>MouseEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>KeyStroke</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>EventListenerList</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>HyperlinkEvent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>HyperlinkListener</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>BadLocationException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>Segment</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>LinkGenerator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>LinkGeneratorResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxTextArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>Theme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>TokenImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>TokenTypes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>RTextArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>RTextAreaUI</name></name>;</import>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Base</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>PreferencesData</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Arduino Sketch code editor based on RSyntaxTextArea (http://fifesoft.com/rsyntaxtextarea)
 *
 * @author Ricardo JL Rufino (ricardo@criativasoft.com.br)
 * @since 1.6.4
 */</comment>
<class><specifier>public</specifier> class <name>SketchTextArea</name> <super_list><extends>extends <super><name>RSyntaxTextArea</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>LOG</name> <init>= <expr><call><name><name>Logger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><call><name><name>SketchTextArea</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>PdeKeywords</name></type> <name>pdeKeywords</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SketchTextArea</name><parameter_list>(<parameter><decl><type><name>RSyntaxDocument</name></type> <name>document</name></decl></parameter>, <parameter><decl><type><name>PdeKeywords</name></type> <name>pdeKeywords</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pdeKeywords</name></name> <operator>=</operator> <name>pdeKeywords</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>installFeatures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fixCtrlDeleteBehavior</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeywords</name><parameter_list>(<parameter><decl><type><name>PdeKeywords</name></type> <name>keywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>pdeKeywords</name> <operator>=</operator> <name>keywords</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setLinkGenerator</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DocLinkGenerator</name><argument_list>(<argument><expr><name>pdeKeywords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>installFeatures</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>setTheme</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"editor.syntax_theme"</literal></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setLinkGenerator</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DocLinkGenerator</name><argument_list>(<argument><expr><name>pdeKeywords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setSyntaxEditingStyle</name><argument_list>(<argument><expr><name>SYNTAX_STYLE_CPLUSPLUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setTheme</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>defaultXmlInputStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>defaultXmlInputStream</name> <operator>=</operator> <call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getThemeResource</name></name><argument_list>(<argument><expr><literal type="string">"theme/syntax/"</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">".xml"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Theme</name></type> <name>theme</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>defaultXmlInputStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>theme</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>defaultXmlInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

    <expr_stmt><expr><call><name>setEOLMarkersVisible</name><argument_list>(<argument><expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.eolmarkers"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setBackground</name><argument_list>(<argument><expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.bgcolor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setHighlightCurrentLine</name><argument_list>(<argument><expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"editor.linehighlight"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCurrentLineHighlightColor</name><argument_list>(<argument><expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.linehighlight.color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCaretColor</name><argument_list>(<argument><expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.caret.color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelectedTextColor</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setUseSelectedTextColor</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelectionColor</name><argument_list>(<argument><expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.selection.color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setMatchedBracketBorderColor</name><argument_list>(<argument><expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"editor.brackethighlight.color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setHyperlinkForeground</name><argument_list>(<argument><expr><operator>(</operator><name>Color</name><operator>)</operator> <call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getStyledFont</name></name><argument_list>(<argument><expr><literal type="string">"url"</literal></expr></argument>, <argument><expr><call><name>getFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>DATA_TYPE</name></name></expr></argument>, <argument><expr><literal type="string">"data_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>FUNCTION</name></name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>RESERVED_WORD</name></name></expr></argument>, <argument><expr><literal type="string">"reserved_word"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>RESERVED_WORD_2</name></name></expr></argument>, <argument><expr><literal type="string">"reserved_word_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>VARIABLE</name></name></expr></argument>, <argument><expr><literal type="string">"variable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>OPERATOR</name></name></expr></argument>, <argument><expr><literal type="string">"operator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_DOCUMENTATION</name></name></expr></argument>, <argument><expr><literal type="string">"comment1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_EOL</name></name></expr></argument>, <argument><expr><literal type="string">"comment1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_KEYWORD</name></name></expr></argument>, <argument><expr><literal type="string">"comment1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_MARKUP</name></name></expr></argument>, <argument><expr><literal type="string">"comment1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_MULTILINE</name></name></expr></argument>, <argument><expr><literal type="string">"comment2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>LITERAL_BOOLEAN</name></name></expr></argument>, <argument><expr><literal type="string">"literal_boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>LITERAL_CHAR</name></name></expr></argument>, <argument><expr><literal type="string">"literal_char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>LITERAL_STRING_DOUBLE_QUOTE</name></name></expr></argument>, <argument><expr><literal type="string">"literal_string_double_quote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSyntaxTheme</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>PREPROCESSOR</name></name></expr></argument>, <argument><expr><literal type="string">"preprocessor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setColorForToken</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>IDENTIFIER</name></name></expr></argument>, <argument><expr><literal type="string">"editor.fgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setColorForToken</name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>WHITESPACE</name></name></expr></argument>, <argument><expr><literal type="string">"editor.eolmarkers.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setColorForToken</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>colorKeyFromTheme</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Style</name></type> <name>style</name> <init>= <expr><call><name>getSyntaxScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStyle</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>style</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name>colorKeyFromTheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getSyntaxScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStyle</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>setSyntaxTheme</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Style</name></type> <name>style</name> <init>= <expr><call><name>getSyntaxScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStyle</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>styledFont</name> <init>= <expr><call><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>getStyledFont</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>style</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>style</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator> <call><name><name>styledFont</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>style</name><operator>.</operator><name>font</name></name> <operator>=</operator> <operator>(</operator><name>Font</name><operator>)</operator> <call><name><name>styledFont</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>getSyntaxScheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStyle</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelectionActive</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>getSelectedText</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>RTAMouseListener</name></type> <name>createMouseListener</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>SketchTextAreaMouseListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>getTextLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>Segment</name></type> <name>segment</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>getLineStartOffset</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>getLineEndOffset</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>getDocument</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>DocLinkGenerator</name> <super_list><implements>implements <super><name>LinkGenerator</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PdeKeywords</name></type> <name>pdeKeywords</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DocLinkGenerator</name><parameter_list>(<parameter><decl><type><name>PdeKeywords</name></type> <name>pdeKeywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pdeKeywords</name></name> <operator>=</operator> <name>pdeKeywords</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>LinkGeneratorResult</name></type> <name>isLinkAtOffset</name><parameter_list>(<parameter><decl><type><name>RSyntaxTextArea</name></type> <name>textArea</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>offs</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>modelToToken</name></name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>reference</name> <init>= <expr><call><name><name>pdeKeywords</name><operator>.</operator><name>getReference</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getLexeme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>reference</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <operator>(</operator><call><name><name>token</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TokenTypes</name><operator>.</operator><name>DATA_TYPE</name></name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TokenTypes</name><operator>.</operator><name>VARIABLE</name></name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TokenTypes</name><operator>.</operator><name>FUNCTION</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

        <return>return <expr><operator>new</operator> <class><super><name>LinkGeneratorResult</name></super><argument_list>()</argument_list> <block>{

          <function><annotation>@<name>Override</name></annotation>
          <type><specifier>public</specifier> <name>int</name></type> <name>getSourceOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>offs</name></expr>;</return>
          </block_content>}</block></function>

          <function><annotation>@<name>Override</name></annotation>
          <type><specifier>public</specifier> <name>HyperlinkEvent</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{<block_content>

            <expr_stmt><expr><call><name><name>LOG</name><operator>.</operator><name>fine</name></name><argument_list>(<argument><expr><literal type="string">"Open Reference: "</literal> <operator>+</operator> <name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>showReference</name></name><argument_list>(<argument><expr><literal type="string">"Reference/"</literal> <operator>+</operator> <name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><literal type="null">null</literal></expr>;</return>
          </block_content>}</block></function>
        }</block></class></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>


  <comment type="block" format="javadoc">/**
   * Handles http hyperlinks.
   * NOTE (@Ricardo JL Rufino): Workaround to enable hyperlinks by default: https://github.com/bobbylight/RSyntaxTextArea/issues/119
   */</comment>
  <class><specifier>private</specifier> class <name>SketchTextAreaMouseListener</name> <super_list><extends>extends <super><name>RTextAreaMutableCaretEvent</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Insets</name></type> <name>insets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isScanningForLinks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hoveredOverLinkOffset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <constructor><name>SketchTextAreaMouseListener</name><parameter_list>(<parameter><decl><type><name>RTextArea</name></type> <name>textArea</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>insets</name> <operator>=</operator> <operator>new</operator> <call><name>Insets</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Notifies all listeners that have registered interest for notification
     * on this event type.  The listener list is processed last to first.
     *
     * @param e The event to fire.
     * @see EventListenerList
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>fireHyperlinkUpdate</name><parameter_list>(<parameter><decl><type><name>HyperlinkEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Guaranteed to return a non-null array</comment>
      <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>listeners</name> <init>= <expr><call><name><name>listenerList</name><operator>.</operator><name>getListenerList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Process the listeners last to first, notifying</comment>
      <comment type="line">// those that are interested in this event</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>listeners</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>HyperlinkListener</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>HyperlinkListener</name><operator>)</operator> <name><name>listeners</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>.</operator><call><name>hyperlinkUpdate</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>HyperlinkEvent</name></type> <name>createHyperlinkEvent</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>HyperlinkEvent</name></type> <name>he</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name>viewToToken</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Copy token, viewToModel() unfortunately modifies Token</comment>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>new</operator> <call><name>TokenImpl</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>t</name><operator>.</operator><name>isHyperlink</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>desc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>temp</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getLexeme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">// URI's need "http://" prefix for web URL's to work.</comment>
          <if_stmt><if>if <condition>(<expr><call><name><name>temp</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"www."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="string">"http://"</literal> <operator>+</operator> <name>temp</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>url</name> <operator>=</operator> <operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>mue</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name><name>mue</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><name>he</name> <operator>=</operator> <operator>new</operator> <call><name>HyperlinkEvent</name><argument_list>(<argument><expr><name><name>SketchTextArea</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>HyperlinkEvent</name><operator>.</operator><name>EventType</name><operator>.</operator><name>ACTIVATED</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>he</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mouseClicked</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>getHyperlinksEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>HyperlinkEvent</name></type> <name>he</name> <init>= <expr><call><name>createHyperlinkEvent</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>he</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>fireHyperlinkUpdate</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mouseMoved</name><parameter_list>(<parameter><decl><type><name>MouseEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mouseMoved</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getHyperlinksEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

<comment type="line">//      LinkGenerator linkGenerator = getLinkGenerator();</comment>

      <comment type="line">// GitHub issue RSyntaxTextArea/#25 - links identified at "edges" of editor</comment>
      <comment type="line">// should not be activated if mouse is in margin insets.</comment>
      <expr_stmt><expr><name>insets</name> <operator>=</operator> <call><name>getInsets</name><argument_list>(<argument><expr><name>insets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>insets</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name><name>insets</name><operator>.</operator><name>left</name></name> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <name><name>insets</name><operator>.</operator><name>top</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>isScanningForLinks</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>stopScanningForLinks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>isScanningForLinks</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name>viewToToken</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Copy token, viewToModel() unfortunately modifies Token</comment>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>new</operator> <call><name>TokenImpl</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>Cursor</name></type> <name>c2</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>t</name><operator>.</operator><name>isHyperlink</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>hoveredOverLinkOffset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
          <name>hoveredOverLinkOffset</name> <operator>!=</operator> <call><name><name>t</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>hoveredOverLinkOffset</name> <operator>=</operator> <call><name><name>t</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name><name>Cursor</name><operator>.</operator><name>getPredefinedCursor</name></name><argument_list>(<argument><expr><name><name>Cursor</name><operator>.</operator><name>HAND_CURSOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
<comment type="line">//      else if (t!=null &amp;&amp; linkGenerator!=null) {</comment>
<comment type="line">//        int offs = viewToModel(e.getPoint());</comment>
<comment type="line">//        LinkGeneratorResult newResult = linkGenerator.</comment>
<comment type="line">//            isLinkAtOffset(SketchTextArea.this, offs);</comment>
<comment type="line">//        if (newResult!=null) {</comment>
<comment type="line">//          // Repaint if we're at a new link now.</comment>
<comment type="line">//          if (linkGeneratorResult==null ||</comment>
<comment type="line">//              !equal(newResult, linkGeneratorResult)) {</comment>
<comment type="line">//            repaint();</comment>
<comment type="line">//          }</comment>
<comment type="line">//          linkGeneratorResult = newResult;</comment>
<comment type="line">//          hoveredOverLinkOffset = t.getOffset();</comment>
<comment type="line">//          c2 = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);</comment>
<comment type="line">//        }</comment>
<comment type="line">//        else {</comment>
<comment type="line">//          // Repaint if we've moved off of a link.</comment>
<comment type="line">//          if (linkGeneratorResult!=null) {</comment>
<comment type="line">//            repaint();</comment>
<comment type="line">//          }</comment>
<comment type="line">//          c2 = Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);</comment>
<comment type="line">//          hoveredOverLinkOffset = -1;</comment>
<comment type="line">//          linkGeneratorResult = null;</comment>
<comment type="line">//        }</comment>
<comment type="line">//      }</comment>
      <else>else <block>{<block_content>
        <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name><name>Cursor</name><operator>.</operator><name>getPredefinedCursor</name></name><argument_list>(<argument><expr><name><name>Cursor</name><operator>.</operator><name>TEXT_CURSOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hoveredOverLinkOffset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="line">//  linkGeneratorResult = null;</comment>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>getCursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>setCursor</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// TODO: Repaint just the affected line(s).</comment>
        <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Link either left or went into.</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>stopScanningForLinks</name><parameter_list>()</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isScanningForLinks</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>c</name> <init>= <expr><call><name>getCursor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>isScanningForLinks</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Cursor</name><operator>.</operator><name>HAND_CURSOR</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setCursor</name><argument_list>(<argument><expr><call><name><name>Cursor</name><operator>.</operator><name>getPredefinedCursor</name></name><argument_list>(<argument><expr><name><name>Cursor</name><operator>.</operator><name>TEXT_CURSOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO: Repaint just the affected line.</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

  }</block></class>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>protected</specifier> <name>RTextAreaUI</name></type> <name>createRTextAreaUI</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>SketchTextAreaUI</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>fixCtrlDeleteBehavior</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>modifier</name> <init>= <expr><ternary><condition><expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>?</condition><then> <expr><name><name>InputEvent</name><operator>.</operator><name>ALT_MASK</name></name></expr> </then><else>: <expr><name><name>InputEvent</name><operator>.</operator><name>CTRL_MASK</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KeyStroke</name></type> <name>keyStroke</name> <init>= <expr><call><name><name>KeyStroke</name><operator>.</operator><name>getKeyStroke</name></name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>VK_DELETE</name></name></expr></argument>, <argument><expr><name>modifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getInputMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>keyStroke</name></expr></argument>, <argument><expr><name><name>SketchTextAreaEditorKit</name><operator>.</operator><name>rtaDeleteNextWordAction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
