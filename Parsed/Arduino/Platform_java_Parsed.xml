<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/macosx/Platform.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2008 Ben Fry and Casey Reas

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>macosx</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>packages</name><operator>.</operator><name>BoardPort</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>apple</name><operator>.</operator><name>eio</name><operator>.</operator><name>FileManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>CommandLine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>DefaultExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>exec</name><operator>.</operator><name>PumpStreamHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PConstants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Platform handler for Mac OS X.
 */</comment>
<class><specifier>public</specifier> class <name>Platform</name> <super_list><extends>extends <super><name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Platform</name></name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>osArch</name></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setLookAndFeel</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
  </block_content>}</block></function>

  <constructor><specifier>public</specifier> <name>Platform</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// For more information see:</comment>
    <comment type="line">// http://mail.openjdk.java.net/pipermail/macosx-port-dev/2013-January/005261.html</comment>
    <expr_stmt><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>discoverRealOsArch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>discoverRealOsArch</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>CommandLine</name></type> <name>uname</name> <init>= <expr><call><name><name>CommandLine</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"uname -m"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Executor</name></type> <name>executor</name> <init>= <expr><operator>new</operator> <call><name>DefaultExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setStreamHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PumpStreamHandler</name><argument_list>(<argument><expr><name>baos</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>uname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>osArch</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>File</name></type> <name>getSettingsFolder</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getLibraryFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Arduino15"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>File</name></type> <name>getDefaultSketchbookFolder</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getDocumentsFolder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Arduino"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <comment type="block">/*
    // looking for /Users/blah/Documents/Processing
    try {
      Class clazz = Class.forName("processing.app.BaseMacOS");
      Method m = clazz.getMethod("getDocumentsFolder", new Class[] { });
      String documentsPath = (String) m.invoke(null, new Object[] { });
      sketchbookFolder = new File(documentsPath, "Arduino");

    } catch (Exception e) {
      sketchbookFolder = promptSketchbookLocation();
    }
    */</comment>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>openURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Desktop</name></type> <name>desktop</name> <init>= <expr><call><name><name>Desktop</name><operator>.</operator><name>getDesktop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>url</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>url</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"file:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>desktop</name><operator>.</operator><name>browse</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>desktop</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>openFolderAvailable</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>openFolder</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <comment type="line">//openURL(file.getAbsolutePath());  // handles char replacement, etc</comment>
    <expr_stmt><expr><call><name><name>PApplet</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <comment type="line">// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</comment>


  <comment type="line">// Some of these are supposedly constants in com.apple.eio.FileManager,</comment>
  <comment type="line">// however they don't seem to link properly from Eclipse.</comment>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>kDocumentsFolderType</name> <init>=
    <expr><operator>(</operator><literal type="char">'d'</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'o'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'c'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="char">'s'</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//static final int kPreferencesFolderType =</comment>
  <comment type="line">//  ('p' &lt;&lt; 24) | ('r' &lt;&lt; 16) | ('e' &lt;&lt; 8) | 'f';</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>kDomainLibraryFolderType</name> <init>=
    <expr><operator>(</operator><literal type="char">'d'</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'l'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'i'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="char">'b'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>short</name></type> <name>kUserDomain</name> <init>= <expr><operator>-</operator><literal type="number">32763</literal></expr></init></decl>;</decl_stmt>


  <comment type="line">// apple java extensions documentation</comment>
  <comment type="line">// http://developer.apple.com/documentation/Java/Reference/1.5.0</comment>
  <comment type="line">//   /appledoc/api/com/apple/eio/FileManager.html</comment>

  <comment type="line">// carbon folder constants</comment>
  <comment type="line">// http://developer.apple.com/documentation/Carbon/Reference</comment>
  <comment type="line">//   /Folder_Manager/folder_manager_ref/constant_6.html#/</comment>
  <comment type="line">//   /apple_ref/doc/uid/TP30000238/C006889</comment>

  <comment type="line">// additional information found int the local file:</comment>
  <comment type="line">// /System/Library/Frameworks/CoreServices.framework</comment>
  <comment type="line">//   /Versions/Current/Frameworks/CarbonCore.framework/Headers/</comment>


  <function><type><specifier>private</specifier> <name>String</name></type> <name>getLibraryFolder</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>FileManager</name><operator>.</operator><name>findFolder</name></name><argument_list>(<argument><expr><name>kUserDomain</name></expr></argument>, <argument><expr><name>kDomainLibraryFolderType</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>String</name></type> <name>getDocumentsFolder</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>FileManager</name><operator>.</operator><name>findFolder</name></name><argument_list>(<argument><expr><name>kUserDomain</name></expr></argument>, <argument><expr><name>kDocumentsFolderType</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>PConstants</name><operator>.</operator><name>platformNames</name><index>[<expr><name><name>PConstants</name><operator>.</operator><name>MACOSX</name></name></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></name></type> <name>filterPorts</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></name></type> <name>ports</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showAll</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>showAll</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>filterPorts</name></name><argument_list>(<argument><expr><name>ports</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BoardPort</name></argument>&gt;</argument_list></name></type> <name>filteredPorts</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>BoardPort</name></type> <name>port</name> <range>: <expr><name>ports</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>port</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"/dev/tty."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>filteredPorts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>filteredPorts</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>getOsArch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>osArch</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
