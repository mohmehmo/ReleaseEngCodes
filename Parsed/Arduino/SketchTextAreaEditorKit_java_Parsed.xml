<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/syntax/SketchTextAreaEditorKit.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>RSyntaxTextAreaEditorKit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>RTextArea</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rtextarea</name><operator>.</operator><name>RecordableTextAction</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>

<class><specifier>public</specifier> class <name>SketchTextAreaEditorKit</name> <super_list><extends>extends <super><name>RSyntaxTextAreaEditorKit</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>rtaDeleteNextWordAction</name> <init>= <expr><literal type="string">"RTA.DeleteNextWordAction"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>rtaDeleteLineToCursorAction</name> <init>= <expr><literal type="string">"RTA.DeleteLineToCursorAction"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>rtaIncreaseIndentAction</name> <init>= <expr><literal type="string">"RTA.IncreaseIndentAction"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Action</name><index>[]</index></name></type> <name>defaultActions</name> <init>= <expr><block>{
    <expr><operator>new</operator> <call><name>DeleteNextWordAction</name><argument_list>()</argument_list></call></expr>,
    <expr><operator>new</operator> <call><name>DeleteLineToCursorAction</name><argument_list>()</argument_list></call></expr>,
    <expr><operator>new</operator> <call><name>IncreaseIndentAction</name><argument_list>()</argument_list></call></expr>,
    <expr><operator>new</operator> <call><name>SelectWholeLineAction</name><argument_list>()</argument_list></call></expr>,
    <expr><operator>new</operator> <call><name>ToggleCommentAction</name><argument_list>()</argument_list></call></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>Action</name><index>[]</index></name></type> <name>getActions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>TextAction</name><operator>.</operator><name>augmentList</name></name><argument_list>(<argument><expr><call><name><name>super</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SketchTextAreaEditorKit</name><operator>.</operator><name>defaultActions</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>DeleteNextWordAction</name> <super_list><extends>extends <super><name>RecordableTextAction</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>DeleteNextWordAction</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>rtaDeleteNextWordAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformedImpl</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>RTextArea</name></type> <name>textArea</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>textArea</name><operator>.</operator><name>isEditable</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>textArea</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>getLookAndFeel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>provideErrorFeedback</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getSelectionStart</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>getNextWordStart</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>getLookAndFeel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>provideErrorFeedback</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getMacroID</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>rtaDeleteNextWordAction</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the starting offset to delete.  Exists so subclasses can
     * override.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>getNextWordStart</name><parameter_list>(<parameter><decl><type><name>RTextArea</name></type> <name>textArea</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>BadLocationException</name></expr></argument></throws> <block>{<block_content>
      <return>return <expr><call><name><name>Utilities</name><operator>.</operator><name>getNextWord</name></name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>DeleteLineToCursorAction</name> <super_list><extends>extends <super><name>RecordableTextAction</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>DeleteLineToCursorAction</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>rtaDeleteLineToCursorAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformedImpl</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>RTextArea</name></type> <name>textArea</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>textArea</name><operator>.</operator><name>isEditable</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>textArea</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>getLookAndFeel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>provideErrorFeedback</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <try>try <block>{<block_content>

        <comment type="line">// We use the elements instead of calling getLineOfOffset(),</comment>
        <comment type="line">// etc. to speed things up just a tad (i.e. micro-optimize).</comment>
        <decl_stmt><decl><type><name>Document</name></type> <name>document</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>caretPosition</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getCaretPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>map</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getDefaultRootElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>currentLineNum</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><name>caretPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>currentLineElement</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElement</name></name><argument_list>(<argument><expr><name>currentLineNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>currentLineStart</name> <init>= <expr><call><name><name>currentLineElement</name><operator>.</operator><name>getStartOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>caretPosition</name> <operator>&gt;</operator> <name>currentLineStart</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>currentLineStart</name></expr></argument>, <argument><expr><name>caretPosition</name> <operator>-</operator> <name>currentLineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>ble</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ble</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getMacroID</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>rtaDeleteLineToCursorAction</name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <comment type="block" format="javadoc">/**
   * Increases the indent of the selected or current line(s).
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>IncreaseIndentAction</name> <super_list><extends>extends <super><name><name>RSyntaxTextAreaEditorKit</name><operator>.</operator><name>InsertTabAction</name></name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>IncreaseIndentAction</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>rtaIncreaseIndentAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformedImpl</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>RTextArea</name></type> <name>textArea</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>caretPosition</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getCaretPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>noSelec</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getSelectedText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// if no selection, focus on first char.</comment>
      <if_stmt><if>if <condition>(<expr><name>noSelec</name></expr>)</condition> <block>{<block_content>
        <try>try <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getCaretLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>startOffset</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getLineStartOffset</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setCaretPosition</name></name><argument_list>(<argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></catch></try>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// Insert Tab or Spaces..</comment>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>actionPerformedImpl</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>noSelec</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>setCaretPosition</name></name><argument_list>(<argument><expr><name>caretPosition</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>textArea</name><operator>.</operator><name>getTabsEmulated</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>textArea</name><operator>.</operator><name>getTabSize</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Selects the line around the caret.
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>SelectWholeLineAction</name> <super_list><extends>extends <super><name>RecordableTextAction</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>SelectWholeLineAction</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>selectLineAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformedImpl</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>RTextArea</name></type> <name>textArea</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>Document</name></type> <name>document</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Element</name></type> <name>map</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getDefaultRootElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>currentLineNum</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><call><name><name>textArea</name><operator>.</operator><name>getCaretPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Element</name></type> <name>currentLineElement</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElement</name></name><argument_list>(<argument><expr><name>currentLineNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><call><name><name>currentLineElement</name><operator>.</operator><name>getStartOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentLineElement</name><operator>.</operator><name>getEndOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getMacroID</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name><name>DefaultEditorKit</name><operator>.</operator><name>selectLineAction</name></name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ToggleCommentAction</name> <super_list><extends>extends <super><name>RecordableTextAction</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>ToggleCommentAction</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>rstaToggleCommentAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformedImpl</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>RTextArea</name></type> <name>textArea</name></decl></parameter>)</parameter_list> <block>{<block_content>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>textArea</name><operator>.</operator><name>isEditable</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>textArea</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>getLookAndFeel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>provideErrorFeedback</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>RSyntaxDocument</name></type> <name>doc</name> <init>= <expr><operator>(</operator><name>RSyntaxDocument</name><operator>)</operator> <call><name><name>textArea</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Element</name></type> <name>map</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getDefaultRootElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Caret</name></type> <name>c</name> <init>= <expr><call><name><name>textArea</name><operator>.</operator><name>getCaret</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>dot</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getDot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mark</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getMark</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>line1</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>line2</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElementIndex</name></name><argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>Token</name></name></type> <name>t</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getTokenListForLine</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>languageIndex</name> <init>= <expr><ternary><condition><expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>t</name><operator>.</operator><name>getLanguageIndex</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>startEnd</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getLineCommentStartAndEnd</name></name><argument_list>(<argument><expr><name>languageIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>startEnd</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>getLookAndFeel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>provideErrorFeedback</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// Don't toggle comment on last line if there is no</comment>
      <comment type="line">// text selected on it.</comment>
      <if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>elem</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElement</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>dot</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>elem</name><operator>.</operator><name>getStartOffset</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>beginAtomicEdit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>add</name> <init>= <expr><call><name>getDoAdd</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>startEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>line1</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>line1</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>line1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>Element</name></type> <name>elem</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElement</name></name><argument_list>(<argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>handleToggleComment</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>, <argument><expr><name>startEnd</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadLocationException</name></type> <name>ble</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ble</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UIManager</name><operator>.</operator><name>getLookAndFeel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>provideErrorFeedback</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch> <finally>finally <block>{<block_content>
        <expr_stmt><expr><call><name><name>textArea</name><operator>.</operator><name>endAtomicEdit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></finally></try>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>getDoAdd</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startLine</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endLine</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>startEnd</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>BadLocationException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>boolean</name></type> <name>doAdd</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startLine</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>endLine</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>elem</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>getElement</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>getStartOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>t</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name><name>elem</name><operator>.</operator><name>getEndOffset</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>startEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
          <operator>(</operator><name><name>startEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>t</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name><name>startEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>doAdd</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <return>return <expr><name>doAdd</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleToggleComment</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elem</name></decl></parameter>, <parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>startEnd</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>add</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>BadLocationException</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>getStartOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>getEndOffset</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>add</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>insertString</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>startEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>startEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>insertString</name></name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <name><name>startEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>startEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name><name>elem</name><operator>.</operator><name>getEndOffset</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>start</name> <operator>+=</operator> <call><name><name>text</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name><name>startEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>startEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>startEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>startEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>end</name> <operator>-</operator> <name><name>startEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>-</operator> <name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getMacroID</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>rstaToggleCommentAction</name></expr>;</return>
    </block_content>}</block></function>

  }</block></class>

}</block></class>
</unit>
