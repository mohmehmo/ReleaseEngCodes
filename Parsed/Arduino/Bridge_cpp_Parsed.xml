<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/Bridge.cpp"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Bridge.h"</cpp:file></cpp:include>

<constructor><name><name>BridgeClass</name><operator>::</operator><name>BridgeClass</name></name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>&amp;</modifier></type><name>_stream</name></decl></parameter>)</parameter_list> <member_init_list>:
  <call><name>index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>stream</name><argument_list>(<argument><expr><name>_stream</name></expr></argument>)</argument_list></call>, <call><name>started</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>, <call><name>max_retries</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
  <comment type="line">// Empty</comment>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>BridgeClass</name><operator>::</operator><name>begin</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>started</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

  <comment type="line">// Wait for U-boot to finish startup</comment>
  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>dropAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

  <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// Bridge interrupt:</comment>
    <comment type="line">// - Ask the bridge to close itself</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>quit_cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>max_retries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transfer</name><argument_list>(<argument><expr><name>quit_cmd</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Bridge startup:</comment>
    <comment type="line">// - If the bridge is not running starts it safely</comment>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>CTRL_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Wait for OpenWRT message</comment>
    <comment type="line">// "Press enter to activate console"</comment>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="string">"run-bridge\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dropAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reset the brigde to check if it is running</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>max_retries</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>l</name> <init>= <expr><call><name>transfer</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>TRANSFER_TIMEOUT</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Bridge didn't start...</comment>
      <comment type="line">// Maybe the board is starting-up?</comment>

      <comment type="line">// Wait and retry</comment>
      <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

    <comment type="line">// Detect bridge version</comment>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>bridgeVersion</name> <operator>=</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal> <operator>+</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Bridge v1.0.0 didn't send any version info</comment>
      <expr_stmt><expr><name>bridgeVersion</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>max_retries</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClass</name><operator>::</operator><name>end</name></name><parameter_list>()</parameter_list> <block>{<block_content>

  <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// Bridge interrupt:</comment>
    <comment type="line">// - Ask the bridge to close itself</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>quit_cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'X'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>max_retries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transfer</name><argument_list>(<argument><expr><name>quit_cmd</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>CTRL_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="string">"cd \n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//expect a shell</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name>F</name><argument_list>(<argument><expr><literal type="string">"reset\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dropAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClass</name><operator>::</operator><name>put</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: do it in a more efficient way</comment>
  <decl_stmt><decl><type><name>String</name></type> <name>cmd</name> <init>= <expr><literal type="string">"D"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cmd</name> <operator>+=</operator> <name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cmd</name> <operator>+=</operator> <literal type="string">"\xFE"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>cmd</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transfer</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name><name>cmd</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cmd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>BridgeClass</name><operator>::</operator><name>get</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'d'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>l</name> <init>= <expr><call><name>transfer</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// Zero-terminate string</comment>
  <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARDUINO_ARCH_AVR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// AVR use an optimized implementation of CRC</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/crc16.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="line">// Generic implementation for non-AVR architectures</comment>
<function><type><name>uint16_t</name></type> <name>_crc_ccitt_update</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>data</name> <operator>^=</operator> <name>crc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>data</name> <operator>^=</operator> <name>data</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>data</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator> <operator>^</operator>
          <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator>
          <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name>data</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name><name>BridgeClass</name><operator>::</operator><name>crcUpdate</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>CRC</name> <operator>=</operator> <call><name>_crc_ccitt_update</name><argument_list>(<argument><expr><name>CRC</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClass</name><operator>::</operator><name>crcReset</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>CRC</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClass</name><operator>::</operator><name>crcWrite</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>CRC</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>CRC</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BridgeClass</name><operator>::</operator><name>crcCheck</name></name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>_CRC</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>CRC</name> <operator>==</operator> <name>_CRC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name><name>BridgeClass</name><operator>::</operator><name>transfer</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len1</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff2</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len2</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buff3</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len3</name></decl></parameter>,
                               <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rxbuff</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>rxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name> <init>= <expr><name>len1</name> <operator>+</operator> <name>len2</name> <operator>+</operator> <name>len3</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>retries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>( <init>;</init> <condition><expr><name>retries</name> <operator>&lt;</operator> <name>max_retries</name></expr>;</condition> <incr><expr><name>retries</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>dropAll</name><argument_list>()</argument_list></call></expr></incr> <comment type="block">/* Delay for retransmission */</comment>)</control> <block>{<block_content>
    <comment type="line">// Send packet</comment>
    <expr_stmt><expr><call><name>crcReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// Start of packet (0xFF)</comment>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// Message index</comment>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Message length (hi)</comment>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// Message length (lo)</comment>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name>len</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// Payload</comment>
      <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name><name>buff1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name><name>buff1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// Payload</comment>
      <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name><name>buff2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name><name>buff2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len3</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="line">// Payload</comment>
      <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name><name>buff3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name><name>buff3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>crcWrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                     <comment type="line">// CRC</comment>

    <comment type="line">// Wait for ACK in 200ms</comment>
    <if_stmt><if>if <condition>(<expr><call><name>timedRead</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>crcReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check packet index</comment>
    <if_stmt><if>if <condition>(<expr><call><name>timedRead</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Recv len</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>lh</name> <init>= <expr><call><name>timedRead</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lh</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name>lh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ll</name> <init>= <expr><call><name>timedRead</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ll</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>l</name> <init>= <expr><name>lh</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>l</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>+=</operator> <name>ll</name></expr>;</expr_stmt>

    <comment type="line">// Recv data</comment>
    <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <comment type="line">// Cut received data if rxbuffer is too small</comment>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>rxlen</name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>timedRead</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>rxbuff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>crcUpdate</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Check CRC</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>crc_hi</name> <init>= <expr><call><name>timedRead</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>crc_hi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>crc_lo</name> <init>= <expr><call><name>timedRead</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>crc_lo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>crcCheck</name><argument_list>(<argument><expr><operator>(</operator><name>crc_hi</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>crc_lo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="line">// Increase index</comment>
    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// Return bytes received</comment>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>rxlen</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>rxlen</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>l</name></expr>;</return>
  </block_content>}</block></for>

  <comment type="line">// Max retries exceeded</comment>
  <return>return <expr><name>TRANSFER_TIMEOUT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BridgeClass</name><operator>::</operator><name>timedRead</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_startMillis</name> <init>= <expr><call><name>millis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>millis</name><argument_list>()</argument_list></call> <operator>-</operator> <name>_startMillis</name> <operator>&lt;</operator> <name>timeout</name></expr>)</condition>;</do>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>     <comment type="line">// -1 indicates timeout</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BridgeClass</name><operator>::</operator><name>dropAll</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><call><name><name>stream</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARDUINO_ARCH_SAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Reset.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARDUINO_ARCH_SAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>checkForRemoteSketchUpdate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>pin</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// The host force pin LOW to signal that a new sketch is coming</comment>
  <expr_stmt><expr><call><name>pinMode</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><name>INPUT_PULLUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>digitalRead</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LOW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>initiateReset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block type="pseudo"><block_content>
      <empty_stmt>;</empty_stmt></block_content></block></while> <comment type="line">// Wait for reset to SAM-BA</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Restore in standard state</comment>
  <expr_stmt><expr><call><name>pinMode</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><name>INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type> <name>checkForRemoteSketchUpdate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type></decl></parameter> <comment type="block">/* pin */</comment>)</parameter_list> <block>{<block_content>
  <comment type="line">// Empty, bootloader is enough.</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Bridge instance</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SERIAL_PORT_LINUXBRIDGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>SerialBridgeClass</name></type> <name>Bridge</name><parameter_list>(<parameter><decl><type><name>SERIAL_PORT_LINUXBRIDGE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SERIAL_PORT_HARDWARE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function_decl><type><name>SerialBridgeClass</name></type> <name>Bridge</name><parameter_list>(<parameter><decl><type><name>SERIAL_PORT_HARDWARE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SERIAL_PORT_HARDWARE_OPEN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function_decl><type><name>SerialBridgeClass</name></type> <name>Bridge</name><parameter_list>(<parameter><decl><type><name>SERIAL_PORT_HARDWARE_OPEN</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AVR_ATmega32U4__</name></expr></argument>)</argument_list></call></expr></cpp:elif> <comment type="line">// Legacy fallback</comment>
<comment type="line">// Leonardo variants (where HardwareSerial is Serial1)</comment>
<function_decl><type><name>SerialBridgeClass</name></type> <name>Bridge</name><parameter_list>(<parameter><decl><type><name>Serial1</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>SerialBridgeClass</name></type> <name>Bridge</name><parameter_list>(<parameter><decl><type><name>Serial</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
