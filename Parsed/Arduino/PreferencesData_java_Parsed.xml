<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/PreferencesData.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>i18n</name><operator>.</operator><name>Languages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesHelper</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PApplet</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>legacy</name><operator>.</operator><name>PConstants</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>MissingResourceException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>


<class><specifier>public</specifier> class <name>PreferencesData</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFS_FILE</name> <init>= <expr><literal type="string">"preferences.txt"</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// data model</comment>

  <decl_stmt><decl><type><specifier>static</specifier> <name>PreferencesMap</name></type> <name>defaults</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>PreferencesMap</name></type> <name>prefs</name> <init>= <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>File</name></type> <name>preferencesFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>boolean</name></type> <name>doSave</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fixSettingsLocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>preferencesFile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>preferencesFile</name> <operator>=</operator> <call><name><name>BaseNoGui</name><operator>.</operator><name>getSettingsFile</name></name><argument_list>(<argument><expr><name>PREFS_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fixPrefsFilePermissions</name><argument_list>(<argument><expr><name>preferencesFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">//ignore</comment>
    </block_content>}</block></catch></try>

    <comment type="line">// start by loading the defaults, in case something</comment>
    <comment type="line">// important was deleted from the user prefs</comment>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getContentFile</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PREFS_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>showError</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not read default settings.\n"</literal> <operator>+</operator>
        <literal type="string">"You'll need to reinstall Arduino."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <comment type="line">// set some runtime constants (not saved on preferences file)</comment>
    <decl_stmt><decl><type><name>File</name></type> <name>hardwareFolder</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getHardwareFolder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"runtime.ide.path"</literal></expr></argument>, <argument><expr><call><name><name>hardwareFolder</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"runtime.ide.version"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>BaseNoGui</name><operator>.</operator><name>REVISION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// clone the hash table</comment>
    <expr_stmt><expr><name>defaults</name> <operator>=</operator> <operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>preferencesFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// load the previous preferences file</comment>
      <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>preferencesFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>showError</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error reading preferences"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error reading the preferences file. "</literal>
              <operator>+</operator> <literal type="string">"Please delete (or move)\n"</literal>
              <operator>+</operator> <literal type="string">"{0} and restart Arduino."</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>preferencesFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// load the I18n module for internationalization</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>lang</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"editor.languages.current"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lang</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>Languages</name><operator>.</operator><name>have</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lang</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><literal type="string">"editor.languages.current"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>I18n</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MissingResourceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>I18n</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="string">"en"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><literal type="string">"editor.languages.current"</literal></expr></argument>, <argument><expr><literal type="string">"en"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>

    <comment type="line">// set some other runtime constants (not saved on preferences file)</comment>
    <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><literal type="string">"runtime.os"</literal></expr></argument>, <argument><expr><name><name>PConstants</name><operator>.</operator><name>platformNames</name><index>[<expr><name><name>PApplet</name><operator>.</operator><name>platform</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fixPreferences</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getPreferencesFile</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>preferencesFile</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>fixPreferences</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>baud</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"serial.debug_rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="string">"14400"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>baud</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"28800"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>baud</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><literal type="string">"serial.debug_rate"</literal></expr></argument>, <argument><expr><literal type="string">"9600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>protected</specifier> <name>void</name></type> <name>save</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>doSave</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getBoolean</name><argument_list>(<argument><expr><literal type="string">"preferences.readonly"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// on startup, don't worry about it</comment>
    <comment type="line">// this is trying to update the prefs for who is open</comment>
    <comment type="line">// before Preferences.init() has been called.</comment>
    <if_stmt><if>if <condition>(<expr><name>preferencesFile</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// Fix for 0163 to properly use Unicode when writing preferences.txt</comment>
    <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>writer</name> <operator>=</operator> <call><name><name>PApplet</name><operator>.</operator><name>createWriter</name></name><argument_list>(<argument><expr><name>preferencesFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>keys</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"runtime."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Could not write preferences file: {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getPlatform</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fixPrefsFilePermissions</name><argument_list>(<argument><expr><name>preferencesFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">//ignore</comment>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <comment type="line">// .................................................................</comment>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>value</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>defaultValue</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getNonEmpty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><literal type="string">""</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>defaultValue</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>has</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>String</name></type> <name>getDefault</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>defaults</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>unset</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>has</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>defaultValue</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>getInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>getInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>has</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getInteger</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>defaultValue</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>float</name></type> <name>getFloat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>has</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>getFloat</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>defaultValue</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>float</name></type> <name>getFloat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// get a copy of the Preferences</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>PreferencesMap</name></type> <name>getMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>PreferencesMap</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>removeAllKeysWithPrefix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>keys</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>keys</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
  </block_content>}</block></function>

  <comment type="line">// Decide wether changed preferences will be saved. When value is</comment>
  <comment type="line">// false, Preferences.save becomes a no-op.</comment>
  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>void</name></type> <name>setDoSave</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>doSave</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <specifier>public</specifier> <name>Font</name></type> <name>getFont</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><call><name><name>PreferencesHelper</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>defaults</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>PreferencesHelper</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>font</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCollection</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <comment type="line">// Remove empty strings from the collection</comment>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCollection</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>joining</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>areInsecurePackagesAllowed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>ALLOW_INSECURE_PACKAGES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PREF_CONTRIBUTIONS_TRUST_ALL</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
