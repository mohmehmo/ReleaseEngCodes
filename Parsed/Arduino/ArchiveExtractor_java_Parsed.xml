<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/utils/ArchiveExtractor.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2014 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>archivers</name><operator>.</operator><name>ArchiveEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>archivers</name><operator>.</operator><name>ArchiveInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>archivers</name><operator>.</operator><name>tar</name><operator>.</operator><name>TarArchiveEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>archivers</name><operator>.</operator><name>tar</name><operator>.</operator><name>TarArchiveInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>archivers</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipArchiveInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>compressors</name><operator>.</operator><name>bzip2</name><operator>.</operator><name>BZip2CompressorInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>compressors</name><operator>.</operator><name>gzip</name><operator>.</operator><name>GzipCompressorInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>compressors</name><operator>.</operator><name>xz</name><operator>.</operator><name>XZCompressorInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>compress</name><operator>.</operator><name>utils</name><operator>.</operator><name>IOUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Platform</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> class <name>ArchiveExtractor</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Platform</name></type> <name>platform</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ArchiveExtractor</name><parameter_list>(<parameter><decl><type><name>Platform</name></type> <name>platform</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <assert>assert <expr><name>platform</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>platform</name></name> <operator>=</operator> <name>platform</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Extract &lt;b&gt;source&lt;/b&gt; into &lt;b&gt;destFolder&lt;/b&gt;. &lt;b&gt;source&lt;/b&gt; file archive
   * format is autodetected from file extension.
   *
   * @param archiveFile
   * @param destFolder
   * @throws IOException
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>extract</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>archiveFile</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>destFolder</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>, <argument><expr><name>destFolder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Extract &lt;b&gt;source&lt;/b&gt; into &lt;b&gt;destFolder&lt;/b&gt;. &lt;b&gt;source&lt;/b&gt; file archive
   * format is autodetected from file extension.
   *
   * @param archiveFile Archive file to extract
   * @param destFolder  Destination folder
   * @param stripPath   Number of path elements to strip from the paths contained in the
   *                    archived files
   * @throws IOException
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>extract</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>archiveFile</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>destFolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stripPath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>extract</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>, <argument><expr><name>destFolder</name></expr></argument>, <argument><expr><name>stripPath</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>extract</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>archiveFile</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>destFolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stripPath</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>overwrite</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// Folders timestamps must be set at the end of archive extraction</comment>
    <comment type="line">// (because creating a file in a folder alters the folder's timestamp)</comment>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>foldersTimestamps</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ArchiveInputStream</name></type> <name>in</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>

      <comment type="line">// Create an ArchiveInputStream with the correct archiving algorithm</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>archiveFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"tar.bz2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <operator>new</operator> <call><name>TarArchiveInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BZip2CompressorInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>archiveFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"zip"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <operator>new</operator> <call><name>ZipArchiveInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>archiveFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"tar.gz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <operator>new</operator> <call><name>TarArchiveInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GzipCompressorInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>archiveFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"tar.xz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <operator>new</operator> <call><name>TarArchiveInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>XZCompressorInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>archiveFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><literal type="string">"tar"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>in</name> <operator>=</operator> <operator>new</operator> <call><name>TarArchiveInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Archive format not supported."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>pathPrefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>File</name></argument>&gt;</argument_list></name></type> <name>hardLinks</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>hardLinksMode</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>symLinks</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>symLinksModifiedTimes</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Cycle through all the archive entries</comment>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ArchiveEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>getNextEntry</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Extract entry info</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isDirectory</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isLink</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSymLink</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>linkName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>mode</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>modifiedTime</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getLastModifiedDate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <block>{<block_content>
          <comment type="line">// Skip MacOSX metadata</comment>
          <comment type="line">// http://superuser.com/questions/61185/why-do-i-get-files-like-foo-in-my-tarball-on-os-x</comment>
          <decl_stmt><decl><type><name>int</name></type> <name>slash</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"._"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"._"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block>

        <comment type="line">// Skip git metadata</comment>
        <comment type="line">// http://www.unix.com/unix-for-dummies-questions-and-answers/124958-file-pax_global_header-means-what.html</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"pax_global_header"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>instanceof</operator> <name>TarArchiveEntry</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>TarArchiveEntry</name></type> <name>tarEntry</name> <init>= <expr><operator>(</operator><name>TarArchiveEntry</name><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name><name>tarEntry</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>isLink</name> <operator>=</operator> <call><name><name>tarEntry</name><operator>.</operator><name>isLink</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>isSymLink</name> <operator>=</operator> <call><name><name>tarEntry</name><operator>.</operator><name>isSymbolicLink</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>linkName</name> <operator>=</operator> <call><name><name>tarEntry</name><operator>.</operator><name>getLinkName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// On the first archive entry, if requested, detect the common path</comment>
        <comment type="line">// prefix to be stripped from filenames</comment>
        <if_stmt><if>if <condition>(<expr><name>stripPath</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>pathPrefix</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>slash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <while>while <condition>(<expr><name>stripPath</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
              <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid archive: it must contain a single root folder"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>slash</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>stripPath</name><operator>--</operator></expr>;</expr_stmt>
          </block_content>}</block></while>
          <expr_stmt><expr><name>pathPrefix</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Strip the common path prefix when requested</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>pathPrefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid archive: it must contain a single root folder while file "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" is outside "</literal> <operator>+</operator> <name>pathPrefix</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>pathPrefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>outputFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>destFolder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>outputLinkedFile</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isLink</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>linkName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>pathPrefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid archive: it must contain a single root folder while file "</literal> <operator>+</operator> <name>linkName</name> <operator>+</operator> <literal type="string">" is outside "</literal> <operator>+</operator> <name>pathPrefix</name></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>linkName</name> <operator>=</operator> <call><name><name>linkName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>pathPrefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>outputLinkedFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>destFolder</name></expr></argument>, <argument><expr><name>linkName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>isSymLink</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// Symbolic links are referenced with relative paths</comment>
          <expr_stmt><expr><name>outputLinkedFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>linkName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>outputLinkedFile</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: file {0} links to an absolute path {1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>outputLinkedFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Safety check</comment>
        <if_stmt><if>if <condition>(<expr><name>isDirectory</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>outputFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>overwrite</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Can't create folder "</literal> <operator>+</operator> <name>outputFile</name> <operator>+</operator> <literal type="string">", a file with the same name exists!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">// - isLink</comment>
          <comment type="line">// - isSymLink</comment>
          <comment type="line">// - anything else</comment>
          <if_stmt><if>if <condition>(<expr><call><name><name>outputFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>overwrite</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Can't extract file "</literal> <operator>+</operator> <name>outputFile</name> <operator>+</operator> <literal type="string">", file already exists!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Extract the entry</comment>
        <if_stmt><if>if <condition>(<expr><name>isDirectory</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>outputFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>outputFile</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Could not create folder: "</literal> <operator>+</operator> <name>outputFile</name></expr></argument>)</argument_list></call></expr>;</throw>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>foldersTimestamps</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>modifiedTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>isLink</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>hardLinks</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>outputLinkedFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>hardLinksMode</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>isSymLink</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>symLinks</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>linkName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>symLinksModifiedTimes</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>modifiedTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">// Create the containing folder if not exists</comment>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>outputFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>outputFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mkdirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>copyStreamToFile</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>outputFile</name><operator>.</operator><name>setLastModified</name></name><argument_list>(<argument><expr><name>modifiedTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Set file/folder permission</comment>
        <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isSymLink</name> <operator>&amp;&amp;</operator> <call><name><name>outputFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>platform</name><operator>.</operator><name>chmod</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>

      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>File</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>hardLinks</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>overwrite</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>platform</name><operator>.</operator><name>link</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>mode</name> <init>= <expr><call><name><name>hardLinksMode</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>platform</name><operator>.</operator><name>chmod</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>symLinks</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>overwrite</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>platform</name><operator>.</operator><name>symlink</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLastModified</name><argument_list>(<argument><expr><call><name><name>symLinksModifiedTimes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

    <comment type="line">// Set folders timestamps</comment>
    <for>for <control>(<init><decl><type><name>File</name></type> <name>folder</name> <range>: <expr><call><name><name>foldersTimestamps</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>setLastModified</name></name><argument_list>(<argument><expr><call><name><name>foldersTimestamps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyStreamToFile</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>outputFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><name>fos</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// if size is not available, copy until EOF...</comment>
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>byte</name></type> <name><name>buffer</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>length</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// ...else copy just the needed amount of bytes</comment>
      <decl_stmt><decl><type><name>byte</name></type> <name><name>buffer</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Error while extracting file "</literal> <operator>+</operator> <call><name><name>outputFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

}</block></class>
</unit>
