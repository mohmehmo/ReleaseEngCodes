<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/Arduino/app/testdata/libraries/Bridge_1.7.0/Bridge/src/FileIO.cpp"><comment type="block">/*
  Copyright (c) 2013 Arduino LLC. All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;FileIO.h&gt;</cpp:file></cpp:include>

<namespace>namespace <name>BridgeLib</name> <block>{

<constructor><name><name>File</name><operator>::</operator><name>File</name></name><parameter_list>(<parameter><decl><type><name>BridgeClass</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>bridge</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>, <call><name>mode</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
  <comment type="line">// Empty</comment>
</block_content>}</block></constructor>

<constructor><name><name>File</name><operator>::</operator><name>File</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_filename</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>_mode</name></decl></parameter>, <parameter><decl><type><name>BridgeClass</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>bridge</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>, <call><name>mode</name><argument_list>(<argument><expr><name>_mode</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
  <expr_stmt><expr><name>filename</name> <operator>=</operator> <name>_filename</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>modes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'a'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'F'</literal></expr>, <expr><name><name>modes</name><index>[<expr><name>mode</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>dirPosition</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name><name>filename</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// res[0] contains error code</comment>
    <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> <comment type="line">// In case of error keep the file closed</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>buffered</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function type="operator"><name><name>File</name><operator>::</operator><name>operator <name>bool</name></name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>mode</name> <operator>!=</operator> <literal type="number">255</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<destructor><name><name>File</name><operator>::</operator><name>~File</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>size_t</name></type> <name><name>File</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>File</name><operator>::</operator><name>write</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// res[0] contains error code</comment>
    <return>return <expr><operator>-</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>read</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>buffered</name><operator>--</operator></expr>;</expr_stmt>
    <return>return <expr><name><name>buffer</name><index>[<expr><name>readPos</name><operator>++</operator></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>peek</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if> <comment type="line">// no chars available</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name><name>buffer</name><index>[<expr><name>readPos</name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>boolean</name></type> <name><name>File</name><operator>::</operator><name>seek</name></name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="char">'s'</literal></expr>,
    <expr><name>handle</name></expr>,
    <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>position</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></cast></expr>,
    <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>position</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></cast></expr>,
    <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>position</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></cast></expr>,
    <expr>static_cast<operator>&lt;</operator><name>uint8_t</name><operator>&gt;</operator><operator>(</operator><name>position</name><operator>)</operator></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// If seek succeed then flush buffers</comment>
    <expr_stmt><expr><name>buffered</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name><name>File</name><operator>::</operator><name>position</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//err = res[0]; // res[0] contains error code</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pos</name>  <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></cast> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pos</name> <operator>+=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></cast> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pos</name> <operator>+=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></cast> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pos</name> <operator>+=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>res</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
  <return>return <expr><name>pos</name> <operator>-</operator> <name>buffered</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>File</name><operator>::</operator><name>doBuffer</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// If there are already char in buffer exit</comment>
  <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// Try to buffer up to BUFFER_SIZE characters</comment>
  <expr_stmt><expr><name>readPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'G'</literal></expr>, <expr><name>handle</name></expr>, <expr><name>BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>readed</name> <init>= <expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">//err = buff[0]; // First byte is error code</comment>
  <if_stmt><if>if <condition>(<expr><name>readed</name> <operator>==</operator> <name><name>BridgeClass</name><operator>::</operator><name>TRANSFER_TIMEOUT</name></name> <operator>||</operator> <name>readed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// transfer failed to retrieve any data</comment>
    <expr_stmt><expr><name>buffered</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// transfer retrieved at least one byte of data so skip the error code character</comment>
    <expr_stmt><expr><name>readPos</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffered</name> <operator>=</operator> <name>readed</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>available</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// Look if there is new data available</comment>
  <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>buffered</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>File</name><operator>::</operator><name>flush</name></name><parameter_list>()</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>File</name><operator>::</operator><name>read</name></name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>nbyte</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>nbyte</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>buffered</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>readPos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffered</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name><name>File</name><operator>::</operator><name>size</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name><name>bridge</name><operator>.</operator><name>getBridgeVersion</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">101</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'t'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//err = res[0]; // First byte is error code</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>res</name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>File</name><operator>::</operator><name>close</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'f'</literal></expr>, <expr><name>handle</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>File</name><operator>::</operator><name>name</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <return>return <expr><call><name><name>filename</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>boolean</name></type> <name><name>File</name><operator>::</operator><name>isDirectory</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cmd</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'i'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>transfer</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name><name>filename</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>File</name></type> <name><name>File</name><operator>::</operator><name>openNextFile</name></name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Process</name></type> <name>awk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>String</name></type> <name>command</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>String</name></type> <name>filepath</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dirPosition</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>File</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>command</name> <operator>=</operator> <literal type="string">"ls "</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>command</name> <operator>+=</operator> <name>filename</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>command</name> <operator>+=</operator> <literal type="string">" | awk 'NR=="</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>command</name> <operator>+=</operator> <name>dirPosition</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>command</name> <operator>+=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>awk</name><operator>.</operator><name>runShellCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name><name>awk</name><operator>.</operator><name>running</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

  <expr_stmt><expr><name>command</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name><name>awk</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>awk</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>command</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>File</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>dirPosition</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>filepath</name> <operator>=</operator> <name>filename</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>command</name></expr>;</expr_stmt>
  <return>return <expr><call><name>File</name><argument_list>(<argument><expr><call><name><name>filepath</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>File</name><operator>::</operator><name>rewindDirectory</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>dirPosition</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>boolean</name></type> <name><name>FileSystemClass</name><operator>::</operator><name>begin</name></name><parameter_list>()</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>File</name></type> <name><name>FileSystemClass</name><operator>::</operator><name>open</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>boolean</name></type> <name><name>FileSystemClass</name><operator>::</operator><name>exists</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Process</name></type> <name>ls</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>ls</name><operator>.</operator><name>begin</name></name><argument_list>(<argument><expr><literal type="string">"ls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ls</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>ls</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>boolean</name></type> <name><name>FileSystemClass</name><operator>::</operator><name>mkdir</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Process</name></type> <name>mk</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mk</name><operator>.</operator><name>begin</name></name><argument_list>(<argument><expr><literal type="string">"mkdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mk</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mk</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>mk</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>boolean</name></type> <name><name>FileSystemClass</name><operator>::</operator><name>remove</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Process</name></type> <name>rm</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>rm</name><operator>.</operator><name>begin</name></name><argument_list>(<argument><expr><literal type="string">"rm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>rm</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>rm</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>boolean</name></type> <name><name>FileSystemClass</name><operator>::</operator><name>rmdir</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Process</name></type> <name>rm</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>rm</name><operator>.</operator><name>begin</name></name><argument_list>(<argument><expr><literal type="string">"rmdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>rm</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>rm</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>FileSystemClass</name></type> <name>FileSystem</name></decl>;</decl_stmt>

}</block></namespace>
</unit>
