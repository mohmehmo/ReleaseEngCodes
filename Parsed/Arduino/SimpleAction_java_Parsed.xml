<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/helpers/SimpleAction.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Matthijs Kooijman &lt;matthijs@stdin.nl&gt;
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>AbstractAction</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>KeyStroke</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Class to easily define instances of the Swing Action interface.
 *
 * When using AbstractAction, you have to create a subclass that implements the
 * actionPerformed() method, and sets attributes in the constructor, which gets
 * verbose quickly. This class implements actionPerformed for you, and forwards
 * it to the ActionListener passed to the constructor (intended to be a lambda
 * expression). Additional Action attributes can be set by passing constructor
 * arguments.
 *
 * The name of this class refers to the fact that it's simple to create an
 * action using this class, but perhaps a better name can be found for it.
 *
 * @see javax.swing.Action
 */</comment>
<class><specifier>public</specifier> class <name>SimpleAction</name> <super_list><extends>extends <super><name>AbstractAction</name></super></extends></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>ActionListener</name></type> <name>listener</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Version of ActionListener that does not take an ActionEvent as an argument
   * This can be used when you do not care about the event itself, just that it
   * happened, typically for passing a argumentless lambda or method reference
   * to the SimpleAction constructor.
   */</comment>
  <interface><specifier>public</specifier> interface <name>AnonymousActionListener</name> <block>{
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AnonymousActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>KeyStroke</name></type> <name>accelerator</name></decl></parameter>,
                      <parameter><decl><type><name>ActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>accelerator</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>KeyStroke</name></type> <name>accelerator</name></decl></parameter>,
                      <parameter><decl><type><name>AnonymousActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>accelerator</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>,
                      <parameter><decl><type><name>ActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>,
                      <parameter><decl><type><name>AnonymousActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>KeyStroke</name></type> <name>accelerator</name></decl></parameter>,
                      <parameter><decl><type><name>AnonymousActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>accelerator</name></expr></argument>,
        <argument><expr><lambda><parameter_list>(<parameter><decl><name>ActionEvent</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>listener</name><operator>.</operator><name>actionPerformed</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>SimpleAction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>KeyStroke</name></type> <name>accelerator</name></decl></parameter>,
                      <parameter><decl><type><name>ActionListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><name>SHORT_DESCRIPTION</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><name>ACCELERATOR_KEY</name></expr></argument>, <argument><expr><name>accelerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>actionPerformed</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
