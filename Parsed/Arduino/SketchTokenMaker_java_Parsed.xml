<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/syntax/SketchTokenMaker.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Ricardo JL Rufino (ricardo@criativasoft.com.br)
 * Copyright 2015 Arduino LLC
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>syntax</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>TokenTypes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>fife</name><operator>.</operator><name>ui</name><operator>.</operator><name>rsyntaxtextarea</name><operator>.</operator><name>modes</name><operator>.</operator><name>CPlusPlusTokenMaker</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Controls the syntax highlighting of {@link SketchTextArea} based on the {@link PdeKeywords}
 *
 * @author Ricardo JL Rufino (ricardo@criativasoft.com.br)
 * @date 20/04/2015
 * @since 1.6.4
 */</comment>
<class><specifier>public</specifier> class <name>SketchTokenMaker</name> <super_list><extends>extends <super><name>CPlusPlusTokenMaker</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>COMMENT_TOKEN_TYPES</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_DOCUMENTATION</name></name></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_EOL</name></name></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_KEYWORD</name></name></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_MARKUP</name></name></expr></argument>, <argument><expr><name><name>TokenTypes</name><operator>.</operator><name>COMMENT_MULTILINE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PdeKeywords</name></type> <name>pdeKeywords</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SketchTokenMaker</name><parameter_list>(<parameter><decl><type><name>PdeKeywords</name></type> <name>pdeKeywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pdeKeywords</name></name> <operator>=</operator> <name>pdeKeywords</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>addToken</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startOffset</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hyperlink</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addToken</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>tokenType</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><name>hyperlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>COMMENT_TOKEN_TYPES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addToken</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>tokenType</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><name>hyperlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// This assumes all of your extra tokens would normally be scanned as IDENTIFIER.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>newType</name> <init>= <expr><call><name><name>pdeKeywords</name><operator>.</operator><name>getTokenType</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>newType</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tokenType</name> <operator>=</operator> <name>newType</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addToken</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>tokenType</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><name>hyperlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
</unit>
