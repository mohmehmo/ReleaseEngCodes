<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/helpers/BoardCloudResolver.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>network</name><operator>.</operator><name>HttpConnectionManager</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>LogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetBoard</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetPackage</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>debug</name><operator>.</operator><name>TargetPlatform</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> class <name>BoardCloudResolver</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LogManager</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BoardCloudResolver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>getBoardBy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>vid</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// this method is less useful in Windows &lt; WIN10 since you need drivers to be already installed</comment>
    <decl_stmt><decl><type><name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>FAIL_ON_UNKNOWN_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name>URL</name></type> <name>jsonUrl</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"https://builder.arduino.cc/builder/v1/boards/0x%s/0x%s"</literal></expr></argument>, <argument><expr><name>vid</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>HttpURLConnection</name></type> <name>httpConnection</name> <init>= <expr><operator>new</operator> <call><name>HttpConnectionManager</name><argument_list>(<argument><expr><name>jsonUrl</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>makeConnection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name><name>httpConnection</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">404</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Fail to get the Vid Pid information from the builder response code={}"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>httpConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BoardCloudAPIid</name></type> <name>board</name> <init>= <expr><call><name><name>mapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>BoardCloudAPIid</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Board info from the cloud {}"</literal></expr></argument>, <argument><expr><name>board</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Launch a popup with a link to boardmanager#board.getName()</comment>
      <comment type="line">// replace spaces with &amp;</comment>
      <decl_stmt><decl><type><name>String</name></type> <name>realBoardName</name> <init>= <expr><call><name><name>board</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"\\(.*?\\)"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>boardNameReplaced</name> <init>= <expr><call><name><name>realBoardName</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0}Install this package{1} to use your {2} board"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"&lt;a href=\"http://boardsmanager/all#"</literal> <operator>+</operator> <name>boardNameReplaced</name> <operator>+</operator> <literal type="string">"\"&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;/a&gt;"</literal></expr></argument>, <argument><expr><name>realBoardName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>BaseNoGui</name><operator>.</operator><name>setBoardManagerLink</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// No connection no problem, fail silently</comment>
      <comment type="line">//e.printStackTrace();</comment>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error during get board information by vid, pid"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>resolveDeviceByBoardID</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TargetPackage</name></argument>&gt;</argument_list></name></type> <name>packages</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>boardId</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <assert>assert <expr><name>packages</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    <assert>assert <expr><name>boardId</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    <for>for <control>(<init><decl><type><name>TargetPackage</name></type> <name>targetPackage</name> <range>: <expr><call><name><name>packages</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>TargetPlatform</name></type> <name>targetPlatform</name> <range>: <expr><call><name><name>targetPackage</name><operator>.</operator><name>getPlatforms</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TargetBoard</name></type> <name>board</name> <range>: <expr><call><name><name>targetPlatform</name><operator>.</operator><name>getBoards</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>boardId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>board</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>board</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>BoardCloudAPIid</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fqbn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>architecture</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>id</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFqbn</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>fqbn</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFqbn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fqbn</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fqbn</name></name> <operator>=</operator> <name>fqbn</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getArchitecture</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>architecture</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArchitecture</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>architecture</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>id</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><literal type="string">"BoardCloudAPIid{"</literal> <operator>+</operator>
        <literal type="string">"name='"</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", fqbn='"</literal> <operator>+</operator> <name>fqbn</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", architecture='"</literal> <operator>+</operator> <name>architecture</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="string">", id='"</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
        <literal type="char">'}'</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

}</block></class>
</unit>
