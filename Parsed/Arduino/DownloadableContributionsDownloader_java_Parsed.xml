<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/contributions/DownloadableContributionsDownloader.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2014 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>FileHash</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>MultiStepProgress</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>Progress</name></name>;</import>
<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>utils</name><operator>.</operator><name>network</name><operator>.</operator><name>FileDownloader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FilenameUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>LogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>logging</name><operator>.</operator><name>log4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>BaseNoGui</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>PreferencesData</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> class <name>DownloadableContributionsDownloader</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>log</name> <init>= <expr><call><name><name>LogManager</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DownloadableContributionsDownloader</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>stagingFolder</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>DownloadableContributionsDownloader</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>_stagingFolder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>stagingFolder</name> <operator>=</operator> <name>_stagingFolder</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>File</name></type> <name>download</name><parameter_list>(<parameter><decl><type><name>DownloadableContribution</name></type> <name>contribution</name></decl></parameter>, <parameter><decl><type><name>Progress</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>statusText</name></decl></parameter>, <parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowCache</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>download</name><argument_list>(<argument><expr><name>contribution</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>statusText</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>allowCache</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>File</name></type> <name>download</name><parameter_list>(<parameter><decl><type><name>DownloadableContribution</name></type> <name>contribution</name></decl></parameter>, <parameter><decl><type><name>Progress</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>statusText</name></decl></parameter>, <parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>noResume</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowCache</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>contribution</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Path</name></type> <name>outputFile</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>stagingFolder</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>contribution</name><operator>.</operator><name>getArchiveFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Ensure the existence of staging folder</comment>
    <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>createDirectories</name></name><argument_list>(<argument><expr><call><name><name>stagingFolder</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasChecksum</name><argument_list>(<argument><expr><name>contribution</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>downloaded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// Need to download or resume downloading?</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Files</name><operator>.</operator><name>isRegularFile</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name><name>LinkOption</name><operator>.</operator><name>NOFOLLOW_LINKS</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name><name>Files</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>contribution</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>download</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name><name>outputFile</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>statusText</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><name>noResume</name></expr></argument>, <argument><expr><name>allowCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>downloaded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// Test checksum</comment>
      <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Verifying archive integrity..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>progressListener</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>hasChecksum</name><argument_list>(<argument><expr><name>contribution</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>checksum</name> <init>= <expr><call><name><name>contribution</name><operator>.</operator><name>getChecksum</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>algo</name> <init>= <expr><call><name><name>checksum</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>crc</name> <init>= <expr><call><name><name>FileHash</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>outputFile</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>crc</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <comment type="line">// If the file has not been downloaded it may be a leftover of</comment>
          <comment type="line">// a previous download that failed. In this case delete it and</comment>
          <comment type="line">// try to download it again.</comment>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>downloaded</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>downloaded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// Redundant to avoid loops in case delete fails</comment>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <comment type="line">// Otherwise throw the error.</comment>
          <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"CRC doesn't match, file is corrupted. It may be a temporary problem, please retry later."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// Download completed successfully</comment>
      <break>break;</break>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name><name>contribution</name><operator>.</operator><name>setDownloaded</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contribution</name><operator>.</operator><name>setDownloadedFile</name></name><argument_list>(<argument><expr><call><name><name>outputFile</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>outputFile</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasChecksum</name><parameter_list>(<parameter><decl><type><name>DownloadableContribution</name></type> <name>contribution</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>checksum</name> <init>= <expr><call><name><name>contribution</name><operator>.</operator><name>getChecksum</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>checksum</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>algo</name> <init>= <expr><call><name><name>checksum</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>algo</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>algo</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>download</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>tmpFile</name></decl></parameter>, <parameter><decl><type><name>Progress</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>statusText</name></decl></parameter>, <parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowCache</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>download</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>tmpFile</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>statusText</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>allowCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>download</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>tmpFile</name></decl></parameter>, <parameter><decl><type><name>Progress</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>statusText</name></decl></parameter>, <parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>noResume</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowCache</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FileDownloader</name></type> <name>downloader</name> <init>= <expr><operator>new</operator> <call><name>FileDownloader</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>tmpFile</name></expr></argument>, <argument><expr><name>allowCache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>downloader</name><operator>.</operator><name>addObserver</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>o</name></decl></parameter>, <parameter><decl><name>arg</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>FileDownloader</name></type> <name>me</name> <init>= <expr><operator>(</operator><name>FileDownloader</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>me</name><operator>.</operator><name>getDownloadSize</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>downloaded</name> <init>= <expr><operator>(</operator><call><name><name>me</name><operator>.</operator><name>getInitialSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>me</name><operator>.</operator><name>getDownloaded</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><operator>(</operator><call><name><name>me</name><operator>.</operator><name>getInitialSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>me</name><operator>.</operator><name>getDownloadSize</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Downloaded {0}kb of {1}kb."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>downloaded</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><name>statusText</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>progress</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name><name>me</name><operator>.</operator><name>getProgress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>progressListener</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>downloader</name><operator>.</operator><name>download</name></name><argument_list>(<argument><expr><name>noResume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>downloader</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Error downloading {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>downloader</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>downloadIndexAndSignature</name><parameter_list>(<parameter><decl><type><name>MultiStepProgress</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>URL</name></type> <name>packageIndexUrl</name></decl></parameter>, <parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>, <parameter><decl><type><name>SignatureVerifier</name></type> <name>signatureVerifier</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    <comment type="line">// Extract the file name from the url</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>indexFileName</name> <init>= <expr><call><name><name>FilenameUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name><name>packageIndexUrl</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>packageIndex</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getIndexFile</name></name><argument_list>(<argument><expr><name>indexFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>statusText</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Downloading platforms index..."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Create temp files</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>packageIndexTemp</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>createTempFile</name></name><argument_list>(<argument><expr><name>indexFileName</name></expr></argument>, <argument><expr><literal type="string">".tmp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
      <comment type="line">// Download package index</comment>
      <expr_stmt><expr><call><name>download</name><argument_list>(<argument><expr><name>packageIndexUrl</name></expr></argument>, <argument><expr><name>packageIndexTemp</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>statusText</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>URL</name></type> <name>signatureUrl</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>packageIndexUrl</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".sig"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>verifyDomain</name><argument_list>(<argument><expr><name>packageIndexUrl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>checkSignature</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>signatureUrl</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><name>signatureVerifier</name></expr></argument>, <argument><expr><name>statusText</name></expr></argument>, <argument><expr><name>packageIndexTemp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>move</name></name><argument_list>(<argument><expr><call><name><name>packageIndexTemp</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>packageIndex</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCopyOption</name><operator>.</operator><name>REPLACE_EXISTING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"The cached files have been removed. {} {}"</literal></expr></argument>, <argument><expr><name>packageIndexUrl</name></expr></argument>, <argument><expr><name>signatureUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>FileDownloader</name><operator>.</operator><name>invalidateFiles</name></name><argument_list>(<argument><expr><name>packageIndexUrl</name></expr></argument>, <argument><expr><name>signatureUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Move the package index to the destination when the signature is not necessary</comment>
        <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>move</name></name><argument_list>(<argument><expr><call><name><name>packageIndexTemp</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>packageIndex</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCopyOption</name><operator>.</operator><name>REPLACE_EXISTING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"The domain is not selected to verify the signature. will be copied into this path {}, packageIndex url: {}"</literal></expr></argument>, <argument><expr><name>packageIndex</name></expr></argument>, <argument><expr><name>packageIndexUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot download the package index from {} the package will be discard"</literal></expr></argument>, <argument><expr><name>packageIndexUrl</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <comment type="line">// Delete useless temp file</comment>
      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>deleteIfExists</name></name><argument_list>(<argument><expr><call><name><name>packageIndexTemp</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>verifyDomain</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>domain</name> <init>= <expr><call><name><name>PreferencesData</name><operator>.</operator>
      <name>getCollection</name></name><argument_list>(<argument><expr><literal type="string">"http.signature_verify_domains"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>domain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// Default domain</comment>
      <expr_stmt><expr><call><name><name>domain</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"downloads.arduino.cc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>domain</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>url</name><operator>.</operator><name>getHost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"The domain is not selected to verify the signature. domain list: {}, url: {}"</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkSignature</name><parameter_list>(<parameter><decl><type><name>MultiStepProgress</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>URL</name></type> <name>signatureUrl</name></decl></parameter>, <parameter><decl><type><name>ProgressListener</name></type> <name>progressListener</name></decl></parameter>, <parameter><decl><type><name>SignatureVerifier</name></type> <name>signatureVerifier</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>statusText</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>fileToVerify</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>


    <comment type="line">// Signature file name</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>signatureFileName</name> <init>= <expr><call><name><name>FilenameUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name><name>signatureUrl</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>packageIndexSignature</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>indexer</name><operator>.</operator><name>getIndexFile</name></name><argument_list>(<argument><expr><name>signatureFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>packageIndexSignatureTemp</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>createTempFile</name></name><argument_list>(<argument><expr><name>signatureFileName</name></expr></argument>, <argument><expr><literal type="string">".tmp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <try>try <block>{<block_content>
      <comment type="line">// Download signature</comment>
      <expr_stmt><expr><call><name>download</name><argument_list>(<argument><expr><name>signatureUrl</name></expr></argument>, <argument><expr><name>packageIndexSignatureTemp</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>statusText</name></expr></argument>, <argument><expr><name>progressListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>PreferencesData</name><operator>.</operator><name>areInsecurePackagesAllowed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>move</name></name><argument_list>(<argument><expr><call><name><name>packageIndexSignatureTemp</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>packageIndexSignature</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCopyOption</name><operator>.</operator><name>REPLACE_EXISTING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Allowing insecure packages because allow_insecure_packages is set to true in preferences.txt"</literal> <operator>+</operator>
          <literal type="string">" but the signature was download"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// Verify the signature before move the files</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>signatureVerified</name> <init>= <expr><call><name><name>signatureVerifier</name><operator>.</operator><name>isSigned</name></name><argument_list>(<argument><expr><name>fileToVerify</name></expr></argument>, <argument><expr><name>packageIndexSignatureTemp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>signatureVerified</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Signature verified. url={}, signature url={}, file to verify={}, signature file={}"</literal></expr></argument>, <argument><expr><name>signatureUrl</name></expr></argument>, <argument><expr><name>signatureUrl</name></expr></argument>, <argument><expr><name>fileToVerify</name></expr></argument>, <argument><expr><name>packageIndexSignatureTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Move if the signature is ok</comment>
        <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>move</name></name><argument_list>(<argument><expr><call><name><name>packageIndexSignatureTemp</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>packageIndexSignature</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StandardCopyOption</name><operator>.</operator><name>REPLACE_EXISTING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"{} file signature verification failed. File ignored."</literal></expr></argument>, <argument><expr><name>signatureUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} file signature verification failed. File ignored."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>signatureUrl</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <return>return <expr><name>signatureVerified</name></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot download the signature from {} the package will be discard"</literal></expr></argument>, <argument><expr><name>signatureUrl</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><name>e</name></expr>;</throw>
    </block_content>}</block></catch> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>deleteIfExists</name></name><argument_list>(<argument><expr><call><name><name>packageIndexSignatureTemp</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>

  </block_content>}</block></function>

}</block></class>
</unit>
