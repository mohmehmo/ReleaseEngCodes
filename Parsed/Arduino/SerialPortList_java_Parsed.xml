<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/SerialPortList.java"><comment type="block">/* jSSC (Java Simple Serial Connector) - serial port communication library.
 * (C) Alexey Sokolov (scream3r), 2010-2014.
 * 
 * Patched for Arduino by Cristian Maglie.
 *
 * This file is part of jSSC.
 *
 * jSSC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * jSSC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with jSSC.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 * If you use jSSC in public project you can inform me about this by e-mail,
 * of course if you want it.
 *
 * e-mail: scream3r.org@gmail.com
 * web-site: http://scream3r.org | http://code.google.com/p/java-simple-serial-connector/
 */</comment>
<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>jssc</name><operator>.</operator><name>SerialNativeInterface</name></name>;</import>

<comment type="block" format="javadoc">/**
 *
 * @author scream3r
 */</comment>
<class><specifier>public</specifier> class <name>SerialPortList</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SerialNativeInterface</name></type> <name>serialInterface</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PORTNAMES_REGEXP</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PORTNAMES_PATH</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <expr_stmt><expr><name>serialInterface</name> <operator>=</operator> <operator>new</operator> <call><name>SerialNativeInterface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><call><name><name>SerialNativeInterface</name><operator>.</operator><name>getOsType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>SerialNativeInterface</name><operator>.</operator><name>OS_LINUX</name></name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><name>PORTNAMES_REGEXP</name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(ttyS|ttyUSB|ttyACM|ttyAMA|rfcomm|ttyO)[0-9]{1,3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>PORTNAMES_PATH</name> <operator>=</operator> <literal type="string">"/dev/"</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>SerialNativeInterface</name><operator>.</operator><name>OS_SOLARIS</name></name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><name>PORTNAMES_REGEXP</name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"[0-9]*|[a-z]*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>PORTNAMES_PATH</name> <operator>=</operator> <literal type="string">"/dev/term/"</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>SerialNativeInterface</name><operator>.</operator><name>OS_MAC_OS_X</name></name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><name>PORTNAMES_REGEXP</name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(tty|cu)\\..*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>PORTNAMES_PATH</name> <operator>=</operator> <literal type="string">"/dev/"</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>SerialNativeInterface</name><operator>.</operator><name>OS_WINDOWS</name></name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><name>PORTNAMES_REGEXP</name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>PORTNAMES_PATH</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <default>default:</default> <block>{<block_content>
                <expr_stmt><expr><name>PORTNAMES_REGEXP</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>PORTNAMES_PATH</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block></static>

    <comment type="line">//since 2.1.0 -&gt; Fully rewrited port name comparator</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>PORTNAMES_COMPARATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>valueA</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>valueB</name></decl></parameter>)</parameter_list> <block>{<block_content>

            <if_stmt><if>if<condition>(<expr><call><name><name>valueA</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>valueB</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <return>return <expr><call><name><name>valueA</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>valueB</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>minLength</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>valueA</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>valueB</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>shiftA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>shiftB</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>minLength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>charA</name> <init>= <expr><call><name><name>valueA</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>shiftA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>charB</name> <init>= <expr><call><name><name>valueB</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>shiftB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>(<expr><name>charA</name> <operator>!=</operator> <name>charB</name></expr>)</condition><block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isDigit</name></name><argument_list>(<argument><expr><name>charA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Character</name><operator>.</operator><name>isDigit</name></name><argument_list>(<argument><expr><name>charB</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>resultsA</name> <init>= <expr><call><name>getNumberAndLastIndex</name><argument_list>(<argument><expr><name>valueA</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>shiftA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>resultsB</name> <init>= <expr><call><name>getNumberAndLastIndex</name><argument_list>(<argument><expr><name>valueB</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>shiftB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if<condition>(<expr><name><name>resultsA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>resultsB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
                            <return>return <expr><name><name>resultsA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>resultsB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
                        </block_content>}</block></if></if_stmt>

                        <if_stmt><if>if<condition>(<expr><call><name><name>valueA</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>valueB</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                            <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>resultsA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>shiftB</name> <operator>=</operator> <name><name>resultsA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>resultsB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else <block>{<block_content>
                            <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>resultsB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>shiftA</name> <operator>=</operator> <name><name>resultsB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>resultsA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if>
                    <else>else <block>{<block_content>
                        <if_stmt><if>if<condition>(<expr><call><name><name>Character</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>charA</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>Character</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>charB</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                            <return>return <expr><call><name><name>Character</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>charA</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>Character</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>charB</name></expr></argument>)</argument_list></call></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>valueA</name><operator>.</operator><name>compareToIgnoreCase</name></name><argument_list>(<argument><expr><name>valueB</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Evaluate port &lt;b&gt;index/number&lt;/b&gt; from &lt;b&gt;startIndex&lt;/b&gt; to the number end. For example:
         * for port name &lt;b&gt;serial-123-FF&lt;/b&gt; you should invoke this method with &lt;b&gt;startIndex = 7&lt;/b&gt;
         *
         * @return If port &lt;b&gt;index/number&lt;/b&gt; correctly evaluated it value will be returned&lt;br&gt;
         * &lt;b&gt;returnArray[0] = index/number&lt;/b&gt;&lt;br&gt;
         * &lt;b&gt;returnArray[1] = stopIndex&lt;/b&gt;&lt;br&gt;
         *
         * If incorrect:&lt;br&gt;
         * &lt;b&gt;returnArray[0] = -1&lt;/b&gt;&lt;br&gt;
         * &lt;b&gt;returnArray[1] = startIndex&lt;/b&gt;&lt;br&gt;
         *
         * For this name &lt;b&gt;serial-123-FF&lt;/b&gt; result is:
         * &lt;b&gt;returnArray[0] = 123&lt;/b&gt;&lt;br&gt;
         * &lt;b&gt;returnArray[1] = 10&lt;/b&gt;&lt;br&gt;
         */</comment>
        <function><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>getNumberAndLastIndex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>numberValue</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>returnValues</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>startIndex</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <expr_stmt><expr><name><name>returnValues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isDigit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>numberValue</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name><name>returnValues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>numberValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">//Do nothing</comment>
            </block_content>}</block></catch></try>
            <return>return <expr><name>returnValues</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <comment type="line">//&lt;-since 2.1.0</comment>
    
    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system using default settings:&lt;br&gt;
     *
     * &lt;b&gt;Search path&lt;/b&gt;&lt;br&gt;
     * Windows - ""(always ignored)&lt;br&gt;
     * Linux - "/dev/"&lt;br&gt;
     * Solaris - "/dev/term/"&lt;br&gt;
     * MacOSX - "/dev/"&lt;br&gt;
     *
     * &lt;b&gt;RegExp&lt;/b&gt;&lt;br&gt;
     * Windows - ""&lt;br&gt;
     * Linux - "(ttyS|ttyUSB|ttyACM|ttyAMA|rfcomm)[0-9]{1,3}"&lt;br&gt;
     * Solaris - "[0-9]*|[a-z]*"&lt;br&gt;
     * MacOSX - "tty.(serial|usbserial|usbmodem).*"&lt;br&gt;
     *
     * @return String array. If there is no ports in the system String[]
     * with &lt;b&gt;zero&lt;/b&gt; length will be returned (since jSSC-0.8 in previous versions null will be returned)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPortNames</name><argument_list>(<argument><expr><name>PORTNAMES_PATH</name></expr></argument>, <argument><expr><name>PORTNAMES_REGEXP</name></expr></argument>, <argument><expr><name>PORTNAMES_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system located on searchPath
     *
     * @param searchPath Path for searching serial ports &lt;b&gt;(not null)&lt;/b&gt;&lt;br&gt;
     * The default search paths:&lt;br&gt;
     * Linux, MacOSX: &lt;b&gt;/dev/&lt;/b&gt;&lt;br&gt;
     * Solaris: &lt;b&gt;/dev/term/&lt;/b&gt;&lt;br&gt;
     * Windows: &lt;b&gt;this parameter ingored&lt;/b&gt;
     *
     * @return String array. If there is no ports in the system String[]
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>searchPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPortNames</name><argument_list>(<argument><expr><name>searchPath</name></expr></argument>, <argument><expr><name>PORTNAMES_REGEXP</name></expr></argument>, <argument><expr><name>PORTNAMES_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system matched pattern
     *
     * @param pattern RegExp pattern for matching port names &lt;b&gt;(not null)&lt;/b&gt;
     * 
     * @return String array. If there is no ports in the system String[]
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>(<parameter><decl><type><name>Pattern</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPortNames</name><argument_list>(<argument><expr><name>PORTNAMES_PATH</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>PORTNAMES_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system matched pattern
     *
     * @param comparator Comparator for sotring port names &lt;b&gt;(not null)&lt;/b&gt;
     *
     * @return String array. If there is no ports in the system String[]
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>(<parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPortNames</name><argument_list>(<argument><expr><name>PORTNAMES_PATH</name></expr></argument>, <argument><expr><name>PORTNAMES_REGEXP</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system located on searchPath, matched pattern
     *
     * @param searchPath Path for searching serial ports &lt;b&gt;(not null)&lt;/b&gt;&lt;br&gt;
     * The default search paths:&lt;br&gt;
     * Linux, MacOSX: &lt;b&gt;/dev/&lt;/b&gt;&lt;br&gt;
     * Solaris: &lt;b&gt;/dev/term/&lt;/b&gt;&lt;br&gt;
     * Windows: &lt;b&gt;this parameter ingored&lt;/b&gt;
     * @param pattern RegExp pattern for matching port names &lt;b&gt;(not null)&lt;/b&gt;
     *
     * @return String array. If there is no ports in the system String[]
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>searchPath</name></decl></parameter>, <parameter><decl><type><name>Pattern</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPortNames</name><argument_list>(<argument><expr><name>searchPath</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>PORTNAMES_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system located on searchPath and sorted by comparator
     *
     * @param searchPath Path for searching serial ports &lt;b&gt;(not null)&lt;/b&gt;&lt;br&gt;
     * The default search paths:&lt;br&gt;
     * Linux, MacOSX: &lt;b&gt;/dev/&lt;/b&gt;&lt;br&gt;
     * Solaris: &lt;b&gt;/dev/term/&lt;/b&gt;&lt;br&gt;
     * Windows: &lt;b&gt;this parameter ingored&lt;/b&gt;
     * @param comparator Comparator for sotring port names &lt;b&gt;(not null)&lt;/b&gt;
     *
     * @return String array. If there is no ports in the system String[]
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>searchPath</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPortNames</name><argument_list>(<argument><expr><name>searchPath</name></expr></argument>, <argument><expr><name>PORTNAMES_REGEXP</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system matched pattern and sorted by comparator
     *
     * @param pattern RegExp pattern for matching port names &lt;b&gt;(not null)&lt;/b&gt;
     * @param comparator Comparator for sotring port names &lt;b&gt;(not null)&lt;/b&gt;
     *
     * @return String array. If there is no ports in the system String[]
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>(<parameter><decl><type><name>Pattern</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPortNames</name><argument_list>(<argument><expr><name>PORTNAMES_PATH</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get sorted array of serial ports in the system located on searchPath, matched pattern and sorted by comparator
     *
     * @param searchPath Path for searching serial ports &lt;b&gt;(not null)&lt;/b&gt;&lt;br&gt;
     * The default search paths:&lt;br&gt;
     * Linux, MacOSX: &lt;b&gt;/dev/&lt;/b&gt;&lt;br&gt;
     * Solaris: &lt;b&gt;/dev/term/&lt;/b&gt;&lt;br&gt;
     * Windows: &lt;b&gt;this parameter ingored&lt;/b&gt;
     * @param pattern RegExp pattern for matching port names &lt;b&gt;(not null)&lt;/b&gt;
     * @param comparator Comparator for sotring port names &lt;b&gt;(not null)&lt;/b&gt;
     *
     * @return String array. If there is no ports in the system String[]
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getPortNames</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>searchPath</name></decl></parameter>, <parameter><decl><type><name>Pattern</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>searchPath</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>pattern</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>comparator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{}</block></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>SerialNativeInterface</name><operator>.</operator><name>getOsType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>SerialNativeInterface</name><operator>.</operator><name>OS_WINDOWS</name></name></expr>)</condition><block>{<block_content>
            <return>return <expr><call><name>getWindowsPortNames</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getUnixBasedPortNames</name><argument_list>(<argument><expr><name>searchPath</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get serial port names in Windows
     *
     * @since 2.3.0
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getWindowsPortNames</name><parameter_list>(<parameter><decl><type><name>Pattern</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>portNames</name> <init>= <expr><call><name><name>serialInterface</name><operator>.</operator><name>getSerialPortNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>portNames</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{}</block></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ports</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>String</name></type> <name>portName</name> <range>: <expr><name>portNames</name></expr></range></decl></init>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>pattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>portName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>ports</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>portName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>ports</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>ports</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Universal method for getting port names of _nix based systems
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getUnixBasedPortNames</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>searchPath</name></decl></parameter>, <parameter><decl><type><name>Pattern</name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>searchPath</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>searchPath</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>searchPath</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name><name>searchPath</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>searchPath</name></expr> </then><else>: <expr><name>searchPath</name> <operator>+</operator> <literal type="string">"/"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>returnArray</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>searchPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>files</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>portsTree</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control><block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>file</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>portName</name> <init>= <expr><name>searchPath</name> <operator>+</operator> <name>fileName</name></expr></init></decl>;</decl_stmt>
                        <comment type="line">// For linux ttyS0..31 serial ports check existence by opening each of them</comment>
                        <if_stmt><if>if <condition>(<expr><call><name><name>fileName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"ttyS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	                        <decl_stmt><decl><type><name>long</name></type> <name>portHandle</name> <init>= <expr><call><name><name>serialInterface</name><operator>.</operator><name>openPort</name></name><argument_list>(<argument><expr><name>portName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//Open port without TIOCEXCL</comment>
	                        <if_stmt><if>if<condition>(<expr><name>portHandle</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>portHandle</name> <operator>!=</operator> <name><name>SerialNativeInterface</name><operator>.</operator><name>ERR_PORT_BUSY</name></name></expr>)</condition><block>{<block_content>
	                            <continue>continue;</continue>
	                        </block_content>}</block></if>
	                        <if type="elseif">else if<condition>(<expr><name>portHandle</name> <operator>!=</operator> <name><name>SerialNativeInterface</name><operator>.</operator><name>ERR_PORT_BUSY</name></name></expr>)</condition> <block>{<block_content>
	                            <expr_stmt><expr><call><name><name>serialInterface</name><operator>.</operator><name>closePort</name></name><argument_list>(<argument><expr><name>portHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                        </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>portsTree</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>portName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>returnArray</name> <operator>=</operator> <call><name><name>portsTree</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>returnArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>returnArray</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
