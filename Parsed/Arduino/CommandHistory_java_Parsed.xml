<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/CommandHistory.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ListIterator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Keeps track of command history in console-like applications.
 * @author P.J.S. Kools
 */</comment>
<class><specifier>public</specifier> class <name>CommandHistory</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>commandHistory</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxHistorySize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>ListIterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>iteratorAsc</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Create a new {@link CommandHistory}.
   * @param maxHistorySize - The max command history size.
   */</comment>
  <constructor><specifier>public</specifier> <name>CommandHistory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxHistorySize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxHistorySize</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>maxHistorySize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>maxHistorySize</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Current command placeholder.</comment>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Adds the given command to the history and resets the history traversal
   * position to the latest command. If the latest command in the history is
   * equal to the given command, it will not be added to the history.
   * If the max history size is exceeded, the oldest command will be removed
   * from the history.
   * @param command - The command to add.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>addCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>maxHistorySize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Remove 'current' command.</comment>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>removeLast</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add new command if it differs from the latest command.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call>
        <operator>||</operator> <operator>!</operator><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>getLast</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

      <comment type="line">// Remove oldest command if max history size is exceeded.</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name><name>this</name><operator>.</operator><name>maxHistorySize</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// Add new command and reset 'current' command.</comment>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Re-add 'current' command and reset command iterator.</comment>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Current command placeholder.</comment>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets whether a next (more recent) command is available in the history.
   * @return {@code true} if a next command is available,
   * returns {@code false} otherwise.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNextCommand</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>.</operator><name>iteratorAsc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Current command, ascending.</comment>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iteratorAsc</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets the next (more recent) command from the history.
   * @return The next command or {@code null} if no next command is available.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getNextCommand</name><parameter_list>()</parameter_list> <block>{<block_content>

    <comment type="line">// Return null if there is no next command available.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>hasNextCommand</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Get next command.</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Reset 'current' command when at the end of the list.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>nextIndex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Reset 'current' command.</comment>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>next</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets whether a previous (older) command is available in the history.
   * @return {@code true} if a previous command is available,
   * returns {@code false} otherwise.
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasPreviousCommand</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>iteratorAsc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>previous</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Current command, descending.</comment>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iteratorAsc</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>hasPrevious</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Gets the previous (older) command from the history.
   * When this method is called while the most recent command in the history is
   * selected, this will store the current command as temporary latest command
   * so that {@link #getNextCommand()} will return it once. This temporary
   * latest command gets reset when this case occurs again or when
   * {@link #addCommand(String)} is invoked.
   * @param currentCommand - The current unexecuted command.
   * @return The previous command or {@code null} if no previous command is
   * available.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getPreviousCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>currentCommand</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <comment type="line">// Return null if there is no previous command available.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>hasPreviousCommand</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Store current unexecuted command and create iterator if not traversing.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>=</operator>
          <call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>listIterator</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>previous</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Last element, descending.</comment>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iteratorAsc</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Store current unexecuted command if on 'current' index.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>nextIndex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>currentCommand</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>currentCommand</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Return the previous command.</comment>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>iterator</name><operator>.</operator><name>previous</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Resets the history location to the most recent command.
   * @returns The latest unexecuted command as stored by
   * {@link #getPreviousCommand(String)} or an empty string if no such command
   * was set.
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>resetHistoryLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Clears the command history.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commandHistory</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Current command placeholder.</comment>
  </block_content>}</block></function>
}</block></class>
</unit>
