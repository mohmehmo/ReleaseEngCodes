<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/Preferences.java"><comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2004-09 Ben Fry and Casey Reas
  Copyright (c) 2001-04 Massachusetts Institute of Technology

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Storage class for user preferences and environment settings.
 * &lt;p/&gt;
 * This class no longer uses the Properties class, since
 * properties files are iso8859-1, which is highly likely to
 * be a problem when trying to save sketch folders and locations.
 * &lt;p/&gt;
 * The GUI portion in here is really ugly, as it uses exact layout. This was
 * done in frustration one evening (and pre-Swing), but that's long since past,
 * and it should all be moved to a proper swing layout like BoxLayout.
 * &lt;p/&gt;
 * This is very poorly put together, that the preferences panel and the actual
 * preferences i/o is part of the same code. But there hasn't yet been a
 * compelling reason to bother with the separation aside from concern about
 * being lectured by strangers who feel that it doesn't look like what they
 * learned in CS class.
 * &lt;p/&gt;
 * Would also be possible to change this to use the Java Preferences API.
 * Some useful articles
 * &lt;a href="http://www.onjava.com/pub/a/onjava/synd/2001/10/17/j2se.html"&gt;here&lt;/a&gt; and
 * &lt;a href="http://www.particle.kth.se/~lindsey/JavaCourse/Book/Part1/Java/Chapter10/Preferences.html"&gt;here&lt;/a&gt;.
 * However, haven't implemented this yet for lack of time, but more
 * importantly, because it would entail writing to the registry (on Windows),
 * or an obscure file location (on Mac OS X) and make it far more difficult to
 * find the preferences to tweak them by hand (no! stay out of regedit!)
 * or to reset the preferences by simply deleting the preferences.txt file.
 */</comment>
<class><specifier>public</specifier> class <name>Preferences</name> <block>{


  <comment type="block" format="javadoc">/**
   * Standardized width for buttons. Mac OS X 10.3 wants 70 as its default,
   * Windows XP needs 66, and my Ubuntu machine needs 80+, so 80 seems proper.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>BUTTON_WIDTH</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Standardized button height. Mac OS X 10.3 (Java 1.4) wants 29,
   * presumably because it now includes the blue border, where it didn't
   * in Java 1.3. Windows XP only wants 23 (not sure what default Linux
   * would be). Because of the disparity, on Mac OS X, it will be set
   * inside a static block.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>public</specifier> <name>int</name></type> <name>BUTTON_HEIGHT</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// indents and spacing standards. these probably need to be modified</comment>
  <comment type="line">// per platform as well, since macosx is so huge, windows is smaller,</comment>
  <comment type="line">// and linux is all over the map</comment>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GUI_SMALL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>has</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setInteger</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>PreferencesMap</name></type> <name>getMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>PreferencesData</name><operator>.</operator><name>getMap</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDoSave</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PreferencesData</name><operator>.</operator><name>setDoSave</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
</unit>
