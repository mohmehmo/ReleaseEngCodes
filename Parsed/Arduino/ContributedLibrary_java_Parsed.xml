<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/cc/arduino/contributions/libraries/ContributedLibrary.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2014 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>libraries</name></name>;</package>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>DownloadableContribution</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>packages</name><operator>.</operator><name>UserLibrary</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>contributions</name><operator>.</operator><name>VersionHelper</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ContributedLibrary</name> <super_list><extends>extends <super><name>DownloadableContribution</name></super></extends></super_list> <block>{

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getMaintainer</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getAuthor</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getWebsite</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getCategory</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setCategory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getLicense</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getParagraph</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getSentence</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getArchitectures</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTypes</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ContributedLibraryDependency</name></argument>&gt;</argument_list></name></type> <name>getDependencies</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getProvidesIncludes</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>ContributedLibrary</name></argument>&gt;</argument_list></name></type> <name>CASE_INSENSITIVE_ORDER</name> <init>= <expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>o1</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>UserLibrary</name></argument>&gt;</argument_list></name></type> <name>installedLib</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>UserLibrary</name></argument>&gt;</argument_list></name></type> <name>getInstalledLibrary</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>installedLib</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLibraryInstalled</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>installedLib</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setInstalledUserLibrary</name><parameter_list>(<parameter><decl><type><name>UserLibrary</name></type> <name>installed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>installedLib</name></name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>installed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetInstalledUserLibrary</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>installedLib</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIDEBuiltIn</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>installedLib</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>installedLib</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isIDEBuiltIn</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns &lt;b&gt;true&lt;/b&gt; if the library declares to support the specified
   * architecture (through the "architectures" property field).
   *
   * @param reqArch
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsArchitecture</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>reqArch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getArchitectures</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>reqArch</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>getArchitectures</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns &lt;b&gt;true&lt;/b&gt; if the library declares to support at least one of the
   * specified architectures.
   *
   * @param reqArchs A List of architectures to check
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsArchitecture</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>reqArchs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>reqArchs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>reqArch</name> <range>: <expr><name>reqArchs</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>supportsArchitecture</name><argument_list>(<argument><expr><name>reqArch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Version {0}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getParsedVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>info</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"  ContributedLibrary : "</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"              author : "</literal> <operator>+</operator> <call><name>getAuthor</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"          maintainer : "</literal> <operator>+</operator> <call><name>getMaintainer</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"             version : "</literal> <operator>+</operator> <call><name>getParsedVersion</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"             website : "</literal> <operator>+</operator> <call><name>getUrl</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"            category : "</literal> <operator>+</operator> <call><name>getCategory</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"             license : "</literal> <operator>+</operator> <call><name>getLicense</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"             descrip : "</literal> <operator>+</operator> <call><name>getSentence</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getParagraph</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getParagraph</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"                       "</literal> <operator>+</operator> <call><name>getParagraph</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"       architectures : "</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getArchitectures</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>a</name> <range>: <expr><call><name>getArchitectures</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>a</name> <operator>+</operator> <literal type="string">","</literal></expr>;</expr_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"            requires :\n"</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getDependencies</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <for>for <control>(<init><decl><type><name>ContributedLibraryDependency</name></type> <name>r</name> <range>: <expr><call><name>getDependencies</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"                       "</literal> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

    <comment type="line">// DownloadableContribution</comment>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name><name>super</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>instanceof</operator> <name>ContributedLibrary</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>ContributedLibrary</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>ContributedLibrary</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>thisVersion</name> <init>= <expr><call><name>getParsedVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>otherVersion</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>getParsedVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>versionEquals</name> <init>= <expr><operator>(</operator><name>thisVersion</name> <operator>!=</operator> <literal type="null">null</literal>
                             <operator>&amp;&amp;</operator> <call><name><name>thisVersion</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>otherVersion</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="line">// Important: for legacy libs, versions are null. Two legacy libs must</comment>
    <comment type="line">// always pass this test.</comment>
    <if_stmt><if>if <condition>(<expr><name>thisVersion</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>otherVersion</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>versionEquals</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>thisName</name> <init>= <expr><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>otherName</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>nameEquals</name> <init>= <expr><name>thisName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>thisName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>otherName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>versionEquals</name> <operator>&amp;&amp;</operator> <name>nameEquals</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBefore</name><parameter_list>(<parameter><decl><type><name>ContributedLibrary</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>VersionHelper</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name>getVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>hashingData</name> <init>= <expr><literal type="string">"CONTRIBUTEDLIB"</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>hashingData</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
