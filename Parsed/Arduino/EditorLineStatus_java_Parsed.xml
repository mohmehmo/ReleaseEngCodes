<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/processing/app/EditorLineStatus.java"><comment type="block">/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */</comment>

<comment type="block">/*
  Part of the Processing project - http://processing.org

  Copyright (c) 2005-07 Ben Fry and Casey Reas

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/</comment>

<package>package <name><name>processing</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JComponent</name></name>;</import>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>PreferencesMap</name></name>;</import>
<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Theme</name><operator>.</operator><name>scale</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Li'l status bar fella that shows the line number.
 */</comment>
<class><specifier>public</specifier> class <name>EditorLineStatus</name> <super_list><extends>extends <super><name>JComponent</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>stop</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Image</name></type> <name>resize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RESIZE_IMAGE_SIZE</name> <init>= <expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Color</name></type> <name>foreground</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Color</name></type> <name>background</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Color</name></type> <name>messageForeground</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>Font</name></type> <name>font</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>String</name></type> <name>port</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EditorLineStatus</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>background</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"linestatus.bgcolor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getFont</name></name><argument_list>(<argument><expr><literal type="string">"linestatus.font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>foreground</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"linestatus.color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"linestatus.height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resize</name> <operator>=</operator> <call><name><name>Theme</name><operator>.</operator><name>getThemeImage</name></name><argument_list>(<argument><expr><literal type="string">"resize"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>RESIZE_IMAGE_SIZE</name></expr></argument>, <argument><expr><name>RESIZE_IMAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">//linestatus.bgcolor = #000000</comment>
    <comment type="line">//linestatus.font    = SansSerif,plain,10</comment>
    <comment type="line">//linestatus.color   = #FFFFFF</comment>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newStop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>newStart</name> <operator>==</operator> <name>start</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>newStop</name> <operator>==</operator> <name>stop</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>newStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>stop</name> <operator>=</operator> <name>newStop</name></expr>;</expr_stmt>

    <comment type="block">/*
    if (start == stop) {
      text = "Line " + (start + 1);
    } else {
      text = "Lines " + (start + 1) + " to " + (stop + 1);
    }
    */</comment>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>stop</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>start</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>start</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="string">" - "</literal> <operator>+</operator> <operator>(</operator><name>stop</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>paintComponent</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>graphics</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><call><name><name>Theme</name><operator>.</operator><name>setupGraphics2D</name></name><argument_list>(<argument><expr><name>graphics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>port</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>PreferencesMap</name></type> <name>boardPreferences</name> <init>= <expr><call><name><name>BaseNoGui</name><operator>.</operator><name>getBoardPreferences</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>boardPreferences</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setBoardName</name><argument_list>(<argument><expr><call><name><name>boardPreferences</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setBoardName</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>setPort</name><argument_list>(<argument><expr><call><name><name>PreferencesData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"serial.port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> <init>= <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>foreground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>baseline</name> <init>= <expr><operator>(</operator><name><name>size</name><operator>.</operator><name>height</name></name> <operator>+</operator> <call><name><name>g</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAscent</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>scale</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>baseline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>messageForeground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>statusText</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>port</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>statusText</name> <operator>=</operator> <call><name><name>I18n</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"{0} on {1}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>statusText</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>getFontMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringBounds</name><argument_list>(<argument><expr><name>statusText</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>statusText</name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>RESIZE_IMAGE_SIZE</name></expr></argument>,
                 <argument><expr><name>baseline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>resize</name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>RESIZE_IMAGE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setBoardName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setPort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getPreferredSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMinimumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getPreferredSize</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Dimension</name></type> <name>getMaximumSize</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>scale</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
