<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/arduino-core/src/processing/app/macosx/SystemProfilerParser.java"><package>package <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>macosx</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<class><specifier>public</specifier> class <name>SystemProfilerParser</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEVICE_PATH</name> <init>= <expr><literal type="string">"device_path"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VID</name> <init>= <expr><literal type="string">"vid"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PID</name> <init>= <expr><literal type="string">"pid"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SERIAL_NUMBER</name> <init>= <expr><literal type="string">"serial_number"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEV_TTY_USBSERIAL</name> <init>= <expr><literal type="string">"/dev/tty.usbserial-"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEV_CU_USBSERIAL</name> <init>= <expr><literal type="string">"/dev/cu.usbserial-"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEV_TTY_USBMODEM</name> <init>= <expr><literal type="string">"/dev/tty.usbmodem"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEV_CU_USBMODEM</name> <init>= <expr><literal type="string">"/dev/cu.usbmodem"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>vidRegex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>serialNumberRegex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>locationRegex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>pidRegex</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SystemProfilerParser</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>serialNumberRegex</name></name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^Serial Number: (.+)$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>locationRegex</name></name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^Location ID: (.+)$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pidRegex</name></name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^Product ID: (.+)$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>vidRegex</name></name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^Vendor ID: (.+)$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>extractVIDAndPID</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>serial</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>devicePrefix</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>serial</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>DEV_TTY_USBSERIAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>devicePrefix</name> <operator>=</operator> <name>DEV_TTY_USBSERIAL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>serial</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>DEV_CU_USBSERIAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>devicePrefix</name> <operator>=</operator> <name>DEV_CU_USBSERIAL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>serial</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>DEV_TTY_USBMODEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>devicePrefix</name> <operator>=</operator> <name>DEV_TTY_USBMODEM</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>devicePrefix</name> <operator>=</operator> <name>DEV_CU_USBMODEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>device</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"\\s+"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>matcher</name> <operator>=</operator> <call><name><name>serialNumberRegex</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>device</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SERIAL_NUMBER</name></expr></argument>, <argument><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>serial</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>DEV_TTY_USBSERIAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>serial</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>DEV_CU_USBSERIAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>devicePath</name> <init>= <expr><name>devicePrefix</name> <operator>+</operator> <call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>device</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DEVICE_PATH</name></expr></argument>, <argument><expr><name>devicePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name><name>serial</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>DEV_TTY_USBMODEM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>serial</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>DEV_CU_USBMODEM</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>matcher</name> <operator>=</operator> <call><name><name>locationRegex</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>suffix</name> <init>= <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>devicePath</name> <init>= <expr><name>devicePrefix</name> <operator>+</operator> <name>suffix</name> <operator>+</operator> <literal type="string">"1"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>device</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DEVICE_PATH</name></expr></argument>, <argument><expr><name>devicePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>matcher</name> <operator>=</operator> <call><name><name>pidRegex</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>pid</name> <init>= <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>pid</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name><name>pid</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>pid</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Remove any text after the hex number</comment>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>device</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PID</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>matcher</name> <operator>=</operator> <call><name><name>vidRegex</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>vid</name> <init>= <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>vid</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>vid</name> <operator>=</operator> <call><name><name>vid</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>vid</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Remove any text after the hex number</comment>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>device</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>VID</name></expr></argument>, <argument><expr><name>vid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>device</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>DEVICE_PATH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>computedDevicePath</name> <init>= <expr><call><name><name>device</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>DEVICE_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>computedDevicePathMinusChar</name> <init>= <expr><call><name><name>computedDevicePath</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>computedDevicePath</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>serialMinusChar</name> <init>= <expr><call><name><name>serial</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>serial</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>computedDevicePath</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>serial</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>computedDevicePathMinusChar</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>serialMinusChar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>device</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>VID</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <call><name><name>device</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PID</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>device</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
