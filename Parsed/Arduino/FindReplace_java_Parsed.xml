<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/Arduino/app/src/cc/arduino/view/findreplace/FindReplace.java"><comment type="block">/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */</comment>

<package>package <name><name>cc</name><operator>.</operator><name>arduino</name><operator>.</operator><name>view</name><operator>.</operator><name>findreplace</name></name>;</package>

<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Base</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>Editor</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>EditorTab</name></name>;</import>
<import>import <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>helpers</name><operator>.</operator><name>OSUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowAdapter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>WindowEvent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPopupMenu</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>Action</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>text</name><operator>.</operator><name>DefaultEditorKit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import static <name><name>processing</name><operator>.</operator><name>app</name><operator>.</operator><name>I18n</name><operator>.</operator><name>tr</name></name>;</import>

<class><specifier>public</specifier> class <name>FindReplace</name> <super_list><extends>extends <super><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JFrame</name></name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FIND_TEXT</name> <init>= <expr><literal type="string">"findText"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>REPLACE_TEXT</name> <init>= <expr><literal type="string">"replaceText"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IGNORE_CASE</name> <init>= <expr><literal type="string">"ignoreCase"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SEARCH_ALL_FILES</name> <init>= <expr><literal type="string">"searchAllFiles"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WRAP_AROUND</name> <init>= <expr><literal type="string">"wrapAround"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Editor</name></type> <name>editor</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>FindReplace</name><parameter_list>(<parameter><decl><type><name>Editor</name></type> <name>editor</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editor</name></name> <operator>=</operator> <name>editor</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initComponents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>OSUtils</name><operator>.</operator><name>isMacOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>removeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replaceAllButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replaceButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replaceFindButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>previousButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>findButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>registerWindowCloseKeys</name></name><argument_list>(<argument><expr><call><name>getRootPane</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <expr_stmt><expr><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>Base</name><operator>.</operator><name>FIND_DIALOG_STATE</name></name> <operator>=</operator> <call><name>findDialogState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Base</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addWindowListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>WindowAdapter</name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>windowActivated</name><parameter_list>(<parameter><decl><type><name>WindowEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>findField</name><operator>.</operator><name>requestFocusInWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>findField</name><operator>.</operator><name>selectAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>restoreFindDialogState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>setVisible</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>getRootPane</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDefaultButton</name><argument_list>(<argument><expr><name>findButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>findDialogState</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FIND_TEXT</name></expr></argument>, <argument><expr><call><name><name>findField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>REPLACE_TEXT</name></expr></argument>, <argument><expr><call><name><name>replaceField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>IGNORE_CASE</name></expr></argument>, <argument><expr><call><name><name>ignoreCaseBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>WRAP_AROUND</name></expr></argument>, <argument><expr><call><name><name>wrapAroundBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SEARCH_ALL_FILES</name></expr></argument>, <argument><expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>state</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>restoreFindDialogState</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>FIND_TEXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>findField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>FIND_TEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>REPLACE_TEXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>replaceField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>REPLACE_TEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>IGNORE_CASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ignoreCaseBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>IGNORE_CASE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>SEARCH_ALL_FILES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>SEARCH_ALL_FILES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>WRAP_AROUND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>wrapAroundBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>WRAP_AROUND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */</comment>
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <comment type="line">// &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;//GEN-BEGIN:initComponents</comment>
  <type><specifier>private</specifier> <name>void</name></type> <name>initComponents</name><parameter_list>()</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name></type> <name>findLabel</name> <init>= <expr><operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>findField</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextField</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name></type> <name>replaceLabel</name> <init>= <expr><operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>replaceField</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextField</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ignoreCaseBox</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JCheckBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wrapAroundBox</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JCheckBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>searchAllFilesBox</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JCheckBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buttonsContainer</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>findButton</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>previousButton</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>replaceFindButton</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>replaceButton</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>replaceAllButton</name> <operator>=</operator> <operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setDefaultCloseOperation</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>WindowConstants</name><operator>.</operator><name>DISPOSE_ON_CLOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setResizable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>findLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>findField</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>replaceLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Replace with:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>replaceField</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ignoreCaseBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ignoreCaseBox</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Ignore Case"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>wrapAroundBox</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wrapAroundBox</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wrap Around"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Search all Sketch Tabs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JPopupMenu</name></type> <name>menu</name> <init>= <expr><operator>new</operator> <call><name>JPopupMenu</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Action</name></type> <name>cut</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultEditorKit</name><operator>.</operator><name>CutAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cut</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><name><name>Action</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>cut</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Action</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultEditorKit</name><operator>.</operator><name>CopyAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><name><name>Action</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Action</name></type> <name>paste</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultEditorKit</name><operator>.</operator><name>PasteAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paste</name><operator>.</operator><name>putValue</name></name><argument_list>(<argument><expr><name><name>Action</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Paste"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>paste</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>findField</name><operator>.</operator><name>setComponentPopupMenu</name></name><argument_list>( <argument><expr><name>menu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>replaceField</name><operator>.</operator><name>setComponentPopupMenu</name></name><argument_list>( <argument><expr><name>menu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>findButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Find"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>findButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>findButtonActionPerformed</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>findButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>previousButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Previous"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>previousButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>previousButtonActionPerformed</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>previousButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>replaceFindButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Replace &amp; Find"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>replaceFindButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>replaceFindButtonActionPerformed</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replaceFindButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>replaceButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Replace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>replaceButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>replaceButtonActionPerformed</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replaceButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>replaceAllButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Replace All"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>replaceAllButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>replaceAllButtonActionPerformed</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>buttonsContainer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replaceAllButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name></name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name></name><argument_list>(<argument><expr><call><name>getContentPane</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getContentPane</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayout</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>setHorizontalGroup</name></name><argument_list>(
      <argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>LEADING</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createSequentialGroup</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>addContainerGap</name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>LEADING</name></name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createSequentialGroup</name></name><argument_list>()</argument_list></call>
              <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>TRAILING</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>replaceLabel</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>findLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>addPreferredGap</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>LayoutStyle</name><operator>.</operator><name>ComponentPlacement</name><operator>.</operator><name>RELATED</name></name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>LEADING</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>findField</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>replaceField</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createSequentialGroup</name></name><argument_list>()</argument_list></call>
                  <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>LEADING</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>searchAllFilesBox</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>wrapAroundBox</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>ignoreCaseBox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                  <operator>.</operator><call><name>addGap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>buttonsContainer</name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>DEFAULT_SIZE</name></name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>DEFAULT_SIZE</name></name></expr></argument>, <argument><expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addContainerGap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>setVerticalGroup</name></name><argument_list>(
      <argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>LEADING</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createSequentialGroup</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>addContainerGap</name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>BASELINE</name></name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>findLabel</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>findField</name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>PREFERRED_SIZE</name></name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>DEFAULT_SIZE</name></name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>PREFERRED_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addPreferredGap</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>LayoutStyle</name><operator>.</operator><name>ComponentPlacement</name><operator>.</operator><name>RELATED</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addGroup</name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>createParallelGroup</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>BASELINE</name></name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>replaceLabel</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>replaceField</name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>PREFERRED_SIZE</name></name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>DEFAULT_SIZE</name></name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>PREFERRED_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addPreferredGap</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>LayoutStyle</name><operator>.</operator><name>ComponentPlacement</name><operator>.</operator><name>RELATED</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>ignoreCaseBox</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addPreferredGap</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>LayoutStyle</name><operator>.</operator><name>ComponentPlacement</name><operator>.</operator><name>RELATED</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>wrapAroundBox</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addPreferredGap</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>LayoutStyle</name><operator>.</operator><name>ComponentPlacement</name><operator>.</operator><name>RELATED</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>searchAllFilesBox</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addPreferredGap</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>LayoutStyle</name><operator>.</operator><name>ComponentPlacement</name><operator>.</operator><name>RELATED</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addComponent</name><argument_list>(<argument><expr><name>buttonsContainer</name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>PREFERRED_SIZE</name></name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>DEFAULT_SIZE</name></name></expr></argument>, <argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>PREFERRED_SIZE</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addContainerGap</name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>GroupLayout</name><operator>.</operator><name>DEFAULT_SIZE</name></name></expr></argument>, <argument><expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function><comment type="line">// &lt;/editor-fold&gt;//GEN-END:initComponents</comment>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>findButtonActionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="line">//GEN-FIRST:event_findButtonActionPerformed</comment>
    <expr_stmt><expr><call><name>findNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function><comment type="line">//GEN-LAST:event_findButtonActionPerformed</comment>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>previousButtonActionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="line">//GEN-FIRST:event_previousButtonActionPerformed</comment>
    <expr_stmt><expr><call><name>findPrevious</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function><comment type="line">//GEN-LAST:event_previousButtonActionPerformed</comment>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>replaceFindButtonActionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="line">//GEN-FIRST:event_replaceFindButtonActionPerformed</comment>
    <expr_stmt><expr><call><name>replaceAndFindNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function><comment type="line">//GEN-LAST:event_replaceFindButtonActionPerformed</comment>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>replaceButtonActionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="line">//GEN-FIRST:event_replaceButtonActionPerformed</comment>
    <expr_stmt><expr><call><name>replace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function><comment type="line">//GEN-LAST:event_replaceButtonActionPerformed</comment>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>replaceAllButtonActionPerformed</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="line">//GEN-FIRST:event_replaceAllButtonActionPerformed</comment>
    <expr_stmt><expr><call><name>replaceAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function><comment type="line">//GEN-LAST:event_replaceAllButtonActionPerformed</comment>

  <comment type="line">// Variables declaration - do not modify//GEN-BEGIN:variables</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name></type> <name>buttonsContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name></type> <name>findButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextField</name></name></type> <name>findField</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JCheckBox</name></name></type> <name>ignoreCaseBox</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name></type> <name>previousButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name></type> <name>replaceAllButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name></type> <name>replaceButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextField</name></name></type> <name>replaceField</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name></type> <name>replaceFindButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JCheckBox</name></name></type> <name>searchAllFilesBox</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JCheckBox</name></name></type> <name>wrapAroundBox</name></decl>;</decl_stmt>
  <comment type="line">// End of variables declaration//GEN-END:variables</comment>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>wrap</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>backwards</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>searchTabs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originTab</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>search</name> <init>= <expr><call><name><name>findField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>search</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>ignoreCaseBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>search</name> <operator>=</operator> <call><name><name>search</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nextIndex</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backwards</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// int selectionStart = editor.textarea.getSelectionStart();</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>selectionEnd</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionStop</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>nextIndex</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>search</name></expr></argument>, <argument><expr><name>selectionEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// int selectionStart = editor.textarea.getSelectionStart();</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>selectionStart</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionStart</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>selectionStart</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nextIndex</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><name>search</name></expr></argument>, <argument><expr><name>selectionStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>nextIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nextIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// Nothing found on this tab: Search other tabs if required</comment>
      <if_stmt><if>if <condition>(<expr><name>searchTabs</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>numTabs</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getTabs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>numTabs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>realCurrentTab</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTabIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><name>originTab</name> <operator>!=</operator> <name>realCurrentTab</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>originTab</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>originTab</name> <operator>=</operator> <name>realCurrentTab</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrap</name></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>backwards</name> <operator>&amp;&amp;</operator> <name>realCurrentTab</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>numTabs</name><operator>)</operator>
                  <operator>||</operator> <operator>(</operator><name>backwards</name> <operator>&amp;&amp;</operator> <name>realCurrentTab</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return> <comment type="line">// Can't continue without wrap</comment>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>backwards</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectPrevTab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectNextTab</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>backwards</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>originTab</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>wrap</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nextIndex</name> <operator>=</operator> <ternary><condition><expr><name>backwards</name></expr> ?</condition><then> <expr><call><name><name>text</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><name>search</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>text</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>search</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nextIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>EditorTab</name></type> <name>currentTab</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>currentTab</name><operator>.</operator><name>getTextArea</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFoldManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ensureOffsetNotInClosedFold</name><argument_list>(<argument><expr><name>nextIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>currentTab</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>nextIndex</name></expr></argument>, <argument><expr><name>nextIndex</name> <operator>+</operator> <call><name><name>search</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>currentTab</name><operator>.</operator><name>getTextArea</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCaret</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelectionVisible</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Replace the current selection with whatever's in the replacement text
   * field.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>replace</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>findField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>newpos</name> <init>= <expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectionStart</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>findField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>newpos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>newpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><name>newpos</name></expr></argument>, <argument><expr><name>newpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>foundAtLeastOne</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>find</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>foundAtLeastOne</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelectedText</name><argument_list>(<argument><expr><call><name><name>replaceField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundAtLeastOne</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Replace the current selection with whatever's in the replacement text
   * field, and then find the next match
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>replaceAndFindNext</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>replace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>findNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Replace everything that matches by doing find and replace alternately until
   * nothing more found.
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>replaceAll</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>findField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>selectTab</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// select the first tab</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelection</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// move to the beginning</comment>

    <decl_stmt><decl><type><name>boolean</name></type> <name>foundAtLeastOne</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>find</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>foundAtLeastOne</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>getCurrentTab</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSelectedText</name><argument_list>(<argument><expr><call><name><name>replaceField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundAtLeastOne</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>findNext</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>wrapAroundBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>findPrevious</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find</name><argument_list>(<argument><expr><call><name><name>wrapAroundBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>searchAllFilesBox</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setFindText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>findField</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
