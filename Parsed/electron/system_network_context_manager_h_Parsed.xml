<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/system_network_context_manager.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_SYSTEM_NETWORK_CONTEXT_MANAGER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_SYSTEM_NETWORK_CONTEXT_MANAGER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/net/proxy_config_monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/network_context.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/network_service.mojom.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>network</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mojom</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>URLLoaderFactory</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SharedURLLoaderFactory</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace network</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>net_log</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>NetExportFileWriter</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>
<expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>HttpAuthDynamicParamsPtr</name> <call><name>CreateHttpAuthDynamicParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Responsible for creating and managing access to the system NetworkContext.</comment>
<comment type="line">// Lives on the UI thread. The NetworkContext this owns is intended for requests</comment>
<comment type="line">// not associated with a session. It stores no data on disk, and has no HTTP</comment>
<comment type="line">// cache, but it does have ephemeral cookie and channel ID stores.</comment>
<comment type="line">//</comment>
<comment type="line">// This class is also responsible for configuring global NetworkService state.</comment>
<comment type="line">//</comment>
<comment type="line">// The "system" NetworkContext will either share a URLRequestContext with</comment>
<comment type="line">// IOThread's SystemURLRequestContext and be part of IOThread's NetworkService</comment>
<comment type="line">// (If the network service is disabled) or be an independent NetworkContext</comment>
<comment type="line">// using the actual network service.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SystemNetworkContextManager</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><operator>~</operator><call><name>SystemNetworkContextManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Creates the global instance of SystemNetworkContextManager. If an</comment>
  <comment type="line">// instance already exists, this will cause a DCHECK failure.</comment>
  <function_decl><type><specifier>static</specifier> <name>SystemNetworkContextManager</name><modifier>*</modifier></type> <name>CreateInstance</name><parameter_list>(<parameter><decl><type><name>PrefService</name><modifier>*</modifier></type> <name>pref_service</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Gets the global SystemNetworkContextManager instance.</comment>
  <function_decl><type><specifier>static</specifier> <name>SystemNetworkContextManager</name><modifier>*</modifier></type> <name>GetInstance</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Destroys the global SystemNetworkContextManager instance.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeleteInstance</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Returns default set of parameters for configuring the network service.</comment>
  <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkContextParamsPtr</name> <call><name>CreateDefaultNetworkContextParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Returns the System NetworkContext. May only be called after SetUp(). Does</comment>
  <comment type="line">// any initialization of the NetworkService that may be needed when first</comment>
  <comment type="line">// called.</comment>
  <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkContext</name><operator>*</operator> <call><name>GetContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Returns a URLLoaderFactory owned by the SystemNetworkContextManager that is</comment>
  <comment type="line">// backed by the SystemNetworkContext. Allows sharing of the URLLoaderFactory.</comment>
  <comment type="line">// Prefer this to creating a new one.  Call Clone() on the value returned by</comment>
  <comment type="line">// this method to get a URLLoaderFactory that can be used on other threads.</comment>
  <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name><operator>*</operator> <call><name>GetURLLoaderFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Returns a SharedURLLoaderFactory owned by the SystemNetworkContextManager</comment>
  <comment type="line">// that is backed by the SystemNetworkContext.</comment>
  <function_decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SharedURLLoaderFactory</name></expr></argument>&gt;</argument_list></name></type> <name>GetSharedURLLoaderFactory</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Called when content creates a NetworkService. Creates the</comment>
  <comment type="line">// SystemNetworkContext, if the network service is enabled.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnNetworkServiceCreated</name><argument_list>(<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkService</name><operator>*</operator> <name>network_service</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>class</name></type> <name>URLLoaderFactoryForSystem</name></decl>;</decl_stmt>

  <function_decl><type><name>explicit</name></type> <name>SystemNetworkContextManager</name><parameter_list>(<parameter><decl><type><name>PrefService</name><modifier>*</modifier></type> <name>pref_service</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Creates parameters for the NetworkContext. May only be called once, since</comment>
  <comment type="line">// it initializes some class members.</comment>
  <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkContextParamsPtr</name> <call><name>CreateNetworkContextParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ProxyConfigMonitor</name></type> <name>proxy_config_monitor_</name></decl>;</decl_stmt>

  <comment type="line">// NetworkContext using the network service, if the network service is</comment>
  <comment type="line">// enabled. nullptr, otherwise.</comment>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Remote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>NetworkContext</name></expr></argument>&gt;</argument_list></name> <name>network_context_</name></expr>;</expr_stmt>

  <comment type="line">// URLLoaderFactory backed by the NetworkContext returned by GetContext(), so</comment>
  <comment type="line">// consumers don't all need to create their own factory.</comment>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>URLLoaderFactoryForSystem</name></expr></argument>&gt;</argument_list></name></type> <name>shared_url_loader_factory_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Remote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name> <name>url_loader_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>SystemNetworkContextManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_SYSTEM_NETWORK_CONTEXT_MANAGER_H_</comment>
</unit>
