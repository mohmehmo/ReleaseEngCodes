<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/vendor/third_party/lss/linux_syscall_support.h"><comment type="block">/* Copyright (c) 2005-2011, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ---
 * Author: Markus Gutschke
 */</comment>

<comment type="block">/* This file includes Linux-specific support functions common to the
 * coredumper and the thread lister; primarily, this is a collection
 * of direct system calls, and a couple of symbols missing from
 * standard header files.
 * There are a few options that the including file can set to control
 * the behavior of this file:
 *
 * SYS_CPLUSPLUS:
 *   The entire header file will normally be wrapped in 'extern "C" { }",
 *   making it suitable for compilation as both C and C++ source. If you
 *   do not want to do this, you can set the SYS_CPLUSPLUS macro to inhibit
 *   the wrapping. N.B. doing so will suppress inclusion of all prerequisite
 *   system header files, too. It is the caller's responsibility to provide
 *   the necessary definitions.
 *
 * SYS_ERRNO:
 *   All system calls will update "errno" unless overriden by setting the
 *   SYS_ERRNO macro prior to including this file. SYS_ERRNO should be
 *   an l-value.
 *
 * SYS_INLINE:
 *   New symbols will be defined "static inline", unless overridden by
 *   the SYS_INLINE macro.
 *
 * SYS_LINUX_SYSCALL_SUPPORT_H
 *   This macro is used to avoid multiple inclusions of this header file.
 *   If you need to include this file more than once, make sure to
 *   unset SYS_LINUX_SYSCALL_SUPPORT_H before each inclusion.
 *
 * SYS_PREFIX:
 *   New system calls will have a prefix of "sys_" unless overridden by
 *   the SYS_PREFIX macro. Valid values for this macro are [0..9] which
 *   results in prefixes "sys[0..9]_". It is also possible to set this
 *   macro to -1, which avoids all prefixes.
 *
 * SYS_SYSCALL_ENTRYPOINT:
 *   Some applications (such as sandboxes that filter system calls), need
 *   to be able to run custom-code each time a system call is made. If this
 *   macro is defined, it expands to the name of a "common" symbol. If
 *   this symbol is assigned a non-NULL pointer value, it is used as the
 *   address of the system call entrypoint.
 *   A pointer to this symbol can be obtained by calling
 *   get_syscall_entrypoint()
 *
 * This file defines a few internal symbols that all start with "LSS_".
 * Do not access these symbols from outside this file. They are not part
 * of the supported API.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYS_LINUX_SYSCALL_SUPPORT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_LINUX_SYSCALL_SUPPORT_H</name></cpp:macro></cpp:define>

<comment type="block">/* We currently only support x86-32, x86-64, ARM, MIPS, PPC, s390 and s390x
 * on Linux.
 * Porting to other related platforms should not be difficult.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator>   \
     <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> \
     <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call><operator>)</operator> \
  <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYS_CPLUSPLUS</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<comment type="block">/* Some system header files in older versions of gcc neglect to properly
 * handle being included from C++. As it appears to be harmless to have
 * multiple nested 'extern "C"' blocks, just add another one here.
 */</comment>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__mips__</name></cpp:ifdef>
<comment type="block">/* Include definitions of the ABI currently in use.                          */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ANDROID__</name></cpp:ifdef>
<comment type="block">/* Android doesn't have sgidefs.h, but does have asm/sgidefs.h,
 * which has the definitions we need.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/sgidefs.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgidefs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The Android NDK's &lt;sys/stat.h&gt; #defines these macros as aliases
 * to their non-64 counterparts. To avoid naming conflict, remove them. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ANDROID__</name></cpp:ifdef>
  <comment type="block">/* These are restored by the corresponding #pragma pop_macro near
   * the end of this file. */</comment>
<cpp:pragma># <cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"stat64"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma># <cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"fstat64"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma># <cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"lstat64"</cpp:literal><name>)</name></cpp:pragma>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>stat64</name></cpp:undef>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>fstat64</name></cpp:undef>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>lstat64</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* As glibc often provides subtly incompatible data structures (and implicit
 * wrapper functions that convert them), we provide our own kernel data
 * structures for use by the system calls.
 * These structures have been developed by using Linux 2.6.23 headers for
 * reference. Note though, we do not care about exact API compatibility
 * with the kernel, and in fact the kernel often does not have a single
 * API that works across architectures. Instead, we try to mimic the glibc
 * API where reasonable, and only guarantee ABI compatibility with the
 * kernel headers.
 * Most notably, here are a few changes that were made to the structures
 * defined by kernel headers:
 *
 * - we only define structures, but not symbolic names for kernel data
 *   types. For the latter, we directly use the native C datatype
 *   (i.e. "unsigned" instead of "mode_t").
 * - in a few cases, it is possible to define identical structures for
 *   both 32bit (e.g. i386) and 64bit (e.g. x86-64) platforms by
 *   standardizing on the 64bit version of the data types. In particular,
 *   this means that we use "unsigned" where the 32bit headers say
 *   "unsigned long".
 * - overall, we try to minimize the number of cases where we need to
 *   conditionally define different structures.
 * - the "struct kernel_sigaction" class of structures have been
 *   modified to more closely mimic glibc's API by introducing an
 *   anonymous union for the function pointer.
 * - a small number of field names had to have an underscore appended to
 *   them, because glibc defines a global macro by the same name.
 */</comment>

<comment type="block">/* include/linux/dirent.h                                                    */</comment>
<struct>struct <name>kernel_dirent64</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>d_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>          <name>d_off</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>d_reclen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type>      <name>d_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>d_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/linux/dirent.h                                                    */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// aarch64 only defines dirent64, just uses that for dirent too.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kernel_dirent</name></cpp:macro> <cpp:value>kernel_dirent64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>kernel_dirent</name> <block>{
  <decl_stmt><decl><type><name>long</name></type>               <name>d_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>d_off</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>d_reclen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>d_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* include/linux/uio.h                                                       */</comment>
<struct>struct <name>kernel_iovec</name> <block>{
  <decl_stmt><decl><type><name>void</name>               <modifier>*</modifier></type><name>iov_base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>iov_len</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/linux/socket.h                                                    */</comment>
<struct>struct <name>kernel_msghdr</name> <block>{
  <decl_stmt><decl><type><name>void</name>               <modifier>*</modifier></type><name>msg_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>msg_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>kernel_iovec</name></name><modifier>*</modifier></type><name>msg_iov</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>msg_iovlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>               <modifier>*</modifier></type><name>msg_control</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>msg_controllen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>msg_flags</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/asm-generic/poll.h                                                */</comment>
<struct>struct <name>kernel_pollfd</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>                <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>short</name></type>              <name>events</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>short</name></type>              <name>revents</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/linux/resource.h                                                  */</comment>
<struct>struct <name>kernel_rlimit</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>rlim_cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>rlim_max</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/linux/time.h                                                      */</comment>
<struct>struct <name>kernel_timespec</name> <block>{
  <decl_stmt><decl><type><name>long</name></type>               <name>tv_sec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>tv_nsec</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/linux/time.h                                                      */</comment>
<struct>struct <name>kernel_timeval</name> <block>{
  <decl_stmt><decl><type><name>long</name></type>               <name>tv_sec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>tv_usec</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/linux/resource.h                                                  */</comment>
<struct>struct <name>kernel_rusage</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>kernel_timeval</name></name></type> <name>ru_utime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>kernel_timeval</name></name></type> <name>ru_stime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_maxrss</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_ixrss</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_idrss</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_isrss</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_minflt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_majflt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_nswap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_inblock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_oublock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_msgsnd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_msgrcv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_nsignals</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_nvcsw</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>ru_nivcsw</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> \
  <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<comment type="block">/* include/asm-{arm,i386,mips,ppc}/signal.h                                  */</comment>
<struct>struct <name>kernel_old_sigaction</name> <block>{
  <union>union <block>{
    <function_decl><type><name>void</name></type>             (<modifier>*</modifier><name>sa_handler_</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>             (<modifier>*</modifier><name>sa_sigaction_</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block>;</union>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>sa_mask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>sa_flags</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type>               (<modifier>*</modifier><name>sa_restorer</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>,</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name><operator>)</operator></expr></cpp:elif>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kernel_old_sigaction</name></cpp:macro> <cpp:value>kernel_sigaction</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="line">// No kernel_old_sigaction defined for arm64.</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Some kernel functions (e.g. sigaction() in 2.6.23) require that the
 * exactly match the size of the signal set, even though the API was
 * intended to be extensible. We define our own KERNEL_NSIG to deal with
 * this.
 * Please note that glibc provides signals [1.._NSIG-1], whereas the
 * kernel (and this header) provides the range [1..KERNEL_NSIG]. The
 * actual number of signals is obviously the same, but the constants
 * differ by one.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__mips__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KERNEL_NSIG</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KERNEL_NSIG</name></cpp:macro>  <cpp:value>64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* include/asm-{arm,aarch64,i386,mips,x86_64}/signal.h                       */</comment>
<struct>struct <name>kernel_sigset_t</name> <block>{
  <expr_stmt><expr><name>unsigned</name> <name>long</name> <name><name>sig</name><index>[<expr><operator>(</operator><name>KERNEL_NSIG</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator></expr></index></name>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></expr_stmt>)</block><expr_stmt><expr><operator>/</operator>
                    <operator>(</operator><literal type="number">8</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>)</operator>]</expr>;</expr_stmt></struct>
</block_content>}</block></extern><empty_stmt>;</empty_stmt>

<comment type="block">/* include/asm-{arm,i386,mips,x86_64,ppc}/signal.h                           */</comment>
<struct>struct <name>kernel_sigaction</name> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__mips__</name></cpp:ifdef>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>sa_flags</name></decl>;</decl_stmt>
  <union>union <block>{
    <function_decl><type><name>void</name></type>             (<modifier>*</modifier><name>sa_handler_</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>             (<modifier>*</modifier><name>sa_sigaction_</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block>;</union>
  <decl_stmt><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name></type> <name>sa_mask</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <union>union <block>{
    <function_decl><type><name>void</name></type>             (<modifier>*</modifier><name>sa_handler_</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>             (<modifier>*</modifier><name>sa_sigaction_</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block>;</union>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>sa_flags</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type>               (<modifier>*</modifier><name>sa_restorer</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name></type> <name>sa_mask</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<comment type="block">/* include/linux/socket.h                                                    */</comment>
<struct>struct <name>kernel_sockaddr</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>sa_family</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>sa_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* include/asm-{arm,aarch64,i386,mips,ppc,s390}/stat.h                       */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__mips__</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI64</name></expr></cpp:if>
<struct>struct <name>kernel_stat</name> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>kernel_stat64</name> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name><name>__pad0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name><name>__pad1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>          <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>__pad2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_blocks</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__PPC__</name></expr></cpp:elif>
<struct>struct <name>kernel_stat64</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>__pad2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>          <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>          <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__unused4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__unused5</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>kernel_stat64</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type>      <name><name>__pad0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>__st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type>      <name><name>__pad3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>          <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>st_ino</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* include/asm-{arm,aarch64,i386,mips,x86_64,ppc,s390}/stat.h                */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>kernel_stat</name> <block>{
  <comment type="block">/* The kernel headers suggest that st_dev and st_rdev should be 32bit
   * quantities encoding 12bit major and 20bit minor numbers in an interleaved
   * format. In reality, we do not see useful data in the top bits. So,
   * we'll leave the padding in here, until we find a better solution.
   */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>short</name></type>              <name>pad1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>short</name></type>              <name>pad2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>__unused4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>__unused5</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_stat</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>__pad0</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>            <name><name>__unused4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_stat</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ino</name></decl>;</decl_stmt>      <comment type="line">// ino_t</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mode</name></decl>;</decl_stmt>     <comment type="line">// mode_t</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_nlink</name></decl>;</decl_stmt>    <comment type="line">// nlink_t</comment>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_uid</name></decl>;</decl_stmt>      <comment type="line">// uid_t</comment>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_gid</name></decl>;</decl_stmt>      <comment type="line">// gid_t</comment>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_size</name></decl>;</decl_stmt>     <comment type="line">// off_t</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__unused4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__unused5</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>!=</operator> <name>_MIPS_SIM_ABI64</name><operator>)</operator></expr></cpp:elif>
<struct>struct <name>kernel_stat</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name><name>st_pad1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type>           <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name><name>st_pad2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>st_pad3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name><name>st_pad4</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_stat</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__pad1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>__pad2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>__unused4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>__unused5</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_stat</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>__pad1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name><name>__unused</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_stat</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_dev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>__pad1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ino</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_nlink</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>st_rdev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>     <name>__pad2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_blksize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_atime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_mtime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>st_ctime_nsec_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__unused4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__unused5</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* include/asm-{arm,aarch64,i386,mips,x86_64,ppc,s390}/statfs.h              */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__mips__</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>!=</operator> <name>_MIPS_SIM_ABI64</name></expr></cpp:if>
<struct>struct <name>kernel_statfs64</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_bsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_frsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>__pad</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_bfree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_files</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_ffree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_bavail</name></decl>;</decl_stmt>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>f_fsid</name></decl>;</struct>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name><name>f_spare</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<comment type="block">/* See also arch/s390/include/asm/compat.h                                   */</comment>
<struct>struct <name>kernel_statfs64</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_bsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_bfree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_bavail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_files</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_ffree</name></decl>;</decl_stmt>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>f_fsid</name></decl>;</struct>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_frsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name><name>f_spare</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_statfs64</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_bsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_bfree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_bavail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_files</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>f_ffree</name></decl>;</decl_stmt>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>f_fsid</name></decl>;</struct>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_frsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name><name>f_spare</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* include/asm-{arm,i386,mips,x86_64,ppc,generic,s390}/statfs.h              */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__mips__</name></cpp:ifdef>
<struct>struct <name>kernel_statfs</name> <block>{
  <decl_stmt><decl><type><name>long</name></type>               <name>f_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_bsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_frsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_bfree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_files</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_ffree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_bavail</name></decl>;</decl_stmt>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>f_fsid</name></decl>;</struct>
  <decl_stmt><decl><type><name>long</name></type>               <name>f_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>               <name><name>f_spare</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_statfs</name> <block>{
  <comment type="block">/* x86_64 actually defines all these fields as signed, whereas all other  */</comment>
  <comment type="block">/* platforms define them as unsigned. Leaving them at unsigned should not */</comment>
  <comment type="block">/* cause any problems. Make sure these are 64-bit even on x32.            */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_bsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_bfree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_bavail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_files</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_ffree</name></decl>;</decl_stmt>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>f_fsid</name></decl>;</struct>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>f_frsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name><name>f_spare</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<struct>struct <name>kernel_statfs</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_bsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_bfree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_bavail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_files</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_ffree</name></decl>;</decl_stmt>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>f_fsid</name></decl>;</struct>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_frsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>f_flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name><name>f_spare</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>kernel_statfs</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_bsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_blocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_bfree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_bavail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_files</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_ffree</name></decl>;</decl_stmt>
  <struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>f_fsid</name></decl>;</struct>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_namelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name>f_frsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>      <name><name>f_spare</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Definitions missing from the standard header files                        */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>O_DIRECTORY</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DIRECTORY</name></cpp:macro>             <cpp:value>0040000</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DIRECTORY</name></cpp:macro>             <cpp:value>0200000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NT_PRXFPREG</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRXFPREG</name></cpp:macro>             <cpp:value>0x46e62b7f</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PTRACE_GETFPXREGS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRACE_GETFPXREGS</name></cpp:macro>       <cpp:value>((enum __ptrace_request)18)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PR_GET_DUMPABLE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_GET_DUMPABLE</name></cpp:macro>         <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PR_SET_DUMPABLE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_SET_DUMPABLE</name></cpp:macro>         <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PR_GET_SECCOMP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_GET_SECCOMP</name></cpp:macro>          <cpp:value>21</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PR_SET_SECCOMP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_SET_SECCOMP</name></cpp:macro>          <cpp:value>22</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AT_FDCWD</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FDCWD</name></cpp:macro>                <cpp:value>(-100)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AT_SYMLINK_NOFOLLOW</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SYMLINK_NOFOLLOW</name></cpp:macro>     <cpp:value>0x100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AT_REMOVEDIR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_REMOVEDIR</name></cpp:macro>            <cpp:value>0x200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MREMAP_FIXED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MREMAP_FIXED</name></cpp:macro>            <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SA_RESTORER</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_RESTORER</name></cpp:macro>             <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CPUCLOCK_PROF</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUCLOCK_PROF</name></cpp:macro>           <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CPUCLOCK_VIRT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUCLOCK_VIRT</name></cpp:macro>           <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CPUCLOCK_SCHED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUCLOCK_SCHED</name></cpp:macro>          <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CPUCLOCK_PERTHREAD_MASK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUCLOCK_PERTHREAD_MASK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAKE_PROCESS_CPUCLOCK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_PROCESS_CPUCLOCK</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>, <parameter><type><name>clock</name></type></parameter>)</parameter_list></cpp:macro>                                     \
        <cpp:value>((int)(~(unsigned)(pid) &lt;&lt; 3) | (int)(clock))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAKE_THREAD_CPUCLOCK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_THREAD_CPUCLOCK</name><parameter_list>(<parameter><type><name>tid</name></type></parameter>, <parameter><type><name>clock</name></type></parameter>)</parameter_list></cpp:macro>                                      \
        <cpp:value>((int)(~(unsigned)(tid) &lt;&lt; 3) |                                       \
         (int)((clock) | CPUCLOCK_PERTHREAD_MASK))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_WAIT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_WAIT</name></cpp:macro>                <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_WAKE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_WAKE</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_FD</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_FD</name></cpp:macro>                  <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_REQUEUE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_REQUEUE</name></cpp:macro>             <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_CMP_REQUEUE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_CMP_REQUEUE</name></cpp:macro>         <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_WAKE_OP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_WAKE_OP</name></cpp:macro>             <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_LOCK_PI</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_LOCK_PI</name></cpp:macro>             <cpp:value>6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_UNLOCK_PI</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_UNLOCK_PI</name></cpp:macro>           <cpp:value>7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_TRYLOCK_PI</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_TRYLOCK_PI</name></cpp:macro>          <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_PRIVATE_FLAG</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_PRIVATE_FLAG</name></cpp:macro>        <cpp:value>128</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_CMD_MASK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_CMD_MASK</name></cpp:macro>            <cpp:value>~FUTEX_PRIVATE_FLAG</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_WAIT_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_WAIT_PRIVATE</name></cpp:macro>        <cpp:value>(FUTEX_WAIT | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_WAKE_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_WAKE_PRIVATE</name></cpp:macro>        <cpp:value>(FUTEX_WAKE | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_REQUEUE_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_REQUEUE_PRIVATE</name></cpp:macro>     <cpp:value>(FUTEX_REQUEUE | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_CMP_REQUEUE_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_CMP_REQUEUE_PRIVATE</name></cpp:macro> <cpp:value>(FUTEX_CMP_REQUEUE | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_WAKE_OP_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_WAKE_OP_PRIVATE</name></cpp:macro>     <cpp:value>(FUTEX_WAKE_OP | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_LOCK_PI_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_LOCK_PI_PRIVATE</name></cpp:macro>     <cpp:value>(FUTEX_LOCK_PI | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_UNLOCK_PI_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_UNLOCK_PI_PRIVATE</name></cpp:macro>   <cpp:value>(FUTEX_UNLOCK_PI | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FUTEX_TRYLOCK_PI_PRIVATE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUTEX_TRYLOCK_PI_PRIVATE</name></cpp:macro>  <cpp:value>(FUTEX_TRYLOCK_PI | FUTEX_PRIVATE_FLAG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ARCH_SET_GS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_SET_GS</name></cpp:macro>             <cpp:value>0x1001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ARCH_GET_GS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_GET_GS</name></cpp:macro>             <cpp:value>0x1004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_quotactl</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_quotactl</name></cpp:macro>           <cpp:value>131</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>164</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>165</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>170</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>171</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigaction</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigreturn</name></cpp:macro>       <cpp:value>173</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigaction</name></cpp:macro>       <cpp:value>174</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigprocmask</name></cpp:macro>     <cpp:value>175</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigpending</name></cpp:macro>      <cpp:value>176</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigsuspend</name></cpp:macro>      <cpp:value>179</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>            <cpp:value>180</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>           <cpp:value>181</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ugetrlimit</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ugetrlimit</name></cpp:macro>         <cpp:value>191</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_stat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_stat64</name></cpp:macro>             <cpp:value>195</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstat64</name></cpp:macro>            <cpp:value>197</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid32</name></cpp:macro>        <cpp:value>208</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid32</name></cpp:macro>        <cpp:value>209</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid32</name></cpp:macro>        <cpp:value>210</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid32</name></cpp:macro>        <cpp:value>211</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setfsuid32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsuid32</name></cpp:macro>         <cpp:value>215</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsgid32</name></cpp:macro>         <cpp:value>216</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents64</name></cpp:macro>         <cpp:value>220</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>224</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>225</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>226</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>227</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>229</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>230</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>232</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>233</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>238</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>240</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>241</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>242</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>258</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>265</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>266</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_statfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_statfs64</name></cpp:macro>           <cpp:value>268</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatfs64</name></cpp:macro>          <cpp:value>269</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fadvise64_64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fadvise64_64</name></cpp:macro>       <cpp:value>272</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>289</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>290</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>             <cpp:value>295</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatat64</name></cpp:macro>          <cpp:value>300</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>           <cpp:value>301</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>317</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getcpu</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getcpu</name></cpp:macro>             <cpp:value>318</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fallocate</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fallocate</name></cpp:macro>          <cpp:value>324</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of i386 definitions                                                   */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 164)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 165)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 170)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 171)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigaction</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigreturn</name></cpp:macro>       <cpp:value>(__NR_SYSCALL_BASE + 173)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigaction</name></cpp:macro>       <cpp:value>(__NR_SYSCALL_BASE + 174)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigprocmask</name></cpp:macro>     <cpp:value>(__NR_SYSCALL_BASE + 175)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigpending</name></cpp:macro>      <cpp:value>(__NR_SYSCALL_BASE + 176)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigsuspend</name></cpp:macro>      <cpp:value>(__NR_SYSCALL_BASE + 179)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>            <cpp:value>(__NR_SYSCALL_BASE + 180)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>           <cpp:value>(__NR_SYSCALL_BASE + 181)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ugetrlimit</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ugetrlimit</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 191)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_stat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_stat64</name></cpp:macro>             <cpp:value>(__NR_SYSCALL_BASE + 195)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstat64</name></cpp:macro>            <cpp:value>(__NR_SYSCALL_BASE + 197)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid32</name></cpp:macro>        <cpp:value>(__NR_SYSCALL_BASE + 208)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid32</name></cpp:macro>        <cpp:value>(__NR_SYSCALL_BASE + 209)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid32</name></cpp:macro>        <cpp:value>(__NR_SYSCALL_BASE + 210)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid32</name></cpp:macro>        <cpp:value>(__NR_SYSCALL_BASE + 211)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setfsuid32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsuid32</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 215)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsgid32</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 216)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents64</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 217)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>(__NR_SYSCALL_BASE + 224)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 225)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>(__NR_SYSCALL_BASE + 226)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 227)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>(__NR_SYSCALL_BASE + 229)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 230)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 232)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 233)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>(__NR_SYSCALL_BASE + 238)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>(__NR_SYSCALL_BASE + 240)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>(__NR_SYSCALL_BASE + 241)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>(__NR_SYSCALL_BASE + 242)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>(__NR_SYSCALL_BASE + 256)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>(__NR_SYSCALL_BASE + 263)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>(__NR_SYSCALL_BASE + 264)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_statfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_statfs64</name></cpp:macro>           <cpp:value>(__NR_SYSCALL_BASE + 266)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatfs64</name></cpp:macro>          <cpp:value>(__NR_SYSCALL_BASE + 267)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 314)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 315)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>(__NR_SYSCALL_BASE + 344)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getcpu</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getcpu</name></cpp:macro>             <cpp:value>(__NR_SYSCALL_BASE + 345)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of ARM 3/EABI definitions                                             */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>             <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>            <cpp:value>6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>             <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>            <cpp:value>9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>           <cpp:value>11</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>          <cpp:value>12</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>          <cpp:value>30</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>          <cpp:value>31</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>            <cpp:value>35</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fallocate</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fallocate</name></cpp:macro>           <cpp:value>47</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>              <cpp:value>56</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_quotactl</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_quotactl</name></cpp:macro>            <cpp:value>60</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents64</name></cpp:macro>          <cpp:value>61</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents</name></cpp:macro>            <cpp:value>__NR_getdents64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>             <cpp:value>67</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>            <cpp:value>68</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ppoll</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ppoll</name></cpp:macro>               <cpp:value>73</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readlinkat</name></cpp:macro>          <cpp:value>78</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_newfstatat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_newfstatat</name></cpp:macro>          <cpp:value>79</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>     <cpp:value>96</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>               <cpp:value>98</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>113</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>114</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>123</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>130</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>149</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>150</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>178</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>213</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fadvise64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fadvise64</name></cpp:macro>          <cpp:value>223</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>239</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of aarch64 definitions                                                */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>             <cpp:value>17</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>            <cpp:value>18</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>117</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>119</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>120</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_quotactl</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_quotactl</name></cpp:macro>           <cpp:value>179</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>186</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>187</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>188</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>189</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>191</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>192</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>194</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>195</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>202</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>204</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents64</name></cpp:macro>         <cpp:value>217</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>218</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fadvise64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fadvise64</name></cpp:macro>          <cpp:value>221</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>228</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>229</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>251</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>252</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>             <cpp:value>257</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_newfstatat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_newfstatat</name></cpp:macro>         <cpp:value>262</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>           <cpp:value>263</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>279</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fallocate</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fallocate</name></cpp:macro>          <cpp:value>285</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of x86-64 definitions                                                 */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>(__NR_Linux + 185)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>(__NR_Linux + 186)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>(__NR_Linux + 190)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>(__NR_Linux + 191)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigaction</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigreturn</name></cpp:macro>       <cpp:value>(__NR_Linux + 193)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigaction</name></cpp:macro>       <cpp:value>(__NR_Linux + 194)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigprocmask</name></cpp:macro>     <cpp:value>(__NR_Linux + 195)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigpending</name></cpp:macro>      <cpp:value>(__NR_Linux + 196)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigsuspend</name></cpp:macro>      <cpp:value>(__NR_Linux + 199)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>            <cpp:value>(__NR_Linux + 200)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>           <cpp:value>(__NR_Linux + 201)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_stat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_stat64</name></cpp:macro>             <cpp:value>(__NR_Linux + 213)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstat64</name></cpp:macro>            <cpp:value>(__NR_Linux + 215)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents64</name></cpp:macro>         <cpp:value>(__NR_Linux + 219)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>(__NR_Linux + 222)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>(__NR_Linux + 223)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>(__NR_Linux + 224)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 225)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>(__NR_Linux + 227)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 228)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 230)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>(__NR_Linux + 231)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>(__NR_Linux + 236)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>(__NR_Linux + 238)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>(__NR_Linux + 239)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>(__NR_Linux + 240)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>(__NR_Linux + 252)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_statfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_statfs64</name></cpp:macro>           <cpp:value>(__NR_Linux + 255)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatfs64</name></cpp:macro>          <cpp:value>(__NR_Linux + 256)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>(__NR_Linux + 263)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>(__NR_Linux + 264)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>             <cpp:value>(__NR_Linux + 288)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatat</name></cpp:macro>            <cpp:value>(__NR_Linux + 293)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>           <cpp:value>(__NR_Linux + 294)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>(__NR_Linux + 308)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getcpu</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getcpu</name></cpp:macro>             <cpp:value>(__NR_Linux + 312)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>(__NR_Linux + 314)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>(__NR_Linux + 315)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of MIPS (old 32bit API) definitions */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive>  <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI64</name></expr></cpp:elif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>            <cpp:value>(__NR_Linux +  16)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>           <cpp:value>(__NR_Linux +  17)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>(__NR_Linux + 115)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>(__NR_Linux + 116)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>(__NR_Linux + 117)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>(__NR_Linux + 118)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>(__NR_Linux + 178)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>(__NR_Linux + 179)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>(__NR_Linux + 180)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 181)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>(__NR_Linux + 183)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 184)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 186)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>(__NR_Linux + 187)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>(__NR_Linux + 192)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>(__NR_Linux + 194)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>(__NR_Linux + 195)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>(__NR_Linux + 196)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>(__NR_Linux + 212)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>(__NR_Linux + 222)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>(__NR_Linux + 223)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>             <cpp:value>(__NR_Linux + 247)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatat</name></cpp:macro>            <cpp:value>(__NR_Linux + 252)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>           <cpp:value>(__NR_Linux + 253)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>(__NR_Linux + 267)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getcpu</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getcpu</name></cpp:macro>             <cpp:value>(__NR_Linux + 271)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>(__NR_Linux + 273)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>(__NR_Linux + 274)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of MIPS (64bit API) definitions */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>(__NR_Linux + 115)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>(__NR_Linux + 116)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>(__NR_Linux + 117)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>(__NR_Linux + 118)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>(__NR_Linux + 178)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>(__NR_Linux + 179)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>(__NR_Linux + 180)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 181)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>(__NR_Linux + 183)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 184)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>(__NR_Linux + 186)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>(__NR_Linux + 187)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>(__NR_Linux + 192)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>(__NR_Linux + 194)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>(__NR_Linux + 195)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>(__NR_Linux + 196)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>(__NR_Linux + 213)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_statfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_statfs64</name></cpp:macro>           <cpp:value>(__NR_Linux + 217)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatfs64</name></cpp:macro>          <cpp:value>(__NR_Linux + 218)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>(__NR_Linux + 226)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>(__NR_Linux + 227)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>             <cpp:value>(__NR_Linux + 251)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatat</name></cpp:macro>            <cpp:value>(__NR_Linux + 256)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>           <cpp:value>(__NR_Linux + 257)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>(__NR_Linux + 271)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getcpu</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getcpu</name></cpp:macro>             <cpp:value>(__NR_Linux + 275)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>(__NR_Linux + 277)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>(__NR_Linux + 278)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of MIPS (new 32bit API) definitions                                   */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of MIPS definitions                                                   */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setfsuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsuid</name></cpp:macro>           <cpp:value>138</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsgid</name></cpp:macro>           <cpp:value>139</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>164</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>165</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>169</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>170</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigaction</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigreturn</name></cpp:macro>       <cpp:value>172</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigaction</name></cpp:macro>       <cpp:value>173</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigprocmask</name></cpp:macro>     <cpp:value>174</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigpending</name></cpp:macro>      <cpp:value>175</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigsuspend</name></cpp:macro>      <cpp:value>178</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>            <cpp:value>179</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>           <cpp:value>180</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ugetrlimit</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ugetrlimit</name></cpp:macro>         <cpp:value>190</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>191</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_stat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_stat64</name></cpp:macro>             <cpp:value>195</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstat64</name></cpp:macro>            <cpp:value>197</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents64</name></cpp:macro>         <cpp:value>202</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>207</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>208</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>209</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>210</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>212</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>213</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>215</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>216</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>221</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>222</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>223</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>232</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>246</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>247</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_statfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_statfs64</name></cpp:macro>           <cpp:value>252</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatfs64</name></cpp:macro>          <cpp:value>253</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fadvise64_64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fadvise64_64</name></cpp:macro>       <cpp:value>254</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>273</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>274</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>             <cpp:value>286</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatat64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatat64</name></cpp:macro>          <cpp:value>291</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>           <cpp:value>292</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>301</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getcpu</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getcpu</name></cpp:macro>             <cpp:value>302</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* End of powerpc defininitions                                              */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_quotactl</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_quotactl</name></cpp:macro>           <cpp:value>131</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigreturn</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigreturn</name></cpp:macro>       <cpp:value>173</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigaction</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigaction</name></cpp:macro>       <cpp:value>174</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigprocmask</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigprocmask</name></cpp:macro>     <cpp:value>175</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigpending</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigpending</name></cpp:macro>      <cpp:value>176</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_rt_sigsuspend</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_rt_sigsuspend</name></cpp:macro>      <cpp:value>179</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pread64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pread64</name></cpp:macro>            <cpp:value>180</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_pwrite64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_pwrite64</name></cpp:macro>           <cpp:value>181</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getdents64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getdents64</name></cpp:macro>         <cpp:value>220</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_readahead</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_readahead</name></cpp:macro>          <cpp:value>222</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_setxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setxattr</name></cpp:macro>           <cpp:value>224</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lsetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lsetxattr</name></cpp:macro>          <cpp:value>225</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getxattr</name></cpp:macro>           <cpp:value>227</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_lgetxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_lgetxattr</name></cpp:macro>          <cpp:value>228</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_listxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_listxattr</name></cpp:macro>          <cpp:value>230</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_llistxattr</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_llistxattr</name></cpp:macro>         <cpp:value>231</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_gettid</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_gettid</name></cpp:macro>             <cpp:value>236</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_tkill</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_tkill</name></cpp:macro>              <cpp:value>237</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_futex</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_futex</name></cpp:macro>              <cpp:value>238</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_setaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_setaffinity</name></cpp:macro>  <cpp:value>239</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_sched_getaffinity</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_sched_getaffinity</name></cpp:macro>  <cpp:value>240</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_set_tid_address</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_set_tid_address</name></cpp:macro>    <cpp:value>252</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_gettime</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_gettime</name></cpp:macro>      <cpp:value>260</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_clock_getres</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_clock_getres</name></cpp:macro>       <cpp:value>261</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_statfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_statfs64</name></cpp:macro>           <cpp:value>265</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fstatfs64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatfs64</name></cpp:macro>          <cpp:value>266</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_set</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_set</name></cpp:macro>         <cpp:value>282</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_ioprio_get</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ioprio_get</name></cpp:macro>         <cpp:value>283</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_openat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_openat</name></cpp:macro>             <cpp:value>288</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_unlinkat</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_unlinkat</name></cpp:macro>           <cpp:value>294</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_move_pages</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_move_pages</name></cpp:macro>         <cpp:value>310</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_getcpu</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getcpu</name></cpp:macro>             <cpp:value>311</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NR_fallocate</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fallocate</name></cpp:macro>          <cpp:value>314</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* Some syscalls are named/numbered differently between s390 and s390x. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__s390x__</name></cpp:ifdef>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getrlimit</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getrlimit</name></cpp:macro>          <cpp:value>191</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>208</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getresuid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>209</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setresgid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>210</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getresgid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>211</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setfsuid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsuid</name></cpp:macro>           <cpp:value>215</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setfsgid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsgid</name></cpp:macro>           <cpp:value>216</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_fadvise64</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fadvise64</name></cpp:macro>          <cpp:value>253</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_newfstatat</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_newfstatat</name></cpp:macro>         <cpp:value>293</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* __s390x__ */</comment>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getrlimit</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getrlimit</name></cpp:macro>          <cpp:value>76</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setfsuid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsuid</name></cpp:macro>           <cpp:value>138</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setfsgid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsgid</name></cpp:macro>           <cpp:value>139</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid</name></cpp:macro>          <cpp:value>164</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getresuid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid</name></cpp:macro>          <cpp:value>165</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setresgid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid</name></cpp:macro>          <cpp:value>170</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getresgid</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid</name></cpp:macro>          <cpp:value>171</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_ugetrlimit</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_ugetrlimit</name></cpp:macro>         <cpp:value>191</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_mmap2</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_mmap2</name></cpp:macro>              <cpp:value>192</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setresuid32</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresuid32</name></cpp:macro>        <cpp:value>208</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getresuid32</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresuid32</name></cpp:macro>        <cpp:value>209</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setresgid32</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setresgid32</name></cpp:macro>        <cpp:value>210</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_getresgid32</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_getresgid32</name></cpp:macro>        <cpp:value>211</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setfsuid32</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsuid32</name></cpp:macro>         <cpp:value>215</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_setfsgid32</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_setfsgid32</name></cpp:macro>         <cpp:value>216</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_fadvise64_64</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fadvise64_64</name></cpp:macro>       <cpp:value>264</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__NR_fstatat64</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>__NR_fstatat64</name></cpp:macro>          <cpp:value>293</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __s390__ */</comment>
<comment type="block">/* End of s390/s390x definitions                                             */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* After forking, we must make sure to only call system calls.               */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BOUNDED_POINTERS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Need to port invocations of syscalls for bounded ptrs"</cpp:literal></cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* The core dumper and the thread lister get executed after threads
   * have been suspended. As a consequence, we cannot call any functions
   * that acquire locks. Unfortunately, libc wraps most system calls
   * (e.g. in order to implement pthread_atfork, and to make calls
   * cancellable), which means we cannot call these functions. Instead,
   * we have to call syscall() directly.
   */</comment>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_ERRNO</name></cpp:undef>
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_ERRNO</name></cpp:ifdef>
    <comment type="block">/* Allow the including file to override the location of errno. This can
     * be useful when using clone() with the CLONE_VM option.
     */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ERRNO</name></cpp:macro> <cpp:value>SYS_ERRNO</cpp:value></cpp:define>
  <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ERRNO</name></cpp:macro> <cpp:value>errno</cpp:value></cpp:define>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_INLINE</name></cpp:undef>
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_INLINE</name></cpp:ifdef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_INLINE</name></cpp:macro> <cpp:value>SYS_INLINE</cpp:value></cpp:define>
  <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_INLINE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Allow the including file to override the prefix used for all new
   * system calls. By default, it will be set to "sys_".
   */</comment>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_NAME</name></cpp:undef>
  <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYS_PREFIX</name></cpp:ifndef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys0_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys1_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys2_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">3</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys3_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys4_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">5</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys5_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">6</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys6_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">7</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys7_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys8_##name</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_PREFIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SYS_PREFIX</name> <operator>==</operator> <literal type="number">9</literal></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys9_##name</cpp:value></cpp:define>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_RETURN</name></cpp:undef>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> \
       <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
  <comment type="block">/* Failing system calls return a negative result in the range of
   * -1..-4095. These are "errno" values with the sign inverted.
   */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_RETURN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro>                                               \
    <cpp:value>do {                                                                      \
      if ((unsigned long)(res) &gt;= (unsigned long)(-4095)) {                   \
        LSS_ERRNO = -(res);                                                   \
        res = -1;                                                             \
      }                                                                       \
      return (type) (res);                                                    \
    } while (0)</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/* On MIPS, failing system calls return -1, and set errno in a
   * separate CPU register.
   */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_RETURN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro>                                          \
    <cpp:value>do {                                                                      \
      if (err) {                                                              \
        unsigned long __errnovalue = (res);                                   \
        LSS_ERRNO = __errnovalue;                                             \
        res = -1;                                                             \
      }                                                                       \
      return (type) (res);                                                    \
    } while (0)</cpp:value></cpp:define>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/* On PPC, failing system calls return -1, and set errno in a
   * separate CPU register. See linux/unistd.h.
   */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_RETURN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro>                                          \
   <cpp:value>do {                                                                       \
     if (err &amp; 0x10000000 ) {                                                 \
       LSS_ERRNO = (res);                                                     \
       res = -1;                                                              \
     }                                                                        \
     return (type) (res);                                                     \
   } while (0)</cpp:value></cpp:define>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* In PIC mode (e.g. when building shared libraries), gcc for i386
     * reserves ebx. Unfortunately, most distribution ship with implementations
     * of _syscallX() which clobber ebx.
     * Also, most definitions of _syscallX() neglect to mark "memory" as being
     * clobbered. This causes problems with compilers, that do a better job
     * at optimizing across __asm__ calls.
     * So, we just have to redefine all of the _syscallX() macros.
     */</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_ENTRYPOINT</name></cpp:undef>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_SYSCALL_ENTRYPOINT</name></cpp:ifdef>
    <expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <macro><name>void</name> <argument_list>(<argument>**LSS_NAME(get_syscall_entrypoint)(void)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator> <block>{
      <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>entrypoint</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
      <expr><name>asm</name> <specifier>volatile</specifier><operator>(</operator><literal type="string">".bss\n"</literal>
                   <literal type="string">".align 8\n"</literal>
                   <literal type="string">".globl "</literal> <name>SYS_SYSCALL_ENTRYPOINT</name> <literal type="string">"\n"</literal>
                   <literal type="string">".common "</literal> <name>SYS_SYSCALL_ENTRYPOINT</name> <literal type="string">",8,8\n"</literal>
                   <literal type="string">".previous\n"</literal>
                   <comment type="block">/* This logically does 'lea "SYS_SYSCALL_ENTRYPOINT", %0' */</comment>
                   <literal type="string">"call 0f\n"</literal>
                 <literal type="string">"0:pop  %0\n"</literal>
                   <literal type="string">"add  $_GLOBAL_OFFSET_TABLE_+[.-0b], %0\n"</literal>
                   <literal type="string">"mov  "</literal> <name>SYS_SYSCALL_ENTRYPOINT</name> <literal type="string">"@GOT(%0), %0\n"</literal>
                   <operator>:</operator> <literal type="string">"=r"</literal><operator>(</operator><name>entrypoint</name><operator>)</operator><operator>)</operator></expr>;
      <return>return <expr><name>entrypoint</name></expr>;</return>
    }</block></expr></expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ENTRYPOINT</name></cpp:macro> <cpp:value>".bss\n"                                           \
                           ".align 8\n"                                       \
                           ".globl " SYS_SYSCALL_ENTRYPOINT "\n"              \
                           ".common " SYS_SYSCALL_ENTRYPOINT ",8,8\n"         \
                           ".previous\n"                                      \
                           <comment type="block">/* Check the SYS_SYSCALL_ENTRYPOINT vector      */</comment> \
                           "push %%eax\n"                                     \
                           "call 10000f\n"                                    \
                     "10000:pop  %%eax\n"                                     \
                           "add  $_GLOBAL_OFFSET_TABLE_+[.-10000b], %%eax\n"  \
                           "mov  " SYS_SYSCALL_ENTRYPOINT                     \
                                 "@GOT(%%eax), %%eax\n"                       \
                           "mov  0(%%eax), %%eax\n"                           \
                           "test %%eax, %%eax\n"                              \
                           "jz   10002f\n"                                    \
                           "push %%eax\n"                                     \
                           "call 10001f\n"                                    \
                     "10001:pop  %%eax\n"                                     \
                           "add  $(10003f-10001b), %%eax\n"                   \
                           "xchg 4(%%esp), %%eax\n"                           \
                           "ret\n"                                            \
                     "10002:pop  %%eax\n"                                     \
                           "int $0x80\n"                                      \
                     "10003:\n"</cpp:value></cpp:define>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ENTRYPOINT</name></cpp:macro> <cpp:value>"int $0x80\n"</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                            \
      <cpp:value>long __res;                                                             \
      __asm__ __volatile__("push %%ebx\n"                                     \
                           "movl %2,%%ebx\n"                                  \
                           LSS_ENTRYPOINT                                     \
                           "pop %%ebx"                                        \
                           args                                               \
                           : "esp", "memory");                                \
      LSS_RETURN(type,__res)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                              \
      <cpp:value>type LSS_NAME(name)(void) {                                             \
        long __res;                                                           \
        __asm__ volatile(LSS_ENTRYPOINT                                       \
                         : "=a" (__res)                                       \
                         : "0" (__NR_##name)                                  \
                         : "esp", "memory");                                  \
        LSS_RETURN(type,__res);                                               \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                   \
      <cpp:value>type LSS_NAME(name)(type1 arg1) {                                       \
        LSS_BODY(type,                                                        \
             : "=a" (__res)                                                   \
             : "0" (__NR_##name), "ri" ((long)(arg1)));                       \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                        \
      <cpp:value>type LSS_NAME(name)(type1 arg1,type2 arg2) {                            \
        LSS_BODY(type,                                                        \
             : "=a" (__res)                                                   \
             : "0" (__NR_##name),"ri" ((long)(arg1)), "c" ((long)(arg2)));    \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>             \
      <cpp:value>type LSS_NAME(name)(type1 arg1,type2 arg2,type3 arg3) {                 \
        LSS_BODY(type,                                                        \
             : "=a" (__res)                                                   \
             : "0" (__NR_##name), "ri" ((long)(arg1)), "c" ((long)(arg2)),    \
               "d" ((long)(arg3)));                                           \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
        LSS_BODY(type,                                                        \
             : "=a" (__res)                                                   \
             : "0" (__NR_##name), "ri" ((long)(arg1)), "c" ((long)(arg2)),    \
               "d" ((long)(arg3)),"S" ((long)(arg4)));                        \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_syscall5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5) {                                       \
        long __res;                                                           \
        __asm__ __volatile__("push %%ebx\n"                                   \
                             "movl %2,%%ebx\n"                                \
                             "movl %1,%%eax\n"                                \
                             LSS_ENTRYPOINT                                   \
                             "pop  %%ebx"                                     \
                             : "=a" (__res)                                   \
                             : "i" (__NR_##name), "ri" ((long)(arg1)),        \
                               "c" ((long)(arg2)), "d" ((long)(arg3)),        \
                               "S" ((long)(arg4)), "D" ((long)(arg5))         \
                             : "esp", "memory");                              \
        LSS_RETURN(type,__res);                                               \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_syscall6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>                                  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5, type6 arg6) {                           \
        long __res;                                                           \
        struct { long __a1; long __a6; } __s = { (long)arg1, (long) arg6 };   \
        __asm__ __volatile__("push %%ebp\n"                                   \
                             "push %%ebx\n"                                   \
                             "movl 4(%2),%%ebp\n"                             \
                             "movl 0(%2), %%ebx\n"                            \
                             "movl %1,%%eax\n"                                \
                             LSS_ENTRYPOINT                                   \
                             "pop  %%ebx\n"                                   \
                             "pop  %%ebp"                                     \
                             : "=a" (__res)                                   \
                             : "i" (__NR_##name),  "0" ((long)(&amp;__s)),        \
                               "c" ((long)(arg2)), "d" ((long)(arg3)),        \
                               "S" ((long)(arg4)), "D" ((long)(arg5))         \
                             : "esp", "memory");                              \
        LSS_RETURN(type,__res);                                               \
      }</cpp:value></cpp:define>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>__res</name></decl>;</decl_stmt>
      <asm>__asm__ <specifier>__volatile__</specifier>(<comment type="block">/* if (fn == NULL)
                            *   return -EINVAL;
                            */</comment>
                           "movl   %3,%%ecx\n"
                           "jecxz  1f\n"

                           <comment type="block">/* if (child_stack == NULL)
                            *   return -EINVAL;
                            */</comment>
                           "movl   %4,%%ecx\n"
                           "jecxz  1f\n"

                           <comment type="block">/* Set up alignment of the child stack:
                            * child_stack = (child_stack &amp; ~0xF) - 20;
                            */</comment>
                           "andl   $-16,%%ecx\n"
                           "subl   $20,%%ecx\n"

                           <comment type="block">/* Push "arg" and "fn" onto the stack that will be
                            * used by the child.
                            */</comment>
                           "movl   %6,%%eax\n"
                           "movl   %%eax,4(%%ecx)\n"
                           "movl   %3,%%eax\n"
                           "movl   %%eax,(%%ecx)\n"

                           <comment type="block">/* %eax = syscall(%eax = __NR_clone,
                            *                %ebx = flags,
                            *                %ecx = child_stack,
                            *                %edx = parent_tidptr,
                            *                %esi = newtls,
                            *                %edi = child_tidptr)
                            * Also, make sure that %ebx gets preserved as it is
                            * used in PIC mode.
                            */</comment>
                           "movl   %8,%%esi\n"
                           "movl   %7,%%edx\n"
                           "movl   %5,%%eax\n"
                           "movl   %9,%%edi\n"
                           "pushl  %%ebx\n"
                           "movl   %%eax,%%ebx\n"
                           "movl   %2,%%eax\n"
                           LSS_ENTRYPOINT

                           <comment type="block">/* In the parent: restore %ebx
                            * In the child:  move "fn" into %ebx
                            */</comment>
                           "popl   %%ebx\n"

                           <comment type="block">/* if (%eax != 0)
                            *   return %eax;
                            */</comment>
                           "test   %%eax,%%eax\n"
                           "jnz    1f\n"

                           <comment type="block">/* In the child, now. Terminate frame pointer chain.
                            */</comment>
                           "movl   $0,%%ebp\n"

                           <comment type="block">/* Call "fn". "arg" is already on the stack.
                            */</comment>
                           "call   *%%ebx\n"

                           <comment type="block">/* Call _exit(%ebx). Unfortunately older versions
                            * of gcc restrict the number of arguments that can
                            * be passed to asm(). So, we need to hard-code the
                            * system call number.
                            */</comment>
                           "movl   %%eax,%%ebx\n"
                           "movl   $1,%%eax\n"
                           LSS_ENTRYPOINT

                           <comment type="block">/* Return to parent.
                            */</comment>
                         "1:\n"
                           : "=a" (__res)
                           : "0"(-EINVAL), "i"(__NR_clone),
                             "m"(fn), "m"(child_stack), "m"(flags), "m"(arg),
                             "m"(parent_tidptr), "m"(newtls), "m"(child_tidptr)
                           : "esp", "memory", "ecx", "edx", "esi", "edi");</asm>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>set_thread_area</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>get_thread_area</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>restore_rt</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
      <comment type="block">/* On i386, the kernel does not know how to return from a signal
       * handler. Instead, it relies on user space to provide a
       * restorer function that calls the {rt_,}sigreturn() system call.
       * Unfortunately, we cannot just reference the glibc version of this
       * function, as glibc goes out of its way to make it inaccessible.
       */</comment>
      <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>res</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
      <asm>__asm__ <specifier>__volatile__</specifier>("call   2f\n"
                         "0:.align 16\n"
                         "1:movl   %1,%%eax\n"
                           LSS_ENTRYPOINT
                         "2:popl   %0\n"
                           "addl   $(1b-0b),%0\n"
                           : "=a" (res)
                           : "i"  (__NR_rt_sigreturn));</asm>
      <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>restore</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
      <comment type="block">/* On i386, the kernel does not know how to return from a signal
       * handler. Instead, it relies on user space to provide a
       * restorer function that calls the {rt_,}sigreturn() system call.
       * Unfortunately, we cannot just reference the glibc version of this
       * function, as glibc goes out of its way to make it inaccessible.
       */</comment>
      <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>res</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
      <asm>__asm__ <specifier>__volatile__</specifier>("call   2f\n"
                         "0:.align 16\n"
                         "1:pop    %%eax\n"
                           "movl   %1,%%eax\n"
                           LSS_ENTRYPOINT
                         "2:popl   %0\n"
                           "addl   $(1b-0b),%0\n"
                           : "=a" (res)
                           : "i"  (__NR_sigreturn));</asm>
      <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* There are no known problems with any of the _syscallX() macros
     * currently shipping for x86_64, but we still need to be able to define
     * our own version so that we can override the location of the errno
     * location (e.g. when using the clone() system call with the CLONE_VM
     * option).
     */</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_ENTRYPOINT</name></cpp:undef>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_SYSCALL_ENTRYPOINT</name></cpp:ifdef>
    <expr_stmt><expr><specifier>static</specifier> <specifier>inline</specifier> <macro><name>void</name> <argument_list>(<argument>**LSS_NAME(get_syscall_entrypoint)(void)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator> <block>{
      <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>entrypoint</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
      <expr><name>asm</name> <specifier>volatile</specifier><operator>(</operator><literal type="string">".bss\n"</literal>
                   <literal type="string">".align 8\n"</literal>
                   <literal type="string">".globl "</literal> <name>SYS_SYSCALL_ENTRYPOINT</name> <literal type="string">"\n"</literal>
                   <literal type="string">".common "</literal> <name>SYS_SYSCALL_ENTRYPOINT</name> <literal type="string">",8,8\n"</literal>
                   <literal type="string">".previous\n"</literal>
                   <literal type="string">"mov "</literal> <name>SYS_SYSCALL_ENTRYPOINT</name> <literal type="string">"@GOTPCREL(%%rip), %0\n"</literal>
                   <operator>:</operator> <literal type="string">"=r"</literal><operator>(</operator><name>entrypoint</name><operator>)</operator><operator>)</operator></expr>;
      <return>return <expr><name>entrypoint</name></expr>;</return>
    }</block></expr></expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ENTRYPOINT</name></cpp:macro>                                                    \
              <cpp:value>".bss\n"                                                        \
              ".align 8\n"                                                    \
              ".globl " SYS_SYSCALL_ENTRYPOINT "\n"                           \
              ".common " SYS_SYSCALL_ENTRYPOINT ",8,8\n"                      \
              ".previous\n"                                                   \
              "mov " SYS_SYSCALL_ENTRYPOINT "@GOTPCREL(%%rip), %%rcx\n"       \
              "mov  0(%%rcx), %%rcx\n"                                        \
              "test %%rcx, %%rcx\n"                                           \
              "jz   10001f\n"                                                 \
              "call *%%rcx\n"                                                 \
              "jmp  10002f\n"                                                 \
        "10001:syscall\n"                                                     \
        "10002:\n"</cpp:value></cpp:define>

    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ENTRYPOINT</name></cpp:macro> <cpp:value>"syscall\n"</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* The x32 ABI has 32 bit longs, but the syscall interface is 64 bit.
     * We need to explicitly cast to an unsigned 64 bit type to avoid implicit
     * sign extension.  We can't cast pointers directly because those are
     * 32 bits, and gcc will dump ugly warnings about casting from a pointer
     * to an integer of a different size.
     */</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_SYSCALL_ARG</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SYSCALL_ARG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)(uintptr_t)(a))</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_LSS_RETURN</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LSS_RETURN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>cast</name></type></parameter>)</parameter_list></cpp:macro>                                      \
      <cpp:value>do {                                                                    \
        if ((uint64_t)(res) &gt;= (uint64_t)(-4095)) {                           \
          LSS_ERRNO = -(res);                                                 \
          res = -1;                                                           \
        }                                                                     \
        return (type)(cast)(res);                                             \
      } while (0)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_RETURN</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_RETURN</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_LSS_RETURN(type, res, uintptr_t)</cpp:value></cpp:define>

    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>_LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LSS_BODY</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>cast</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                              \
          <cpp:value>long long __res;                                                    \
          __asm__ __volatile__(LSS_BODY_ASM##nr LSS_ENTRYPOINT                \
            : "=a" (__res)                                                    \
            : "0" (__NR_##name) LSS_BODY_ARG##nr(__VA_ARGS__)                 \
            : LSS_BODY_CLOBBER##nr "r11", "rcx", "memory");                   \
          _LSS_RETURN(type, __res, cast)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>_LSS_BODY(nr, type, name, uintptr_t, ## args)</cpp:value></cpp:define>

    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ASM0</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ASM1</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ASM2</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ASM3</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ASM4</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ASM5</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ASM6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ASM0</name></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ASM1</name></cpp:macro> <cpp:value>LSS_BODY_ASM0</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ASM2</name></cpp:macro> <cpp:value>LSS_BODY_ASM1</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ASM3</name></cpp:macro> <cpp:value>LSS_BODY_ASM2</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ASM4</name></cpp:macro> <cpp:value>LSS_BODY_ASM3 "movq %5,%%r10;"</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ASM5</name></cpp:macro> <cpp:value>LSS_BODY_ASM4 "movq %6,%%r8;"</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ASM6</name></cpp:macro> <cpp:value>LSS_BODY_ASM5 "movq %7,%%r9;"</cpp:value></cpp:define>

    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_CLOBBER0</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_CLOBBER1</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_CLOBBER2</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_CLOBBER3</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_CLOBBER4</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_CLOBBER5</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_CLOBBER6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_CLOBBER0</name></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_CLOBBER1</name></cpp:macro> <cpp:value>LSS_BODY_CLOBBER0</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_CLOBBER2</name></cpp:macro> <cpp:value>LSS_BODY_CLOBBER1</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_CLOBBER3</name></cpp:macro> <cpp:value>LSS_BODY_CLOBBER2</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_CLOBBER4</name></cpp:macro> <cpp:value>LSS_BODY_CLOBBER3 "r10",</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_CLOBBER5</name></cpp:macro> <cpp:value>LSS_BODY_CLOBBER4 "r8",</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_CLOBBER6</name></cpp:macro> <cpp:value>LSS_BODY_CLOBBER5 "r9",</cpp:value></cpp:define>

    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ARG0</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ARG1</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ARG2</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ARG3</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ARG4</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ARG5</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY_ARG6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ARG0</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ARG1</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>LSS_BODY_ARG0(), "D" (arg1)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ARG2</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>LSS_BODY_ARG1(arg1), "S" (arg2)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ARG3</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>LSS_BODY_ARG2(arg1, arg2), "d" (arg3)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ARG4</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>LSS_BODY_ARG3(arg1, arg2, arg3), "r" (arg4)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ARG5</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>LSS_BODY_ARG4(arg1, arg2, arg3, arg4), "r" (arg5)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY_ARG6</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>, <parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>LSS_BODY_ARG5(arg1, arg2, arg3, arg4, arg5), "r" (arg6)</cpp:value></cpp:define>

    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                              \
      <cpp:value>type LSS_NAME(name)(void) {                                             \
        LSS_BODY(0, type, name);                                              \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                   \
      <cpp:value>type LSS_NAME(name)(type1 arg1) {                                       \
        LSS_BODY(1, type, name, LSS_SYSCALL_ARG(arg1));                       \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                        \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
        LSS_BODY(2, type, name, LSS_SYSCALL_ARG(arg1), LSS_SYSCALL_ARG(arg2));\
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
        LSS_BODY(3, type, name, LSS_SYSCALL_ARG(arg1), LSS_SYSCALL_ARG(arg2), \
                                LSS_SYSCALL_ARG(arg3));                       \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
        LSS_BODY(4, type, name, LSS_SYSCALL_ARG(arg1), LSS_SYSCALL_ARG(arg2), \
                                LSS_SYSCALL_ARG(arg3), LSS_SYSCALL_ARG(arg4));\
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5) {                                       \
        LSS_BODY(5, type, name, LSS_SYSCALL_ARG(arg1), LSS_SYSCALL_ARG(arg2), \
                                LSS_SYSCALL_ARG(arg3), LSS_SYSCALL_ARG(arg4), \
                                LSS_SYSCALL_ARG(arg5));                       \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>                                  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5, type6 arg6) {                           \
        LSS_BODY(6, type, name, LSS_SYSCALL_ARG(arg1), LSS_SYSCALL_ARG(arg2), \
                                LSS_SYSCALL_ARG(arg3), LSS_SYSCALL_ARG(arg4), \
                                LSS_SYSCALL_ARG(arg5), LSS_SYSCALL_ARG(arg6));\
      }</cpp:value></cpp:define>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>__res</name></decl>;</decl_stmt>
      <block>{<block_content>
        <asm>__asm__ <specifier>__volatile__</specifier>(<comment type="block">/* if (fn == NULL)
                              *   return -EINVAL;
                              */</comment>
                             "testq  %4,%4\n"
                             "jz     1f\n"

                             <comment type="block">/* if (child_stack == NULL)
                              *   return -EINVAL;
                              */</comment>
                             "testq  %5,%5\n"
                             "jz     1f\n"

                             <comment type="block">/* childstack -= 2*sizeof(void *);
                              */</comment>
                             "subq   $16,%5\n"

                             <comment type="block">/* Push "arg" and "fn" onto the stack that will be
                              * used by the child.
                              */</comment>
                             "movq   %7,8(%5)\n"
                             "movq   %4,0(%5)\n"

                             <comment type="block">/* %rax = syscall(%rax = __NR_clone,
                              *                %rdi = flags,
                              *                %rsi = child_stack,
                              *                %rdx = parent_tidptr,
                              *                %r8  = new_tls,
                              *                %r10 = child_tidptr)
                              */</comment>
                             "movq   %2,%%rax\n"
                             "movq   %9,%%r8\n"
                             "movq   %10,%%r10\n"
                             LSS_ENTRYPOINT

                             <comment type="block">/* if (%rax != 0)
                              *   return;
                              */</comment>
                             "testq  %%rax,%%rax\n"
                             "jnz    1f\n"

                             <comment type="block">/* In the child. Terminate frame pointer chain.
                              */</comment>
                             "xorq   %%rbp,%%rbp\n"

                             <comment type="block">/* Call "fn(arg)".
                              */</comment>
                             "popq   %%rax\n"
                             "popq   %%rdi\n"
                             "call   *%%rax\n"

                             <comment type="block">/* Call _exit(%ebx).
                              */</comment>
                             "movq   %%rax,%%rdi\n"
                             "movq   %3,%%rax\n"
                             LSS_ENTRYPOINT

                             <comment type="block">/* Return to parent.
                              */</comment>
                           "1:\n"
                             : "=a" (__res)
                             : "0"(-EINVAL), "i"(__NR_clone), "i"(__NR_exit),
                               "r"(LSS_SYSCALL_ARG(fn)),
                               "S"(LSS_SYSCALL_ARG(child_stack)),
                               "D"(LSS_SYSCALL_ARG(flags)),
                               "r"(LSS_SYSCALL_ARG(arg)),
                               "d"(LSS_SYSCALL_ARG(parent_tidptr)),
                               "r"(LSS_SYSCALL_ARG(newtls)),
                               "r"(LSS_SYSCALL_ARG(child_tidptr))
                             : "rsp", "memory", "r8", "r10", "r11", "rcx");</asm>
      </block_content>}</block>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>arch_prctl</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>restore_rt</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
      <comment type="block">/* On x86-64, the kernel does not know how to return from
       * a signal handler. Instead, it relies on user space to provide a
       * restorer function that calls the rt_sigreturn() system call.
       * Unfortunately, we cannot just reference the glibc version of this
       * function, as glibc goes out of its way to make it inaccessible.
       */</comment>
      <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name></decl>;</decl_stmt>
      <asm>__asm__ <specifier>__volatile__</specifier>("jmp    2f\n"
                           ".align 16\n"
                         "1:movq   %1,%%rax\n"
                           LSS_ENTRYPOINT
                         "2:leaq   1b(%%rip),%0\n"
                           : "=r" (res)
                           : "i"  (__NR_rt_sigreturn));</asm>
      <return>return <expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>res</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* Most definitions of _syscallX() neglect to mark "memory" as being
     * clobbered. This causes problems with compilers, that do a better job
     * at optimizing across __asm__ calls.
     * So, we just have to redefine all of the _syscallX() macros.
     */</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_REG</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register long __r##r __asm__("r"#r) = (long)a</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                       \
          <cpp:value>register long __res_r0 __asm__("r0");                               \
          long __res;                                                         \
          __asm__ __volatile__ (__syscall(name)                               \
                                : "=r"(__res_r0) : args : "lr", "memory");    \
          __res = __res_r0;                                                   \
          LSS_RETURN(type, __res)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(void) {                                             \
        LSS_BODY(type, name);                                                 \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                \
      <cpp:value>type LSS_NAME(name)(type1 arg1) {                                       \
        LSS_REG(0, arg1); LSS_BODY(type, name, "r"(__r0));                    \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                   \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
        LSS_REG(0, arg1); LSS_REG(1, arg2);                                   \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1));                           \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>      \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2));                \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4);                                                     \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3));     \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5) {                                       \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4); LSS_REG(4, arg5);                                   \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
                             "r"(__r4));                                      \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>                                  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5, type6 arg6) {                           \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4); LSS_REG(4, arg5); LSS_REG(5, arg6);                 \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
                             "r"(__r4), "r"(__r5));                           \
      }</cpp:value></cpp:define>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>__res</name></decl>;</decl_stmt>
      <block>{<block_content>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>   <name>__flags</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r0"</literal></expr></argument>)</argument_list> <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__stack</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_stack</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__ptid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r2"</literal></expr></argument>)</argument_list> <init>= <expr><name>parent_tidptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__tls</name></type>   <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r3"</literal></expr></argument>)</argument_list> <init>= <expr><name>newtls</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>  <modifier>*</modifier><name>__ctid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r4"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_tidptr</name></expr></init></decl>;</decl_stmt>
        <asm>__asm__ <specifier>__volatile__</specifier>(<comment type="block">/* if (fn == NULL || child_stack == NULL)
                              *   return -EINVAL;
                              */</comment>
                             "cmp   %2,#0\n"
                             "cmpne %3,#0\n"
                             "moveq %0,%1\n"
                             "beq   1f\n"

                             <comment type="block">/* Push "arg" and "fn" onto the stack that will be
                              * used by the child.
                              */</comment>
                             "str   %5,[%3,#-4]!\n"
                             "str   %2,[%3,#-4]!\n"

                             <comment type="block">/* %r0 = syscall(%r0 = flags,
                              *               %r1 = child_stack,
                              *               %r2 = parent_tidptr,
                              *               %r3 = newtls,
                              *               %r4 = child_tidptr)
                              */</comment>
                             __syscall(clone)"\n"

                             <comment type="block">/* if (%r0 != 0)
                              *   return %r0;
                              */</comment>
                             "movs  %0,r0\n"
                             "bne   1f\n"

                             <comment type="block">/* In the child, now. Call "fn(arg)".
                              */</comment>
                             "ldr   r0,[sp, #4]\n"
                             "mov   lr,pc\n"
                             "ldr   pc,[sp]\n"

                             <comment type="block">/* Call _exit(%r0).
                              */</comment>
                             __syscall(exit)"\n"
                           "1:\n"
                             : "=r" (__res)
                             : "i"(-EINVAL),
                               "r"(fn), "r"(__stack), "r"(__flags), "r"(arg),
                               "r"(__ptid), "r"(__tls), "r"(__ctid)
                             : "cc", "lr", "memory");</asm>
      </block_content>}</block>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* Most definitions of _syscallX() neglect to mark "memory" as being
     * clobbered. This causes problems with compilers, that do a better job
     * at optimizing across __asm__ calls.
     * So, we just have to redefine all fo the _syscallX() macros.
     */</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_REG</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register long __r##r __asm__("r"#r) = (long)a</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                       \
          <cpp:value>register long __res_r0 __asm__("r0");                               \
          long __res;                                                         \
          __asm__ __volatile__ ("push {r7}\n"                                 \
                                "mov r7, %1\n"                                \
                                "swi 0x0\n"                                   \
                                "pop {r7}\n"                                  \
                                : "=r"(__res_r0)                              \
                                : "i"(__NR_##name) , ## args                  \
                                : "lr", "memory");                            \
          __res = __res_r0;                                                   \
          LSS_RETURN(type, __res)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(void) {                                             \
        LSS_BODY(type, name);                                                 \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                \
      <cpp:value>type LSS_NAME(name)(type1 arg1) {                                       \
        LSS_REG(0, arg1); LSS_BODY(type, name, "r"(__r0));                    \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                   \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
        LSS_REG(0, arg1); LSS_REG(1, arg2);                                   \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1));                           \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>      \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2));                \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4);                                                     \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3));     \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5) {                                       \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4); LSS_REG(4, arg5);                                   \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
                             "r"(__r4));                                      \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>                                  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5, type6 arg6) {                           \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4); LSS_REG(4, arg5); LSS_REG(5, arg6);                 \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
                             "r"(__r4), "r"(__r5));                           \
      }</cpp:value></cpp:define>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>__res</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fn</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>child_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>__res</name> <operator>=</operator> <operator>-</operator><name>EINVAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Push "arg" and "fn" onto the stack that will be
       * used by the child.
       */</comment>
      <block>{<block_content>
        <decl_stmt><decl><type><name>uintptr_t</name><modifier>*</modifier></type> <name>cstack</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>*</operator><operator>)</operator><name>child_stack</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>cstack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>fn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cstack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>child_stack</name> <operator>=</operator> <name>cstack</name></expr>;</expr_stmt>
      </block_content>}</block>
      <block>{<block_content>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>   <name>__flags</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r0"</literal></expr></argument>)</argument_list> <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__stack</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_stack</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__ptid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r2"</literal></expr></argument>)</argument_list> <init>= <expr><name>parent_tidptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__tls</name></type>   <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r3"</literal></expr></argument>)</argument_list> <init>= <expr><name>newtls</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>  <modifier>*</modifier><name>__ctid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"r4"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_tidptr</name></expr></init></decl>;</decl_stmt>
        <asm>__asm__ <specifier>__volatile__</specifier>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__thumb2__</name></cpp:ifdef>
            "push {r7}\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <comment type="block">/* %r0 = syscall(%r0 = flags,
             *               %r1 = child_stack,
             *               %r2 = parent_tidptr,
             *               %r3 = newtls,
             *               %r4 = child_tidptr)
             */</comment>
            "mov r7, %6\n"
            "swi 0x0\n"

            <comment type="block">/* if (%r0 != 0)
             *   return %r0;
             */</comment>
            "cmp   r0, #0\n"
            "bne   1f\n"

            <comment type="block">/* In the child, now. Call "fn(arg)".
             */</comment>
            "ldr   r0,[sp, #4]\n"

            "ldr   lr,[sp]\n"
            "blx   lr\n"

            <comment type="block">/* Call _exit(%r0).
             */</comment>
            "mov r7, %7\n"
            "swi 0x0\n"
            <comment type="block">/* Unreachable */</comment>
            "bkpt #0\n"
         "1:\n"
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__thumb2__</name></cpp:ifdef>
            "pop {r7}\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            "movs  %0,r0\n"
            : "=r"(__res)
            : "r"(__stack), "r"(__flags), "r"(__ptid), "r"(__tls), "r"(__ctid),
              "i"(__NR_clone), "i"(__NR_exit)
            : "cc", "lr", "memory"
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__thumb2__</name></cpp:ifndef>
            , "r7"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            );</asm>
      </block_content>}</block>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* Most definitions of _syscallX() neglect to mark "memory" as being
     * clobbered. This causes problems with compilers, that do a better job
     * at optimizing across __asm__ calls.
     * So, we just have to redefine all of the _syscallX() macros.
     */</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_REG</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register int64_t __r##r __asm__("x"#r) = (int64_t)a</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                       \
          <cpp:value>register int64_t __res_x0 __asm__("x0");                            \
          int64_t __res;                                                      \
          __asm__ __volatile__ ("mov x8, %1\n"                                \
                                "svc 0x0\n"                                   \
                                : "=r"(__res_x0)                              \
                                : "i"(__NR_##name) , ## args                  \
                                : "x8", "memory");                            \
          __res = __res_x0;                                                   \
          LSS_RETURN(type, __res)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(void) {                                             \
        LSS_BODY(type, name);                                                 \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                \
      <cpp:value>type LSS_NAME(name)(type1 arg1) {                                       \
        LSS_REG(0, arg1); LSS_BODY(type, name, "r"(__r0));                    \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                   \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
        LSS_REG(0, arg1); LSS_REG(1, arg2);                                   \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1));                           \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>      \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2));                \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4);                                                     \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3));     \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5) {                                       \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4); LSS_REG(4, arg5);                                   \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
                             "r"(__r4));                                      \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>                                  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5, type6 arg6) {                           \
        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
        LSS_REG(3, arg4); LSS_REG(4, arg5); LSS_REG(5, arg6);                 \
        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
                             "r"(__r4), "r"(__r5));                           \
      }</cpp:value></cpp:define>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>__res</name></decl>;</decl_stmt>
      <block>{<block_content>
        <decl_stmt><decl><type><specifier>register</specifier> <name>uint64_t</name> <name>__flags</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"x0"</literal></expr></argument>)</argument_list> <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__stack</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"x1"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_stack</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__ptid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"x2"</literal></expr></argument>)</argument_list> <init>= <expr><name>parent_tidptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__tls</name></type>   <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"x3"</literal></expr></argument>)</argument_list> <init>= <expr><name>newtls</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>  <modifier>*</modifier><name>__ctid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"x4"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_tidptr</name></expr></init></decl>;</decl_stmt>
        <asm>__asm__ <specifier>__volatile__</specifier>(<comment type="block">/* Push "arg" and "fn" onto the stack that will be
                              * used by the child.
                              */</comment>
                             "stp     %1, %4, [%2, #-16]!\n"

                             <comment type="block">/* %x0 = syscall(%x0 = flags,
                              *               %x1 = child_stack,
                              *               %x2 = parent_tidptr,
                              *               %x3 = newtls,
                              *               %x4 = child_tidptr)
                              */</comment>
                             "mov     x8, %8\n"
                             "svc     0x0\n"

                             <comment type="block">/* if (%r0 != 0)
                              *   return %r0;
                              */</comment>
                             "mov     %0, x0\n"
                             "cbnz    x0, 1f\n"

                             <comment type="block">/* In the child, now. Call "fn(arg)".
                              */</comment>
                             "ldp     x1, x0, [sp], #16\n"
                             "blr     x1\n"

                             <comment type="block">/* Call _exit(%r0).
                              */</comment>
                             "mov     x8, %9\n"
                             "svc     0x0\n"
                           "1:\n"
                             : "=r" (__res)
                             : "r"(fn), "r"(__stack), "r"(__flags), "r"(arg),
                               "r"(__ptid), "r"(__tls), "r"(__ctid),
                               "i"(__NR_clone), "i"(__NR_exit)
                             : "cc", "x8", "memory");</asm>
      </block_content>}</block>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_REG</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register unsigned long __r##r __asm__("$"#r) =       \
                                 (unsigned long)(a)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SYSCALL_CLOBBERS</name></cpp:undef>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SYSCALL_CLOBBERS</name></cpp:macro> <cpp:value>"$1", "$3", "$8", "$9", "$10",               \
                                 "$11", "$12", "$13", "$14", "$15",           \
                                 "$24", "$25", "hi", "lo", "memory"</cpp:value></cpp:define>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SYSCALL_CLOBBERS</name></cpp:macro> <cpp:value>"$1", "$3", "$10", "$11", "$12",             \
                                 "$13", "$14", "$15", "$24", "$25",           \
                                 "hi", "lo", "memory"</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>r7</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                        \
          <cpp:value>register unsigned long __v0 __asm__("$2") = __NR_##name;            \
          __asm__ __volatile__ ("syscall\n"                                   \
                                : "=r"(__v0), r7 (__r7)                       \
                                : "0"(__v0), ##__VA_ARGS__                    \
                                : LSS_SYSCALL_CLOBBERS);                      \
          LSS_RETURN(type, __v0, __r7)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(void) {                                             \
        register unsigned long __r7 __asm__("$7");                            \
        LSS_BODY(type, name, "=r");                                           \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                \
      <cpp:value>type LSS_NAME(name)(type1 arg1) {                                       \
        register unsigned long __r7 __asm__("$7");                            \
        LSS_REG(4, arg1); LSS_BODY(type, name, "=r", "r"(__r4));              \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                   \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
        register unsigned long __r7 __asm__("$7");                            \
        LSS_REG(4, arg1); LSS_REG(5, arg2);                                   \
        LSS_BODY(type, name, "=r", "r"(__r4), "r"(__r5));                     \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>      \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
        register unsigned long __r7 __asm__("$7");                            \
        LSS_REG(4, arg1); LSS_REG(5, arg2); LSS_REG(6, arg3);                 \
        LSS_BODY(type, name, "=r", "r"(__r4), "r"(__r5), "r"(__r6));          \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
        LSS_REG(4, arg1); LSS_REG(5, arg2); LSS_REG(6, arg3);                 \
        LSS_REG(7, arg4);                                                     \
        LSS_BODY(type, name, "+r", "r"(__r4), "r"(__r5), "r"(__r6));          \
      }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall5</name></cpp:undef>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name></expr></cpp:if>
    <comment type="block">/* The old 32bit MIPS system call API passes the fifth and sixth argument
     * on the stack, whereas the new APIs use registers "r8" and "r9".
     */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5) {                                       \
        LSS_REG(4, arg1); LSS_REG(5, arg2); LSS_REG(6, arg3);                 \
        LSS_REG(7, arg4);                                                     \
        register unsigned long __v0 __asm__("$2") = __NR_##name;              \
        __asm__ __volatile__ (".set noreorder\n"                              \
                              "subu  $29, 32\n"                               \
                              "sw    %5, 16($29)\n"                           \
                              "syscall\n"                                     \
                              "addiu $29, 32\n"                               \
                              ".set reorder\n"                                \
                              : "+r"(__v0), "+r" (__r7)                       \
                              : "r"(__r4), "r"(__r5),                         \
                                "r"(__r6), "r" ((unsigned long)arg5)          \
                              : "$8", "$9", "$10", "$11", "$12",              \
                                "$13", "$14", "$15", "$24", "$25",            \
                                "memory");                                    \
        LSS_RETURN(type, __v0, __r7);                                         \
      }</cpp:value></cpp:define>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                                             \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5) {                                       \
        LSS_REG(4, arg1); LSS_REG(5, arg2); LSS_REG(6, arg3);                 \
        LSS_REG(7, arg4); LSS_REG(8, arg5);                                   \
        LSS_BODY(type, name, "+r", "r"(__r4), "r"(__r5), "r"(__r6),           \
                 "r"(__r8));                                                  \
      }</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall6</name></cpp:undef>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name></expr></cpp:if>
    <comment type="block">/* The old 32bit MIPS system call API passes the fifth and sixth argument
     * on the stack, whereas the new APIs use registers "r8" and "r9".
     */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>                                  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5, type6 arg6) {                           \
        LSS_REG(4, arg1); LSS_REG(5, arg2); LSS_REG(6, arg3);                 \
        LSS_REG(7, arg4);                                                     \
        register unsigned long __v0 __asm__("$2") = __NR_##name;              \
        __asm__ __volatile__ (".set noreorder\n"                              \
                              "subu  $29, 32\n"                               \
                              "sw    %5, 16($29)\n"                           \
                              "sw    %6, 20($29)\n"                           \
                              "syscall\n"                                     \
                              "addiu $29, 32\n"                               \
                              ".set reorder\n"                                \
                              : "+r"(__v0), "+r" (__r7)                       \
                              : "r"(__r4), "r"(__r5),                         \
                                "r"(__r6), "r" ((unsigned long)arg5),         \
                                "r" ((unsigned long)arg6)                     \
                              : "$8", "$9", "$10", "$11", "$12",              \
                                "$13", "$14", "$15", "$24", "$25",            \
                                "memory");                                    \
        LSS_RETURN(type, __v0, __r7);                                         \
      }</cpp:value></cpp:define>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>arg1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>,<parameter><type><name>arg2</name></type></parameter>,<parameter><type><name>type3</name></type></parameter>,<parameter><type><name>arg3</name></type></parameter>,<parameter><type><name>type4</name></type></parameter>,<parameter><type><name>arg4</name></type></parameter>,  \
                      <parameter><type><name>type5</name></type></parameter>,<parameter><type><name>arg5</name></type></parameter>,<parameter><type><name>type6</name></type></parameter>,<parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>                                  \
      <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
                          type5 arg5,type6 arg6) {                            \
        LSS_REG(4, arg1); LSS_REG(5, arg2); LSS_REG(6, arg3);                 \
        LSS_REG(7, arg4); LSS_REG(8, arg5); LSS_REG(9, arg6);                 \
        LSS_BODY(type, name, "+r", "r"(__r4), "r"(__r5), "r"(__r6),           \
                 "r"(__r8), "r"(__r9));                                       \
      }</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name> <name>__v0</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$2"</literal></expr></argument>)</argument_list> <init>= <expr><operator>-</operator><name>EINVAL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name> <name>__r7</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$7"</literal></expr></argument>)</argument_list> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>newtls</name></expr></init></decl>;</decl_stmt>
      <block>{<block_content>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>   <name>__flags</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$4"</literal></expr></argument>)</argument_list> <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__stack</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$5"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_stack</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__ptid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$6"</literal></expr></argument>)</argument_list> <init>= <expr><name>parent_tidptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>  <modifier>*</modifier><name>__ctid</name></type>  <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$8"</literal></expr></argument>)</argument_list> <init>= <expr><name>child_tidptr</name></expr></init></decl>;</decl_stmt>
        <asm>__asm__ <specifier>__volatile__</specifier>(
          <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name> <operator>&amp;&amp;</operator> <name>_MIPS_SZPTR</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
                             "subu  $29,24\n"
          <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_NABI32</name></expr></cpp:elif>
                             "sub   $29,16\n"
          <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                             "dsubu $29,16\n"
          <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                             <comment type="block">/* if (fn == NULL || child_stack == NULL)
                              *   return -EINVAL;
                              */</comment>
                             "beqz  %4,1f\n"
                             "beqz  %5,1f\n"

                             <comment type="block">/* Push "arg" and "fn" onto the stack that will be
                              * used by the child.
                              */</comment>
          <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name> <operator>&amp;&amp;</operator> <name>_MIPS_SZPTR</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
                             "subu  %5,32\n"
                             "sw    %4,0(%5)\n"
                             "sw    %7,4(%5)\n"
          <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_NABI32</name></expr></cpp:elif>
                             "sub   %5,32\n"
                             "sw    %4,0(%5)\n"
                             "sw    %7,8(%5)\n"
          <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                             "dsubu %5,32\n"
                             "sd    %4,0(%5)\n"
                             "sd    %7,8(%5)\n"
          <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                             <comment type="block">/* $7 = syscall($4 = flags,
                              *              $5 = child_stack,
                              *              $6 = parent_tidptr,
                              *              $7 = newtls,
                              *              $8 = child_tidptr)
                              */</comment>
                             "li    $2,%2\n"
                             "syscall\n"

                             <comment type="block">/* if ($7 != 0)
                              *   return $2;
                              */</comment>
                             "bnez  $7,1f\n"
                             "bnez  $2,1f\n"

                             <comment type="block">/* In the child, now. Call "fn(arg)".
                              */</comment>
          <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name> <operator>&amp;&amp;</operator> <name>_MIPS_SZPTR</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
                            "lw    $25,0($29)\n"
                            "lw    $4,4($29)\n"
          <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_NABI32</name></expr></cpp:elif>
                            "lw    $25,0($29)\n"
                            "lw    $4,8($29)\n"
          <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            "ld    $25,0($29)\n"
                            "ld    $4,8($29)\n"
          <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            "jalr  $25\n"

                             <comment type="block">/* Call _exit($2)
                              */</comment>
                            "move  $4,$2\n"
                            "li    $2,%3\n"
                            "syscall\n"

                           "1:\n"
          <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name> <operator>&amp;&amp;</operator> <name>_MIPS_SZPTR</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
                             "addu  $29, 24\n"
          <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_NABI32</name></expr></cpp:elif>
                             "add   $29, 16\n"
          <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                             "daddu $29,16\n"
          <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                             : "+r" (__v0), "+r" (__r7)
                             : "i"(__NR_clone), "i"(__NR_exit), "r"(fn),
                               "r"(__stack), "r"(__flags), "r"(arg),
                               "r"(__ptid), "r"(__ctid)
                             : "$9", "$10", "$11", "$12", "$13", "$14", "$15",
                               "$24", "$25", "memory");</asm>
      </block_content>}</block>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__v0</name></expr></argument>, <argument><expr><name>__r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_LOADARGS_0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LOADARGS_0</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>dummy</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                    \
        <cpp:value>__sc_0 = __NR_##name</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_LOADARGS_1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LOADARGS_1</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                        \
            <cpp:value>LSS_LOADARGS_0(name);                                             \
            __sc_3 = (unsigned long) (arg1)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_LOADARGS_2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LOADARGS_2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                                  \
            <cpp:value>LSS_LOADARGS_1(name, arg1);                                       \
            __sc_4 = (unsigned long) (arg2)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_LOADARGS_3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LOADARGS_3</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>                            \
            <cpp:value>LSS_LOADARGS_2(name, arg1, arg2);                                 \
            __sc_5 = (unsigned long) (arg3)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_LOADARGS_4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LOADARGS_4</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>                      \
            <cpp:value>LSS_LOADARGS_3(name, arg1, arg2, arg3);                           \
            __sc_6 = (unsigned long) (arg4)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_LOADARGS_5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LOADARGS_5</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                \
            <cpp:value>LSS_LOADARGS_4(name, arg1, arg2, arg3, arg4);                     \
            __sc_7 = (unsigned long) (arg5)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_LOADARGS_6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LOADARGS_6</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>, <parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>          \
            <cpp:value>LSS_LOADARGS_5(name, arg1, arg2, arg3, arg4, arg5);               \
            __sc_8 = (unsigned long) (arg6)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_ASMINPUT_0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ASMINPUT_0</name></cpp:macro> <cpp:value>"0" (__sc_0)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_ASMINPUT_1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ASMINPUT_1</name></cpp:macro> <cpp:value>LSS_ASMINPUT_0, "1" (__sc_3)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_ASMINPUT_2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ASMINPUT_2</name></cpp:macro> <cpp:value>LSS_ASMINPUT_1, "2" (__sc_4)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_ASMINPUT_3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ASMINPUT_3</name></cpp:macro> <cpp:value>LSS_ASMINPUT_2, "3" (__sc_5)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_ASMINPUT_4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ASMINPUT_4</name></cpp:macro> <cpp:value>LSS_ASMINPUT_3, "4" (__sc_6)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_ASMINPUT_5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ASMINPUT_5</name></cpp:macro> <cpp:value>LSS_ASMINPUT_4, "5" (__sc_7)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_ASMINPUT_6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_ASMINPUT_6</name></cpp:macro> <cpp:value>LSS_ASMINPUT_5, "6" (__sc_8)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                 \
        <cpp:value>long __sc_ret, __sc_err;                                              \
        {                                                                     \
                        register unsigned long __sc_0 __asm__ ("r0");         \
                        register unsigned long __sc_3 __asm__ ("r3");         \
                        register unsigned long __sc_4 __asm__ ("r4");         \
                        register unsigned long __sc_5 __asm__ ("r5");         \
                        register unsigned long __sc_6 __asm__ ("r6");         \
                        register unsigned long __sc_7 __asm__ ("r7");         \
                        register unsigned long __sc_8 __asm__ ("r8");         \
                                                                              \
            LSS_LOADARGS_##nr(name, args);                                    \
            __asm__ __volatile__                                              \
                ("sc\n\t"                                                     \
                 "mfcr %0"                                                    \
                 : "=&amp;r" (__sc_0),                                            \
                   "=&amp;r" (__sc_3), "=&amp;r" (__sc_4),                            \
                   "=&amp;r" (__sc_5), "=&amp;r" (__sc_6),                            \
                   "=&amp;r" (__sc_7), "=&amp;r" (__sc_8)                             \
                 : LSS_ASMINPUT_##nr                                          \
                 : "cr0", "ctr", "memory",                                    \
                   "r9", "r10", "r11", "r12");                                \
            __sc_ret = __sc_3;                                                \
            __sc_err = __sc_0;                                                \
        }                                                                     \
        LSS_RETURN(type, __sc_ret, __sc_err)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                             \
       <cpp:value>type LSS_NAME(name)(void) {                                            \
          LSS_BODY(0, type, name);                                            \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                \
       <cpp:value>type LSS_NAME(name)(type1 arg1) {                                      \
          LSS_BODY(1, type, name, arg1);                                      \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                   \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2) {                          \
          LSS_BODY(2, type, name, arg1, arg2);                                \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>      \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {              \
          LSS_BODY(3, type, name, arg1, arg2, arg3);                          \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>,      \
                                  <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>                                \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {  \
          LSS_BODY(4, type, name, arg1, arg2, arg3, arg4);                    \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>,      \
                                  <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                   \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
                                               type5 arg5) {                  \
          LSS_BODY(5, type, name, arg1, arg2, arg3, arg4, arg5);              \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>,      \
                                  <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>, <parameter><type><name>type6</name></type></parameter>, <parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>      \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,    \
                                               type5 arg5, type6 arg6) {      \
          LSS_BODY(6, type, name, arg1, arg2, arg3, arg4, arg5, arg6);        \
       }</cpp:value></cpp:define>
    <comment type="block">/* clone function adapted from glibc 2.3.6 clone.S                       */</comment>
    <comment type="block">/* TODO(csilvers): consider wrapping some args up in a struct, like we
     * do for i386's _syscall6, so we can compile successfully on gcc 2.95
     */</comment>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>__ret</name></decl>, <decl><type ref="prev"/><name>__err</name></decl>;</decl_stmt>
      <block>{<block_content>
        <expr_stmt><expr><specifier>register</specifier> <macro><name>int</name> <argument_list>(<argument>*__fn</argument>)</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator></expr></expr_stmt>    <asm>__asm__ ("r8")  = fn;</asm>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier><name>__cstack</name></type>                 <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r4"</literal></expr></argument>)</argument_list>  <init>= <expr><name>child_stack</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name> <name>__flags</name></type>                    <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r3"</literal></expr></argument>)</argument_list>  <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier> <name>__arg</name></type>                   <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r9"</literal></expr></argument>)</argument_list>  <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name> <modifier>*</modifier> <name>__ptidptr</name></type>                <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r5"</literal></expr></argument>)</argument_list>  <init>= <expr><name>parent_tidptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name> <modifier>*</modifier> <name>__newtls</name></type>                <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r6"</literal></expr></argument>)</argument_list>  <init>= <expr><name>newtls</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name> <modifier>*</modifier> <name>__ctidptr</name></type>                <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r7"</literal></expr></argument>)</argument_list>  <init>= <expr><name>child_tidptr</name></expr></init></decl>;</decl_stmt>
        <asm>__asm__ <specifier>__volatile__</specifier>(
            <comment type="block">/* check for fn == NULL
             * and child_stack == NULL
             */</comment>
            "cmpwi cr0, %6, 0\n\t"
            "cmpwi cr1, %7, 0\n\t"
            "cror cr0*4+eq, cr1*4+eq, cr0*4+eq\n\t"
            "beq- cr0, 1f\n\t"

            <comment type="block">/* set up stack frame for child                                  */</comment>
            "clrrwi %7, %7, 4\n\t"
            "li 0, 0\n\t"
            "stwu 0, -16(%7)\n\t"

            <comment type="block">/* fn, arg, child_stack are saved across the syscall: r28-30     */</comment>
            "mr 28, %6\n\t"
            "mr 29, %7\n\t"
            "mr 27, %9\n\t"

            <comment type="block">/* syscall                                                       */</comment>
            "li 0, %4\n\t"
            <comment type="block">/* flags already in r3
             * child_stack already in r4
             * ptidptr already in r5
             * newtls already in r6
             * ctidptr already in r7
             */</comment>
            "sc\n\t"

            <comment type="block">/* Test if syscall was successful                                */</comment>
            "cmpwi cr1, 3, 0\n\t"
            "crandc cr1*4+eq, cr1*4+eq, cr0*4+so\n\t"
            "bne- cr1, 1f\n\t"

            <comment type="block">/* Do the function call                                          */</comment>
            "mtctr 28\n\t"
            "mr 3, 27\n\t"
            "bctrl\n\t"

            <comment type="block">/* Call _exit(r3)                                                */</comment>
            "li 0, %5\n\t"
            "sc\n\t"

            <comment type="block">/* Return to parent                                              */</comment>
            "1:\n"
            "mfcr %1\n\t"
            "mr %0, 3\n\t"
              : "=r" (__ret), "=r" (__err)
              : "0" (-1), "1" (EINVAL),
                "i" (__NR_clone), "i" (__NR_exit),
                "r" (__fn), "r" (__cstack), "r" (__flags),
                "r" (__arg), "r" (__ptidptr), "r" (__newtls),
                "r" (__ctidptr)
              : "cr0", "cr1", "memory", "ctr",
                "r0", "r29", "r27", "r28");</asm>
      </block_content>}</block>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_REG</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register unsigned long __r##r __asm__("r"#r) = (unsigned long) a</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>LSS_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_BODY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                     \
        <cpp:value>register unsigned long __nr __asm__("r1")                             \
            = (unsigned long)(__NR_##name);                                   \
        register long __res_r2 __asm__("r2");                                 \
        long __res;                                                           \
        __asm__ __volatile__                                                  \
            ("svc 0\n\t"                                                      \
             : "=d"(__res_r2)                                                 \
             : "d"(__nr), ## args                                             \
             : "memory");                                                     \
        __res = __res_r2;                                                     \
        LSS_RETURN(type, __res)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall0</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                             \
       <cpp:value>type LSS_NAME(name)(void) {                                            \
          LSS_BODY(type, name);                                               \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall1</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                \
       <cpp:value>type LSS_NAME(name)(type1 arg1) {                                      \
          LSS_REG(2, arg1);                                                   \
          LSS_BODY(type, name, "0"(__r2));                                    \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall2</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                   \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2) {                          \
          LSS_REG(2, arg1); LSS_REG(3, arg2);                                 \
          LSS_BODY(type, name, "0"(__r2), "d"(__r3));                         \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall3</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>      \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {              \
          LSS_REG(2, arg1); LSS_REG(3, arg2); LSS_REG(4, arg3);               \
          LSS_BODY(type, name, "0"(__r2), "d"(__r3), "d"(__r4));              \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall4</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>,      \
                                  <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>                                \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3,                \
                           type4 arg4) {                                      \
          LSS_REG(2, arg1); LSS_REG(3, arg2); LSS_REG(4, arg3);               \
          LSS_REG(5, arg4);                                                   \
          LSS_BODY(type, name, "0"(__r2), "d"(__r3), "d"(__r4),               \
                               "d"(__r5));                                    \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall5</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>,      \
                                  <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                   \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3,                \
                           type4 arg4, type5 arg5) {                          \
          LSS_REG(2, arg1); LSS_REG(3, arg2); LSS_REG(4, arg3);               \
          LSS_REG(5, arg4); LSS_REG(6, arg5);                                 \
          LSS_BODY(type, name, "0"(__r2), "d"(__r3), "d"(__r4),               \
                               "d"(__r5), "d"(__r6));                         \
       }</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_syscall6</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_syscall6</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type1</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>type2</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>type3</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>,      \
                                  <parameter><type><name>type4</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>type5</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>, <parameter><type><name>type6</name></type></parameter>, <parameter><type><name>arg6</name></type></parameter>)</parameter_list></cpp:macro>      \
       <cpp:value>type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3,                \
                           type4 arg4, type5 arg5, type6 arg6) {              \
          LSS_REG(2, arg1); LSS_REG(3, arg2); LSS_REG(4, arg3);               \
          LSS_REG(5, arg4); LSS_REG(6, arg5); LSS_REG(7, arg6);               \
          LSS_BODY(type, name, "0"(__r2), "d"(__r3), "d"(__r4),               \
                               "d"(__r5), "d"(__r6), "d"(__r7));              \
       }</cpp:value></cpp:define>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>clone</name>)<parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>parent_tidptr</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>child_tidptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>__ret</name></decl>;</decl_stmt>
      <block>{<block_content>
        <expr_stmt><expr><specifier>register</specifier> <macro><name>int</name>  <argument_list>(<argument>*__fn</argument>)</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator></expr></expr_stmt>    <asm>__asm__ ("r1")  = fn;</asm>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name>  <modifier>*</modifier><name>__cstack</name></type>         <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r2"</literal></expr></argument>)</argument_list>  <init>= <expr><name>child_stack</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>    <name>__flags</name></type>          <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r3"</literal></expr></argument>)</argument_list>  <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name>  <modifier>*</modifier><name>__arg</name></type>            <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r0"</literal></expr></argument>)</argument_list>  <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>   <modifier>*</modifier><name>__ptidptr</name></type>        <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r4"</literal></expr></argument>)</argument_list>  <init>= <expr><name>parent_tidptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>void</name>  <modifier>*</modifier><name>__newtls</name></type>         <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r6"</literal></expr></argument>)</argument_list>  <init>= <expr><name>newtls</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>register</specifier> <name>int</name>   <modifier>*</modifier><name>__ctidptr</name></type>        <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"r5"</literal></expr></argument>)</argument_list>  <init>= <expr><name>child_tidptr</name></expr></init></decl>;</decl_stmt>
        <asm>__asm__ <specifier>__volatile__</specifier> (
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__s390x__</name></cpp:ifndef>
                                  <comment type="block">/* arg already in r0 */</comment>
          "ltr %4, %4\n\t"        <comment type="block">/* check fn, which is already in r1 */</comment>
          "jz 1f\n\t"             <comment type="block">/* NULL function pointer, return -EINVAL */</comment>
          "ltr %5, %5\n\t"        <comment type="block">/* check child_stack, which is already in r2 */</comment>
          "jz 1f\n\t"             <comment type="block">/* NULL stack pointer, return -EINVAL */</comment>
                                  <comment type="block">/* flags already in r3 */</comment>
                                  <comment type="block">/* parent_tidptr already in r4 */</comment>
                                  <comment type="block">/* child_tidptr already in r5 */</comment>
                                  <comment type="block">/* newtls already in r6 */</comment>
          "svc %2\n\t"            <comment type="block">/* invoke clone syscall */</comment>
          "ltr %0,%%r2\n\t"       <comment type="block">/* load return code into __ret and test */</comment>
          "jnz 1f\n\t"            <comment type="block">/* return to parent if non-zero */</comment>
                                  <comment type="block">/* start child thread */</comment>
          "lr %%r2, %7\n\t"       <comment type="block">/* set first parameter to void *arg */</comment>
          "ahi %%r15, -96\n\t"    <comment type="block">/* make room on the stack for the save area */</comment>
          "xc 0(4,%%r15), 0(%%r15)\n\t"
          "basr %%r14, %4\n\t"    <comment type="block">/* jump to fn */</comment>
          "svc %3\n"              <comment type="block">/* invoke exit syscall */</comment>
          "1:\n"
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                                  <comment type="block">/* arg already in r0 */</comment>
          "ltgr %4, %4\n\t"       <comment type="block">/* check fn, which is already in r1 */</comment>
          "jz 1f\n\t"             <comment type="block">/* NULL function pointer, return -EINVAL */</comment>
          "ltgr %5, %5\n\t"       <comment type="block">/* check child_stack, which is already in r2 */</comment>
          "jz 1f\n\t"             <comment type="block">/* NULL stack pointer, return -EINVAL */</comment>
                                  <comment type="block">/* flags already in r3 */</comment>
                                  <comment type="block">/* parent_tidptr already in r4 */</comment>
                                  <comment type="block">/* child_tidptr already in r5 */</comment>
                                  <comment type="block">/* newtls already in r6 */</comment>
          "svc %2\n\t"            <comment type="block">/* invoke clone syscall */</comment>
          "ltgr %0, %%r2\n\t"     <comment type="block">/* load return code into __ret and test */</comment>
          "jnz 1f\n\t"            <comment type="block">/* return to parent if non-zero */</comment>
                                  <comment type="block">/* start child thread */</comment>
          "lgr %%r2, %7\n\t"      <comment type="block">/* set first parameter to void *arg */</comment>
          "aghi %%r15, -160\n\t"  <comment type="block">/* make room on the stack for the save area */</comment>
          "xc 0(8,%%r15), 0(%%r15)\n\t"
          "basr %%r14, %4\n\t"    <comment type="block">/* jump to fn */</comment>
          "svc %3\n"              <comment type="block">/* invoke exit syscall */</comment>
          "1:\n"
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          : "=r" (__ret)
          : "0" (-EINVAL), "i" (__NR_clone), "i" (__NR_exit),
            "d" (__fn), "d" (__cstack), "d" (__flags), "d" (__arg),
            "d" (__ptidptr), "d" (__newtls), "d" (__ctidptr)
          : "cc", "r14", "memory"
        );</asm>
      </block_content>}</block>
      <expr_stmt><expr><call><name>LSS_RETURN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__exit</name></cpp:macro>   <cpp:value>__NR_exit</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__gettid</name></cpp:macro> <cpp:value>__NR_gettid</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__mremap</name></cpp:macro> <cpp:value>__NR_mremap</cpp:value></cpp:define>
  <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall1</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>,  <argument><expr><name>brk</name></expr></argument>,             <argument><expr><name>void</name> <operator>*</operator></expr></argument>,      <argument><expr><name>e</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>chdir</name></expr></argument>,           <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>close</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>clock_getres</name></expr></argument>,    <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>c</name></expr></argument>,
                       <argument><expr>struct <name>kernel_timespec</name><operator>*</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>clock_gettime</name></expr></argument>,   <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>c</name></expr></argument>,
                       <argument><expr>struct <name>kernel_timespec</name><operator>*</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>dup</name></expr></argument>,             <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// The dup2 syscall has been deprecated on aarch64. We polyfill it below.</comment>
    <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>dup2</name></expr></argument>,            <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>s</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>d</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>execve</name></expr></argument>,          <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>f</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator><specifier>const</specifier><operator>*</operator></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator><specifier>const</specifier><operator>*</operator></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>_exit</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>e</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>exit_group</name></expr></argument>,      <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>e</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>fcntl</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>c</name></expr></argument>, <argument><expr><name>long</name></expr></argument>,   <argument><expr><name>a</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// The fork syscall has been deprecated on aarch64. We polyfill it below.</comment>
    <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,   <argument><expr><name>fork</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>fstat</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                      <argument><expr>struct <name>kernel_stat</name><operator>*</operator></expr></argument>,   <argument><expr><name>b</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>fstatfs</name></expr></argument>,         <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                      <argument><expr>struct <name>kernel_statfs</name><operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Need to make sure off_t isn't truncated to 32-bits under x32.  */</comment>
    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>ftruncate</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>f</name></expr></argument>, <argument><expr><name>off_t</name> <name>l</name></expr></argument>)</argument_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>ftruncate</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>l</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>
  <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ftruncate</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                         <argument><expr><name>off_t</name></expr></argument>,          <argument><expr><name>l</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>futex</name></expr></argument>,           <argument><expr><name>int</name><operator>*</operator></expr></argument>,        <argument><expr><name>a</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>o</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>v</name></expr></argument>,
                      <argument><expr>struct <name>kernel_timespec</name><operator>*</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>getdents</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                       <argument><expr>struct <name>kernel_dirent</name><operator>*</operator></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>c</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>getdents64</name></expr></argument>,      <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                      <argument><expr>struct <name>kernel_dirent64</name><operator>*</operator></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>c</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>gid_t</name></expr></argument>,   <argument><expr><name>getegid</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>uid_t</name></expr></argument>,   <argument><expr><name>geteuid</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// The getgprp syscall has been deprecated on aarch64.</comment>
    <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,   <argument><expr><name>getpgrp</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,   <argument><expr><name>getpid</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,   <argument><expr><name>getppid</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>getpriority</name></expr></argument>,     <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>a</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>b</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>getresgid</name></expr></argument>,       <argument><expr><name>gid_t</name> <operator>*</operator></expr></argument>,     <argument><expr><name>r</name></expr></argument>,
                       <argument><expr><name>gid_t</name> <operator>*</operator></expr></argument>,         <argument><expr><name>e</name></expr></argument>,       <argument><expr><name>gid_t</name> <operator>*</operator></expr></argument>,     <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>getresuid</name></expr></argument>,       <argument><expr><name>uid_t</name> <operator>*</operator></expr></argument>,     <argument><expr><name>r</name></expr></argument>,
                       <argument><expr><name>uid_t</name> <operator>*</operator></expr></argument>,         <argument><expr><name>e</name></expr></argument>,       <argument><expr><name>uid_t</name> <operator>*</operator></expr></argument>,     <argument><expr><name>s</name></expr></argument>)</argument_list>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>getrlimit</name></expr></argument>,       <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>r</name></expr></argument>,
                      <argument><expr>struct <name>kernel_rlimit</name><operator>*</operator></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,   <argument><expr><name>getsid</name></expr></argument>,          <argument><expr><name>pid_t</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,   <argument><expr><name>_gettid</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,   <argument><expr><name>gettimeofday</name></expr></argument>,    <argument><expr>struct <name>kernel_timeval</name><operator>*</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>,
                       <argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setxattr</name></expr></argument>,        <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,<argument><expr><name>p</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,   <argument><expr><name>n</name></expr></argument>,        <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,<argument><expr><name>v</name></expr></argument>,
                       <argument><expr><name>size_t</name></expr></argument>,         <argument><expr><name>s</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>lsetxattr</name></expr></argument>,       <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,<argument><expr><name>p</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,   <argument><expr><name>n</name></expr></argument>,        <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,<argument><expr><name>v</name></expr></argument>,
                       <argument><expr><name>size_t</name></expr></argument>,         <argument><expr><name>s</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>getxattr</name></expr></argument>,        <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,<argument><expr><name>p</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,   <argument><expr><name>n</name></expr></argument>,        <argument><expr><name>void</name> <operator>*</operator></expr></argument>,      <argument><expr><name>v</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>lgetxattr</name></expr></argument>,       <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,<argument><expr><name>p</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,   <argument><expr><name>n</name></expr></argument>,        <argument><expr><name>void</name> <operator>*</operator></expr></argument>,      <argument><expr><name>v</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>listxattr</name></expr></argument>,       <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,<argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>char</name> <operator>*</operator></expr></argument>,   <argument><expr><name>l</name></expr></argument>,              <argument><expr><name>size_t</name></expr></argument>,      <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>llistxattr</name></expr></argument>,      <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,<argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>char</name> <operator>*</operator></expr></argument>,   <argument><expr><name>l</name></expr></argument>,              <argument><expr><name>size_t</name></expr></argument>,      <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>ioctl</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>d</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,     <argument><expr><name>r</name></expr></argument>,               <argument><expr><name>void</name> <operator>*</operator></expr></argument>,      <argument><expr><name>a</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>ioprio_get</name></expr></argument>,      <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>which</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,     <argument><expr><name>who</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>ioprio_set</name></expr></argument>,      <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>which</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,     <argument><expr><name>who</name></expr></argument>,             <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>ioprio</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>kill</name></expr></argument>,            <argument><expr><name>pid_t</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>s</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Need to make sure off_t isn't truncated to 32-bits under x32.  */</comment>
    <name>LSS_INLINE</name> <name>off_t</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>lseek</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>f</name></expr></argument>, <argument><expr><name>off_t</name> <name>o</name></expr></argument>, <argument><expr><name>int</name> <name>w</name></expr></argument>)</argument_list> <block>{<block_content>
      <expr_stmt><expr><call><name>_LSS_BODY</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>lseek</name></expr></argument>, <argument><expr><name>off_t</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>o</name><operator>)</operator></expr></argument>,
                                        <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>
  <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall3</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>,   <argument><expr><name>lseek</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                         <argument><expr><name>off_t</name></expr></argument>,          <argument><expr><name>o</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>w</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>munmap</name></expr></argument>,          <argument><expr><name>void</name><operator>*</operator></expr></argument>,       <argument><expr><name>s</name></expr></argument>,
                       <argument><expr><name>size_t</name></expr></argument>,         <argument><expr><name>l</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall6</name><argument_list>(<argument><expr><name>long</name></expr></argument>,    <argument><expr><name>move_pages</name></expr></argument>,      <argument><expr><name>pid_t</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>long</name></expr></argument>,  <argument><expr><name>n</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator></expr></argument>,<argument><expr><name>g</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>,   <argument><expr><name>d</name></expr></argument>,
                       <argument><expr><name>int</name> <operator>*</operator></expr></argument>,          <argument><expr><name>s</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>f</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>mprotect</name></expr></argument>,        <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,<argument><expr><name>a</name></expr></argument>,
                       <argument><expr><name>size_t</name></expr></argument>,         <argument><expr><name>l</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>p</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>,   <argument><expr><name>_mremap</name></expr></argument>,         <argument><expr><name>void</name><operator>*</operator></expr></argument>,       <argument><expr><name>o</name></expr></argument>,
                       <argument><expr><name>size_t</name></expr></argument>,         <argument><expr><name>os</name></expr></argument>,       <argument><expr><name>size_t</name></expr></argument>,      <argument><expr><name>ns</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>long</name></expr></argument>,  <argument><expr><name>f</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// The open and poll syscalls have been deprecated on aarch64. We polyfill</comment>
    <comment type="line">// them below.</comment>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>open</name></expr></argument>,            <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>f</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>m</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>poll</name></expr></argument>,           <argument><expr>struct <name>kernel_pollfd</name><operator>*</operator></expr></argument>, <argument><expr><name>u</name></expr></argument>,
                         <argument><expr><name>unsigned</name> <name>int</name></expr></argument>,   <argument><expr><name>n</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>t</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>prctl</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>option</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>long</name></expr></argument>,  <argument><expr><name>arg2</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>long</name></expr></argument>,  <argument><expr><name>arg3</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>long</name></expr></argument>,  <argument><expr><name>arg4</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>long</name></expr></argument>,  <argument><expr><name>arg5</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>long</name></expr></argument>,    <argument><expr><name>ptrace</name></expr></argument>,          <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>r</name></expr></argument>,
                       <argument><expr><name>pid_t</name></expr></argument>,          <argument><expr><name>p</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_quotactl</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// Defined on x86_64 / i386 only</comment>
    <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>,  <argument><expr><name>quotactl</name></expr></argument>,  <argument><expr><name>int</name></expr></argument>,  <argument><expr><name>cmd</name></expr></argument>,  <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>special</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>caddr_t</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>read</name></expr></argument>,            <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                       <argument><expr><name>void</name> <operator>*</operator></expr></argument>,         <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// The readlink syscall has been deprecated on aarch64. We polyfill below.</comment>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>readlink</name></expr></argument>,        <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>,
                         <argument><expr><name>char</name><operator>*</operator></expr></argument>,          <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>rt_sigaction</name></expr></argument>,    <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>s</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> struct <name>kernel_sigaction</name><operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>,
                       <argument><expr>struct <name>kernel_sigaction</name><operator>*</operator></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,   <argument><expr><name>c</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>rt_sigpending</name></expr></argument>, <argument><expr>struct <name>kernel_sigset_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>,
                       <argument><expr><name>size_t</name></expr></argument>,         <argument><expr><name>c</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>rt_sigprocmask</name></expr></argument>,      <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>h</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> struct <name>kernel_sigset_t</name><operator>*</operator></expr></argument>,  <argument><expr><name>s</name></expr></argument>,
                       <argument><expr>struct <name>kernel_sigset_t</name><operator>*</operator></expr></argument>,        <argument><expr><name>o</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>rt_sigsuspend</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> struct <name>kernel_sigset_t</name><operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>,  <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>sched_getaffinity</name></expr></argument>,<argument><expr><name>pid_t</name></expr></argument>,      <argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>int</name></expr></argument>,   <argument><expr><name>l</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <operator>*</operator></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>sched_setaffinity</name></expr></argument>,<argument><expr><name>pid_t</name></expr></argument>,      <argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>int</name></expr></argument>,   <argument><expr><name>l</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <operator>*</operator></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>sched_yield</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>long</name></expr></argument>,    <argument><expr><name>set_tid_address</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>,       <argument><expr><name>t</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setfsgid</name></expr></argument>,        <argument><expr><name>gid_t</name></expr></argument>,       <argument><expr><name>g</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setfsuid</name></expr></argument>,        <argument><expr><name>uid_t</name></expr></argument>,       <argument><expr><name>u</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setuid</name></expr></argument>,          <argument><expr><name>uid_t</name></expr></argument>,       <argument><expr><name>u</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setgid</name></expr></argument>,          <argument><expr><name>gid_t</name></expr></argument>,       <argument><expr><name>g</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setpgid</name></expr></argument>,         <argument><expr><name>pid_t</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>pid_t</name></expr></argument>,          <argument><expr><name>g</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setpriority</name></expr></argument>,     <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>a</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>b</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,    <argument><expr><name>p</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setresgid</name></expr></argument>,       <argument><expr><name>gid_t</name></expr></argument>,       <argument><expr><name>r</name></expr></argument>,
                       <argument><expr><name>gid_t</name></expr></argument>,          <argument><expr><name>e</name></expr></argument>, <argument><expr><name>gid_t</name></expr></argument>,  <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setresuid</name></expr></argument>,       <argument><expr><name>uid_t</name></expr></argument>,       <argument><expr><name>r</name></expr></argument>,
                       <argument><expr><name>uid_t</name></expr></argument>,          <argument><expr><name>e</name></expr></argument>, <argument><expr><name>uid_t</name></expr></argument>,  <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>setrlimit</name></expr></argument>,       <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>r</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> struct <name>kernel_rlimit</name><operator>*</operator></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall0</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>,    <argument><expr><name>setsid</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>sigaltstack</name></expr></argument>,     <argument><expr><specifier>const</specifier> <name>stack_t</name><operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>stack_t</name><operator>*</operator></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_sigreturn</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>sigreturn</name></expr></argument>,       <argument><expr><name>unsigned</name> <name>long</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// The stat syscall has been deprecated on aarch64. We polyfill it below.</comment>
    <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>stat</name></expr></argument>,            <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>f</name></expr></argument>,
                        <argument><expr>struct <name>kernel_stat</name><operator>*</operator></expr></argument>,   <argument><expr><name>b</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>statfs</name></expr></argument>,          <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>f</name></expr></argument>,
                      <argument><expr>struct <name>kernel_statfs</name><operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>tgkill</name></expr></argument>,          <argument><expr><name>pid_t</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>pid_t</name></expr></argument>,          <argument><expr><name>t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>tkill</name></expr></argument>,           <argument><expr><name>pid_t</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>,
                       <argument><expr><name>int</name></expr></argument>,            <argument><expr><name>s</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// The unlink syscall has been deprecated on aarch64. We polyfill it below.</comment>
    <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>unlink</name></expr></argument>,           <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>write</name></expr></argument>,            <argument><expr><name>int</name></expr></argument>,        <argument><expr><name>f</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,   <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>writev</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,        <argument><expr><name>f</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> struct <name>kernel_iovec</name><operator>*</operator></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_getcpu</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>getcpu</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>, <argument><expr><name>cpu</name></expr></argument>,
                         <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>unused</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator>                                                  \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>!=</operator> <name>_MIPS_SIM_ABI32</name><operator>)</operator></expr></cpp:if>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>recvmsg</name></expr></argument>,            <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>s</name></expr></argument>,
                        <argument><expr>struct <name>kernel_msghdr</name><operator>*</operator></expr></argument>,     <argument><expr><name>m</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sendmsg</name></expr></argument>,            <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>s</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> struct <name>kernel_msghdr</name><operator>*</operator></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall6</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sendto</name></expr></argument>,             <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>s</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>,             <argument><expr><name>m</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,                     <argument><expr><name>f</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> struct <name>kernel_sockaddr</name><operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>shutdown</name></expr></argument>,           <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>s</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,                     <argument><expr><name>h</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>socket</name></expr></argument>,             <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>d</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,                     <argument><expr><name>t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>socketpair</name></expr></argument>,         <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>d</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,                     <argument><expr><name>t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,       <argument><expr><name>p</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_fadvise64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Need to make sure loff_t isn't truncated to 32-bits under x32.  */</comment>
    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>fadvise64</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>loff_t</name> <name>offset</name></expr></argument>, <argument><expr><name>loff_t</name> <name>len</name></expr></argument>,
                                       <argument><expr><name>int</name> <name>advice</name></expr></argument>)</argument_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>fadvise64</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>offset</name><operator>)</operator></expr></argument>,
                                  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>len</name><operator>)</operator></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>fadvise64</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>loff_t</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>loff_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__fadvise64_64</name></cpp:macro> <cpp:value>__NR_fadvise64_64</cpp:value></cpp:define>
    <name>LSS_INLINE</name> <name>_syscall6</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_fadvise64_64</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
                         <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>offset_lo</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>offset_hi</name></expr></argument>,
                         <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>len_lo</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>len_hi</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>fadvise64</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>loff_t</name> <name>offset</name></expr></argument>,
                                       <argument><expr><name>loff_t</name> <name>len</name></expr></argument>, <argument><expr><name>int</name> <name>advice</name></expr></argument>)</argument_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_fadvise64_64</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fd</name></expr></argument>,
                                     <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator></expr></argument>,
                                     <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
                                     <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__fadvise64_64</name></cpp:macro> <cpp:value>__NR_fadvise64_64</cpp:value></cpp:define>
    <struct>struct <name>kernel_fadvise64_64_args</name> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>advice</name></decl>;</decl_stmt>
    }</block>;</struct>

    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_fadvise64_64</name></expr></argument>,
                         <argument><expr>struct <name>kernel_fadvise64_64_args</name> <operator>*</operator><name>args</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>fadvise64</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>loff_t</name> <name>offset</name></expr></argument>,
                                       <argument><expr><name>loff_t</name> <name>len</name></expr></argument>, <argument><expr><name>int</name> <name>advice</name></expr></argument>)</argument_list> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>kernel_fadvise64_64_args</name></name></type> <name>args</name> <init>= <expr><block>{ <expr><name>fd</name></expr>, <expr><name>offset</name></expr>, <expr><name>len</name></expr>, <expr><name>advice</name></expr> }</block></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_fadvise64_64</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_fallocate</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Need to make sure loff_t isn't truncated to 32-bits under x32.  */</comment>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>fallocate</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>offset</name></decl></parameter>,
                                       <parameter><decl><type><name>loff_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>fallocate</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>offset</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__fallocate</name></cpp:macro> <cpp:value>__NR_fallocate</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall6</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_fallocate</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
                         <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>offset_lo</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>offset_hi</name></expr></argument>,
                         <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>len_lo</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>len_hi</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>fallocate</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>int</name> <name>mode</name></expr></argument>,
                                       <argument><expr><name>loff_t</name> <name>offset</name></expr></argument>, <argument><expr><name>loff_t</name> <name>len</name></expr></argument>)</argument_list> <block>{<block_content>
      <union>union <block>{ <decl_stmt><decl><type><name>loff_t</name></type> <name>off</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name></type> <name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>o</name> <init>= <expr><block>{ <expr><name>offset</name></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><block>{ <expr><name>len</name></expr> }</block></expr></init></decl>;</union>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_fallocate</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>l</name><operator>.</operator><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>l</name><operator>.</operator><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>fallocate</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>loff_t</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>loff_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>getresgid32</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>gid_t</name> <operator>*</operator><name>rgid</name></expr></argument>,
                                         <argument><expr><name>gid_t</name> <operator>*</operator><name>egid</name></expr></argument>,
                                         <argument><expr><name>gid_t</name> <operator>*</operator><name>sgid</name></expr></argument>)</argument_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>getresgid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rgid</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>sgid</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>getresuid32</name>)<parameter_list>(<parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>ruid</name></decl></parameter>,
                                         <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>euid</name></decl></parameter>,
                                         <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>getresuid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ruid</name></expr></argument>, <argument><expr><name>euid</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>newfstatat</name></expr></argument>,         <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>d</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,            <argument><expr><name>p</name></expr></argument>,
                        <argument><expr>struct <name>kernel_stat</name><operator>*</operator></expr></argument>,       <argument><expr><name>b</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>setfsgid32</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>gid_t</name> <name>gid</name></expr></argument>)</argument_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setfsgid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setfsuid32</name>)<parameter_list>(<parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setfsuid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setresgid32</name>)<parameter_list>(<parameter><decl><type><name>gid_t</name></type> <name>rgid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>sgid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setresgid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rgid</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>sgid</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setresuid32</name>)<parameter_list>(<parameter><decl><type><name>uid_t</name></type> <name>ruid</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>euid</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setresuid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ruid</name></expr></argument>, <argument><expr><name>euid</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigaction</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_sigaction</name></name> <modifier>*</modifier></type><name>act</name></decl></parameter>,
                                       <parameter><decl><type><name><name>struct</name> <name>kernel_sigaction</name></name> <modifier>*</modifier></type><name>oldact</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* On x86_64, the kernel requires us to always set our own
       * SA_RESTORER in order to be able to return from a signal handler.
       * This function must have a "magic" signature that the "gdb"
       * (and maybe the kernel?) can recognize.
       */</comment>
      <if_stmt><if>if <condition>(<expr><name>act</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>act</name><operator>-&gt;</operator><name>sa_flags</name></name> <operator>&amp;</operator> <name>SA_RESTORER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>kernel_sigaction</name></name></type> <name>a</name> <init>= <expr><operator>*</operator><name>act</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>a</name><operator>.</operator><name>sa_flags</name></name>   <operator>|=</operator> <name>SA_RESTORER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><operator>.</operator><name>sa_restorer</name></name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>restore_rt</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigaction</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>oldact</name></expr></argument>,
                                      <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
      <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigaction</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><name>oldact</name></expr></argument>,
                                      <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigpending</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigpending</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigprocmask</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
                                         <parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>oldset</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigprocmask</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>oldset</name></expr></argument>, <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigsuspend</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigsuspend</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
      <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>||</operator>                        \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>!=</operator> <name>_MIPS_SIM_ABI32</name><operator>)</operator> <operator>||</operator>                   \
      <call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall4</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>, <argument><expr><name>wait4</name></expr></argument>,            <argument><expr><name>pid_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
                         <argument><expr><name>int</name><operator>*</operator></expr></argument>,                    <argument><expr><name>s</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,       <argument><expr><name>o</name></expr></argument>,
                        <argument><expr>struct <name>kernel_rusage</name><operator>*</operator></expr></argument>,     <argument><expr><name>r</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>pid_t</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>waitpid</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>pid_t</name> <name>pid</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>status</name></expr></argument>, <argument><expr><name>int</name> <name>options</name></expr></argument>)</argument_list><block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>wait4</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_openat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>openat</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_unlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unlinkat</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> \
      <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__getresgid32</name></cpp:macro> <cpp:value>__NR_getresgid32</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__getresuid32</name></cpp:macro> <cpp:value>__NR_getresuid32</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__setfsgid32</name></cpp:macro>  <cpp:value>__NR_setfsgid32</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__setfsuid32</name></cpp:macro>  <cpp:value>__NR_setfsuid32</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__setresgid32</name></cpp:macro> <cpp:value>__NR_setresgid32</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__setresuid32</name></cpp:macro> <cpp:value>__NR_setresuid32</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,   <argument><expr><name>ugetrlimit</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,          <argument><expr><name>r</name></expr></argument>,
                        <argument><expr>struct <name>kernel_rlimit</name><operator>*</operator></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>_getresgid32</name></expr></argument>,    <argument><expr><name>gid_t</name> <operator>*</operator></expr></argument>,      <argument><expr><name>r</name></expr></argument>,
                         <argument><expr><name>gid_t</name> <operator>*</operator></expr></argument>,            <argument><expr><name>e</name></expr></argument>,    <argument><expr><name>gid_t</name> <operator>*</operator></expr></argument>,      <argument><expr><name>s</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>_getresuid32</name></expr></argument>,    <argument><expr><name>uid_t</name> <operator>*</operator></expr></argument>,      <argument><expr><name>r</name></expr></argument>,
                         <argument><expr><name>uid_t</name> <operator>*</operator></expr></argument>,            <argument><expr><name>e</name></expr></argument>,    <argument><expr><name>uid_t</name> <operator>*</operator></expr></argument>,      <argument><expr><name>s</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>_setfsgid32</name></expr></argument>,     <argument><expr><name>gid_t</name></expr></argument>,        <argument><expr><name>f</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>_setfsuid32</name></expr></argument>,     <argument><expr><name>uid_t</name></expr></argument>,        <argument><expr><name>f</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>_setresgid32</name></expr></argument>,    <argument><expr><name>gid_t</name></expr></argument>,        <argument><expr><name>r</name></expr></argument>,
                         <argument><expr><name>gid_t</name></expr></argument>,              <argument><expr><name>e</name></expr></argument>,    <argument><expr><name>gid_t</name></expr></argument>,        <argument><expr><name>s</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>_setresuid32</name></expr></argument>,    <argument><expr><name>uid_t</name></expr></argument>,        <argument><expr><name>r</name></expr></argument>,
                         <argument><expr><name>uid_t</name></expr></argument>,              <argument><expr><name>e</name></expr></argument>,    <argument><expr><name>uid_t</name></expr></argument>,        <argument><expr><name>s</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>getresgid32</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>gid_t</name> <operator>*</operator><name>rgid</name></expr></argument>,
                                         <argument><expr><name>gid_t</name> <operator>*</operator><name>egid</name></expr></argument>,
                                         <argument><expr><name>gid_t</name> <operator>*</operator><name>sgid</name></expr></argument>)</argument_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_getresgid32</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rgid</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>sgid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rgid</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>egid</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sgid</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>EFAULT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Clear the high bits first, since getresgid only sets 16 bits</comment>
        <expr_stmt><expr><operator>*</operator><name>rgid</name> <operator>=</operator> <operator>*</operator><name>egid</name> <operator>=</operator> <operator>*</operator><name>sgid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>getresgid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rgid</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>sgid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>getresuid32</name>)<parameter_list>(<parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>ruid</name></decl></parameter>,
                                         <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>euid</name></decl></parameter>,
                                         <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_getresuid32</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ruid</name></expr></argument>, <argument><expr><name>euid</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ruid</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>euid</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>suid</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>EFAULT</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Clear the high bits first, since getresuid only sets 16 bits</comment>
        <expr_stmt><expr><operator>*</operator><name>ruid</name> <operator>=</operator> <operator>*</operator><name>euid</name> <operator>=</operator> <operator>*</operator><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>getresuid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ruid</name></expr></argument>, <argument><expr><name>euid</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setfsgid32</name>)<parameter_list>(<parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_setfsgid32</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>gid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setfsgid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setfsuid32</name>)<parameter_list>(<parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_setfsuid32</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>uid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setfsuid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setresgid32</name>)<parameter_list>(<parameter><decl><type><name>gid_t</name></type> <name>rgid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>sgid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_setresgid32</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rgid</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>sgid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>rgid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal> <operator>||</operator>
            <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>egid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal> <operator>||</operator>
            <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>sgid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setresgid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>rgid</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>sgid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setresuid32</name>)<parameter_list>(<parameter><decl><type><name>uid_t</name></type> <name>ruid</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>euid</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_setresuid32</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ruid</name></expr></argument>, <argument><expr><name>euid</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>ruid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal> <operator>||</operator>
            <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>euid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal> <operator>||</operator>
            <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>suid</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFFu</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setresuid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ruid</name></expr></argument>, <argument><expr><name>euid</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigemptyset</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigfillset</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigaddset</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><call><name><name>signum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>signum</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><operator>(</operator><name>signum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>]</index></name>
          <operator>|=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>signum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigdelset</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
                                        <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><call><name><name>signum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>signum</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><operator>(</operator><name>signum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>]</index></name>
          <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>signum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigismember</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><call><name><name>signum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>signum</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><operator>(</operator><name>signum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>]</index></name> <operator>&amp;</operator>
                <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>signum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator>                                                    \
      <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name><operator>)</operator> <operator>||</operator>                   \
      <call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call> <operator>||</operator>                                                     \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__sigaction</name></cpp:macro>   <cpp:value>__NR_sigaction</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__sigpending</name></cpp:macro>  <cpp:value>__NR_sigpending</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__sigprocmask</name></cpp:macro> <cpp:value>__NR_sigprocmask</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__sigsuspend</name></cpp:macro>  <cpp:value>__NR_sigsuspend</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__socketcall</name></cpp:macro>  <cpp:value>__NR_socketcall</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>fstat64</name></expr></argument>,             <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>,
                         <argument><expr>struct <name>kernel_stat64</name> <operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_llseek</name></expr></argument>,     <argument><expr><name>uint</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
                         <argument><expr><name>unsigned</name> <name>long</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>,
                         <argument><expr><name>loff_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>uint</name></expr></argument>, <argument><expr><name>wh</name></expr></argument>)</argument_list>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* On s390, mmap2() arguments are passed in memory. */</comment>
    <name>LSS_INLINE</name> <name>void</name><modifier>*</modifier> <name>LSS_NAME</name><argument_list>(<argument><expr><name>_mmap2</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>size_t</name> <name>l</name></expr></argument>, <argument><expr><name>int</name> <name>p</name></expr></argument>, <argument><expr><name>int</name> <name>f</name></expr></argument>, <argument><expr><name>int</name> <name>d</name></expr></argument>,
                                      <argument><expr><name>off_t</name> <name>o</name></expr></argument>)</argument_list> <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>s</name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>l</name></expr>,
                               <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>p</name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>f</name></expr>,
                               <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>d</name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>o</name></expr> }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>LSS_REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>mmap2</name></expr></argument>, <argument><expr><literal type="string">"0"</literal><operator>(</operator><name>__r2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__mmap2</name></cpp:macro> <cpp:value>__NR_mmap2</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall6</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>_mmap2</name></expr></argument>,            <argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>,
                         <argument><expr><name>size_t</name></expr></argument>,                   <argument><expr><name>l</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,               <argument><expr><name>p</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,                      <argument><expr><name>f</name></expr></argument>, <argument><expr><name>int</name></expr></argument>,               <argument><expr><name>d</name></expr></argument>,
                         <argument><expr><name>off_t</name></expr></argument>,                    <argument><expr><name>o</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,   <argument><expr><name>_sigaction</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>s</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> struct <name>kernel_old_sigaction</name><operator>*</operator></expr></argument>,  <argument><expr><name>a</name></expr></argument>,
                         <argument><expr>struct <name>kernel_old_sigaction</name><operator>*</operator></expr></argument>,        <argument><expr><name>o</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,   <argument><expr><name>_sigpending</name></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name><operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,   <argument><expr><name>_sigprocmask</name></expr></argument>,      <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>h</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>long</name><operator>*</operator></expr></argument>,     <argument><expr><name>s</name></expr></argument>,
                         <argument><expr><name>unsigned</name> <name>long</name><operator>*</operator></expr></argument>,           <argument><expr><name>o</name></expr></argument>)</argument_list>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__PPC__</name></cpp:ifdef>
    <name>LSS_INLINE</name> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_sigsuspend</name></expr></argument>,         <argument><expr><name>unsigned</name> <name>long</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_sigsuspend</name></expr></argument>,         <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>,                      <argument><expr><name>b</name></expr></argument>,
                         <argument><expr><name>unsigned</name> <name>long</name></expr></argument>,            <argument><expr><name>s</name></expr></argument>)</argument_list>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>stat64</name></expr></argument>,              <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>,
                         <argument><expr>struct <name>kernel_stat64</name> <operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list>

    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>sigaction</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>signum</name></expr></argument>,
                                       <argument><expr><specifier>const</specifier> struct <name>kernel_sigaction</name> <operator>*</operator><name>act</name></expr></argument>,
                                       <argument><expr>struct <name>kernel_sigaction</name> <operator>*</operator><name>oldact</name></expr></argument>)</argument_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>LSS_ERRNO</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>kernel_sigaction</name></name></type> <name>a</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>act</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>a</name>             <operator>=</operator> <operator>*</operator><name>act</name></expr>;</expr_stmt>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__i386__</name></cpp:ifdef>
        <comment type="block">/* On i386, the kernel requires us to always set our own
         * SA_RESTORER when using realtime signals. Otherwise, it does not
         * know how to return from a signal handler. This function must have
         * a "magic" signature that the "gdb" (and maybe the kernel?) can
         * recognize.
         * Apparently, a SA_RESTORER is implicitly set by the kernel, when
         * using non-realtime signals.
         *
         * TODO: Test whether ARM needs a restorer
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>sa_flags</name></name> <operator>&amp;</operator> <name>SA_RESTORER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>a</name><operator>.</operator><name>sa_flags</name></name>   <operator>|=</operator> <name>SA_RESTORER</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>a</name><operator>.</operator><name>sa_restorer</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>sa_flags</name></name> <operator>&amp;</operator> <name>SA_SIGINFO</name><operator>)</operator></expr>
                          ?</condition><then> <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>restore_rt</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>restore</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigaction</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><ternary><condition><expr><name>act</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>a</name></expr> </then><else>: <expr><name>act</name></expr></else></ternary></expr></argument>, <argument><expr><name>oldact</name></expr></argument>,
                                  <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>kernel_old_sigaction</name></name></type> <name>oa</name></decl>, <decl><type ref="prev"/><name>ooa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_a</name> <init>= <expr><operator>&amp;</operator><name>oa</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_oa</name> <init>= <expr><operator>&amp;</operator><name>ooa</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>act</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ptr_a</name>            <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>oa</name><operator>.</operator><name>sa_handler_</name></name>   <operator>=</operator> <name><name>act</name><operator>-&gt;</operator><name>sa_handler_</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>act</name><operator>-&gt;</operator><name>sa_mask</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>oa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mips__</name></cpp:ifndef>
          <expr_stmt><expr><name><name>oa</name><operator>.</operator><name>sa_restorer</name></name>   <operator>=</operator> <name><name>act</name><operator>-&gt;</operator><name>sa_restorer</name></name></expr>;</expr_stmt>
          <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <expr_stmt><expr><name><name>oa</name><operator>.</operator><name>sa_flags</name></name>      <operator>=</operator> <name><name>act</name><operator>-&gt;</operator><name>sa_flags</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldact</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ptr_oa</name>           <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_sigaction</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>ptr_a</name></expr></argument>, <argument><expr><name>ptr_oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>oldact</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>act</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>oldact</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>act</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>oldact</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>oldact</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><name><name>oldact</name><operator>-&gt;</operator><name>sa_handler_</name></name>    <operator>=</operator> <name><name>ptr_oa</name><operator>-&gt;</operator><name>sa_handler_</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>oldact</name><operator>-&gt;</operator><name>sa_flags</name></name>       <operator>=</operator> <name><name>ptr_oa</name><operator>-&gt;</operator><name>sa_flags</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldact</name><operator>-&gt;</operator><name>sa_mask</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr_oa</name><operator>-&gt;</operator><name>sa_mask</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ptr_oa</name><operator>-&gt;</operator><name>sa_mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mips__</name></cpp:ifndef>
          <expr_stmt><expr><name><name>oldact</name><operator>-&gt;</operator><name>sa_restorer</name></name>    <operator>=</operator> <name><name>ptr_oa</name><operator>-&gt;</operator><name>sa_restorer</name></name></expr>;</expr_stmt>
          <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigpending</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>LSS_ERRNO</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigpending</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt>
        <function_decl><type><name>LSS_NAME</name></type>(<name>sigemptyset</name>)<parameter_list>(<parameter><decl><type><name>set</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_sigpending</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigprocmask</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
                                         <parameter><decl><type><name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>oldset</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>olderrno</name> <init>= <expr><name>LSS_ERRNO</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigprocmask</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>oldset</name></expr></argument>, <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>olderrno</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>oldset</name></expr>)</condition> <block>{<block_content>
          <function_decl><type><name>LSS_NAME</name></type>(<name>sigemptyset</name>)<parameter_list>(<parameter><decl><type><name>oldset</name></type></decl></parameter>)</parameter_list>;</function_decl>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_sigprocmask</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>how</name></expr></argument>,
                                    <argument><expr><ternary><condition><expr><name>set</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
                                    <argument><expr><ternary><condition><expr><name>oldset</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>oldset</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sigsuspend</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_sigset_t</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>olderrno</name> <init>= <expr><name>LSS_ERRNO</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>rt_sigsuspend</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><operator>(</operator><name>KERNEL_NSIG</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>olderrno</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_sigsuspend</name></expr></argument>)</argument_list></call><argument_list>(
        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__PPC__</name></cpp:ifndef>
                                   <argument><expr><name>set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                   <argument><expr><name><name>set</name><operator>-&gt;</operator><name>sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator>                                                    \
      <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name><operator>)</operator> <operator>||</operator>                   \
      <call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call> <operator>||</operator>                                                     \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <comment type="block">/* On these architectures, implement mmap() with mmap2(). */</comment>
    <function><type><name>LSS_INLINE</name> <name>void</name><modifier>*</modifier> <name>LSS_NAME</name></type>(<name>mmap</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>,
                                    <parameter><decl><type><name>int64_t</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>o</name> <operator>%</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_mmap2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>o</name> <operator>/</operator> <literal type="number">4096</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* On s390x, mmap() arguments are passed in memory. */</comment>
    <function><type><name>LSS_INLINE</name> <name>void</name><modifier>*</modifier> <name>LSS_NAME</name></type>(<name>mmap</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>,
                                    <parameter><decl><type><name>int64_t</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>s</name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>l</name></expr>,
                               <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>p</name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>f</name></expr>,
                               <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>d</name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>o</name></expr> }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>LSS_REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>mmap</name></expr></argument>, <argument><expr><literal type="string">"0"</literal><operator>(</operator><name>__r2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* Need to make sure __off64_t isn't truncated to 32-bits under x32.  */</comment>
    <function><type><name>LSS_INLINE</name> <name>void</name><modifier>*</modifier> <name>LSS_NAME</name></type>(<name>mmap</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>,
                                    <parameter><decl><type><name>int64_t</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>mmap</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>o</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Remaining 64-bit architectures. */</comment>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall6</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>mmap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SC_LOADARGS_0</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SC_LOADARGS_0</name><parameter_list>(<parameter><type><name>dummy</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SC_LOADARGS_1</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SC_LOADARGS_1</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro>                                           \
        <cpp:value>__sc_4  = (unsigned long) (arg1)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SC_LOADARGS_2</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SC_LOADARGS_2</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro>                                     \
        <cpp:value>LSS_SC_LOADARGS_1(arg1);                                              \
        __sc_5  = (unsigned long) (arg2)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SC_LOADARGS_3</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SC_LOADARGS_3</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro>                               \
        <cpp:value>LSS_SC_LOADARGS_2(arg1, arg2);                                        \
        __sc_6  = (unsigned long) (arg3)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SC_LOADARGS_4</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SC_LOADARGS_4</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro>                         \
        <cpp:value>LSS_SC_LOADARGS_3(arg1, arg2, arg3);                                  \
        __sc_7  = (unsigned long) (arg4)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SC_LOADARGS_5</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SC_LOADARGS_5</name><parameter_list>(<parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro>                   \
        <cpp:value>LSS_SC_LOADARGS_4(arg1, arg2, arg3, arg4);                            \
        __sc_8  = (unsigned long) (arg5)</cpp:value></cpp:define>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LSS_SC_BODY</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_SC_BODY</name><parameter_list>(<parameter><type><name>nr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                               \
        <cpp:value>long __sc_ret, __sc_err;                                              \
        {                                                                     \
          register unsigned long __sc_0 __asm__ ("r0") = __NR_socketcall;     \
          register unsigned long __sc_3 __asm__ ("r3") = opt;                 \
          register unsigned long __sc_4 __asm__ ("r4");                       \
          register unsigned long __sc_5 __asm__ ("r5");                       \
          register unsigned long __sc_6 __asm__ ("r6");                       \
          register unsigned long __sc_7 __asm__ ("r7");                       \
          register unsigned long __sc_8 __asm__ ("r8");                       \
          LSS_SC_LOADARGS_##nr(args);                                         \
          __asm__ __volatile__                                                \
              ("stwu 1, -48(1)\n\t"                                           \
               "stw 4, 20(1)\n\t"                                             \
               "stw 5, 24(1)\n\t"                                             \
               "stw 6, 28(1)\n\t"                                             \
               "stw 7, 32(1)\n\t"                                             \
               "stw 8, 36(1)\n\t"                                             \
               "addi 4, 1, 20\n\t"                                            \
               "sc\n\t"                                                       \
               "mfcr %0"                                                      \
                 : "=&amp;r" (__sc_0),                                            \
                   "=&amp;r" (__sc_3), "=&amp;r" (__sc_4),                            \
                   "=&amp;r" (__sc_5), "=&amp;r" (__sc_6),                            \
                   "=&amp;r" (__sc_7), "=&amp;r" (__sc_8)                             \
                 : LSS_ASMINPUT_##nr                                          \
                 : "cr0", "ctr", "memory");                                   \
          __sc_ret = __sc_3;                                                  \
          __sc_err = __sc_0;                                                  \
        }                                                                     \
        LSS_RETURN(type, __sc_ret, __sc_err)</cpp:value></cpp:define>

    <name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>recvmsg</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>s</name></expr></argument>,<argument><expr>struct <name>kernel_msghdr</name> <operator>*</operator><name>msg</name></expr></argument>,
                                         <argument><expr><name>int</name> <name>flags</name></expr></argument>)</argument_list><block>{<block_content>
      <expr_stmt><expr><call><name>LSS_SC_BODY</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name></type>(<name>sendmsg</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
                                         <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_SC_BODY</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// TODO(csilvers): why is this ifdef'ed out?</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    LSS_INLINE ssize_t LSS_NAME(sendto)(int s, const void *buf, size_t len,
                                        int flags,
                                        const struct kernel_sockaddr *to,
                                        unsigned int tolen) {
      LSS_BODY(6, ssize_t, 11, s, buf, len, flags, to, tolen);
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>shutdown</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_SC_BODY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>socket</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_SC_BODY</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>socketpair</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,
                                        <parameter><decl><type><name>int</name></type> <name><name>sv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_SC_BODY</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall3</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>recvmsg</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>struct <name>kernel_msghdr</name><operator>*</operator></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>sendmsg</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>kernel_msghdr</name><operator>*</operator></expr></argument>,
                         <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall6</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>sendto</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,
                         <argument><expr><name>int</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>kernel_sockaddr</name><operator>*</operator></expr></argument>, <argument><expr><name>to</name></expr></argument>,
                         <argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>shutdown</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>socket</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>socketpair</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>,
                         <argument><expr><name>int</name><operator>*</operator></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator>                         \
      <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name><operator>)</operator> <operator>||</operator>                  \
      <call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__socketcall</name></cpp:macro>  <cpp:value>__NR_socketcall</cpp:value></cpp:define>
    <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>,      <argument><expr><name>_socketcall</name></expr></argument>,    <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>c</name></expr></argument>,
                         <argument><expr><name>va_list</name></expr></argument>,                  <argument><expr><name>a</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>socketcall</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>op</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_socketcall</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name></type>(<name>recvmsg</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name><name>struct</name> <name>kernel_msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
                                         <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
      <return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>socketcall</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name></type>(<name>sendmsg</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
                                         <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>socketcall</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name></type>(<name>sendto</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                                        <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
                                        <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kernel_sockaddr</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
                                        <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tolen</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>socketcall</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>shutdown</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>socketcall</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>socket</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>socketcall</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>socketpair</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,
                                        <parameter><decl><type><name>int</name></type> <name><name>sv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>socketcall</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NR_fstatat64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>,   <argument><expr><name>fstatat64</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>d</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,      <argument><expr><name>p</name></expr></argument>,
                         <argument><expr>struct <name>kernel_stat64</name> <operator>*</operator></expr></argument>,   <argument><expr><name>b</name></expr></argument>,    <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>f</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PPC__</name></expr></argument>)</argument_list></call> <operator>||</operator>                                \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI32</name><operator>)</operator></expr></cpp:if>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>, <argument><expr><name>waitpid</name></expr></argument>,          <argument><expr><name>pid_t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
                         <argument><expr><name>int</name><operator>*</operator></expr></argument>,              <argument><expr><name>s</name></expr></argument>,    <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>o</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* sys_pipe() on MIPS has non-standard calling conventions, as it returns
     * both file handles through CPU registers.
     */</comment>
    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> <block>{<block_content>
      <decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name> <name>__v0</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$2"</literal></expr></argument>)</argument_list> <init>= <expr><name>__NR_pipe</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name> <name>__v1</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$3"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name> <name>__r7</name></type> <name>__asm__</name><argument_list>(<argument><expr><literal type="string">"$7"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
      <asm>__asm__ <specifier>__volatile__</specifier> ("syscall\n"
                            : "=r"(__v0), "=r"(__v1), "=r" (__r7)
                            : "0"(__v0)
                            : "$8", "$9", "$10", "$11", "$12",
                              "$13", "$14", "$15", "$24", "$25", "memory");</asm>
      <if_stmt><if>if <condition>(<expr><name>__r7</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>__errnovalue</name> <init>= <expr><name>__v0</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>__errnovalue</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__v0</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__v1</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></decl></decl_stmt>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="line">// The unlink syscall has been deprecated on aarch64. We polyfill it below.</comment>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall1</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>pipe</name></expr></argument>,           <argument><expr><name>int</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* TODO(csilvers): see if ppc can/should support this as well              */</comment>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_3__</name></expr></argument>)</argument_list></call> <operator>||</operator>                         \
      <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator>                                                \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>!=</operator> <name>_MIPS_SIM_ABI64</name><operator>)</operator> <operator>||</operator>                   \
     <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__statfs64</name></cpp:macro>  <cpp:value>__NR_statfs64</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__fstatfs64</name></cpp:macro> <cpp:value>__NR_fstatfs64</cpp:value></cpp:define>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_statfs64</name></expr></argument>,     <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>,
                         <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,<argument><expr>struct <name>kernel_statfs64</name><operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_fstatfs64</name></expr></argument>,          <argument><expr><name>int</name></expr></argument>,   <argument><expr><name>f</name></expr></argument>,
                         <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,<argument><expr>struct <name>kernel_statfs64</name><operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>statfs64</name></expr></argument>)</argument_list><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>p</name></expr></argument>,
                                     <argument><expr>struct <name>kernel_statfs64</name> <operator>*</operator><name>b</name></expr></argument>)</argument_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_statfs64</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>fstatfs64</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><name><name>struct</name> <name>kernel_statfs64</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_fstatfs64</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>execv</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>execve</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name>environ</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>pid_t</name> <name>LSS_NAME</name></type>(<name>gettid</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>tid</name> <init>= <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_gettid</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>tid</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>getpid</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>void</name> <modifier>*</modifier><name>LSS_NAME</name></type>(<name>mremap</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>old_address</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_size</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>new_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_address</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>new_address</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>_mremap</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>old_address</name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>,
                           <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>new_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>ptrace_detach</name>)<parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* PTRACE_DETACH can sometimes forget to wake up the tracee and it
     * then sends job control signals to the real parent, rather than to
     * the tracer. We reduce the risk of this happening by starting a
     * whole new time slice, and then quickly sending a SIGCONT signal
     * right after detaching from the tracee.
     *
     * We use tkill to ensure that we only issue a wakeup for the thread being
     * detached.  Large multi threaded apps can take a long time in the kernel
     * processing SIGCONT.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
    <function_decl><type><name>LSS_NAME</name></type>(<name>sched_yield</name>)<parameter_list>()</parameter_list>;</function_decl>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>ptrace</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>PTRACE_DETACH</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>LSS_ERRNO</name></expr>;</expr_stmt>
    <function_decl><type><name>LSS_NAME</name></type>(<name>tkill</name>)<parameter_list>(<parameter><decl><type><name>pid</name></type></decl></parameter>, <parameter><decl><type><name>SIGCONT</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block">/* Old systems don't have tkill */</comment>
    <if_stmt><if>if <condition>(<expr><name>LSS_ERRNO</name> <operator>==</operator> <name>ENOSYS</name></expr>)</condition><block type="pseudo"><block_content>
      <function_decl><type><name>LSS_NAME</name></type>(<name>kill</name>)<parameter_list>(<parameter><decl><type><name>pid</name></type></decl></parameter>, <parameter><decl><type><name>SIGCONT</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>raise</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>kill</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>getpid</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>setpgrp</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>setpgid</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>sysconf</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__getpagesize</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>_SC_OPEN_MAX</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>kernel_rlimit</name></name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
        <return>return <expr><ternary><condition><expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>ugetrlimit</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>
            ?</condition><then> <expr><literal type="number">8192</literal></expr> </then><else>: <expr><name><name>limit</name><operator>.</operator><name>rlim_cur</name></name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return <expr><ternary><condition><expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>getrlimit</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>
            ?</condition><then> <expr><literal type="number">8192</literal></expr> </then><else>: <expr><name><name>limit</name><operator>.</operator><name>rlim_cur</name></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block>
      <case>case <expr><name>_SC_PAGESIZE</name></expr>:</case>
        <return>return <expr><call><name>__getpagesize</name><argument_list>()</argument_list></call></expr>;</return>
      <default>default:</default>
        <expr_stmt><expr><name>LSS_ERRNO</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></function>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Need to make sure loff_t isn't truncated to 32-bits under x32.  */</comment>
    <function><type><name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name></type>(<name>pread64</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>pread64</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>o</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name></type>(<name>pwrite64</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>,
                                          <parameter><decl><type><name>loff_t</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>pwrite64</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>o</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>readahead</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>readahead</name></expr></argument>, <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>o</name><operator>)</operator></expr></argument>,
                                  <argument><expr><call><name>LSS_SYSCALL_ARG</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MIPS_SIM</name> <operator>==</operator> <name>_MIPS_SIM_ABI64</name></expr></cpp:elif>
    <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall4</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>pread64</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                         <argument><expr><name>void</name> <operator>*</operator></expr></argument>,         <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,   <argument><expr><name>c</name></expr></argument>,
                         <argument><expr><name>loff_t</name></expr></argument>,         <argument><expr><name>o</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>pwrite64</name></expr></argument>,       <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,   <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,   <argument><expr><name>c</name></expr></argument>,
                         <argument><expr><name>loff_t</name></expr></argument>,         <argument><expr><name>o</name></expr></argument>)</argument_list>
    <name>LSS_INLINE</name> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>,     <argument><expr><name>readahead</name></expr></argument>,      <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                         <argument><expr><name>loff_t</name></expr></argument>,         <argument><expr><name>o</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
  <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__pread64</name></cpp:macro>   <cpp:value>__NR_pread64</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__pwrite64</name></cpp:macro>  <cpp:value>__NR_pwrite64</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NR__readahead</name></cpp:macro> <cpp:value>__NR_readahead</cpp:value></cpp:define>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_EABI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <comment type="block">/* On ARM and MIPS, a 64-bit parameter has to be in an even-odd register
       * pair. Hence these calls ignore their fourth argument (r3) so that their
       * fifth and sixth make such a pair (r4,r5).
       */</comment>
      <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LLARG_PAD</name></cpp:macro> <cpp:value>0,</cpp:value></cpp:define>
      <name>LSS_INLINE</name> <name>_syscall6</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>_pread64</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                           <argument><expr><name>void</name> <operator>*</operator></expr></argument>,         <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                           <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list>
      <name>LSS_INLINE</name> <name>_syscall6</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>_pwrite64</name></expr></argument>,       <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,   <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                           <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list>
      <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_readahead</name></expr></argument>,          <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                           <argument><expr><name>unsigned</name></expr></argument>,     <argument><expr><name>skip</name></expr></argument>,
                           <argument><expr><name>unsigned</name></expr></argument>,       <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSS_LLARG_PAD</name></cpp:macro></cpp:define>
      <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>_pread64</name></expr></argument>,        <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                           <argument><expr><name>void</name> <operator>*</operator></expr></argument>,         <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>,
                           <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list>
      <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>_pwrite64</name></expr></argument>,       <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,   <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>,
                           <argument><expr><name>long</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list>
      <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>_readahead</name></expr></argument>,          <argument><expr><name>int</name></expr></argument>,         <argument><expr><name>f</name></expr></argument>,
                           <argument><expr><name>unsigned</name></expr></argument>,       <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* We force 64bit-wide parameters onto the stack, then access each
     * 32-bit component individually. This guarantees that we build the
     * correct parameters independent of the native byte-order of the
     * underlying architecture.
     */</comment>
    <name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>pread64</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>fd</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>count</name></expr></argument>,
                                         <argument><expr><name>loff_t</name> <name>off</name></expr></argument>)</argument_list> <block>{<block_content>
      <union>union <block>{ <decl_stmt><decl><type><name>loff_t</name></type> <name>off</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name></type> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>o</name> <init>= <expr><block>{ <expr><name>off</name></expr> }</block></expr></init></decl>;</union>
      <return>return <macro><name>LSS_NAME</name><argument_list>(<argument>_pread64</argument>)</argument_list></macro><expr><operator>(</operator><name>fd</name><operator>,</operator> <name>buf</name><operator>,</operator> <name>count</name><operator>,</operator>
                                <name>LSS_LLARG_PAD</name> <name><name>o</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>o</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
    <function><type><name>LSS_INLINE</name> <name>ssize_t</name> <name>LSS_NAME</name></type>(<name>pwrite64</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                          <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <union>union <block>{ <decl_stmt><decl><type><name>loff_t</name></type> <name>off</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name></type> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>o</name> <init>= <expr><block>{ <expr><name>off</name></expr> }</block></expr></init></decl>;</union>
      <return>return <macro><name>LSS_NAME</name><argument_list>(<argument>_pwrite64</argument>)</argument_list></macro><expr><operator>(</operator><name>fd</name><operator>,</operator> <name>buf</name><operator>,</operator> <name>count</name><operator>,</operator>
                                 <name>LSS_LLARG_PAD</name> <name><name>o</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>o</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>readahead</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <union>union <block>{ <decl_stmt><decl><type><name>loff_t</name></type> <name>off</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name></type> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>o</name> <init>= <expr><block>{ <expr><name>off</name></expr> }</block></expr></init></decl>;</union>
      <return>return <macro><name>LSS_NAME</name><argument_list>(<argument>_readahead</argument>)</argument_list></macro><expr><operator>(</operator><name>fd</name><operator>,</operator> <name>LSS_LLARG_PAD</name> <name><name>o</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>o</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name>len</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>LSS_INLINE</name></type> <name>_syscall3</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>dup3</name></expr></argument>,  <argument><expr><name>int</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>newfstatat</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>dirfd</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
                       <argument><expr>struct <name>kernel_stat</name> <operator>*</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall2</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>pipe2</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>, <argument><expr><name>pipefd</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall5</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ppoll</name></expr></argument>, <argument><expr>struct <name>kernel_pollfd</name> <operator>*</operator></expr></argument>, <argument><expr><name>u</name></expr></argument>,
                       <argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>kernel_timespec</name> <operator>*</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> struct <name>kernel_sigset_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>sigmask</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
  <name>LSS_INLINE</name> <name>_syscall4</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>readlinkat</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>,
                       <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Polyfills for deprecated syscalls.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name><argument_list>(<argument><expr><name>dup2</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int</name> <name>s</name></expr></argument>, <argument><expr><name>int</name> <name>d</name></expr></argument>)</argument_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>dup3</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>openat</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>unlink</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>unlinkat</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>readlink</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>readlinkat</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>pid_t</name> <name>LSS_NAME</name></type>(<name>pipe</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pipefd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>pipe2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pipefd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>poll</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kernel_pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nfds</name></decl></parameter>,
                                <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
   <decl_stmt><decl><type><name><name>struct</name> <name>kernel_timespec</name></name></type> <name>timeout_ts</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>struct</name> <name>kernel_timespec</name></name> <modifier>*</modifier></type><name>timeout_ts_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>timeout_ts_p</name> <operator>=</operator> <operator>&amp;</operator><name>timeout_ts</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>ppoll</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout_ts_p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>int</name> <name>LSS_NAME</name></type>(<name>stat</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,
                                <parameter><decl><type><name><name>struct</name> <name>kernel_stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><call><name>LSS_NAME</name><argument_list>(<argument><expr><name>newfstatat</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>LSS_INLINE</name> <name>pid_t</name> <name>LSS_NAME</name></type>(<name>fork</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// No fork syscall on aarch64 - implement by means of the clone syscall.</comment>
    <comment type="line">// Note that this does not reset glibc's cached view of the PID/TID, so</comment>
    <comment type="line">// some glibc interfaces might go wrong in the forked subprocess.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SIGCHLD</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>child_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>parent_tidptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newtls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>child_tidptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LSS_REG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LSS_REG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>child_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LSS_REG</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>parent_tidptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LSS_REG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>newtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LSS_REG</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>child_tidptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LSS_BODY</name><argument_list>(<argument><expr><name>pid_t</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>, <argument><expr><literal type="string">"r"</literal><operator>(</operator><name>__r0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"r"</literal><operator>(</operator><name>__r1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"r"</literal><operator>(</operator><name>__r2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"r"</literal><operator>(</operator><name>__r3</name><operator>)</operator></expr></argument>,
             <argument><expr><literal type="string">"r"</literal><operator>(</operator><name>__r4</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ANDROID__</name></cpp:ifdef>
  <comment type="block">/* These restore the original values of these macros saved by the
   * corresponding #pragma push_macro near the top of this file. */</comment>
<cpp:pragma># <cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"stat64"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma># <cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"fstat64"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma># <cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"lstat64"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYS_CPLUSPLUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl/></struct></unit>
