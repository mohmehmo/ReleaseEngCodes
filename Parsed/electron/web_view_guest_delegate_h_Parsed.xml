<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/web_view_guest_delegate.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_WEB_VIEW_GUEST_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_WEB_VIEW_GUEST_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_plugin_guest_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/web_contents_zoom_controller.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>WebContents</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>WebViewGuestDelegate</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>BrowserPluginGuestDelegate</name></expr></range></decl>,
                             <decl><type ref="prev"/><name>public</name> <name>WebContentsZoomController</name>::<name>Observer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>WebViewGuestDelegate</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>embedder</name></expr></argument>,
                       <argument><expr><name>api</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>api_web_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>WebViewGuestDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// Attach to the iframe.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>AttachToIframe</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>embedder_web_contents</name></expr></argument>,
                      <argument><expr><name>int</name> <name>embedder_frame_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <comment type="line">// content::BrowserPluginGuestDelegate:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>DidDetach</name><argument_list>()</argument_list></macro> <name>final</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetOwnerWebContents</name><argument_list>()</argument_list></macro> <name>final</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHost</name><operator>*</operator> <macro><name>GetOwnerRenderWidgetHost</name><argument_list>()</argument_list></macro> <name>final</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>SiteInstance</name><operator>*</operator> <macro><name>GetOwnerSiteInstance</name><argument_list>()</argument_list></macro> <name>final</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>CreateNewGuestWindow</name><argument_list>(
      <argument>const content::WebContents::CreateParams&amp; create_params</argument>)</argument_list></macro> <name>final</name></expr>;</expr_stmt>

  <comment type="line">// WebContentsZoomController::Observer:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnZoomLevelChanged</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                          <argument><expr><name>double</name> <name>level</name></expr></argument>,
                          <argument><expr><name>bool</name> <name>is_temporary</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnZoomControllerWebContentsDestroyed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>ResetZoomController</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// The WebContents that attaches this guest view.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>embedder_web_contents_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <comment type="line">// The zoom controller of the embedder that is used</comment>
  <comment type="line">// to subscribe for zoom changes.</comment>
  <decl_stmt><decl><type><name>WebContentsZoomController</name><modifier>*</modifier></type> <name>embedder_zoom_controller_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>api</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>api_web_contents_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WebViewGuestDelegate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_WEB_VIEW_GUEST_DELEGATE_H_</comment>
</unit>
