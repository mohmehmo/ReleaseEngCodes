<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/notification.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_NOTIFICATION_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_NOTIFICATION_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/skia/include/core/SkBitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url/gurl.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NotificationDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NotificationPresenter</name></decl>;</decl_stmt>

<struct>struct <name>NotificationAction</name> <block>{
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>text</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>NotificationOptions</name> <block>{
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>title</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>subtitle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>msg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>tag</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>silent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GURL</name></type> <name>icon_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SkBitmap</name></type> <name>icon</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_reply</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>timeout_type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>reply_placeholder</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>sound</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>urgency</name></expr>;</expr_stmt>  <comment type="line">// Linux</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>NotificationAction</name></expr></argument>&gt;</argument_list></name> <name>actions</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>close_button_text</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NotificationOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>NotificationOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>Notification</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Notification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Shows the notification.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Show</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NotificationOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <comment type="line">// Closes the notification, this instance will be destroyed after the</comment>
  <comment type="line">// notification gets closed.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Dismiss</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Should be called by derived classes.</comment>
  <function_decl><type><name>void</name></type> <name>NotificationClicked</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotificationDismissed</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotificationFailed</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// delete this.</comment>
  <function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>Notification</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWeakPtr</name><argument_list>()</argument_list></macro> <block>{
    <return>return <expr><call><name><name>weak_factory_</name><operator>.</operator><name>GetWeakPtr</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

  <function><type><name>void</name></type> <name>set_delegate</name><parameter_list>(<parameter><decl><type><name>NotificationDelegate</name><modifier>*</modifier></type> <name>delegate</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>delegate_</name> <operator>=</operator> <name>delegate</name></expr>;</expr_stmt> </block_content>}</block></function>
  <decl_stmt><decl><type><name>void</name></type> <name>set_notification_id</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>id</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>notification_id_</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

  <expr_stmt><expr><name>NotificationDelegate</name><operator>*</operator> <macro><name>delegate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>delegate_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>NotificationPresenter</name><operator>*</operator> <macro><name>presenter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>presenter_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>notification_id</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>notification_id_</name></expr>;</return> }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><call><name>Notification</name><argument_list>(<argument><expr><name>NotificationDelegate</name><operator>*</operator> <name>delegate</name></expr></argument>,
               <argument><expr><name>NotificationPresenter</name><operator>*</operator> <name>presenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>NotificationDelegate</name><modifier>*</modifier></type> <name>delegate_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>NotificationPresenter</name><modifier>*</modifier></type> <name>presenter_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>notification_id_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>Notification</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_NOTIFICATION_H_</comment>
</unit>
