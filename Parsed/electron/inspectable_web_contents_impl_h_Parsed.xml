<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/inspectable_web_contents_impl.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Copyright (c) 2013 Adam Roben &lt;adam@roben.org&gt;. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_IMPL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_IMPL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/containers/unique_ptr_adapters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/devtools/devtools_contents_resizing_strategy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/devtools/devtools_embedder_message_dispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/devtools_agent_host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/devtools_frontend_host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/inspectable_web_contents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/geometry/rect.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>PrefService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PrefRegistrySimple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsView</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsImpl</name>
    <range>: <expr><name>public</name> <name>InspectableWebContents</name></expr></range></decl>,
      <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>DevToolsAgentHostClient</name></decl>,
      <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>WebContentsObserver</name></decl>,
      <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>WebContentsDelegate</name></decl>,
      <decl><type ref="prev"/><name>public</name> <name>DevToolsEmbedderMessageDispatcher</name>::<name>Delegate</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>using</name></type> <name>List</name> <init>= <expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>InspectableWebContentsImpl</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>List</name><modifier>&amp;</modifier></type> <name>GetAll</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RegisterPrefs</name><parameter_list>(<parameter><decl><type><name>PrefRegistrySimple</name><modifier>*</modifier></type> <name>pref_registry</name></decl></parameter>)</parameter_list>;</function_decl>

  <macro><name>InspectableWebContentsImpl</name><argument_list>(<argument>content::WebContents* web_contents</argument>,
                             <argument>PrefService* pref_service</argument>,
                             <argument>bool is_guest</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>InspectableWebContentsImpl</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>InspectableWebContentsView</name><operator>*</operator> <macro><name>GetView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetWebContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetDevToolsWebContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SetDelegate</name><argument_list>(<argument><expr><name>InspectableWebContentsDelegate</name><operator>*</operator> <name>delegate</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>InspectableWebContentsDelegate</name><operator>*</operator> <macro><name>GetDelegate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsGuest</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ReleaseWebContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetDevToolsWebContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>devtools</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetDockState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>state</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ShowDevTools</name><argument_list>(<argument><expr><name>bool</name> <name>activate</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>CloseDevTools</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsDevToolsViewShowing</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AttachTo</name><argument_list>(<argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Detach</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>CallClientFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>function_name</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <name>arg1</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <name>arg2</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <name>arg3</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InspectElement</name><argument_list>(<argument><expr><name>int</name> <name>x</name></expr></argument>, <argument><expr><name>int</name> <name>y</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// Return the last position and size of devtools window.</comment>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetDevToolsBounds</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SaveDevToolsBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Return the last set zoom level of devtools window.</comment>
  <expr_stmt><expr><name>double</name> <macro><name>GetDevToolsZoomLevel</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>UpdateDevToolsZoomLevel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <comment type="line">// DevToolsEmbedderMessageDispacher::Delegate</comment>
  <expr_stmt><expr><name>void</name> <macro><name>ActivateWindow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>CloseWindow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>LoadCompleted</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetInspectedPageBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>rect</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>InspectElementCompleted</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InspectedURLChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>LoadNetworkResource</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DispatchCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>headers</name></expr></argument>,
                           <argument><expr><name>int</name> <name>stream_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetIsDocked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DispatchCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>, <argument><expr><name>bool</name> <name>is_docked</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OpenInNewTab</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ShowItemInFolder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SaveToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>,
                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>content</name></expr></argument>,
                  <argument><expr><name>bool</name> <name>save_as</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AppendToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>content</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>RequestFileSystems</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AddFileSystem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RemoveFileSystem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>UpgradeDraggedFileSystemPermissions</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>IndexPath</name><argument_list>(<argument><expr><name>int</name> <name>index_request_id</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>excluded_folders</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>StopIndexing</name><argument_list>(<argument><expr><name>int</name> <name>index_request_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SearchInPath</name><argument_list>(<argument><expr><name>int</name> <name>search_request_id</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>query</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetWhitelistedShortcuts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetEyeDropperActive</name><argument_list>(<argument><expr><name>bool</name> <name>active</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ShowCertificateViewer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>cert_chain</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ZoomIn</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ZoomOut</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ResetZoom</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetDevicesDiscoveryConfig</name><argument_list>(
      <argument><expr><name>bool</name> <name>discover_usb_devices</name></expr></argument>,
      <argument><expr><name>bool</name> <name>port_forwarding_enabled</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>port_forwarding_config</name></expr></argument>,
      <argument><expr><name>bool</name> <name>network_discovery_enabled</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>network_discovery_config</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetDevicesUpdatesEnabled</name><argument_list>(<argument><expr><name>bool</name> <name>enabled</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>PerformActionOnRemotePage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>page_id</name></expr></argument>,
                                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>action</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OpenRemotePage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>browser_id</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OpenNodeFrontend</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DispatchProtocolMessageFromDevToolsFrontend</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SendJsonRequest</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DispatchCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>browser_id</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>GetPreferences</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DispatchCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetPreference</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RemovePreference</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ClearPreferences</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ConnectionReady</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RegisterExtensionsAPI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>origin</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>script</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Reattach</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DispatchCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RecordEnumeratedHistogram</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                 <argument><expr><name>int</name> <name>sample</name></expr></argument>,
                                 <argument><expr><name>int</name> <name>boundary_value</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content/>}</block></decl></decl_stmt>
  <function><type><name>void</name></type> <name>ReadyForTest</name><parameter_list>()</parameter_list> override <block>{<block_content/>}</block></function>
  <function><type><name>void</name></type> <name>SetOpenNewWindowForPopups</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> override <block>{<block_content/>}</block></function>
  <decl_stmt><decl><type><name>void</name></type> <name>RecordPerformanceHistogram</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                  <argument><expr><name>double</name> <name>duration</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content/>}</block></decl></decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RecordUserMetricsAction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content/>}</block></decl></decl_stmt>

  <comment type="line">// content::DevToolsFrontendHostDelegate:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>HandleMessageFromDevToolsFrontend</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// content::DevToolsAgentHostClient:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>DispatchProtocolMessage</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name><operator>*</operator> <name>agent_host</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AgentHostClosed</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name><operator>*</operator> <name>agent_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// content::WebContentsObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderFrameHostChanged</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>old_host</name></expr></argument>,
                              <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>new_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>WebContentsDestroyed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWebContentsFocused</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHost</name><operator>*</operator> <name>render_widget_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ReadyToCommitNavigation</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>NavigationHandle</name><operator>*</operator> <name>navigation_handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidFinishNavigation</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>NavigationHandle</name><operator>*</operator> <name>navigation_handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// content::WebContentsDelegate:</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>DidAddMessageToConsole</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
                              <argument><expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>ConsoleMessageLevel</name> <name>level</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>message</name></expr></argument>,
                              <argument><expr><name>int32_t</name> <name>line_no</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>source_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>HandleKeyboardEvent</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>NativeWebKeyboardEvent</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>CloseContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>ColorChooser</name><operator>*</operator> <macro><name>OpenColorChooser</name><argument_list>(
      <argument>content::WebContents* source</argument>,
      <argument>SkColor color</argument>,
      <argument>const std::vector&lt;blink::mojom::ColorSuggestionPtr&gt;&amp; suggestions</argument>)</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RunFileChooser</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
                      <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>FileSelectListener</name></expr></argument>&gt;</argument_list></name> <name>listener</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>FileChooserParams</name><operator>&amp;</operator> <name>params</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>EnumerateDirectory</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
                          <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>FileSelectListener</name></expr></argument>&gt;</argument_list></name> <name>listener</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SendMessageAck</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <name>arg1</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>frontend_loaded_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name></expr></argument>&gt;</argument_list></name></type> <name>agent_host_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>DevToolsFrontendHost</name></expr></argument>&gt;</argument_list></name> <name>frontend_host_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DevToolsEmbedderMessageDispatcher</name></expr></argument>&gt;</argument_list></name>
      <name>embedder_message_dispatcher_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>DevToolsContentsResizingStrategy</name></type> <name>contents_resizing_strategy_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <name>devtools_bounds_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>can_dock_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>dock_state_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>activate_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>InspectableWebContentsDelegate</name><modifier>*</modifier></type> <name>delegate_</name></decl>;</decl_stmt>  <comment type="line">// weak references.</comment>

  <decl_stmt><decl><type><name>PrefService</name><modifier>*</modifier></type> <name>pref_service_</name></decl>;</decl_stmt>  <comment type="line">// weak reference.</comment>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>WebContents</name></expr></argument>&gt;</argument_list></name> <name>web_contents_</name></expr>;</expr_stmt>

  <comment type="line">// The default devtools created by this class when we don't have an external</comment>
  <comment type="line">// one assigned by SetDevToolsWebContents.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>WebContents</name></expr></argument>&gt;</argument_list></name> <name>managed_devtools_web_contents_</name></expr>;</expr_stmt>
  <comment type="line">// The external devtools assigned by SetDevToolsWebContents.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>external_devtools_web_contents_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>is_guest_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>InspectableWebContentsView</name></expr></argument>&gt;</argument_list></name> <name>view_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>class</name></type> <name>NetworkResourceLoader</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NetworkResourceLoader</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>UniquePtrComparator</name></expr></argument>&gt;</argument_list></name>
      <name>loaders_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>using</name></type> <name>ExtensionsAPIs</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ExtensionsAPIs</name></type> <name>extensions_api_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>InspectableWebContentsImpl</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>InspectableWebContentsImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_IMPL_H_</comment>
</unit>
