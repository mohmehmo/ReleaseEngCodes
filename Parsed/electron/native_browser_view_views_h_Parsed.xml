<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/native_browser_view_views.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NATIVE_BROWSER_VIEW_VIEWS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NATIVE_BROWSER_VIEW_VIEWS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_browser_view.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeBrowserViewViews</name> <range>: <expr><name>public</name> <name>NativeBrowserView</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>NativeBrowserViewViews</name><argument_list>(
      <argument><expr><name>InspectableWebContents</name><operator>*</operator> <name>inspectable_web_contents</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>NativeBrowserViewViews</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <call><name>SetAutoResizeProportions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>window_size</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>AutoResize</name><argument_list>(<argument>const gfx::Rect&amp; new_window</argument>,
                  <argument>int width_delta</argument>,
                  <argument>int height_delta</argument>)</argument_list></macro></expr>;
  <expr><name>uint8_t</name> <macro><name>GetAutoResizeFlags</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>auto_resize_flags_</name></expr>;</return> }</block>

  <comment type="line">// NativeBrowserView:</comment>
  <name>void</name> <macro><name>SetAutoResizeFlags</name><argument_list>(<argument>uint8_t flags</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetBounds</name><argument_list>(<argument>const gfx::Rect&amp; bounds</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetBounds</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetBackgroundColor</name><argument_list>(<argument>SkColor color</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <call><name>ResetAutoResizeProportions</name><argument_list>()</argument_list></call></expr>;

  <expr><name>uint8_t</name> <name>auto_resize_flags_</name> <operator>=</operator> <literal type="number">0</literal></expr>;

  <expr><name>bool</name> <name>auto_horizontal_proportion_set_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>float</name> <name>auto_horizontal_proportion_width_</name> <operator>=</operator> <literal type="number">0.</literal></expr>;
  <expr><name>float</name> <name>auto_horizontal_proportion_left_</name> <operator>=</operator> <literal type="number">0.</literal></expr>;

  <expr><name>bool</name> <name>auto_vertical_proportion_set_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>float</name> <name>auto_vertical_proportion_height_</name> <operator>=</operator> <literal type="number">0.</literal></expr>;
  <expr><name>float</name> <name>auto_vertical_proportion_top_</name> <operator>=</operator> <literal type="number">0.</literal></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NativeBrowserViewViews</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NATIVE_BROWSER_VIEW_VIEWS_H_</comment>
</unit>
