<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_url_loader.h"><comment type="line">// Copyright (c) 2019 Slack Technologies, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_URL_LOADER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_URL_LOADER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/base/auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/simple_url_loader_stream_consumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/network_context.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_loader_factory.mojom-forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_response_head.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/event_emitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url/gurl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>network</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SimpleURLLoader</name></decl>;</decl_stmt>
<struct_decl>struct <name>ResourceRequest</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace network</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<comment type="block" format="doxygen">/** Wraps a SimpleURLLoader to make it usable from JavaScript */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SimpleURLLoaderWrapper</name>
    <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>EventEmitter</name><argument_list type="generic">&lt;<argument><expr><name>SimpleURLLoaderWrapper</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
      <decl><type ref="prev"/><name>public</name> <name>network</name>::<name>SimpleURLLoaderStreamConsumer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><operator>~</operator><macro><name>SimpleURLLoaderWrapper</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>*</operator> <call><name>New</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><specifier>static</specifier> <name>SimpleURLLoaderWrapper</name><modifier>*</modifier></type> <name>FromID</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>void</name></type> <name>OnAuthRequired</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>,
      <argument><expr><name>bool</name> <name>first_auth_attempt</name></expr></argument>,
      <argument><expr><name>net</name><operator>::</operator><name>AuthChallengeInfo</name> <name>auth_info</name></expr></argument>,
      <argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLResponseHeadPtr</name> <name>head</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingRemote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>AuthChallengeResponder</name></expr></argument>&gt;</argument_list></name>
          <name>auth_challenge_responder</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>Cancel</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <expr_stmt><expr><call><name>SimpleURLLoaderWrapper</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequest</name></expr></argument>&gt;</argument_list></name> <name>loader</name></expr></argument>,
                         <argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name><operator>*</operator> <name>url_loader_factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// SimpleURLLoaderStreamConsumer:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnDataReceived</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>string_piece</name></expr></argument>,
                      <argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>resume</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnComplete</name><argument_list>(<argument><expr><name>bool</name> <name>success</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRetry</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>start_retry</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// SimpleURLLoader callbacks</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnResponseStarted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>final_url</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLResponseHead</name><operator>&amp;</operator> <name>response_head</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRedirect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>RedirectInfo</name><operator>&amp;</operator> <name>redirect_info</name></expr></argument>,
                  <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLResponseHead</name><operator>&amp;</operator> <name>response_head</name></expr></argument>,
                  <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>removed_headers</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>OnUploadProgress</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>total</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>OnDownloadProgress</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>current</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>Start</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Pin</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>PinBodyGetter</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>id_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SimpleURLLoader</name></expr></argument>&gt;</argument_list></name> <name>loader_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>pinned_wrapper_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>pinned_chunk_pipe_getter_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>SimpleURLLoaderWrapper</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_URL_LOADER_H_</comment>
</unit>
