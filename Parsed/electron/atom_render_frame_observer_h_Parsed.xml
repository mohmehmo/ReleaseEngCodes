<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/atom_render_frame_observer.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_ATOM_RENDER_FRAME_OBSERVER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_ATOM_RENDER_FRAME_OBSERVER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ipc/ipc_platform_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/renderer/renderer_client_base.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/platform/web_isolated_world_ids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_local_frame.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ListValue</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<enum>enum <name>World</name> <block>{
  <decl><name>MAIN_WORLD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

  <comment type="line">// Use a high number far away from 0 to not collide with any other world</comment>
  <comment type="line">// IDs created internally by Chrome.</comment>
  <decl><name>ISOLATED_WORLD</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>,

  <comment type="line">// Numbers for isolated worlds for extensions are set in</comment>
  <comment type="line">// lib/renderer/content-script-injector.ts, and are greater than or equal to</comment>
  <comment type="line">// this number, up to ISOLATED_WORLD_EXTENSIONS_END.</comment>
  <decl><name>ISOLATED_WORLD_EXTENSIONS</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></init></decl>,

  <comment type="line">// Last valid isolated world ID.</comment>
  <decl><name>ISOLATED_WORLD_EXTENSIONS_END</name> <init>=
      <expr><name>blink</name><operator>::</operator><name>IsolatedWorldId</name><operator>::</operator><name>kEmbedderWorldIdLimit</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<comment type="line">// Helper class to forward the messages to the client.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomRenderFrameObserver</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>RenderFrameObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomRenderFrameObserver</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>frame</name></expr></argument>,
                          <argument><expr><name>RendererClientBase</name><operator>*</operator> <name>renderer_client</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// content::RenderFrameObserver:</comment>
  <expr><name>void</name> <macro><name>DidClearWindowObject</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>DidCreateScriptContext</name><argument_list>(<argument>v8::Handle&lt;v8::Context&gt; context</argument>,
                              <argument>int world_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>DraggableRegionsChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>WillReleaseScriptContext</name><argument_list>(<argument>v8::Local&lt;v8::Context&gt; context</argument>,
                                <argument>int world_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnDestruct</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>bool</name> <macro><name>ShouldNotifyClient</name><argument_list>(<argument>int world_id</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>CreateIsolatedWorldContext</name><argument_list>()</argument_list></call></expr>;
  <expr><name>bool</name> <macro><name>IsMainWorld</name><argument_list>(<argument>int world_id</argument>)</argument_list></macro></expr>;
  <expr><name>bool</name> <macro><name>IsIsolatedWorld</name><argument_list>(<argument>int world_id</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>OnTakeHeapSnapshot</name><argument_list>(<argument>IPC::PlatformFileForTransit file_handle</argument>,
                          <argument>const std::string&amp; channel</argument>)</argument_list></macro></expr>;

  <expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame_</name></expr>;
  <expr><name>RendererClientBase</name><operator>*</operator> <name>renderer_client_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomRenderFrameObserver</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_ATOM_RENDER_FRAME_OBSERVER_H_</comment>
</unit>
