<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/resolve_proxy_helper.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_RESOLVE_PROXY_HELPER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_RESOLVE_PROXY_HELPER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/receiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/proxy_lookup_client.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url/gurl.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ResolveProxyHelper</name>
    <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name><name>RefCountedThreadSafe</name><argument_list type="generic">&lt;<argument><expr><name>ResolveProxyHelper</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
      <decl><type ref="prev"/><name>network</name>::<name>mojom</name>::<name>ProxyLookupClient</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>using</name></type> <name>ResolveProxyCallback</name> <init>= <expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>std</name><operator>::</operator><name>string</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>explicit</name></type> <name>ResolveProxyHelper</name><parameter_list>(<parameter><decl><type><name>AtomBrowserContext</name><modifier>*</modifier></type> <name>browser_context</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>ResolveProxy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GURL</name><modifier>&amp;</modifier></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>ResolveProxyCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><operator>~</operator><macro><name>ResolveProxyHelper</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>friend</name> <name>class</name> <name>base</name><operator>::</operator><name><name>RefCountedThreadSafe</name><argument_list type="generic">&lt;<argument><expr><name>ResolveProxyHelper</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
  <comment type="line">// A PendingRequest is a resolve request that is in progress, or queued.</comment>
  <struct>struct <name>PendingRequest</name> <block>{
   <label><name>public</name>:</label>
    <macro><name>PendingRequest</name><argument_list>(<argument>const GURL&amp; url</argument>, <argument>ResolveProxyCallback callback</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>PendingRequest</name><argument_list>(<argument>PendingRequest&amp;&amp; pending_request</argument>)</argument_list></macro> <expr_stmt><expr><name>noexcept</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>PendingRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PendingRequest</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>PendingRequest</name><operator>&amp;&amp;</operator> <name>pending_request</name><operator>)</operator> <name>noexcept</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GURL</name></type> <name>url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ResolveProxyCallback</name></type> <name>callback</name></decl>;</decl_stmt>

   <label><name>private</name>:</label>
    <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>PendingRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>;</struct>

  <comment type="line">// Starts the first pending request.</comment>
  <function_decl><type><name>void</name></type> <name>StartPendingRequest</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// network::mojom::ProxyLookupClient implementation.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnProxyLookupComplete</name><argument_list>(
      <argument><expr><name>int32_t</name> <name>net_error</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>ProxyInfo</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>proxy_info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// Self-reference. Owned as long as there's an outstanding proxy lookup.</comment>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>ResolveProxyHelper</name></expr></argument>&gt;</argument_list></name></type> <name>owned_self_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>PendingRequest</name></expr></argument>&gt;</argument_list></name> <name>pending_requests_</name></expr>;</expr_stmt>
  <comment type="line">// Receiver for the currently in-progress request, if any.</comment>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Receiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>ProxyLookupClient</name></expr></argument>&gt;</argument_list></name> <name>receiver_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>

  <comment type="line">// Weak Ref</comment>
  <decl_stmt><decl><type><name>AtomBrowserContext</name><modifier>*</modifier></type> <name>browser_context_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ResolveProxyHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_RESOLVE_PROXY_HELPER_H_</comment>
</unit>
