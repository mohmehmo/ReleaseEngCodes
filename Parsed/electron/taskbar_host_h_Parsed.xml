<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/win/taskbar_host.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_WIN_TASKBAR_HOST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_WIN_TASKBAR_HOST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shobjidl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wrl/client.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/geometry/rect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/image/image.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TaskbarHost</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <struct>struct <name>ThumbarButton</name> <block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>tooltip</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Image</name> <name>icon</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>base</name><operator>::</operator><name>Closure</name> <name>clicked_callback</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ThumbarButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ThumbarButton</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThumbarButton</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>ThumbarButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block>;</struct>

  <expr_stmt><expr><call><name>TaskbarHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TaskbarHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Add or update the buttons in thumbar.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetThumbarButtons</name><argument_list>(<argument><expr><name>HWND</name> <name>window</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ThumbarButton</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>buttons</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>RestoreThumbarButtons</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Set the progress state in taskbar.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetProgressBar</name><argument_list>(<argument><expr><name>HWND</name> <name>window</name></expr></argument>,
                      <argument><expr><name>double</name> <name>value</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>NativeWindow</name><operator>::</operator><name>ProgressState</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Set the overlay icon in taskbar.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetOverlayIcon</name><argument_list>(<argument><expr><name>HWND</name> <name>window</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator> <name>overlay</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>text</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Set the region of the window to show as a thumbnail in taskbar.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetThumbnailClip</name><argument_list>(<argument><expr><name>HWND</name> <name>window</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>region</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Set the tooltip for the thumbnail in taskbar.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetThumbnailToolTip</name><argument_list>(<argument><expr><name>HWND</name> <name>window</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tooltip</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Called by the window that there is a button in thumbar clicked.</comment>
  <function_decl><type><name>bool</name></type> <name>HandleThumbarButtonEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button_id</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <comment type="line">// Initialize the taskbar object.</comment>
  <function_decl><type><name>bool</name></type> <name>InitializeTaskbar</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>using</name></type> <name>CallbackMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>Closure</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CallbackMap</name></type> <name>callback_map_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ThumbarButton</name></expr></argument>&gt;</argument_list></name> <name>last_buttons_</name></expr>;</expr_stmt>

  <comment type="line">// The COM object of taskbar.</comment>
  <expr_stmt><expr><name>Microsoft</name><operator>::</operator><name>WRL</name><operator>::</operator><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>ITaskbarList3</name></expr></argument>&gt;</argument_list></name> <name>taskbar_</name></expr>;</expr_stmt>

  <comment type="line">// Whether we have already added the buttons to thumbar.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>thumbar_buttons_added_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>TaskbarHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_WIN_TASKBAR_HOST_H_</comment>
</unit>
