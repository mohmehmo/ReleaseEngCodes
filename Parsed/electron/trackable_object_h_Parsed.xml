<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/trackable_object.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_TRACKABLE_OBJECT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_TRACKABLE_OBJECT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/bind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/event_emitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/key_weak_map.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SupportsUserData</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<comment type="line">// Users should use TrackableObject instead.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>TrackableObjectBase</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>TrackableObjectBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// The ID in weak map.</comment>
  <expr_stmt><expr><name>int32_t</name> <macro><name>weak_map_id</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>weak_map_id_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Wrap TrackableObject into a class that SupportsUserData.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>AttachAsUserData</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>SupportsUserData</name><operator>*</operator> <name>wrapped</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Get the weak_map_id from SupportsUserData.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>GetIDFromWrappedClass</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>SupportsUserData</name><operator>*</operator> <name>wrapped</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TrackableObjectBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Returns a closure that can destroy the native class.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <call><name>GetDestroyClosure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>weak_map_id_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>TrackableObjectBase</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>TrackableObjectBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// All instances of TrackableObject will be kept in a weak map and can be got</comment>
<comment type="line">// from its ID.</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TrackableObject</name> <range>: <expr><name>public</name> <name>TrackableObjectBase</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name><name>EventEmitter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Mark the JS object as destroyed.</comment>
  <function><type><name>void</name></type> <name>MarkDestroyed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper</name> <operator>=</operator> <name>gin_helper</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>GetWrapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>wrapper</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>wrapper</name><operator>-&gt;</operator><name>SetAlignedPointerInInternalField</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><name>bool</name></type> <name>IsDestroyed</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper</name> <operator>=</operator> <name>gin_helper</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>GetWrapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>wrapper</name><operator>-&gt;</operator><name>InternalFieldCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
           <call><name><name>wrapper</name><operator>-&gt;</operator><name>GetAlignedPointerFromInternalField</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Finds out the TrackableObject from its ID in weak map.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>T</name><modifier>*</modifier></type> <name>FromWeakMapID</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>int32_t</name> <name>id</name></expr></argument>)</argument_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak_map_</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>object</name> <operator>=</operator> <call><name><name>weak_map_</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>object</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>self</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>gin</name><operator>::</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><call><name><name>object</name><operator>.</operator><name>ToLocalChecked</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>self</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Finds out the TrackableObject from the class it wraps.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>T</name><modifier>*</modifier></type> <name>FromWrappedClass</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>base</name><operator>::</operator><name>SupportsUserData</name><operator>*</operator> <name>wrapped</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><call><name>GetIDFromWrappedClass</name><argument_list>(<argument><expr><name>wrapped</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>FromWeakMapID</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Returns all objects in this class's weak map.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>GetAll</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><name>weak_map_</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name><name>weak_map_</name><operator>-&gt;</operator><name>Values</name></name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>std</name><operator>::</operator><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
  }</block></expr></expr_stmt>

  <comment type="line">// Removes this instance from the weak map.</comment>
  <function><type><name>void</name></type> <name>RemoveFromWeakMap</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>weak_map_</name> <operator>&amp;&amp;</operator> <call><name><name>weak_map_</name><operator>-&gt;</operator><name>Has</name></name><argument_list>(<argument><expr><call><name>weak_map_id</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>weak_map_</name><operator>-&gt;</operator><name>Remove</name></name><argument_list>(<argument><expr><call><name>weak_map_id</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></function>

 <label><name>protected</name>:</label>
  <macro><name>TrackableObject</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>weak_map_id_</name> <operator>=</operator> <operator>++</operator><name>next_id_</name></expr>;</expr_stmt> </block_content>}</block>

  <expr_stmt><expr><operator>~</operator><macro><name>TrackableObject</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <expr><call><name>RemoveFromWeakMap</name><argument_list>()</argument_list></call></expr>; }</block>

  <name>void</name> <macro><name>InitWith</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>v8::Local&lt;v8::Object&gt; wrapper</argument>)</argument_list></macro> <name>override</name> <block>{
    <expr><name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>::</operator><call><name>InitWith</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>weak_map_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>weak_map_</name> <operator>=</operator> <name>new</name> <name>electron</name><operator>::</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    weak_map_-&gt;Set(isolate</block><operator>,</operator> <expr_stmt><expr><name>weak_map_id_</name></expr><operator>,</operator> <expr><name>wrapper</name></expr></expr_stmt></if></if_stmt>)</block></expr>;</expr_stmt>
  </block_content>}</block></decl></decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>next_id_</name></decl>;</decl_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>electron</name><operator>::</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>weak_map_</name></expr>;</expr_stmt>  <comment type="line">// leaked on purpose</comment>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>TrackableObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>int32_t</name> <name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>next_id_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>electron</name><operator>::</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>weak_map_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

}  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_TRACKABLE_OBJECT_H_</comment>
</unit>
