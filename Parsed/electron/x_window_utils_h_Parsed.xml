<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/x/x_window_utils.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_X_X_WINDOW_UTILS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_X_X_WINDOW_UTILS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/x/x11.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<expr_stmt><expr><operator>::</operator><name>Atom</name> <call><name>GetAtom</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Sends a message to the x11 window manager, enabling or disabling the |state|</comment>
<comment type="line">// for _NET_WM_STATE.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>SetWMSpecState</name><argument_list>(<argument><expr><operator>::</operator><name>Window</name> <name>xwindow</name></expr></argument>, <argument><expr><name>bool</name> <name>enabled</name></expr></argument>, <argument><expr><operator>::</operator><name>Atom</name> <name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Sets the _NET_WM_WINDOW_TYPE of window.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>SetWindowType</name><argument_list>(<argument><expr><operator>::</operator><name>Window</name> <name>xwindow</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Returns true if the bus name "com.canonical.AppMenu.Registrar" is available.</comment>
<function_decl><type><name>bool</name></type> <name>ShouldUseGlobalMenuBar</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">// Bring the given window to the front regardless of focus.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>MoveWindowToForeground</name><argument_list>(<argument><expr><operator>::</operator><name>Window</name> <name>xwindow</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Move a given window above the other one.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>MoveWindowAbove</name><argument_list>(<argument><expr><operator>::</operator><name>Window</name> <name>xwindow</name></expr></argument>, <argument><expr><operator>::</operator><name>Window</name> <name>other_xwindow</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Return true is the given window exists, false otherwise.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>IsWindowValid</name><argument_list>(<argument><expr><operator>::</operator><name>Window</name> <name>xwindow</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_X_X_WINDOW_UTILS_H_</comment>
</unit>
