<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_app.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_APP_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_APP_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/task/cancelable_task_tracker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/icon_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/process_singleton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_child_process_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/gpu_data_manager_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/render_process_host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/base/completion_once_callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/base/completion_repeating_callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/ssl/client_cert_identity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/api/process_metric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/atom_browser_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/browser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/browser_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/error_thrower.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/event_emitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/promise.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS_CERTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/certificate_manager_model.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FilePath</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>JumpListResult</name> <range>: <expr><name>int</name></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>App</name> <range>: <expr><name>public</name> <name>AtomBrowserClient</name><operator>::</operator><name>Delegate</name></expr></range></decl>,
            <decl><type ref="prev"/><name>public</name> <name>gin_helper</name>::<name><name>EventEmitter</name><argument_list type="generic">&lt;<argument><expr><name>App</name></expr></argument>&gt;</argument_list></name></decl>,
            <decl><type ref="prev"/><name>public</name> <name>BrowserObserver</name></decl>,
            <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>GpuDataManagerObserver</name></decl>,
            <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>BrowserChildProcessObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>using</name></type> <name>FileIconCallback</name> <init>=
      <expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>App</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS_CERTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>OnCertificateManagerModelCreated</name><argument_list>(
      <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <name>options</name></expr></argument>,
      <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name> <name>callback</name></expr></argument>,
      <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CertificateManagerModel</name></expr></argument>&gt;</argument_list></name> <name>model</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <macro><name>GetAppPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderProcessReady</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderProcessHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderProcessDisconnected</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>ProcessId</name> <name>host_pid</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>PreMainMessageLoopRun</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>protected</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>App</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>App</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// BrowserObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnBeforeQuit</name><argument_list>(<argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWillQuit</name><argument_list>(<argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowAllClosed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnQuit</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnOpenFile</name><argument_list>(<argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_path</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnOpenURL</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnActivate</name><argument_list>(<argument><expr><name>bool</name> <name>has_visible_windows</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWillFinishLaunching</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnFinishLaunching</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>launch_info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnAccessibilitySupportChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnPreMainMessageLoopRun</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWillContinueUserActivity</name><argument_list>(<argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnDidFailToContinueUserActivity</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>,
                                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnContinueUserActivity</name><argument_list>(<argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>user_info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnUserActivityWasContinued</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>user_info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnUpdateUserActivityState</name><argument_list>(
      <argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>user_info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnNewWindowForTab</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// content::ContentBrowserClient:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>AllowCertificateError</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
      <argument><expr><name>int</name> <name>cert_error</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>SSLInfo</name><operator>&amp;</operator> <name>ssl_info</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>request_url</name></expr></argument>,
      <argument><expr><name>bool</name> <name>is_main_frame_request</name></expr></argument>,
      <argument><expr><name>bool</name> <name>strict_enforcement</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;
          <argument><expr><name>void</name><operator>(</operator><name>content</name><operator>::</operator><name>CertificateRequestResultType</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <macro><name>SelectClientCertificate</name><argument_list>(
      <argument>content::WebContents* web_contents</argument>,
      <argument>net::SSLCertRequestInfo* cert_request_info</argument>,
      <argument>net::ClientCertIdentityList client_certs</argument>,
      <argument>std::unique_ptr&lt;content::ClientCertificateDelegate&gt; delegate</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>CanCreateWindow</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>opener</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>opener_url</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>opener_top_level_frame_url</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>url</name><operator>::</operator><name>Origin</name><operator>&amp;</operator> <name>source_origin</name></expr></argument>,
                       <argument><expr><name>content</name><operator>::</operator><name>mojom</name><operator>::</operator><name>WindowContainerType</name> <name>container_type</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>target_url</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>Referrer</name><operator>&amp;</operator> <name>referrer</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>frame_name</name></expr></argument>,
                       <argument><expr><name>WindowOpenDisposition</name> <name>disposition</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>WindowFeatures</name><operator>&amp;</operator> <name>features</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>additional_features</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequestBody</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>body</name></expr></argument>,
                       <argument><expr><name>bool</name> <name>user_gesture</name></expr></argument>,
                       <argument><expr><name>bool</name> <name>opener_suppressed</name></expr></argument>,
                       <argument><expr><name>bool</name><operator>*</operator> <name>no_javascript_access</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// content::GpuDataManagerObserver:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnGpuInfoUpdate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnGpuProcessCrashed</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>TerminationStatus</name> <name>status</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// content::BrowserChildProcessObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>BrowserChildProcessLaunchedAndConnected</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ChildProcessData</name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>BrowserChildProcessHostDisconnected</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ChildProcessData</name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>BrowserChildProcessCrashed</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ChildProcessData</name><operator>&amp;</operator> <name>data</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ChildProcessTerminationInfo</name><operator>&amp;</operator> <name>info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>BrowserChildProcessKilled</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ChildProcessData</name><operator>&amp;</operator> <name>data</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ChildProcessTerminationInfo</name><operator>&amp;</operator> <name>info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAppPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>app_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ChildProcessLaunched</name><argument_list>(<argument><expr><name>int</name> <name>process_type</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>ProcessHandle</name> <name>handle</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ChildProcessDisconnected</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>ProcessId</name> <name>pid</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SetAppLogsPath</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name> <name>thrower</name></expr></argument>,
                      <argument><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name></expr></argument>&gt;</argument_list></name> <name>custom_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Get/Set the pre-defined path in PathService.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <macro><name>GetPath</name><argument_list>(<argument>gin_helper::ErrorThrower thrower</argument>,
                         <argument>const std::string&amp; name</argument>)</argument_list></macro></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetPath</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name> <name>thrower</name></expr></argument>,
               <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
               <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SetDesktopName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>desktop_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetLocale</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetLocaleCountryCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnSecondInstance</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>CommandLine</name><operator>::</operator><name>StringVector</name><operator>&amp;</operator> <name>cmd</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>cwd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>HasSingleInstanceLock</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>bool</name></type> <name>RequestSingleInstanceLock</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ReleaseSingleInstanceLock</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>bool</name></type> <name>Relaunch</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DisableHardwareAcceleration</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name> <name>thrower</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DisableDomainBlockingFor3DAPIs</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name> <name>thrower</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>bool</name></type> <name>IsAccessibilitySupportEnabled</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAccessibilitySupportEnabled</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name> <name>thrower</name></expr></argument>,
                                      <argument><expr><name>bool</name> <name>enabled</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>Browser</name><operator>::</operator><name>LoginItemSettings</name> <call><name>GetLoginItemSettings</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS_CERTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>ImportCertificate</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>options</name></expr></argument>,
                         <argument><expr><name>net</name><operator>::</operator><name>CompletionRepeatingCallback</name> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>GetFileIcon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>,
                                     <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name>Dictionary</name></expr></argument>&gt;</argument_list></name> <call><name>GetAppMetrics</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetGPUFeatureStatus</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>GetGPUInfo</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                    <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>info_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>EnableSandbox</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name> <name>thrower</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetUserAgentFallback</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>user_agent</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetUserAgentFallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetBrowserClientCanUseCustomSiteInstance</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>should_disable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>CanBrowserClientUseCustomSiteInstance</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>bool</name></type> <name>MoveToApplicationsFolder</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>bool</name></type> <name>IsInApplicationsFolder</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetDockAPI</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>dock_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAS_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <call><name>StartAccessingSecurityScopedResource</name><argument_list>(
      <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Get the current Jump List settings.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetJumpListSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Set or remove a custom Jump List for the application.</comment>
  <decl_stmt><decl><type><name>JumpListResult</name></type> <name>SetJumpList</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                             <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_WIN)</comment>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ProcessSingleton</name></expr></argument>&gt;</argument_list></name> <name>process_singleton_</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS_CERTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CertificateManagerModel</name></expr></argument>&gt;</argument_list></name> <name>certificate_manager_model_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Tracks tasks requesting file icons.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>CancelableTaskTracker</name> <name>cancelable_task_tracker_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>app_path_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>using</name></type> <name>ProcessMetricMap</name> <init>=
      <expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>ProcessId</name></expr></argument>,
                         <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>electron</name><operator>::</operator><name>ProcessMetric</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ProcessMetricMap</name></type> <name>app_metrics_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>App</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_APP_H_</comment>
</unit>
