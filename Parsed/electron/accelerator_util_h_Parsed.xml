<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/accelerator_util.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_ACCELERATOR_UTIL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_ACCELERATOR_UTIL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/atom_menu_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/base/accelerators/accelerator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>accelerator_util</name> <block>{<block_content>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>electron</name><operator>::</operator><name>AtomMenuModel</name><operator>*</operator> <name>model</name></expr>;</expr_stmt>
}</block></struct></type> <name>MenuItem</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ui</name><operator>::</operator><name>Accelerator</name></expr></argument>, <argument><expr><name>MenuItem</name></expr></argument>&gt;</argument_list></name> <name>AcceleratorTable</name></expr>;</expr_stmt></typedef>

<comment type="line">// Parse a string as an accelerator.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>StringToAccelerator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>description</name></expr></argument>,
                         <argument><expr><name>ui</name><operator>::</operator><name>Accelerator</name><operator>*</operator> <name>accelerator</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Generate a table that contains memu model's accelerators and command ids.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>GenerateAcceleratorTable</name><argument_list>(<argument><expr><name>AcceleratorTable</name><operator>*</operator> <name>table</name></expr></argument>,
                              <argument><expr><name>electron</name><operator>::</operator><name>AtomMenuModel</name><operator>*</operator> <name>model</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Trigger command from the accelerators table.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>TriggerAcceleratorTableCommand</name><argument_list>(<argument><expr><name>AcceleratorTable</name><operator>*</operator> <name>table</name></expr></argument>,
                                    <argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>Accelerator</name><operator>&amp;</operator> <name>accelerator</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace accelerator_util</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_ACCELERATOR_UTIL_H_</comment>
</unit>
