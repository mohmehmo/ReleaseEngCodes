<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_view.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/api/views/atom_api_layout_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/view.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>View</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>View</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>*</operator> <call><name>New</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;

  <expr><specifier>static</specifier> <name>void</name> <call><name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></call></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_VIEW_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>void</name> <call><name>SetLayoutManager</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>LayoutManager</name></expr></argument>&gt;</argument_list></name> <name>layout_manager</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>AddChildView</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>View</name></expr></argument>&gt;</argument_list></name> <name>view</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>AddChildViewAt</name><argument_list>(<argument>gin::Handle&lt;View&gt; view</argument>, <argument>size_t index</argument>)</argument_list></macro></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <macro><name>view</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>view_</name></expr>;</return> }</block>

 <name>protected</name><operator>:</operator>
  <name>explicit</name> <call><name>View</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>view</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>View</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>View</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Should delete the |view_| in destructor.</comment>
  <expr><name>void</name> <macro><name>set_delete_view</name><argument_list>(<argument>bool should</argument>)</argument_list></macro> <block>{ <expr><name>delete_view_</name> <operator>=</operator> <name>should</name></expr>; }</block>

 <name>private</name><operator>:</operator>
  <name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>layout_manager_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>child_views_</name></expr>;

  <expr><name>bool</name> <name>delete_view_</name> <operator>=</operator> <name>true</name></expr>;
  <expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>view_</name> <operator>=</operator> <name>nullptr</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>View</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>views::View** out</argument>)</argument_list></macro> <block>{
    <expr><name>electron</name><operator>::</operator><name>api</name><operator>::</operator><name>View</name><operator>*</operator> <name>view</name></expr>;
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>electron</name><operator>::</operator><name>api</name><operator>::</operator><name>View</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>FromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>view</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>view</name><operator>-&gt;</operator><name>view</name></name><argument_list>()</argument_list></call></block></expr>;
    <return>return <expr><name>true</name></expr>;</return>
  }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_VIEW_H_</comment>
</unit>
