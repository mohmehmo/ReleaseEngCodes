<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/submenu_button.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_SUBMENU_BUTTON_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_SUBMENU_BUTTON_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/accessibility/ax_node_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/animation/ink_drop_highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/controls/button/menu_button.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Special button that used by menu bar to show submenus.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SubmenuButton</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>MenuButton</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>SubmenuButton</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>title</name></expr></argument>,
                <argument><expr><name>views</name><operator>::</operator><name>MenuButtonListener</name><operator>*</operator> <name>menu_button_listener</name></expr></argument>,
                <argument><expr><specifier>const</specifier> <name>SkColor</name><operator>&amp;</operator> <name>background_color</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>SubmenuButton</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetAcceleratorVisibility</name><argument_list>(<argument>bool visible</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetUnderlineColor</name><argument_list>(<argument>SkColor color</argument>)</argument_list></macro></expr>;

  <expr><name>base</name><operator>::</operator><name>char16</name> <macro><name>accelerator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>accelerator_</name></expr>;</return> }</block>

  <name>void</name> <macro><name>GetAccessibleNodeData</name><argument_list>(<argument>ui::AXNodeData* node_data</argument>)</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// views::MenuButton:</comment>
  <expr><name>void</name> <macro><name>PaintButtonContents</name><argument_list>(<argument>gfx::Canvas* canvas</argument>)</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// views::InkDropHostView:</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>InkDropRipple</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateInkDropRipple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>InkDrop</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateInkDrop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>bool</name> <macro><name>GetUnderlinePosition</name><argument_list>(<argument>const base::string16&amp; text</argument>,
                            <argument>base::char16* accelerator</argument>,
                            <argument>int* start</argument>,
                            <argument>int* end</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>void</name> <macro><name>GetCharacterPosition</name><argument_list>(<argument>const base::string16&amp; text</argument>,
                            <argument>int index</argument>,
                            <argument>int* pos</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <expr><name>base</name><operator>::</operator><name>char16</name> <name>accelerator_</name> <operator>=</operator> <literal type="number">0</literal></expr>;

  <expr><name>bool</name> <name>show_underline_</name> <operator>=</operator> <name>false</name></expr>;

  <expr><name>int</name> <name>underline_start_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>int</name> <name>underline_end_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>int</name> <name>text_width_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>int</name> <name>text_height_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>SkColor</name> <name>underline_color_</name> <operator>=</operator> <name>SK_ColorBLACK</name></expr>;
  <expr><name>SkColor</name> <name>background_color_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>SubmenuButton</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_SUBMENU_BUTTON_H_</comment>
</unit>
