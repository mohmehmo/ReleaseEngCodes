<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/arguments.h"><comment type="line">// Copyright 2019 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE.chromium file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_ARGUMENTS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_ARGUMENTS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/arguments.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<comment type="line">// Provides additional APIs to the gin::Arguments class.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name> <range>: <expr><name>public</name> <name>gin</name><operator>::</operator><name>Arguments</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <comment type="line">// Get the next argument, if conversion to T fails then state is unchanged.</comment>
  <comment type="line">//</comment>
  <comment type="line">// This is difference from gin::Arguments::GetNext which always advances the</comment>
  <comment type="line">// |next_| counter no matter whether the conversion succeeds.</comment>
  <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name> <macro><name>GetNext</name><argument_list>(<argument>T* out</argument>)</argument_list></macro> <block>{
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name> <operator>=</operator> <call><name>PeekNext</name><argument_list>()</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin</name><operator>::</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <call><name>Skip</name><argument_list>()</argument_list></call></block></expr></range></decl>;</decl_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Gin always returns true when converting V8 value to boolean, we do not want</comment>
  <comment type="line">// this behavior when parsing parameters.</comment>
  <function><type><name>bool</name></type> <name>GetNext</name><parameter_list>(<parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name> <operator>=</operator> <call><name>PeekNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>val</name><operator>-&gt;</operator><name>IsBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>val</name><operator>-&gt;</operator><name>BooleanValue</name></name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Skip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Throw error with custom error message.</comment>
  <expr_stmt><expr><name>void</name> <macro><name>ThrowError</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ThrowError</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>message</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <comment type="line">// MUST NOT ADD ANY DATA MEMBER.</comment>
};

}  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_ARGUMENTS_H_</comment>
</unit>
