<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/zoom_level_delegate.h"><comment type="line">// Copyright 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ZOOM_LEVEL_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ZOOM_LEVEL_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/prefs/pref_service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/host_zoom_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/zoom_level_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DictionaryValue</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PrefRegistrySimple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// A class to manage per-partition default and per-host zoom levels.</comment>
<comment type="line">// It implements an interface between the content/ zoom</comment>
<comment type="line">// levels in HostZoomMap and preference system. All changes</comment>
<comment type="line">// to the per-partition default zoom levels flow through this</comment>
<comment type="line">// class. Any changes to per-host levels are updated when HostZoomMap calls</comment>
<comment type="line">// OnZoomLevelChanged.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>ZoomLevelDelegate</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>ZoomLevelDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>void</name> <call><name>RegisterPrefs</name><argument_list>(<argument><expr><name>PrefRegistrySimple</name><operator>*</operator> <name>pref_registry</name></expr></argument>)</argument_list></call></expr>;

  <expr><call><name>ZoomLevelDelegate</name><argument_list>(<argument><expr><name>PrefService</name><operator>*</operator> <name>pref_service</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>partition_path</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>ZoomLevelDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetDefaultZoomLevelPref</name><argument_list>(<argument>double level</argument>)</argument_list></macro></expr>;
  <expr><name>double</name> <macro><name>GetDefaultZoomLevelPref</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// content::ZoomLevelDelegate:</comment>
  <expr><name>void</name> <macro><name>InitHostZoomMap</name><argument_list>(<argument>content::HostZoomMap* host_zoom_map</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <call><name>ExtractPerHostZoomLevels</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>*</operator> <name>host_zoom_dictionary</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// This is a callback function that receives notifications from HostZoomMap</comment>
  <comment type="line">// when per-host zoom levels change. It is used to update the per-host</comment>
  <comment type="line">// zoom levels (if any) managed by this class (for its associated partition).</comment>
  <expr><name>void</name> <call><name>OnZoomLevelChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>HostZoomMap</name><operator>::</operator><name>ZoomLevelChange</name><operator>&amp;</operator> <name>change</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>PrefService</name><operator>*</operator> <name>pref_service_</name></expr>;
  <expr><name>content</name><operator>::</operator><name>HostZoomMap</name><operator>*</operator> <name>host_zoom_map_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>HostZoomMap</name><operator>::</operator><name>Subscription</name></expr></argument>&gt;</argument_list></name> <name>zoom_subscription_</name></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <name>partition_key_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ZoomLevelDelegate</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ZOOM_LEVEL_DELEGATE_H_</comment>
</unit>
