<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_web_contents.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_WEB_CONTENTS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_WEB_CONTENTS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/common/cursors/webcursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/devtools_agent_host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/keyboard_event_processing_result.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/render_widget_host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_binding_set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/common/favicon_url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/shell/common/api/api.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"printing/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/service_manager/public/cpp/binder_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/api/frame_subscriber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/api/save_page_handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/common_web_contents_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/trackable_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/image/image.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_PRINTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"printing/backend/print_backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/printing/print_preview_message_handler.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>blink</name> <block>{<block_content>
<struct_decl>struct <name>WebDeviceEmulationParams</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>network</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ResourceRequestBody</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AtomJavaScriptDialogManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WebContentsZoomController</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WebViewGuestDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FrameSubscriber</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_OSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>OffScreenRenderWidgetHostView</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<comment type="line">// Certain events are only in WebContentsDelegate, provide our own Observer to</comment>
<comment type="line">// dispatch those events.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>ExtendedWebContentsObserver</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>CheckedObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>virtual</name> <name>void</name> <macro><name>OnCloseContents</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnRendererResponsive</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnDraggableRegionsUpdated</name><argument_list>(
      <argument>const std::vector&lt;mojom::DraggableRegionPtr&gt;&amp; regions</argument>)</argument_list></macro> <block>{}</block>

 <name>protected</name><operator>:</operator>
  <operator>~</operator><macro><name>ExtendedWebContentsObserver</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<comment type="line">// Wrapper around the content::WebContents.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WebContents</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>WebContents</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
                    <decl><type ref="prev"/><name>public</name> <name>CommonWebContentsDelegate</name></decl>,
                    <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>WebContentsObserver</name></decl>,
                    <decl><type ref="prev"/><name>public</name> <name>mojom</name>::<name>ElectronBrowser</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Type</name> <block>{<block_content>
    <expr_stmt><expr><name>BACKGROUND_PAGE</name></expr><operator>,</operator>  <comment type="line">// A DevTools extension background page.</comment>
    <expr><name>BROWSER_WINDOW</name></expr><operator>,</operator>   <comment type="line">// Used by BrowserWindow.</comment>
    <expr><name>BROWSER_VIEW</name></expr><operator>,</operator>     <comment type="line">// Used by BrowserView.</comment>
    <expr><name>REMOTE</name></expr><operator>,</operator>           <comment type="line">// Thin wrap around an existing WebContents.</comment>
    <expr><name>WEB_VIEW</name></expr><operator>,</operator>         <comment type="line">// Used by &lt;webview&gt;.</comment>
    <expr><name>OFF_SCREEN</name></expr><operator>,</operator></expr_stmt>       <comment type="line">// Used for offscreen rendering</comment>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <comment type="line">// Create a new WebContents and return the V8 wrapper of it.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>WebContents</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                         <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Create a new V8 wrapper for an existing |web_content|.</comment>
  <comment type="line">//</comment>
  <comment type="line">// The lifetime of |web_contents| will be managed by this class.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>WebContents</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateAndTake</name><argument_list>(
      <argument>v8::Isolate* isolate</argument>,
      <argument>std::unique_ptr&lt;content::WebContents&gt; web_contents</argument>,
      <argument>Type type</argument>)</argument_list></macro></expr>;</expr_stmt>

  <comment type="line">// Get the V8 wrapper of |web_content|, return empty handle if not wrapped.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>WebContents</name></expr></argument>&gt;</argument_list></name> <call><name>From</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                       <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Get the V8 wrapper of the |web_contents|, or create one if not existed.</comment>
  <comment type="line">//</comment>
  <comment type="line">// The lifetime of |web_contents| is NOT managed by this class, and the type</comment>
  <comment type="line">// of this wrapper is always REMOTE.</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>WebContents</name></expr></argument>&gt;</argument_list></name> <call><name>FromOrCreate</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>WebContents</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWeakPtr</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>weak_factory_</name><operator>.</operator><name>GetWeakPtr</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Destroy the managed content::WebContents instance.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Note: The |async| should only be |true| when users are expecting to use the</comment>
  <comment type="line">// webContents immediately after the call. Always pass |false| if you are not</comment>
  <comment type="line">// sure.</comment>
  <comment type="line">// See https://github.com/electron/electron/issues/8930.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Note: When destroying a webContents member inside a destructor, the |async|</comment>
  <comment type="line">// should always be |false|, otherwise the destroy task might be delayed after</comment>
  <comment type="line">// normal shutdown procedure, resulting in an assertion.</comment>
  <comment type="line">// The normal pattern for calling this method in destructor is:</comment>
  <comment type="line">// api_web_contents_-&gt;DestroyWebContents(!Browser::Get()-&gt;is_shutting_down())</comment>
  <comment type="line">// See https://github.com/electron/electron/issues/15133.</comment>
  <function_decl><type><name>void</name></type> <name>DestroyWebContents</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>SetBackgroundThrottling</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allowed</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>int</name> <macro><name>GetProcessID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>ProcessId</name> <macro><name>GetOSProcessID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>ProcessId</name> <macro><name>GetOSProcessIdForFrame</name><argument_list>(<argument>const std::string&amp; name</argument>,
                                         <argument>const std::string&amp; document_url</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>Type</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>Equal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>LoadURL</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>DownloadURL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GURL</name><modifier>&amp;</modifier></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>GURL</name> <macro><name>GetURL</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetTitle</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsLoading</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsLoadingMainFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsWaitingForResponse</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>Stop</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ReloadIgnoringCache</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>GoBack</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>GoForward</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>GoToOffset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetWebRTCIPHandlingPolicy</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetWebRTCIPHandlingPolicy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>webrtc_ip_handling_policy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsCrashed</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetUserAgent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>user_agent</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetUserAgent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InsertCSS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>css</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>SavePage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>full_file_path</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>SavePageType</name><operator>&amp;</operator> <name>save_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OpenDevTools</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>CloseDevTools</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsDevToolsOpened</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsDevToolsFocused</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ToggleDevTools</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>EnableDeviceEmulation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebDeviceEmulationParams</name><operator>&amp;</operator> <name>params</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>DisableDeviceEmulation</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>InspectElement</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>InspectSharedWorker</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>InspectSharedWorkerById</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>workerId</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <call><name>GetAllSharedWorkers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>InspectServiceWorker</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetIgnoreMenuShortcuts</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetAudioMuted</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>muted</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsAudioMuted</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsCurrentlyAudible</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetEmbedder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WebContents</name><modifier>*</modifier></type> <name>embedder</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetDevToolsWebContents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WebContents</name><modifier>*</modifier></type> <name>devtools</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>GetNativeView</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_PRINTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>Print</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>printing</name><operator>::</operator><name>PrinterBasicInfo</name></expr></argument>&gt;</argument_list></name> <call><name>GetPrinterList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Print current page as PDF.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <macro><name>PrintToPDF</name><argument_list>(<argument>base::DictionaryValue settings</argument>)</argument_list></macro></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// DevTools workspace api.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>AddWorkSpace</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RemoveWorkSpace</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Editing commands.</comment>
  <function_decl><type><name>void</name></type> <name>Undo</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Redo</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Cut</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Copy</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Paste</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>PasteAndMatchStyle</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Delete</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SelectAll</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Unselect</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>Replace</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>word</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ReplaceMisspelling</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>word</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>FindInPage</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>StopFindInPage</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>StopFindAction</name> <name>action</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>ShowDefinitionForSelection</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>CopyImageAt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Focus.</comment>
  <function_decl><type><name>void</name></type> <name>Focus</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>bool</name> <macro><name>IsFocused</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>TabTraverse</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>reverse</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Send messages to browser.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SendIPCMessage</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
                      <argument><expr><name>bool</name> <name>send_to_all</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
                      <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>SendIPCMessageWithSender</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
                                <argument><expr><name>bool</name> <name>send_to_all</name></expr></argument>,
                                <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
                                <argument><expr><name>blink</name><operator>::</operator><name>CloneableMessage</name> <name>args</name></expr></argument>,
                                <argument><expr><name>int32_t</name> <name>sender_id</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>SendIPCMessageToFrame</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
                             <argument><expr><name>bool</name> <name>send_to_all</name></expr></argument>,
                             <argument><expr><name>int32_t</name> <name>frame_id</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Send WebInputEvent to the page.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SendInputEvent</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>input_event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Subscribe to the frame updates.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>BeginFrameSubscription</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>EndFrameSubscription</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Dragging native items.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>StartDrag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>item</name></expr></argument>,
                 <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Captures the page with |rect|, |callback| would be called when capturing is</comment>
  <comment type="line">// done.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>CapturePage</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Methods for creating &lt;webview&gt;.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>IsGuest</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AttachToIframe</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>embedder_web_contents</name></expr></argument>,
                      <argument><expr><name>int</name> <name>embedder_frame_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>DetachFromOuterFrame</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Methods for offscreen rendering</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>IsOffScreen</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_OSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>OnPaint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>dirty_rect</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SkBitmap</name><operator>&amp;</operator> <name>bitmap</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>StartPainting</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>StopPainting</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>bool</name> <macro><name>IsPainting</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetFrameRate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frame_rate</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>int</name> <macro><name>GetFrameRate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl><type><name>void</name></type> <name>Invalidate</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetSizeForNewRenderView</name><argument_list>(<argument>content::WebContents*</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// Methods for zoom handling.</comment>
  <function_decl><type><name>void</name></type> <name>SetZoomLevel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>double</name> <macro><name>GetZoomLevel</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetZoomFactor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>factor</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>double</name> <macro><name>GetZoomFactor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Callback triggered on permission response.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnEnterFullscreenModeForTab</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>origin</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>FullscreenOptions</name><operator>&amp;</operator> <name>options</name></expr></argument>,
      <argument><expr><name>bool</name> <name>allowed</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Create window with the given disposition.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnCreateWindow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>target_url</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>Referrer</name><operator>&amp;</operator> <name>referrer</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>frame_name</name></expr></argument>,
                      <argument><expr><name>WindowOpenDisposition</name> <name>disposition</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>features</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequestBody</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>body</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Returns the preload script path of current WebContents.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>::</operator><name>StringType</name></expr></argument>&gt;</argument_list></name> <macro><name>GetPreloadPaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Returns the web preferences of current WebContents.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWebPreferences</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>GetLastWebPreferences</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Returns the owner window.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>GetOwnerBrowserWindow</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Grants the child process the capability to access URLs with the origin of</comment>
  <comment type="line">// the specified URL.</comment>
  <function_decl><type><name>void</name></type> <name>GrantOriginAccess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GURL</name><modifier>&amp;</modifier></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>TakeHeapSnapshot</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Properties.</comment>
  <expr_stmt><expr><name>int32_t</name> <macro><name>ID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>Session</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>HostWebContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>DevToolsWebContents</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>Debugger</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function><type><name>WebContentsZoomController</name><modifier>*</modifier></type> <name>GetZoomController</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>zoom_controller_</name></expr>;</return> </block_content>}</block></function>

  <function><type><name>void</name></type> <name>AddObserver</name><parameter_list>(<parameter><decl><type><name>ExtendedWebContentsObserver</name><modifier>*</modifier></type> <name>obs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>observers_</name><operator>.</operator><name>AddObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>RemoveObserver</name><parameter_list>(<parameter><decl><type><name>ExtendedWebContentsObserver</name><modifier>*</modifier></type> <name>obs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Trying to remove from an empty collection leads to an access violation</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>observers_</name><operator>.</operator><name>might_have_observers</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>observers_</name><operator>.</operator><name>RemoveObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name>bool</name></type> <name>EmitNavigationEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>event</name></expr></argument>,
                           <argument><expr><name>content</name><operator>::</operator><name>NavigationHandle</name><operator>*</operator> <name>navigation_handle</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function><type><name>WebContents</name><modifier>*</modifier></type> <name>embedder</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>embedder_</name></expr>;</return> </block_content>}</block></function>

 <label><name>protected</name>:</label>
  <comment type="line">// Does not manage lifetime of |web_contents|.</comment>
  <expr_stmt><expr><call><name>WebContents</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Takes over ownership of |web_contents|.</comment>
  <macro><name>WebContents</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
              <argument>std::unique_ptr&lt;content::WebContents&gt; web_contents</argument>,
              <argument>Type type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <comment type="line">// Creates a new content::WebContents.</comment>
  <expr_stmt><expr><call><name>WebContents</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>WebContents</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>InitWithSessionAndOptions</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
      <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>WebContents</name></expr></argument>&gt;</argument_list></name> <name>web_contents</name></expr></argument>,
      <argument><expr><name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Session</name></expr></argument>&gt;</argument_list></name> <name>session</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// content::WebContentsDelegate:</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>DidAddMessageToConsole</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
                              <argument><expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>ConsoleMessageLevel</name> <name>level</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>message</name></expr></argument>,
                              <argument><expr><name>int32_t</name> <name>line_no</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>source_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>WebContentsCreated</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source_contents</name></expr></argument>,
                          <argument><expr><name>int</name> <name>opener_render_process_id</name></expr></argument>,
                          <argument><expr><name>int</name> <name>opener_render_frame_id</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>frame_name</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>target_url</name></expr></argument>,
                          <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>new_contents</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AddNewContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
                      <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>WebContents</name></expr></argument>&gt;</argument_list></name> <name>new_contents</name></expr></argument>,
                      <argument><expr><name>WindowOpenDisposition</name> <name>disposition</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>initial_rect</name></expr></argument>,
                      <argument><expr><name>bool</name> <name>user_gesture</name></expr></argument>,
                      <argument><expr><name>bool</name><operator>*</operator> <name>was_blocked</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>OpenURLFromTab</name><argument_list>(
      <argument>content::WebContents* source</argument>,
      <argument>const content::OpenURLParams&amp; params</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>BeforeUnloadFired</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>tab</name></expr></argument>,
                         <argument><expr><name>bool</name> <name>proceed</name></expr></argument>,
                         <argument><expr><name>bool</name><operator>*</operator> <name>proceed_to_fire_unload</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContentsBounds</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>pos</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>CloseContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ActivateContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>contents</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>UpdateTargetURL</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>HandleKeyboardEvent</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>NativeWebKeyboardEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>KeyboardEventProcessingResult</name> <macro><name>PreHandleKeyboardEvent</name><argument_list>(
      <argument>content::WebContents* source</argument>,
      <argument>const content::NativeWebKeyboardEvent&amp; event</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ContentsZoomChange</name><argument_list>(<argument><expr><name>bool</name> <name>zoom_in</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>EnterFullscreenModeForTab</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>origin</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>FullscreenOptions</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ExitFullscreenModeForTab</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RendererUnresponsive</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHost</name><operator>*</operator> <name>render_widget_host</name></expr></argument>,
      <argument><expr><name>base</name><operator>::</operator><name>RepeatingClosure</name> <name>hang_monitor_restarter</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RendererResponsive</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHost</name><operator>*</operator> <name>render_widget_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>HandleContextMenu</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ContextMenuParams</name><operator>&amp;</operator> <name>params</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>OnGoToEntryOffset</name><argument_list>(<argument><expr><name>int</name> <name>offset</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>FindReply</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                 <argument><expr><name>int</name> <name>request_id</name></expr></argument>,
                 <argument><expr><name>int</name> <name>number_of_matches</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>selection_rect</name></expr></argument>,
                 <argument><expr><name>int</name> <name>active_match_ordinal</name></expr></argument>,
                 <argument><expr><name>bool</name> <name>final_update</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>CheckMediaAccessPermission</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>security_origin</name></expr></argument>,
                                  <argument><expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>MediaStreamType</name> <name>type</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RequestMediaAccessPermission</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>MediaStreamRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>MediaResponseCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RequestToLockMouse</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                          <argument><expr><name>bool</name> <name>user_gesture</name></expr></argument>,
                          <argument><expr><name>bool</name> <name>last_unlocked_by_target</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>BluetoothChooser</name></expr></argument>&gt;</argument_list></name> <macro><name>RunBluetoothChooser</name><argument_list>(
      <argument>content::RenderFrameHost* frame</argument>,
      <argument>const content::BluetoothChooser::EventHandler&amp; handler</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>JavaScriptDialogManager</name><operator>*</operator> <macro><name>GetJavaScriptDialogManager</name><argument_list>(
      <argument>content::WebContents* source</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnAudioStateChanged</name><argument_list>(<argument><expr><name>bool</name> <name>audible</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// content::WebContentsObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>BeforeUnloadFired</name><argument_list>(<argument><expr><name>bool</name> <name>proceed</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>TimeTicks</name><operator>&amp;</operator> <name>proceed_time</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewCreated</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>render_view_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderFrameCreated</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewHostChanged</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>old_host</name></expr></argument>,
                             <argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>new_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewDeleted</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderProcessGone</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>TerminationStatus</name> <name>status</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderFrameDeleted</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DOMContentLoaded</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidFinishLoad</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>validated_url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidFailLoad</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
                   <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>validated_url</name></expr></argument>,
                   <argument><expr><name>int</name> <name>error_code</name></expr></argument>,
                   <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>error_description</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>DidStartLoading</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>DidStopLoading</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidStartNavigation</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>NavigationHandle</name><operator>*</operator> <name>navigation_handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidRedirectNavigation</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>NavigationHandle</name><operator>*</operator> <name>navigation_handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidFinishNavigation</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>NavigationHandle</name><operator>*</operator> <name>navigation_handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>OnMessageReceived</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IPC</name><operator>::</operator><name>Message</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>WebContentsDestroyed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>NavigationEntryCommitted</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>LoadCommittedDetails</name><operator>&amp;</operator> <name>load_details</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TitleWasSet</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>NavigationEntry</name><operator>*</operator> <name>entry</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidUpdateFaviconURL</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>FaviconURL</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>urls</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>PluginCrashed</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>plugin_path</name></expr></argument>,
                     <argument><expr><name>base</name><operator>::</operator><name>ProcessId</name> <name>plugin_pid</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>MediaStartedPlaying</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MediaPlayerInfo</name><operator>&amp;</operator> <name>video_type</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>MediaPlayerId</name><operator>&amp;</operator> <name>id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>MediaStoppedPlaying</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>MediaPlayerInfo</name><operator>&amp;</operator> <name>video_type</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>MediaPlayerId</name><operator>&amp;</operator> <name>id</name></expr></argument>,
      <argument><expr><name>content</name><operator>::</operator><name>WebContentsObserver</name><operator>::</operator><name>MediaStoppedReason</name> <name>reason</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidChangeThemeColor</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SkColor</name></expr></argument>&gt;</argument_list></name> <name>theme_color</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnInterfaceRequestFromFrame</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>interface_name</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name>ScopedMessagePipeHandle</name><operator>*</operator> <name>interface_pipe</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidAcquireFullscreen</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>rfh</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// InspectableWebContentsDelegate:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>DevToolsReloadPage</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// InspectableWebContentsViewDelegate:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>DevToolsFocused</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>DevToolsOpened</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>DevToolsClosed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>AtomBrowserContext</name><operator>*</operator> <macro><name>GetBrowserContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Binds the given request for the ElectronBrowser API. When the</comment>
  <comment type="line">// RenderFrameHost is destroyed, all related bindings will be removed.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>BindElectronBrowser</name><argument_list>(<argument><expr><name>mojom</name><operator>::</operator><name>ElectronBrowserRequest</name> <name>request</name></expr></argument>,
                           <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>OnElectronBrowserConnectionError</name><parameter_list>()</parameter_list>;</function_decl>

  <function><type><name>uint32_t</name></type> <name>GetNextRequestId</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>++</operator><name>request_id_</name></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_OSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>OffScreenWebContentsView</name><operator>*</operator> <macro><name>GetOffScreenWebContentsView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>OffScreenRenderWidgetHostView</name><operator>*</operator> <macro><name>GetOffScreenRenderWidgetHostView</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// mojom::ElectronBrowser</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>Message</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
               <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
               <argument><expr><name>blink</name><operator>::</operator><name>CloneableMessage</name> <name>arguments</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Invoke</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
              <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
              <argument><expr><name>blink</name><operator>::</operator><name>CloneableMessage</name> <name>arguments</name></expr></argument>,
              <argument><expr><name>InvokeCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>MessageSync</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
                   <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
                   <argument><expr><name>blink</name><operator>::</operator><name>CloneableMessage</name> <name>arguments</name></expr></argument>,
                   <argument><expr><name>MessageSyncCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>MessageTo</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
                 <argument><expr><name>bool</name> <name>send_to_all</name></expr></argument>,
                 <argument><expr><name>int32_t</name> <name>web_contents_id</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
                 <argument><expr><name>blink</name><operator>::</operator><name>CloneableMessage</name> <name>arguments</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>MessageHost</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
                   <argument><expr><name>blink</name><operator>::</operator><name>CloneableMessage</name> <name>arguments</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_REMOTE_MODULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>DereferenceRemoteJSObject</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>context_id</name></expr></argument>,
                                 <argument><expr><name>int</name> <name>object_id</name></expr></argument>,
                                 <argument><expr><name>int</name> <name>ref_count</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>void</name></type> <name>UpdateDraggableRegions</name><argument_list>(
      <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>DraggableRegionPtr</name></expr></argument>&gt;</argument_list></name> <name>regions</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetTemporaryZoomLevel</name><argument_list>(<argument><expr><name>double</name> <name>level</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DoGetZoomLevel</name><argument_list>(<argument><expr><name>DoGetZoomLevelCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// Called when we receive a CursorChange message from chromium.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnCursorChange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>WebCursor</name><operator>&amp;</operator> <name>cursor</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Called when received a synchronous message from renderer to</comment>
  <comment type="line">// get the zoom level.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnGetZoomLevel</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>frame_host</name></expr></argument>,
                      <argument><expr><name>IPC</name><operator>::</operator><name>Message</name><operator>*</operator> <name>reply_msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>InitZoomController</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>session_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>devtools_web_contents_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>debugger_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomJavaScriptDialogManager</name></expr></argument>&gt;</argument_list></name> <name>dialog_manager_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WebViewGuestDelegate</name></expr></argument>&gt;</argument_list></name> <name>guest_delegate_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrameSubscriber</name></expr></argument>&gt;</argument_list></name> <name>frame_subscriber_</name></expr>;</expr_stmt>

  <comment type="line">// The host webcontents that may contain this webcontents.</comment>
  <decl_stmt><decl><type><name>WebContents</name><modifier>*</modifier></type> <name>embedder_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The zoom controller for this webContents.</comment>
  <decl_stmt><decl><type><name>WebContentsZoomController</name><modifier>*</modifier></type> <name>zoom_controller_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The type of current WebContents.</comment>
  <decl_stmt><decl><type><name>Type</name></type> <name>type_</name> <init>= <expr><name>Type</name><operator>::</operator><name>BROWSER_WINDOW</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Request id used for findInPage request.</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>request_id_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Whether background throttling is disabled.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>background_throttling_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Whether to enable devtools.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>enable_devtools_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Observers of this WebContents.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>ExtendedWebContentsObserver</name></expr></argument>&gt;</argument_list></name> <name>observers_</name></expr>;</expr_stmt>

  <comment type="line">// The ID of the process of the currently committed RenderViewHost.</comment>
  <comment type="line">// -1 means no speculative RVH has been committed yet.</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>currently_committed_process_id_</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>service_manager</name><operator>::</operator><name><name>BinderRegistryWithArgs</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>registry_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>BindingSet</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>ElectronBrowser</name></expr></argument>, <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>bindings_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mojo</name><operator>::</operator><name>BindingId</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
      <name>frame_to_bindings_map_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>WebContents</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WebContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_WEB_CONTENTS_H_</comment>
</unit>
