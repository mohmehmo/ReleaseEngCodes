<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/common_web_contents_delegate.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_COMMON_WEB_CONTENTS_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_COMMON_WEB_CONTENTS_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/devtools/devtools_file_system_indexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/inspectable_web_contents_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/inspectable_web_contents_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/inspectable_web_contents_view_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SequencedTaskRunner</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NativeWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WebDialogHelper</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_OSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>OffScreenWebContentsView</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>CommonWebContentsDelegate</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>WebContentsDelegate</name></expr></range></decl>,
                                  <decl><type ref="prev"/><name>public</name> <name>InspectableWebContentsDelegate</name></decl>,
                                  <decl><type ref="prev"/><name>public</name> <name>InspectableWebContentsViewDelegate</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>CommonWebContentsDelegate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>CommonWebContentsDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// Creates a InspectableWebContents object and takes onwership of</comment>
  <comment type="line">// |web_contents|.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>InitWithWebContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                           <argument><expr><name>AtomBrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>,
                           <argument><expr><name>bool</name> <name>is_guest</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Set the window as owner window.</comment>
  <function_decl><type><name>void</name></type> <name>SetOwnerWindow</name><parameter_list>(<parameter><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>owner_window</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetOwnerWindow</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                      <argument><expr><name>NativeWindow</name><operator>*</operator> <name>owner_window</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Returns the WebContents managed by this delegate.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetWebContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Returns the WebContents of devtools.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetDevToolsWebContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <expr_stmt><expr><name>InspectableWebContents</name><operator>*</operator> <macro><name>managed_web_contents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><call><name><name>web_contents_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

  <expr_stmt><expr><name>NativeWindow</name><operator>*</operator> <macro><name>owner_window</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>owner_window_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>bool</name> <macro><name>is_html_fullscreen</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>html_fullscreen_</name></expr>;</return> }</block></expr></expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>set_fullscreen_frame</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>rfh</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name>fullscreen_frame_</name> <operator>=</operator> <name>rfh</name></expr>;</expr_stmt>
  </block_content>}</block></decl></decl_stmt>

 <label><name>protected</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_OSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>virtual</name> <name>OffScreenWebContentsView</name><operator>*</operator> <macro><name>GetOffScreenWebContentsView</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// content::WebContentsDelegate:</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>OpenURLFromTab</name><argument_list>(
      <argument>content::WebContents* source</argument>,
      <argument>const content::OpenURLParams&amp; params</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>CanOverscrollContent</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>ColorChooser</name><operator>*</operator> <macro><name>OpenColorChooser</name><argument_list>(
      <argument>content::WebContents* web_contents</argument>,
      <argument>SkColor color</argument>,
      <argument>const std::vector&lt;blink::mojom::ColorSuggestionPtr&gt;&amp; suggestions</argument>)</argument_list></macro>
      <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RunFileChooser</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>render_frame_host</name></expr></argument>,
                      <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>FileSelectListener</name></expr></argument>&gt;</argument_list></name> <name>listener</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>FileChooserParams</name><operator>&amp;</operator> <name>params</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>EnumerateDirectory</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                          <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>FileSelectListener</name></expr></argument>&gt;</argument_list></name> <name>listener</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>EnterFullscreenModeForTab</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>origin</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>FullscreenOptions</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ExitFullscreenModeForTab</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsFullscreenForTabOrPending</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>blink</name><operator>::</operator><name>SecurityStyle</name> <macro><name>GetSecurityStyle</name><argument_list>(
      <argument>content::WebContents* web_contents</argument>,
      <argument>content::SecurityStyleExplanations* explanations</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>TakeFocus</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>, <argument><expr><name>bool</name> <name>reverse</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>HandleKeyboardEvent</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>source</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>NativeWebKeyboardEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>PictureInPictureResult</name> <macro><name>EnterPictureInPicture</name><argument_list>(
      <argument>content::WebContents* web_contents</argument>,
      <argument>const viz::SurfaceId&amp;</argument>,
      <argument>const gfx::Size&amp; natural_size</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>ExitPictureInPicture</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// InspectableWebContentsDelegate:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>DevToolsSaveToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>,
                          <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>content</name></expr></argument>,
                          <argument><expr><name>bool</name> <name>save_as</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DevToolsAppendToFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>content</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>DevToolsRequestFileSystems</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DevToolsAddFileSystem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DevToolsRemoveFileSystem</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DevToolsIndexPath</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>excluded_folders_message</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DevToolsStopIndexing</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DevToolsSearchInPath</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>query</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// InspectableWebContentsViewDelegate:</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TOOLKIT_VIEWS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name> <macro><name>GetDevToolsWindowIcon</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>GetDevToolsWindowWMClass</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>name</name></expr></argument>,
                                <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>class_name</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Destroy the managed InspectableWebContents object.</comment>
  <function_decl><type><name>void</name></type> <name>ResetManagedWebContents</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <comment type="line">// DevTools index event callbacks.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnDevToolsIndexingWorkCalculated</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>,
                                        <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>,
                                        <argument><expr><name>int</name> <name>total_work</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnDevToolsIndexingWorked</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>,
                                <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>,
                                <argument><expr><name>int</name> <name>worked</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnDevToolsIndexingDone</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnDevToolsSearchCompleted</name><argument_list>(<argument><expr><name>int</name> <name>request_id</name></expr></argument>,
                                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_system_path</name></expr></argument>,
                                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>file_paths</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Set fullscreen mode triggered by html api.</comment>
  <function_decl><type><name>void</name></type> <name>SetHtmlApiFullscreen</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enter_fullscreen</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// The window that this WebContents belongs to.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name> <name>owner_window_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>offscreen_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Whether window is fullscreened by HTML5 api.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>html_fullscreen_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Whether window is fullscreened by window api.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>native_fullscreen_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// UI related helper classes.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WebDialogHelper</name></expr></argument>&gt;</argument_list></name> <name>web_dialog_helper_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>DevToolsFileSystemIndexer</name></expr></argument>&gt;</argument_list></name></type> <name>devtools_file_system_indexer_</name></decl>;</decl_stmt>

  <comment type="line">// Make sure BrowserContext is alwasys destroyed after WebContents.</comment>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name></type> <name>browser_context_</name></decl>;</decl_stmt>

  <comment type="line">// The stored InspectableWebContents object.</comment>
  <comment type="line">// Notice that web_contents_ must be placed after dialog_manager_, so we can</comment>
  <comment type="line">// make sure web_contents_ is destroyed before dialog_manager_, otherwise a</comment>
  <comment type="line">// crash would happen.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>InspectableWebContents</name></expr></argument>&gt;</argument_list></name> <name>web_contents_</name></expr>;</expr_stmt>

  <comment type="line">// Maps url to file path, used by the file requests sent from devtools.</comment>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>FilePath</name></expr></argument>&gt;</argument_list></name> <name>PathsMap</name></expr>;</expr_stmt></typedef>
  <decl_stmt><decl><type><name>PathsMap</name></type> <name>saved_files_</name></decl>;</decl_stmt>

  <comment type="line">// Map id to index job, used for file system indexing requests from devtools.</comment>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator>
      <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>DevToolsFileSystemIndexer</name><operator>::</operator><name>FileSystemIndexingJob</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
          <name>DevToolsIndexingJobsMap</name></expr>;</expr_stmt></typedef>
  <decl_stmt><decl><type><name>DevToolsIndexingJobsMap</name></type> <name>devtools_indexing_jobs_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>SequencedTaskRunner</name></expr></argument>&gt;</argument_list></name></type> <name>file_task_runner_</name></decl>;</decl_stmt>

  <comment type="line">// Stores the frame thats currently in fullscreen, nullptr if there is none.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>fullscreen_frame_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>CommonWebContentsDelegate</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>CommonWebContentsDelegate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_COMMON_WEB_CONTENTS_DELEGATE_H_</comment>
</unit>
