<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_desktop_capturer.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_DESKTOP_CAPTURER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_DESKTOP_CAPTURER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/media/webrtc/desktop_media_list_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/media/webrtc/native_desktop_media_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/trackable_object.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DesktopCapturer</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>DesktopCapturer</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
                        <decl><type ref="prev"/><name>public</name> <name>DesktopMediaListObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <struct>struct <name>Source</name> <block>{
    <expr_stmt><expr><name>DesktopMediaList</name><operator>::</operator><name>Source</name> <name>media_list_source</name></expr>;</expr_stmt>
    <comment type="line">// Will be an empty string if not available.</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>display_id</name></expr>;</expr_stmt>

    <comment type="line">// Whether or not this source should provide an icon.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fetch_icon</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  }</block>;</struct>

  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>DesktopCapturer</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>StartHandling</name><argument_list>(<argument><expr><name>bool</name> <name>capture_window</name></expr></argument>,
                     <argument><expr><name>bool</name> <name>capture_screen</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>thumbnail_size</name></expr></argument>,
                     <argument><expr><name>bool</name> <name>fetch_window_icons</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>DesktopCapturer</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>DesktopCapturer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// DesktopMediaListObserver:</comment>
  <function><type><name>void</name></type> <name>OnSourceAdded</name><parameter_list>(<parameter><decl><type><name>DesktopMediaList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> override <block>{<block_content/>}</block></function>
  <function><type><name>void</name></type> <name>OnSourceRemoved</name><parameter_list>(<parameter><decl><type><name>DesktopMediaList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> override <block>{<block_content/>}</block></function>
  <function><type><name>void</name></type> <name>OnSourceMoved</name><parameter_list>(<parameter><decl><type><name>DesktopMediaList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>old_index</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>new_index</name></decl></parameter>)</parameter_list> override <block>{<block_content/>}</block></function>
  <function><type><name>void</name></type> <name>OnSourceNameChanged</name><parameter_list>(<parameter><decl><type><name>DesktopMediaList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> override <block>{<block_content/>}</block></function>
  <function><type><name>void</name></type> <name>OnSourceThumbnailChanged</name><parameter_list>(<parameter><decl><type><name>DesktopMediaList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> override <block>{<block_content/>}</block></function>
  <decl_stmt><decl><type><name>void</name></type> <name>OnSourceUnchanged</name><argument_list>(<argument><expr><name>DesktopMediaList</name><operator>*</operator> <name>list</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>UpdateSourcesList</name><parameter_list>(<parameter><decl><type><name>DesktopMediaList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DesktopMediaList</name></expr></argument>&gt;</argument_list></name> <name>window_capturer_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DesktopMediaList</name></expr></argument>&gt;</argument_list></name> <name>screen_capturer_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DesktopCapturer</name><operator>::</operator><name>Source</name></expr></argument>&gt;</argument_list></name> <name>captured_sources_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>capture_window_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>capture_screen_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>fetch_window_icons_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>bool</name></type> <name>using_directx_capturer_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_WIN)</comment>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>DesktopCapturer</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>DesktopCapturer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_DESKTOP_CAPTURER_H_</comment>
</unit>
