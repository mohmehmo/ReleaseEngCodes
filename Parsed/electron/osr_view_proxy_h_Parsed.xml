<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/osr/osr_view_proxy.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_OSR_OSR_VIEW_PROXY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_OSR_OSR_VIEW_PROXY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/skia/include/core/SkBitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/events/event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/geometry/rect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/view.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OffscreenViewProxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OffscreenViewProxyObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnProxyViewPaint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>damage_rect</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ProxyViewDestroyed</name><parameter_list>(<parameter><decl><type><name>OffscreenViewProxy</name><modifier>*</modifier></type> <name>proxy</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OffscreenViewProxy</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>OffscreenViewProxy</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>view</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>OffscreenViewProxy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>SetObserver</name><parameter_list>(<parameter><decl><type><name>OffscreenViewProxyObserver</name><modifier>*</modifier></type> <name>observer</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveObserver</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><specifier>const</specifier> <name>SkBitmap</name><operator>*</operator> <macro><name>GetBitmap</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetBitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SkBitmap</name><modifier>&amp;</modifier></type> <name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <call><name>GetBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>OnEvent</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>Event</name><operator>*</operator> <name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function><type><name>void</name></type> <name>ResetView</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>view_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt> </block_content>}</block></function>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>view_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <name>view_bounds_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SkBitmap</name></expr></argument>&gt;</argument_list></name> <name>view_bitmap_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>OffscreenViewProxyObserver</name><modifier>*</modifier></type> <name>observer_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_OSR_OSR_VIEW_PROXY_H_</comment>
</unit>
