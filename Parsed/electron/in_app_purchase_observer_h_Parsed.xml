<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/mac/in_app_purchase_observer.h"><comment type="line">// Copyright (c) 2017 Amaplex Software, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_MAC_IN_APP_PURCHASE_OBSERVER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_MAC_IN_APP_PURCHASE_OBSERVER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OBJC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
@<decl_stmt><decl><type><name>class</name></type> <name>InAppTransactionObserver</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="line">// __OBJC__</comment>
<decl_stmt><decl><type><name>class</name></type> <name>InAppTransactionObserver</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// __OBJC__</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>in_app_purchase</name> <block>{<block_content>

<comment type="line">// --------------------------- Structures ---------------------------</comment>

<struct>struct <name>Payment</name> <block>{
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>productIdentifier</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>quantity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Transaction</name> <block>{
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>transactionIdentifier</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>transactionDate</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>originalTransactionIdentifier</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>errorCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>errorMessage</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>transactionState</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Payment</name></type> <name>payment</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>Transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Transaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Transaction</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>Transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<comment type="line">// --------------------------- Classes ---------------------------</comment>

<decl_stmt><decl><type><name>class</name></type> <name>TransactionObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>TransactionObserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TransactionObserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnTransactionsUpdated</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Transaction</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>transactions</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>InAppTransactionObserver</name><modifier>*</modifier></type> <name>obeserver_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>TransactionObserver</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>TransactionObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace in_app_purchase</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_MAC_IN_APP_PURCHASE_OBSERVER_H_</comment>
</unit>
