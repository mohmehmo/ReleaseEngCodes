<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_cookies.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_COOKIES_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_COOKIES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/cookies/canonical_cookie.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/cookies/cookie_change_dispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/promise.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/trackable_object.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DictionaryValue</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>net</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>URLRequestContextGetter</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Cookies</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>Cookies</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>Cookies</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                     <argument><expr><name>AtomBrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// gin_helper::TrackableObject:</comment>
  <expr><specifier>static</specifier> <name>void</name> <call><name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>protected</name><operator>:</operator>
  <call><name>Cookies</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>AtomBrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>Cookies</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>Get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>filter</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <macro><name>Set</name><argument_list>(<argument>base::DictionaryValue details</argument>)</argument_list></macro></expr>;
  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>Remove</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>FlushStore</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// CookieChangeNotifier subscription:</comment>
  <expr><name>void</name> <call><name>OnCookieChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>CookieChangeInfo</name><operator>&amp;</operator> <name>change</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name><name>CallbackList</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator>
      <specifier>const</specifier> <name>net</name><operator>::</operator><name>CookieChangeInfo</name><operator>&amp;</operator> <name>change</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Subscription</name></expr></argument>&gt;</argument_list></name>
      <name>cookie_change_subscription_</name></expr>;
  <expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name> <name>browser_context_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Cookies</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_COOKIES_H_</comment>
</unit>
