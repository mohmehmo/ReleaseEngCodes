<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/v8_value_converter.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_V8_VALUE_CONVERTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_V8_VALUE_CONVERTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DictionaryValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ListValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace base</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>V8ValueConverter</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>V8ValueConverter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>SetRegExpAllowed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetFunctionAllowed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetStripNullFromObjects</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8Value</name><argument_list>(<argument>const base::Value* value</argument>,
                                 <argument>v8::Local&lt;v8::Context&gt; context</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>FromV8Value</name><argument_list>(
      <argument>v8::Local&lt;v8::Value&gt; value</argument>,
      <argument>v8::Local&lt;v8::Context&gt; context</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>class</name></type> <name>FromV8ValueState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>class</name></type> <name>ScopedUniquenessGuard</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8ValueImpl</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                     <argument>const base::Value* value</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8Array</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                 <argument>const base::ListValue* list</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8Object</name><argument_list>(
      <argument>v8::Isolate* isolate</argument>,
      <argument>const base::DictionaryValue* dictionary</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToArrayBuffer</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                     <argument>const base::Value* value</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>FromV8ValueImpl</name><argument_list>(<argument>FromV8ValueState* state</argument>,
                                               <argument>v8::Local&lt;v8::Value&gt; value</argument>,
                                               <argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>FromV8Array</name><argument_list>(<argument>v8::Local&lt;v8::Array&gt; array</argument>,
                                           <argument>FromV8ValueState* state</argument>,
                                           <argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>FromNodeBuffer</name><argument_list>(<argument>v8::Local&lt;v8::Value&gt; value</argument>,
                                              <argument>FromV8ValueState* state</argument>,
                                              <argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>FromV8Object</name><argument_list>(<argument>v8::Local&lt;v8::Object&gt; object</argument>,
                                            <argument>FromV8ValueState* state</argument>,
                                            <argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// If true, we will convert RegExp JavaScript objects to string.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>reg_exp_allowed_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// If true, we will convert Function JavaScript objects to dictionaries.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>function_allowed_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// If true, undefined and null values are ignored when converting v8 objects</comment>
  <comment type="line">// into Values.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>strip_null_from_objects_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>V8ValueConverter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_V8_VALUE_CONVERTER_H_</comment>
</unit>
