<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/views/atom_api_box_layout.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_VIEWS_ATOM_API_BOX_LAYOUT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_VIEWS_ATOM_API_BOX_LAYOUT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/api/views/atom_api_layout_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/layout/box_layout.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>View</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BoxLayout</name> <range>: <expr><name>public</name> <name>LayoutManager</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>*</operator> <macro><name>New</name><argument_list>(
      <argument>gin_helper::Arguments* args</argument>,
      <argument>views::BoxLayout::Orientation orientation</argument>)</argument_list></macro></expr>;

  <expr><specifier>static</specifier> <name>void</name> <call><name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>SetFlexForView</name><argument_list>(<argument>gin::Handle&lt;View&gt; view</argument>, <argument>int flex</argument>)</argument_list></macro></expr>;

 <expr><name>protected</name><operator>:</operator>
  <name>explicit</name> <macro><name>BoxLayout</name><argument_list>(<argument>views::BoxLayout::Orientation orientation</argument>)</argument_list></macro></expr>;
  <expr><operator>~</operator><macro><name>BoxLayout</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>BoxLayout</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_VIEWS_ATOM_API_BOX_LAYOUT_H_</comment>
</unit>
