<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/cookie_change_notifier.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_COOKIE_CHANGE_NOTIFIER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_COOKIE_CHANGE_NOTIFIER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/receiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/cookies/cookie_change_dispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/cookie_manager.mojom.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>

<comment type="line">// Sends cookie-change notifications on the UI thread.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CookieChangeNotifier</name> <range>: <expr><name>public</name> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>CookieChangeListener</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>CookieChangeNotifier</name><argument_list>(<argument><expr><name>AtomBrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>CookieChangeNotifier</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Register callbacks that needs to notified on any cookie store changes.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name><name>CallbackList</name><argument_list type="generic">&lt;
      <argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>net</name><operator>::</operator><name>CookieChangeInfo</name><operator>&amp;</operator> <name>change</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Subscription</name></expr></argument>&gt;</argument_list></name>
  <call><name>RegisterCookieChangeCallback</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>net</name><operator>::</operator><name>CookieChangeInfo</name><operator>&amp;</operator> <name>change</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>cb</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <call><name>StartListening</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>OnConnectionError</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// network::mojom::CookieChangeListener implementation.</comment>
  <expr><name>void</name> <macro><name>OnCookieChange</name><argument_list>(<argument>const net::CookieChangeInfo&amp; change</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>AtomBrowserContext</name><operator>*</operator> <name>browser_context_</name></expr>;
  <expr><name>base</name><operator>::</operator><name><name>CallbackList</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>net</name><operator>::</operator><name>CookieChangeInfo</name><operator>&amp;</operator> <name>change</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
      <name>cookie_change_sub_list_</name></expr>;

  <expr><name>mojo</name><operator>::</operator><name><name>Receiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>CookieChangeListener</name></expr></argument>&gt;</argument_list></name> <name>receiver_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>CookieChangeNotifier</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_COOKIE_CHANGE_NOTIFIER_H_</comment>
</unit>
