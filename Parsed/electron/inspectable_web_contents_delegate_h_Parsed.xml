<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/inspectable_web_contents_delegate.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Copyright (c) 2013 Adam Roben &lt;adam@roben.org&gt;. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsDelegate</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>InspectableWebContentsDelegate</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Requested by WebContents of devtools.</comment>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsReloadPage</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsSaveToFile</name><argument_list>(<argument>const std::string&amp; url</argument>,
                                  <argument>const std::string&amp; content</argument>,
                                  <argument>bool save_as</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsAppendToFile</name><argument_list>(<argument>const std::string&amp; url</argument>,
                                    <argument>const std::string&amp; content</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsRequestFileSystems</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsAddFileSystem</name><argument_list>(<argument>const std::string&amp; type</argument>,
                                     <argument>const base::FilePath&amp; file_system_path</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsRemoveFileSystem</name><argument_list>(
      <argument>const base::FilePath&amp; file_system_path</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsIndexPath</name><argument_list>(<argument>int request_id</argument>,
                                 <argument>const std::string&amp; file_system_path</argument>,
                                 <argument>const std::string&amp; excluded_folders</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsStopIndexing</name><argument_list>(<argument>int request_id</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>DevToolsSearchInPath</name><argument_list>(<argument>int request_id</argument>,
                                    <argument>const std::string&amp; file_system_path</argument>,
                                    <argument>const std::string&amp; query</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_DELEGATE_H_</comment>
</unit>
