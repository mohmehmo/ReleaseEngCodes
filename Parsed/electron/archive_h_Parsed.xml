<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/asar/archive.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_ASAR_ARCHIVE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_ASAR_ARCHIVE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DictionaryValue</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>asar</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedTemporaryFile</name></decl>;</decl_stmt>

<comment type="line">// This class represents an asar package, and provides methods to read</comment>
<comment type="line">// information from it.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Archive</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <struct>struct <name>FileInfo</name> <block>{
    <expr_stmt><expr><call><name>FileInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>unpacked</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>executable</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>offset</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>
    <name>bool</name> <name>unpacked</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>executable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
  }</block>;</struct>

  <decl_stmt><decl><type><name><name>struct</name> <name>Stats</name></name></type> <range>: <expr><name>public</name> <name>FileInfo</name> <block>{
    <expr><call><name>Stats</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>is_file</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>is_directory</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>is_link</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
    <name>bool</name> <name>is_file</name></expr>;
    <expr><name>bool</name> <name>is_directory</name></expr>;
    <expr><name>bool</name> <name>is_link</name></expr>;
  }</block></expr></range></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>explicit</name></type> <name>Archive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Archive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Read and parse the header.</comment>
  <function_decl><type><name>bool</name></type> <name>Init</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Get the info of a file.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>GetFileInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>FileInfo</name><operator>*</operator> <name>info</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Fs.stat(path).</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>Stat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>Stats</name><operator>*</operator> <name>stats</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Fs.readdir(path).</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>Readdir</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>files</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Fs.realpath(path).</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>Realpath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>*</operator> <name>realpath</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Copy the file into a temporary file, and return the new path.</comment>
  <comment type="line">// For unpacked file, this method will return its real path.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>CopyFileOut</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Returns the file's fd.</comment>
  <expr_stmt><expr><name>int</name> <macro><name>GetFD</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <macro><name>path</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>path_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>DictionaryValue</name><operator>*</operator> <macro><name>header</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>header_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>path_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>File</name> <name>file_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd_</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>header_size_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <name>header_</name></expr>;</expr_stmt>

  <comment type="line">// Cached external temporary files.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>::</operator><name>StringType</name></expr></argument>,
                     <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ScopedTemporaryFile</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
      <name>external_files_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace asar</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_ASAR_ARCHIVE_H_</comment>
</unit>
