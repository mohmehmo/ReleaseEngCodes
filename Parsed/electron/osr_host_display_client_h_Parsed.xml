<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/osr/osr_host_display_client.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_OSR_OSR_HOST_DISPLAY_CLIENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_OSR_OSR_HOST_DISPLAY_CLIENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/shared_memory_mapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/host/host_display_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/viz/privileged/mojom/compositing/layered_window_updater.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/skia/include/core/SkBitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/skia/include/core/SkCanvas.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/native_widget_types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator>, <specifier>const</specifier> <name>SkBitmap</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>OnPaintCallback</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>LayeredWindowUpdater</name> <range>: <expr><name>public</name> <name>viz</name><operator>::</operator><name>mojom</name><operator>::</operator><name>LayeredWindowUpdater</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <macro><name>LayeredWindowUpdater</name><argument_list>(<argument>viz::mojom::LayeredWindowUpdaterRequest request</argument>,
                                <argument>OnPaintCallback callback</argument>)</argument_list></macro></expr>;
  <expr><operator>~</operator><macro><name>LayeredWindowUpdater</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetActive</name><argument_list>(<argument>bool active</argument>)</argument_list></macro></expr>;

  <comment type="line">// viz::mojom::LayeredWindowUpdater implementation.</comment>
  <expr><name>void</name> <macro><name>OnAllocatedSharedMemory</name><argument_list>(<argument>const gfx::Size&amp; pixel_size</argument>,
                               <argument>base::UnsafeSharedMemoryRegion region</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Draw</name><argument_list>(<argument>const gfx::Rect&amp; damage_rect</argument>, <argument>DrawCallback draw_callback</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>OnPaintCallback</name> <name>callback_</name></expr>;
  <expr><name>mojo</name><operator>::</operator><name><name>Binding</name><argument_list type="generic">&lt;<argument><expr><name>viz</name><operator>::</operator><name>mojom</name><operator>::</operator><name>LayeredWindowUpdater</name></expr></argument>&gt;</argument_list></name> <name>binding_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SkCanvas</name></expr></argument>&gt;</argument_list></name> <name>canvas_</name></expr>;
  <expr><name>bool</name> <name>active_</name> <operator>=</operator> <name>false</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>base</name><operator>::</operator><name>WritableSharedMemoryMapping</name> <name>shm_mapping_</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>LayeredWindowUpdater</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OffScreenHostDisplayClient</name> <range>: <expr><name>public</name> <name>viz</name><operator>::</operator><name>HostDisplayClient</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <macro><name>OffScreenHostDisplayClient</name><argument_list>(<argument>gfx::AcceleratedWidget widget</argument>,
                                      <argument>OnPaintCallback callback</argument>)</argument_list></macro></expr>;
  <expr><operator>~</operator><macro><name>OffScreenHostDisplayClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetActive</name><argument_list>(<argument>bool active</argument>)</argument_list></macro></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <macro><name>IsOffscreen</name><argument_list>(<argument>IsOffscreenCallback callback</argument>)</argument_list></macro> <name>override</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>void</name> <macro><name>OnDisplayReceivedCALayerParams</name><argument_list>(
      <argument>const gfx::CALayerParams&amp; ca_layer_params</argument>)</argument_list></macro> <name>override</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><name>void</name> <macro><name>CreateLayeredWindowUpdater</name><argument_list>(
      <argument>viz::mojom::LayeredWindowUpdaterRequest request</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LayeredWindowUpdater</name></expr></argument>&gt;</argument_list></name> <name>layered_window_updater_</name></expr>;
  <expr><name>OnPaintCallback</name> <name>callback_</name></expr>;
  <expr><name>bool</name> <name>active_</name> <operator>=</operator> <name>false</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>OffScreenHostDisplayClient</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_OSR_OSR_HOST_DISPLAY_CLIENT_H_</comment>
</unit>
