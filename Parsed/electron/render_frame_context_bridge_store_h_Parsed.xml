<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/api/context_bridge/render_frame_context_bridge_store.h"><comment type="line">// Copyright (c) 2019 Slack Technologies, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_API_CONTEXT_BRIDGE_RENDER_FRAME_CONTEXT_BRIDGE_STORE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_API_CONTEXT_BRIDGE_RENDER_FRAME_CONTEXT_BRIDGE_STORE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/renderer/atom_render_frame_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_local_frame.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>context_bridge</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>FunctionContextPair</name> <init>=
    <expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Function</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>WeakGlobalPair</name> <init>= <expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<struct>struct <name>WeakGlobalPairNode</name> <block>{
  <function_decl><type><name>explicit</name></type> <name>WeakGlobalPairNode</name><parameter_list>(<parameter><decl><type><name>WeakGlobalPair</name></type> <name>pair_</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><operator>~</operator><call><name>WeakGlobalPairNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>WeakGlobalPair</name></type> <name>pair</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>detached</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>WeakGlobalPairNode</name></name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>WeakGlobalPairNode</name></name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name> <name>RenderFramePersistenceStore</name></type> <name>final</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>RenderFrameObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>RenderFramePersistenceStore</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>RenderFramePersistenceStore</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// RenderFrameObserver implementation.</comment>
  <expr><name>void</name> <macro><name>OnDestruct</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>size_t</name> <macro><name>take_func_id</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>next_func_id_</name><operator>++</operator></expr>;</return> }</block>

  <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>FunctionContextPair</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>functions</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>functions_</name></expr>;</return> }</block>
  <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>WeakGlobalPairNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>*</operator> <macro><name>proxy_map</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>&amp;</operator><name>proxy_map_</name></expr>;</return> }</block>

  <name>void</name> <call><name>CacheProxiedObject</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>from</name></expr></argument>,
                          <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>proxy_value</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetCachedProxiedObject</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>from</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// func_id ==&gt; { function, owning_context }</comment>
  <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>FunctionContextPair</name></expr></argument>&gt;</argument_list></name> <name>functions_</name></expr>;
  <expr><name>size_t</name> <name>next_func_id_</name> <operator>=</operator> <literal type="number">1</literal></expr>;

  <comment type="line">// proxy maps are weak globals, i.e. these are not retained beyond</comment>
  <comment type="line">// there normal JS lifetime.  You must check IsEmpty()</comment>

  <comment type="line">// object_identity ==&gt; [from_value, proxy_value]</comment>
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>WeakGlobalPairNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>proxy_map_</name></expr>;
  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>RenderFramePersistenceStore</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name><block>{<expr><name>this</name></expr>}</block></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace context_bridge</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_API_CONTEXT_BRIDGE_RENDER_FRAME_CONTEXT_BRIDGE_STORE_H_</comment>
</unit>
