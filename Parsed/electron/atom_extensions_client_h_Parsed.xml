<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/extensions/atom_extensions_client.h"><comment type="line">// Copyright 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_EXTENSIONS_ATOM_EXTENSIONS_CLIENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_EXTENSIONS_ATOM_EXTENSIONS_CLIENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/common/extensions_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url/gurl.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>APIPermissionSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PermissionMessageProvider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PermissionIDSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ScriptingWhitelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>URLPatternSet</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace extensions</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// The app_shell implementation of ExtensionsClient.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionsClient</name> <range>: <expr><name>public</name> <name>extensions</name><operator>::</operator><name>ExtensionsClient</name> <block>{
 <expr><name>public</name><operator>:</operator></expr>
  <typedef>typedef <expr_stmt><expr><name>extensions</name><operator>::</operator><name>ExtensionsClient</name><operator>::</operator><name>ScriptingWhitelist</name> <name>ScriptingWhitelist</name></expr>;</expr_stmt></typedef>

  <call><name>AtomExtensionsClient</name><argument_list>()</argument_list></call></block></expr></range></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>AtomExtensionsClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// ExtensionsClient overrides:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>Initialize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InitializeWebStoreUrls</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>CommandLine</name><operator>*</operator> <name>command_line</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>extensions</name><operator>::</operator><name>PermissionMessageProvider</name><operator>&amp;</operator> <macro><name>GetPermissionMessageProvider</name><argument_list>()</argument_list></macro>
      <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>GetProductName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>FilterHostPermissions</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>extensions</name><operator>::</operator><name>URLPatternSet</name><operator>&amp;</operator> <name>hosts</name></expr></argument>,
      <argument><expr><name>extensions</name><operator>::</operator><name>URLPatternSet</name><operator>*</operator> <name>new_hosts</name></expr></argument>,
      <argument><expr><name>extensions</name><operator>::</operator><name>PermissionIDSet</name><operator>*</operator> <name>permissions</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetScriptingWhitelist</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ScriptingWhitelist</name><operator>&amp;</operator> <name>whitelist</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>ScriptingWhitelist</name><operator>&amp;</operator> <macro><name>GetScriptingWhitelist</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>extensions</name><operator>::</operator><name>URLPatternSet</name> <macro><name>GetPermittedChromeSchemeHosts</name><argument_list>(
      <argument>const extensions::Extension* extension</argument>,
      <argument>const extensions::APIPermissionSet&amp; api_permissions</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsScriptableURL</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>error</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <macro><name>GetWebstoreBaseURL</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <macro><name>GetWebstoreUpdateURL</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsBlacklistUpdateURL</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>ScriptingWhitelist</name></type> <name>scripting_whitelist_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>GURL</name></type> <name>webstore_base_url_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>GURL</name></type> <name>webstore_update_url_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomExtensionsClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_EXTENSIONS_ATOM_EXTENSIONS_CLIENT_H_</comment>
</unit>
