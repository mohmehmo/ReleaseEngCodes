<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/node_stream_loader.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_NODE_STREAM_LOADER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_NODE_STREAM_LOADER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/strong_binding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/system/data_pipe_producer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/resource_response.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_loader.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Read data from node Stream and feed it to NetworkService.</comment>
<comment type="line">//</comment>
<comment type="line">// This class manages its own lifetime and should delete itself when the</comment>
<comment type="line">// connection is lost or finished.</comment>
<comment type="line">//</comment>
<comment type="line">// We use |paused mode| to read data from |Readable| stream, so we don't need to</comment>
<comment type="line">// copy data from buffer and hold it in memory, and we only need to make sure</comment>
<comment type="line">// the passed |Buffer| is alive while writing data to pipe.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>NodeStreamLoader</name> <range>: <expr><name>public</name> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoader</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <macro><name>NodeStreamLoader</name><argument_list>(<argument>network::ResourceResponseHead head</argument>,
                   <argument>network::mojom::URLLoaderRequest loader</argument>,
                   <argument>network::mojom::URLLoaderClientPtr client</argument>,
                   <argument>v8::Isolate* isolate</argument>,
                   <argument>v8::Local&lt;v8::Object&gt; emitter</argument>)</argument_list></macro></expr>;

 <expr><name>private</name><operator>:</operator>
  <operator>~</operator><macro><name>NodeStreamLoader</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>using</name> <name>EventCallback</name> <operator>=</operator> <name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

  <expr><name>void</name> <macro><name>Start</name><argument_list>(<argument>network::ResourceResponseHead head</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>NotifyReadable</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>NotifyComplete</name><argument_list>(<argument>int result</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>ReadMore</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>DidWrite</name><argument_list>(<argument>MojoResult result</argument>)</argument_list></macro></expr>;

  <comment type="line">// Subscribe to events of |emitter|.</comment>
  <expr><name>void</name> <macro><name>On</name><argument_list>(<argument>const char* event</argument>, <argument>EventCallback callback</argument>)</argument_list></macro></expr>;

  <comment type="line">// URLLoader:</comment>
  <expr><name>void</name> <macro><name>FollowRedirect</name><argument_list>(<argument>const std::vector&lt;std::string&gt;&amp; removed_headers</argument>,
                      <argument>const net::HttpRequestHeaders&amp; modified_headers</argument>,
                      <argument>const base::Optional&lt;GURL&gt;&amp; new_url</argument>)</argument_list></macro> <name>override</name> <block>{}</block>
  <name>void</name> <macro><name>SetPriority</name><argument_list>(<argument>net::RequestPriority priority</argument>,
                   <argument>int32_t intra_priority_value</argument>)</argument_list></macro> <name>override</name> <block>{}</block>
  <name>void</name> <macro><name>PauseReadingBodyFromNet</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>
  <name>void</name> <macro><name>ResumeReadingBodyFromNet</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

  <name>mojo</name><operator>::</operator><name><name>Binding</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoader</name></expr></argument>&gt;</argument_list></name> <name>binding_</name></expr>;
  <expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderClientPtr</name> <name>client_</name></expr>;

  <expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name></expr>;
  <expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>emitter_</name></expr>;
  <expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>buffer_</name></expr>;

  <comment type="line">// Mojo data pipe where the data that is being read is written to.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>mojo</name><operator>::</operator><name>DataPipeProducer</name></expr></argument>&gt;</argument_list></name> <name>producer_</name></expr>;

  <comment type="line">// Whether we are in the middle of write.</comment>
  <expr><name>bool</name> <name>is_writing_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// Whether we are in the middle of a stream.read().</comment>
  <expr><name>bool</name> <name>is_reading_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// When NotifyComplete is called while writing, we will save the result and</comment>
  <comment type="line">// quit with it after the write is done.</comment>
  <expr><name>bool</name> <name>ended_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>int</name> <name>result_</name> <operator>=</operator> <name>net</name><operator>::</operator><name>OK</name></expr>;

  <comment type="line">// When the stream emits the readable event, we only want to start reading</comment>
  <comment type="line">// data if the stream was not readable before, so we store the state in a</comment>
  <comment type="line">// flag.</comment>
  <expr><name>bool</name> <name>readable_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// Store the V8 callbacks to unsubscribe them later.</comment>
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>handlers_</name></expr>;

  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>NodeStreamLoader</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NodeStreamLoader</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_NODE_STREAM_LOADER_H_</comment>
</unit>
