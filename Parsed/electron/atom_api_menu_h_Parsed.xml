<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_menu.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_MENU_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_MENU_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/arguments.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/api/atom_api_top_level_window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/atom_menu_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/trackable_object.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Menu</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>Menu</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
             <decl><type ref="prev"/><name>public</name> <name>AtomMenuModel</name>::<name>Delegate</name></decl>,
             <decl><type ref="prev"/><name>public</name> <name>AtomMenuModel</name>::<name>Observer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>*</operator> <call><name>New</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Set the global menubar.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetApplicationMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name><modifier>*</modifier></type> <name>menu</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Fake sending an action from the application menu.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>SendActionToFirstResponder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>action</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>AtomMenuModel</name><operator>*</operator> <macro><name>model</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>model_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>Menu</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>Menu</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// gin_helper::Wrappable:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>AfterInit</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// ui::SimpleMenuModel::Delegate:</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsCommandIdChecked</name><argument_list>(<argument><expr><name>int</name> <name>command_id</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsCommandIdEnabled</name><argument_list>(<argument><expr><name>int</name> <name>command_id</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsCommandIdVisible</name><argument_list>(<argument><expr><name>int</name> <name>command_id</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ShouldCommandIdWorkWhenHidden</name><argument_list>(<argument><expr><name>int</name> <name>command_id</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>GetAcceleratorForCommandIdWithParams</name><argument_list>(
      <argument><expr><name>int</name> <name>command_id</name></expr></argument>,
      <argument><expr><name>bool</name> <name>use_default_accelerator</name></expr></argument>,
      <argument><expr><name>ui</name><operator>::</operator><name>Accelerator</name><operator>*</operator> <name>accelerator</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ShouldRegisterAcceleratorForCommandId</name><argument_list>(<argument><expr><name>int</name> <name>command_id</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ExecuteCommand</name><argument_list>(<argument><expr><name>int</name> <name>command_id</name></expr></argument>, <argument><expr><name>int</name> <name>event_flags</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnMenuWillShow</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>SimpleMenuModel</name><operator>*</operator> <name>source</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PopupAt</name><argument_list>(<argument><expr><name>TopLevelWindow</name><operator>*</operator> <name>window</name></expr></argument>,
                       <argument><expr><name>int</name> <name>x</name></expr></argument>,
                       <argument><expr><name>int</name> <name>y</name></expr></argument>,
                       <argument><expr><name>int</name> <name>positioning_item</name></expr></argument>,
                       <argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>callback</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ClosePopupAt</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>window_id</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomMenuModel</name></expr></argument>&gt;</argument_list></name> <name>model_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Menu</name><modifier>*</modifier></type> <name>parent_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Observable:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnMenuWillClose</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnMenuWillShow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>protected</name>:</label>
  <comment type="line">// Returns a new callback which keeps references of the JS wrapper until the</comment>
  <comment type="line">// passed |callback| is called.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <macro><name>BindSelfToClosure</name><argument_list>(<argument>base::OnceClosure callback</argument>)</argument_list></macro></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name></type> <name>InsertItemAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>, <argument><expr><name>int</name> <name>command_id</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>label</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>InsertSeparatorAt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>InsertCheckItemAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>,
                         <argument><expr><name>int</name> <name>command_id</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>label</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InsertRadioItemAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>,
                         <argument><expr><name>int</name> <name>command_id</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>label</name></expr></argument>,
                         <argument><expr><name>int</name> <name>group_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>InsertSubMenuAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>,
                       <argument><expr><name>int</name> <name>command_id</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>label</name></expr></argument>,
                       <argument><expr><name>Menu</name><operator>*</operator> <name>menu</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetIcon</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator> <name>image</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSublabel</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>sublabel</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetToolTip</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>toolTip</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetRole</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>role</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>int</name></type> <name>GetIndexOfCommandId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>command_id</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>int</name> <macro><name>GetItemCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>GetCommandIdAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetLabelAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetSublabelAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetToolTipAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetAcceleratorTextAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsItemCheckedAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsEnabledAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsVisibleAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>WorksWhenHiddenAt</name><argument_list>(<argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

  <comment type="line">// Stored delegate methods.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>is_checked_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>is_enabled_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>is_visible_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>works_when_hidden_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>int</name>, <name>bool</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
      <name>get_accelerator_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
      <name>should_register_accelerator_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>, <name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name>
      <name>execute_command_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>menu_will_show_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>electron</name><operator>::</operator><name>AtomMenuModel</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>electron::AtomMenuModel** out</argument>)</argument_list></macro> <block>{
    <comment type="line">// null would be tranfered to NULL.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>-&gt;</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    <expr_stmt/>}</block_content>

    electron::api::Menu* menu</block><empty_stmt>;</empty_stmt></if></if_stmt></block></expr>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>electron</name><operator>::</operator><name>api</name><operator>::</operator><name>Menu</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>FromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>menu</name><operator>-&gt;</operator><name>model</name></name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>
};

}  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_MENU_H_</comment>
</unit>
