<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/locker.h"><comment type="line">// Copyright 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE.chromium file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_LOCKER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_LOCKER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<comment type="line">// Only lock when lockers are used in current thread.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Locker</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>Locker</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>Locker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Returns whether current process is browser process, currently we detect it</comment>
  <comment type="line">// by checking whether current has used V8 Lock, but it might be a bad idea.</comment>
  <function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsBrowserProcess</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>v8</name><operator>::</operator><name>Locker</name><operator>::</operator><call><name>IsActive</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name><modifier>*</modifier> <name>operator</name></type> <name>new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name> <name>operator</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Locker</name></expr></argument>&gt;</argument_list></name> <name>locker_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Locker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_LOCKER_H_</comment>
</unit>
