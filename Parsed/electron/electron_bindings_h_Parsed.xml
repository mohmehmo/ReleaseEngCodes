<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/api/electron_bindings.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_API_ELECTRON_BINDINGS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_API_ELECTRON_BINDINGS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/scoped_refptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/process/process_metrics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/promise.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uv.h"</cpp:file></cpp:include>  <comment type="line">// NOLINT(build/include)</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>memory_instrumentation</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalMemoryDump</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>node</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Environment</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ElectronBindings</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>ElectronBindings</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name><modifier>*</modifier></type> <name>loop</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ElectronBindings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Add process.electronBinding function, which behaves like process.binding</comment>
  <comment type="line">// but load native code from Electron instead.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>BindTo</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>process</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Should be called when a node::Environment has been destroyed.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>EnvironmentDestroyed</name><argument_list>(<argument><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <name>env</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BindProcess</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                          <argument><expr><name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>*</operator> <name>process</name></expr></argument>,
                          <argument><expr><name>base</name><operator>::</operator><name>ProcessMetrics</name><operator>*</operator> <name>metrics</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Log</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Crash</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Hang</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetHeapStatistics</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetCreationTime</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetSystemMemoryInfo</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                                  <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>GetProcessMemoryInfo</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetBlinkMemoryInfo</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetCPUUsage</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>ProcessMetrics</name><operator>*</operator> <name>metrics</name></expr></argument>,
                                          <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetIOCounters</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>TakeHeapSnapshot</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>file_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>ActivateUVLoop</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OnCallNextTick</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>DidReceiveMemoryDump</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name></expr></argument>,
      <argument><expr><name>gin_helper</name><operator>::</operator><name><name>Promise</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name>Dictionary</name></expr></argument>&gt;</argument_list></name> <name>promise</name></expr></argument>,
      <argument><expr><name>bool</name> <name>success</name></expr></argument>,
      <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>memory_instrumentation</name><operator>::</operator><name>GlobalMemoryDump</name></expr></argument>&gt;</argument_list></name> <name>dump</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_async_t</name></type> <name>call_next_tick_async_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>pending_next_ticks_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>ProcessMetrics</name></expr></argument>&gt;</argument_list></name> <name>metrics_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ElectronBindings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_API_ELECTRON_BINDINGS_H_</comment>
</unit>
