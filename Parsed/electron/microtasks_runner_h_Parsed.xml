<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/microtasks_runner.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_MICROTASKS_RUNNER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_MICROTASKS_RUNNER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/task/task_observer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>v8</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Isolate</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Microtasks like promise resolution, are run at the end of the current</comment>
<comment type="line">// task. This class implements a task observer that runs tells v8 to run them.</comment>
<comment type="line">// Microtasks runner implementation is based on the EndOfTaskRunner in blink.</comment>
<comment type="line">// Node follows the kExplicit MicrotasksPolicy, and we do the same in browser</comment>
<comment type="line">// process. Hence, we need to have this task observer to flush the queued</comment>
<comment type="line">// microtasks.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>MicrotasksRunner</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>TaskObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>MicrotasksRunner</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// base::TaskObserver</comment>
  <expr><name>void</name> <macro><name>WillProcessTask</name><argument_list>(<argument>const base::PendingTask&amp; pending_task</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>DidProcessTask</name><argument_list>(<argument>const base::PendingTask&amp; pending_task</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_MICROTASKS_RUNNER_H_</comment>
</unit>
