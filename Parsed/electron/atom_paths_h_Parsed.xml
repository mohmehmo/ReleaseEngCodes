<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/atom_paths.h"><comment type="line">// Copyright 2015 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ATOM_PATHS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ATOM_PATHS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/base_paths.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/base_paths_win.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/base_paths_mac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/base_paths_posix.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<enum>enum <block>{
  <decl><name>PATH_START</name> <init>= <expr><literal type="number">11000</literal></expr></init></decl>,

  <decl><name>DIR_USER_DATA</name> <init>= <expr><name>PATH_START</name></expr></init></decl>,  <comment type="line">// Directory where user data can be written.</comment>
  <decl><name>DIR_USER_CACHE</name></decl>,              <comment type="line">// Directory where user cache can be written.</comment>
  <decl><name>DIR_APP_LOGS</name></decl>,                <comment type="line">// Directory where app logs live</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl><name>DIR_APP_DATA</name></decl>,  <comment type="line">// Application Data directory under the user profile.</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl><name>PATH_END</name></decl>,  <comment type="line">// End of new paths. Those that follow redirect to base::DIR_*</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl><name>DIR_APP_DATA</name> <init>= <expr><name>base</name><operator>::</operator><name>DIR_APP_DATA</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl><name>DIR_CACHE</name> <init>= <expr><name>base</name><operator>::</operator><name>DIR_CACHE</name>  <comment type="line">// Directory where to put cache data.</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <name>DIR_CACHE</name> <operator>=</operator> <name>base</name><operator>::</operator><name>DIR_APP_DATA</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</enum>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>PATH_START</name> <operator>&lt;</operator> <name>PATH_END</name></expr></argument>, <argument><expr><literal type="string">"invalid PATH boundaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ATOM_PATHS_H_</comment>
</unit>
