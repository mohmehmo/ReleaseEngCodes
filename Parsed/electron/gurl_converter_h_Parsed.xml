<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_converters/gurl_converter.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_CONVERTERS_GURL_CONVERTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_CONVERTERS_GURL_CONVERTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/converter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url/gurl.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>GURL</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>const GURL&amp; val</argument>)</argument_list></macro> <block>{
    <return>return <expr><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><call><name><name>val</name><operator>.</operator><name>spec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block>
  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>GURL* out</argument>)</argument_list></macro> <block>{
    <expr><name>std</name><operator>::</operator><name>string</name> <name>url</name></expr>;
    <if_stmt><if>if <condition>(<expr><name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>FromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>GURL</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    <expr_stmt/>}</block_content> else <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    <expr_stmt/>}</block_content>
  }
}</block></block><empty_stmt>;</empty_stmt></if></if_stmt>

}</block></expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt>  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_CONVERTERS_GURL_CONVERTER_H_</comment>
</unit>
