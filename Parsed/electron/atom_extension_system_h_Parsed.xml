<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/extensions/atom_extension_system.h"><comment type="line">// Copyright 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_SYSTEM_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_SYSTEM_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/one_shot_event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/browser/extension_system.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FilePath</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BrowserContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionLoader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueStoreFactory</name></decl>;</decl_stmt>

<comment type="line">// A simplified version of ExtensionSystem for app_shell. Allows</comment>
<comment type="line">// app_shell to skip initialization of services it doesn't need.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionSystem</name> <range>: <expr><name>public</name> <name>ExtensionSystem</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>using</name> <name>InstallUpdateCallback</name> <operator>=</operator> <name>ExtensionSystem</name><operator>::</operator><name>InstallUpdateCallback</name></expr>;
  <expr><name>explicit</name> <call><name>AtomExtensionSystem</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomExtensionSystem</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Loads an unpacked extension from a directory. Returns the extension on</comment>
  <comment type="line">// success, or nullptr otherwise.</comment>
  <expr><specifier>const</specifier> <name>Extension</name><operator>*</operator> <call><name>LoadExtension</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>extension_dir</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Loads an unpacked platform app from a directory. Returns the extension on</comment>
  <comment type="line">// success, or nullptr otherwise.</comment>
  <comment type="line">// Currently this just calls LoadExtension, as apps are not loaded differently</comment>
  <comment type="line">// than other extensions. Use LaunchApp() to actually launch the loaded app.</comment>
  <expr><specifier>const</specifier> <name>Extension</name><operator>*</operator> <call><name>LoadApp</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>app_dir</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Finish initialization for the shell extension system.</comment>
  <expr><name>void</name> <call><name>FinishInitialization</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Reloads the extension with id |extension_id|.</comment>
  <expr><name>void</name> <call><name>ReloadExtension</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExtensionId</name><operator>&amp;</operator> <name>extension_id</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// KeyedService implementation:</comment>
  <expr><name>void</name> <macro><name>Shutdown</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// ExtensionSystem implementation:</comment>
  <expr><name>void</name> <macro><name>InitForRegularProfile</name><argument_list>(<argument>bool extensions_enabled</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>ExtensionService</name><operator>*</operator> <macro><name>extension_service</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>RuntimeData</name><operator>*</operator> <macro><name>runtime_data</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>ManagementPolicy</name><operator>*</operator> <macro><name>management_policy</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>ServiceWorkerManager</name><operator>*</operator> <macro><name>service_worker_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>SharedUserScriptMaster</name><operator>*</operator> <macro><name>shared_user_script_master</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>StateStore</name><operator>*</operator> <macro><name>state_store</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>StateStore</name><operator>*</operator> <macro><name>rules_store</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>ValueStoreFactory</name></expr></argument>&gt;</argument_list></name> <macro><name>store_factory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>InfoMap</name><operator>*</operator> <macro><name>info_map</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>QuotaService</name><operator>*</operator> <macro><name>quota_service</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>AppSorting</name><operator>*</operator> <macro><name>app_sorting</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RegisterExtensionWithRequestContexts</name><argument_list>(
      <argument>const Extension* extension</argument>,
      <argument>const base::Closure&amp; callback</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>UnregisterExtensionWithRequestContexts</name><argument_list>(
      <argument>const std::string&amp; extension_id</argument>,
      <argument>const UnloadedExtensionReason reason</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>OneShotEvent</name><operator>&amp;</operator> <macro><name>ready</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>ContentVerifier</name><operator>*</operator> <macro><name>content_verifier</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ExtensionSet</name></expr></argument>&gt;</argument_list></name> <macro><name>GetDependentExtensions</name><argument_list>(
      <argument>const Extension* extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>InstallUpdate</name><argument_list>(<argument>const std::string&amp; extension_id</argument>,
                     <argument>const std::string&amp; public_key</argument>,
                     <argument>const base::FilePath&amp; temp_dir</argument>,
                     <argument>bool install_immediately</argument>,
                     <argument>InstallUpdateCallback install_update_callback</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>FinishDelayedInstallationIfReady</name><argument_list>(<argument>const std::string&amp; extension_id</argument>,
                                        <argument>bool install_immediately</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <call><name>OnExtensionRegisteredWithRequestContexts</name><argument_list>(
      <argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>Extension</name></expr></argument>&gt;</argument_list></name> <name>extension</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context_</name></expr>;  <comment type="line">// Not owned.</comment>

  <comment type="line">// Data to be accessed on the IO thread. Must outlive process_manager_.</comment>
  <expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>InfoMap</name></expr></argument>&gt;</argument_list></name> <name>info_map_</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ServiceWorkerManager</name></expr></argument>&gt;</argument_list></name> <name>service_worker_manager_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RuntimeData</name></expr></argument>&gt;</argument_list></name> <name>runtime_data_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>QuotaService</name></expr></argument>&gt;</argument_list></name> <name>quota_service_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SharedUserScriptMaster</name></expr></argument>&gt;</argument_list></name> <name>shared_user_script_master_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AppSorting</name></expr></argument>&gt;</argument_list></name> <name>app_sorting_</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionLoader</name></expr></argument>&gt;</argument_list></name> <name>extension_loader_</name></expr>;

  <expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>ValueStoreFactory</name></expr></argument>&gt;</argument_list></name> <name>store_factory_</name></expr>;

  <comment type="line">// Signaled when the extension system has completed its startup tasks.</comment>
  <expr><name>base</name><operator>::</operator><name>OneShotEvent</name> <name>ready_</name></expr>;

  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionSystem</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomExtensionSystem</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace extensions</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_SYSTEM_H_</comment>
</unit>
