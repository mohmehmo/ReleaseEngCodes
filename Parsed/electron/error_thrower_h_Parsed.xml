<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/error_thrower.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_ERROR_THROWER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_ERROR_THROWER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string_piece.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ErrorThrower</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>ErrorThrower</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ErrorThrower</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>~</operator><call><name>ErrorThrower</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>ThrowError</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>err_msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ThrowTypeError</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>err_msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ThrowRangeError</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>err_msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ThrowReferenceError</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>err_msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ThrowSyntaxError</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>err_msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <macro><name>isolate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>isolate_</name></expr>;</return> }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>using</name></type> <name>ErrorGenerator</name> <init>=
      <expr><name>v8</name><operator>::</operator><call><call><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>String</name></expr></argument>&gt;</argument_list></name> <name>err_msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Throw</name><argument_list>(<argument><expr><name>ErrorGenerator</name> <name>gen</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>err_msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_ERROR_THROWER_H_</comment>
</unit>
