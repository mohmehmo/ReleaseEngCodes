<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/atom_command_line.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_ATOM_COMMAND_LINE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_ATOM_COMMAND_LINE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/command_line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/build_config.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Singleton to remember the original "argc" and "argv".</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomCommandLine</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>base</name><operator>::</operator><name>CommandLine</name><operator>::</operator><name>StringVector</name><operator>&amp;</operator> <macro><name>argv</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>argv_</name></expr>;</return> }</block></expr></expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Init</name><argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>CommandLine</name><operator>::</operator><name>CharType</name><operator>*</operator><operator>*</operator> <name>argv</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// On Linux the command line has to be read from base::CommandLine since</comment>
  <comment type="line">// it is using zygote.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitializeFromCommandLine</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <label><name>private</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>base</name><operator>::</operator><name>CommandLine</name><operator>::</operator><name>StringVector</name> <name>argv_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_IMPLICIT_CONSTRUCTORS</name><argument_list>(<argument><expr><name>AtomCommandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_ATOM_COMMAND_LINE_H_</comment>
</unit>
