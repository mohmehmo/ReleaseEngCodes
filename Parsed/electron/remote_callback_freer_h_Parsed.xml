<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/api/remote/remote_callback_freer.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_API_REMOTE_REMOTE_CALLBACK_FREER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_API_REMOTE_REMOTE_CALLBACK_FREER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/api/remote/object_life_monitor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RemoteCallbackFreer</name> <range>: <expr><name>public</name> <name>ObjectLifeMonitor</name></expr></range></decl>,
                            <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>WebContentsObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BindTo</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>target</name></expr></argument>,
                     <argument><expr><name>int</name> <name>frame_id</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>context_id</name></expr></argument>,
                     <argument><expr><name>int</name> <name>object_id</name></expr></argument>,
                     <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_conents</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <macro><name>RemoteCallbackFreer</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                      <argument>v8::Local&lt;v8::Object&gt; target</argument>,
                      <argument>int frame_id</argument>,
                      <argument>const std::string&amp; context_id</argument>,
                      <argument>int object_id</argument>,
                      <argument>content::WebContents* web_conents</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>RemoteCallbackFreer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>void</name> <macro><name>RunDestructor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// content::WebContentsObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewDeleted</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>int</name></type> <name>frame_id_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>context_id_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>object_id_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>RemoteCallbackFreer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_API_REMOTE_REMOTE_CALLBACK_FREER_H_</comment>
</unit>
