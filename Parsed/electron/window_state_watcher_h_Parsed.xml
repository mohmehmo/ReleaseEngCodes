<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/x/window_state_watcher.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_X_WINDOW_STATE_WATCHER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_X_WINDOW_STATE_WATCHER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/events/platform/platform_event_observer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window_views.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>WindowStateWatcher</name> <range>: <expr><name>public</name> <name>ui</name><operator>::</operator><name>PlatformEventObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>WindowStateWatcher</name><argument_list>(<argument><expr><name>NativeWindowViews</name><operator>*</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>WindowStateWatcher</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// ui::PlatformEventObserver:</comment>
  <name>void</name> <macro><name>WillProcessEvent</name><argument_list>(<argument>const ui::PlatformEvent&amp; event</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>DidProcessEvent</name><argument_list>(<argument>const ui::PlatformEvent&amp; event</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>bool</name> <call><name>IsWindowStateEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>PlatformEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NativeWindowViews</name><operator>*</operator> <name>window_</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>AcceleratedWidget</name> <name>widget_</name></expr>;

  <expr><name>bool</name> <name>was_minimized_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>was_maximized_</name> <operator>=</operator> <name>false</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WindowStateWatcher</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_X_WINDOW_STATE_WATCHER_H_</comment>
</unit>
