<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_converters/std_converter.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_CONVERTERS_STD_CONVERTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_CONVERTERS_STD_CONVERTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/converter.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<comment type="line">// Make it possible to convert move-only types.</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ConvertToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>T&amp;&amp; input</argument>)</argument_list></macro> <block>{
  <return>return <expr><name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>ToV8</name><argument_list>(
      <argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_FREEBSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name></expr></argument>&gt;</argument_list></name> <block>{  <comment type="line">// NOLINT(runtime/int)</comment>
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>unsigned long val</argument>)</argument_list></macro> <block>{  <comment type="line">// NOLINT(runtime/int)</comment>
    <return>return <expr><name>v8</name><operator>::</operator><name>Integer</name><operator>::</operator><call><name>New</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block>
  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>unsigned long* out</argument>)</argument_list></macro> <block>{  <comment type="line">// NOLINT(runtime/int)</comment>
    <expr><name>auto</name> <name>maybe</name> <operator>=</operator> <call><name><name>val</name><operator>-&gt;</operator><name>IntegerValue</name></name><argument_list>(<argument><expr><call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><call><name><name>maybe</name><operator>.</operator><name>IsNothing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>maybe</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call></block></expr>;
    <return>return <expr><name>true</name></expr>;</return>
  }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>nullptr_t</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>std::nullptr_t val</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>v8</name><operator>::</operator><call><name>Null</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</return></block></expr>
  }</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>const char* val</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>v8</name><operator>::</operator><name>String</name><operator>::</operator><call><name>NewFromUtf8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name>NewStringType</name><operator>::</operator><name>kNormal</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr>;</return></block></expr>
  }</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name><name>char</name><index>[]</index></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>const char* val</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>v8</name><operator>::</operator><name>String</name><operator>::</operator><call><name>NewFromUtf8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name>NewStringType</name><operator>::</operator><name>kNormal</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr>;</return></block></expr>
  }</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>size_t</name> <name>n</name><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name><name>char</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>const char* val</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>v8</name><operator>::</operator><name>String</name><operator>::</operator><call><name>NewFromUtf8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name>NewStringType</name><operator>::</operator><name>kNormal</name></expr></argument>,
                                   <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr>;</return></block></expr>
  }</block></expr></expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Array</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>v8::Local&lt;v8::Array&gt; val</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>val</name></expr>;</return></block></expr>
  }</block>
  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>v8::Local&lt;v8::Array&gt;* out</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>val</name><operator>-&gt;</operator><name>IsArray</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Array</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Cast</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  }
}<empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>String</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>v8::Local&lt;v8::String&gt; val</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>val</name></expr>;</return></block></expr>
  }</block>
  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>v8::Local&lt;v8::String&gt;* out</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>val</name><operator>-&gt;</operator><name>IsString</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>String</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Cast</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  }
}<empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>const std::set&lt;T&gt;&amp; val</argument>)</argument_list></macro> <block>{
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Array</name></expr></argument>&gt;</argument_list></name> <call><name>result</name><argument_list>(
        <argument><expr><name>v8</name><operator>::</operator><name>Array</name><operator>::</operator><call><name>New</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>val</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>auto</name> <name>context</name> <operator>=</operator> <call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>typename</name> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>it</name></expr>;
    <expr><name>int</name> <name>i</name></expr>;
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>it</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>val</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>result</name><operator>-&gt;</operator><name>Set</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>ToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></expr></expr_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>out</name></expr></argument>)</argument_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>val</name><operator>-&gt;</operator><name>IsArray</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>context</name> <init>= <expr><call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>result</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Array</name></expr></argument>&gt;</argument_list></name> <call><name>array</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Array</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Cast</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><call><name><name>array</name><operator>-&gt;</operator><name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>T</name></type> <name>item</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>FromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>,
                                <argument><expr><call><name><name>array</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>out</name><operator>-&gt;</operator><name>swap</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>K</name></expr><operator>,</operator> <expr><name>typename</name> <name>V</name><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; value</argument>,
                     <argument>std::map&lt;K</argument>, <argument>V&gt;* out</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>value</name><operator>-&gt;</operator><name>IsObject</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <call><name><name>out</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></block></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name> <operator>=</operator> <call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>obj</name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>As</name></name><operator>&lt;</operator><name>v8</name><operator>::</operator><name>Object</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Array</name></expr></argument>&gt;</argument_list></name> <name>keys</name> <operator>=</operator> <call><name><name>obj</name><operator>-&gt;</operator><name>GetPropertyNames</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>keys</name><operator>-&gt;</operator><name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>maybe_v8key</name> <operator>=</operator> <call><name><name>keys</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>maybe_v8key</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>v8key</name> <operator>=</operator> <call><name><name>maybe_v8key</name><operator>.</operator><name>ToLocalChecked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>maybe_v8value</name> <operator>=</operator> <call><name><name>obj</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v8key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>maybe_v8value</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>K</name></type> <name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>V</name></type> <name>value</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>v8key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>||</operator>
          <operator>!</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><call><name><name>maybe_v8value</name><operator>.</operator><name>ToLocalChecked</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><name>key</name></expr>]</index> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  }

  static <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>const std::map&lt;K</argument>, <argument>V&gt;&amp; dict</argument>)</argument_list></macro> <block>{
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>obj</name> <operator>=</operator> <name>v8</name><operator>::</operator><name>Object</name><operator>::</operator><call><name>New</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name> <operator>=</operator> <call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr>;
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name>dict</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>obj</name><operator>-&gt;</operator><name>Set</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>IsNothing</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
  }
}<empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_CONVERTERS_STD_CONVERTER_H_</comment>
</unit>
