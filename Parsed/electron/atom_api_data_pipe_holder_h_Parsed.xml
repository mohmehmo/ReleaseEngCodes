<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_data_pipe_holder.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_DATA_PIPE_HOLDER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_DATA_PIPE_HOLDER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/wrappable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/data_element.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/data_pipe_getter.mojom.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<comment type="line">// Retains reference to the data pipe.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>DataPipeHolder</name> <range>: <expr><name>public</name> <name>gin</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>DataPipeHolder</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>gin</name><operator>::</operator><name>WrapperInfo</name> <name>kWrapperInfo</name></expr>;

  <expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>DataPipeHolder</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>DataElement</name><operator>&amp;</operator> <name>element</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>DataPipeHolder</name></expr></argument>&gt;</argument_list></name> <call><name>From</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                          <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Read all data at once.</comment>
  <comment type="line">//</comment>
  <comment type="line">// TODO(zcbenz): This is apparently not suitable for really large data, but</comment>
  <comment type="line">// no one has complained about it yet.</comment>
  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>ReadAll</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// The unique ID that can be used to receive the object.</comment>
  <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>id</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>id_</name></expr>;</return> }</block>

 <name>private</name><operator>:</operator>
  <name>explicit</name> <call><name>DataPipeHolder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>DataElement</name><operator>&amp;</operator> <name>element</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>DataPipeHolder</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>std</name><operator>::</operator><name>string</name> <name>id_</name></expr>;
  <expr><name>mojo</name><operator>::</operator><name><name>Remote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>DataPipeGetter</name></expr></argument>&gt;</argument_list></name> <name>data_pipe_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>DataPipeHolder</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_DATA_PIPE_HOLDER_H_</comment>
</unit>
