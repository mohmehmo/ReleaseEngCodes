<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_converters/gfx_converter.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_CONVERTERS_GFX_CONVERTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_CONVERTERS_GFX_CONVERTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/converter.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>display</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Display</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PointF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Rect</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gfx</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>Point</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>gfx</name><operator>::</operator><name>Point</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>PointF</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>PointF</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>gfx</name><operator>::</operator><name>PointF</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>Size</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>gfx</name><operator>::</operator><name>Size</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>Rect</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>gfx</name><operator>::</operator><name>Rect</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>display</name><operator>::</operator><name>Display</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>display</name><operator>::</operator><name>Display</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>display</name><operator>::</operator><name>Display</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_CONVERTERS_GFX_CONVERTER_H_</comment>
</unit>
