<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_native_theme.h"><comment type="line">// Copyright (c) 2019 Slack Technologies, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_NATIVE_THEME_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_NATIVE_THEME_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/event_emitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/native_theme/native_theme.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/native_theme/native_theme_observer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeTheme</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>EventEmitter</name><argument_list type="generic">&lt;<argument><expr><name>NativeTheme</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
                    <decl><type ref="prev"/><name>public</name> <name>ui</name>::<name>NativeThemeObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><call><name>NativeTheme</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>*</operator> <name>theme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>NativeTheme</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SetThemeSource</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>::</operator><name>ThemeSource</name> <name>override</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>UpdateMacOSAppearanceForOverrideValue</name><argument_list>(
      <argument><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>::</operator><name>ThemeSource</name> <name>override</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>::</operator><name>ThemeSource</name> <macro><name>GetThemeSource</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>bool</name></type> <name>ShouldUseDarkColors</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>ShouldUseHighContrastColors</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>ShouldUseInvertedColorScheme</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// ui::NativeThemeObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnNativeThemeUpdated</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>*</operator> <name>theme</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>OnNativeThemeUpdatedOnUI</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>*</operator> <name>theme_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NativeTheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>::</operator><name>ThemeSource</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>NativeTheme</name><operator>::</operator><name>ThemeSource</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>::</operator><name>ThemeSource</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_NATIVE_THEME_H_</comment>
</unit>
