<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/inspectable_web_contents_view.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Copyright (c) 2013 Adam Roben &lt;adam@roben.org&gt;. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/native_widget_types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>DevToolsContentsResizingStrategy</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TOOLKIT_VIEWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>namespace</name></type> <name>views</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>View</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsViewDelegate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsView</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>InspectableWebContentsView</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>delegate_</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <operator>~</operator><macro><name>InspectableWebContentsView</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// The delegate manages its own life.</comment>
  <name>void</name> <macro><name>SetDelegate</name><argument_list>(<argument>InspectableWebContentsViewDelegate* delegate</argument>)</argument_list></macro> <block>{
    <expr><name>delegate_</name> <operator>=</operator> <name>delegate</name></expr>;
  }</block>
  <name>InspectableWebContentsViewDelegate</name><operator>*</operator> <macro><name>GetDelegate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>delegate_</name></expr>;</return> }</block></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TOOLKIT_VIEWS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Returns the container control, which has devtools view attached.</comment>
  <expr_stmt><expr><name>virtual</name> <name>views</name><operator>::</operator><name>View</name><operator>*</operator> <call><name>GetView</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Returns the web view control, which can be used by the</comment>
  <comment type="line">// GetInitiallyFocusedView() to set initial focus to web view.</comment>
  <expr_stmt><expr><name>virtual</name> <name>views</name><operator>::</operator><name>View</name><operator>*</operator> <call><name>GetWebView</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>NativeView</name> <macro><name>GetNativeView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ShowDevTools</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>activate</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <comment type="line">// Hide the DevTools view.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>CloseDevTools</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsDevToolsViewShowing</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsDevToolsViewFocused</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetIsDocked</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>docked</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>activate</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetContentsResizingStrategy</name><parameter_list>(
      <parameter><decl><type><specifier>const</specifier> <name>DevToolsContentsResizingStrategy</name><modifier>&amp;</modifier></type> <name>strategy</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>InspectableWebContentsViewDelegate</name><modifier>*</modifier></type> <name>delegate_</name></decl>;</decl_stmt>  <comment type="line">// weak references.</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_VIEW_H_</comment>
</unit>
