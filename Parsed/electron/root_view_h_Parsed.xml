<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/root_view.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_ROOT_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_ROOT_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/accelerator_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/geometry/insets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/view_tracker.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<struct_decl>struct <name>NativeWebKeyboardEvent</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomMenuModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MenuBar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NativeWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RootView</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>View</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>RootView</name><argument_list>(<argument><expr><name>NativeWindow</name><operator>*</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>RootView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <call><name>SetMenu</name><argument_list>(<argument><expr><name>AtomMenuModel</name><operator>*</operator> <name>menu_model</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <macro><name>HasMenu</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>int</name> <macro><name>GetMenuBarHeight</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>void</name> <macro><name>SetAutoHideMenuBar</name><argument_list>(<argument>bool auto_hide</argument>)</argument_list></macro></expr>;
  <expr><name>bool</name> <macro><name>IsMenuBarAutoHide</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>void</name> <macro><name>SetMenuBarVisibility</name><argument_list>(<argument>bool visible</argument>)</argument_list></macro></expr>;
  <expr><name>bool</name> <macro><name>IsMenuBarVisible</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>void</name> <call><name>HandleKeyEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>NativeWebKeyboardEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>ResetAltState</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>RestoreFocus</name><argument_list>()</argument_list></call></expr>;
  <comment type="line">// Register/Unregister accelerators supported by the menu model.</comment>
  <expr><name>void</name> <call><name>RegisterAcceleratorsWithFocusManager</name><argument_list>(<argument><expr><name>AtomMenuModel</name><operator>*</operator> <name>menu_model</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>UnregisterAcceleratorsWithFocusManager</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// views::View:</comment>
  <expr><name>void</name> <macro><name>Layout</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetMinimumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetMaximumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>AcceleratorPressed</name><argument_list>(<argument>const ui::Accelerator&amp; accelerator</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// Parent window, weak ref.</comment>
  <name>NativeWindow</name><operator>*</operator> <name>window_</name></expr>;

  <comment type="line">// Menu bar.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MenuBar</name></expr></argument>&gt;</argument_list></name> <name>menu_bar_</name></expr>;
  <expr><name>bool</name> <name>menu_bar_autohide_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>menu_bar_visible_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>menu_bar_alt_pressed_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// Map from accelerator to menu item's command id.</comment>
  <expr><name>accelerator_util</name><operator>::</operator><name>AcceleratorTable</name> <name>accelerator_table_</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>ViewTracker</name></expr></argument>&gt;</argument_list></name> <name>last_focused_view_tracker_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>RootView</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_ROOT_VIEW_H_</comment>
</unit>
