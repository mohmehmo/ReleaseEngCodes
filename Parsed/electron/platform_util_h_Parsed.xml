<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/platform_util.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_PLATFORM_UTIL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_PLATFORM_UTIL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback_forward.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/build_config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>GURL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>platform_util</name> <block>{<block_content>

<typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>OpenCallback</name></expr>;</expr_stmt></typedef>

<comment type="line">// Show the given file in a file manager. If possible, select the file.</comment>
<comment type="line">// Must be called from the UI thread.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>ShowItemInFolder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>full_path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Open the given file in the desktop's default manner.</comment>
<comment type="line">// Must be called from the UI thread.</comment>
<decl_stmt><decl><type><name>void</name></type> <name>OpenPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>full_path</name></expr></argument>, <argument><expr><name>OpenCallback</name> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<struct>struct <name>OpenExternalOptions</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>activate</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>working_dir</name></expr>;</expr_stmt>
}</block>;</struct>

<comment type="line">// Open the given external protocol URL in the desktop's default manner.</comment>
<comment type="line">// (For example, mailto: URLs in the default mail user agent.)</comment>
<function_decl><type><name>void</name></type> <name>OpenExternal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GURL</name><modifier>&amp;</modifier></type> <name>url</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>OpenExternalOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>,
                  <parameter><decl><type><name>OpenCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Move a file to trash.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>MoveItemToTrash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>full_path</name></expr></argument>, <argument><expr><name>bool</name> <name>delete_on_fail</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Beep</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>GetLoginItemEnabled</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SetLoginItemEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// Returns a success flag.</comment>
<comment type="line">// Unlike libgtkui, does *not* use "chromium-browser.desktop" as a fallback.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>GetDesktopName</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>setme</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace platform_util</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_PLATFORM_UTIL_H_</comment>
</unit>
