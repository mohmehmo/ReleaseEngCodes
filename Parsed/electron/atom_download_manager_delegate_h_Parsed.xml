<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/atom_download_manager_delegate.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ATOM_DOWNLOAD_MANAGER_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ATOM_DOWNLOAD_MANAGER_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/download_manager_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/file_dialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/dictionary.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DownloadManager</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomDownloadManagerDelegate</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>DownloadManagerDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>using</name> <name>CreateDownloadPathCallback</name> <operator>=</operator>
      <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

  <expr><name>explicit</name> <call><name>AtomDownloadManagerDelegate</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>DownloadManager</name><operator>*</operator> <name>manager</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomDownloadManagerDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// content::DownloadManagerDelegate:</comment>
  <expr><name>void</name> <macro><name>Shutdown</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>DetermineDownloadTarget</name><argument_list>(
      <argument>download::DownloadItem* download</argument>,
      <argument>const content::DownloadTargetCallback&amp; callback</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>ShouldOpenDownload</name><argument_list>(
      <argument>download::DownloadItem* download</argument>,
      <argument>const content::DownloadOpenDelayedCallback&amp; callback</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>GetNextId</name><argument_list>(<argument>const content::DownloadIdCallback&amp; callback</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// Get the save path set on the associated api::DownloadItem object</comment>
  <name>void</name> <call><name>GetItemSavePath</name><argument_list>(<argument><expr><name>download</name><operator>::</operator><name>DownloadItem</name><operator>*</operator> <name>item</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>*</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>GetItemSaveDialogOptions</name><argument_list>(<argument><expr><name>download</name><operator>::</operator><name>DownloadItem</name><operator>*</operator> <name>item</name></expr></argument>,
                                <argument><expr><name>file_dialog</name><operator>::</operator><name>DialogSettings</name><operator>*</operator> <name>settings</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>OnDownloadPathGenerated</name><argument_list>(<argument>uint32_t download_id</argument>,
                               <argument>const content::DownloadTargetCallback&amp; callback</argument>,
                               <argument>const base::FilePath&amp; default_path</argument>)</argument_list></macro></expr>;

  <expr><name>void</name> <macro><name>OnDownloadSaveDialogDone</name><argument_list>(
      <argument>uint32_t download_id</argument>,
      <argument>const content::DownloadTargetCallback&amp; download_callback</argument>,
      <argument>gin_helper::Dictionary result</argument>)</argument_list></macro></expr>;

  <expr><name>content</name><operator>::</operator><name>DownloadManager</name><operator>*</operator> <name>download_manager_</name></expr>;
  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>AtomDownloadManagerDelegate</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomDownloadManagerDelegate</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ATOM_DOWNLOAD_MANAGER_DELEGATE_H_</comment>
</unit>
