<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/object_template_builder.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_OBJECT_TEMPLATE_BUILDER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_OBJECT_TEMPLATE_BUILDER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/function_template.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<comment type="line">// This class works like gin::ObjectTemplateBuilder, but operates on existing</comment>
<comment type="line">// prototype template instead of creating a new one.</comment>
<comment type="line">//</comment>
<comment type="line">// It also uses gin_helper::CreateFunctionTemplate for function templates to</comment>
<comment type="line">// support gin_helper types.</comment>
<comment type="line">//</comment>
<comment type="line">// TODO(zcbenz): We should patch gin::ObjectTemplateBuilder to provide the same</comment>
<comment type="line">// functionality after removing gin_helper/function_template.h.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>ObjectTemplateBuilder</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>ObjectTemplateBuilder</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                        <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>ObjectTemplate</name></expr></argument>&gt;</argument_list></name> <name>templ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>ObjectTemplateBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// It's against Google C++ style to return a non-const ref, but we take some</comment>
  <comment type="line">// poetic license here in order that all calls to Set() can be via the '.'</comment>
  <comment type="line">// operator and line up nicely.</comment>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>ObjectTemplateBuilder</name><modifier>&amp;</modifier></type> <name>SetValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>StringPiece</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>T</name> <name>val</name></expr></argument>)</argument_list> <block>{<block_content>
    <return>return <expr><call><name>SetImpl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// In the following methods, T and U can be function pointer, member function</comment>
  <comment type="line">// pointer, base::Callback, or v8::FunctionTemplate. Most clients will want to</comment>
  <comment type="line">// use one of the first two options. Also see gin::CreateFunctionTemplate()</comment>
  <comment type="line">// for creating raw function templates.</comment>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>ObjectTemplateBuilder</name><modifier>&amp;</modifier></type> <name>SetMethod</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>StringPiece</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
    <return>return <expr><call><name>SetImpl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>CallbackTraits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>CreateTemplate</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>ObjectTemplateBuilder</name><modifier>&amp;</modifier></type> <name>SetProperty</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>StringPiece</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                     <argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>getter</name></expr></argument>)</argument_list> <block>{<block_content>
    <return>return <expr><call><name>SetPropertyImpl</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                           <argument><expr><name><name>CallbackTraits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>CreateTemplate</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>v8</name><operator>::</operator><call><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name>
  <name>ObjectTemplateBuilder</name><modifier>&amp;</modifier></type> <name>SetProperty</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>StringPiece</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                     <argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>getter</name></expr></argument>,
                                     <argument><expr><specifier>const</specifier> <name>U</name><operator>&amp;</operator> <name>setter</name></expr></argument>)</argument_list> <block>{<block_content>
    <return>return <expr><call><name>SetPropertyImpl</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                           <argument><expr><name><name>CallbackTraits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>CreateTemplate</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name><name>CallbackTraits</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>CreateTemplate</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>ObjectTemplate</name></expr></argument>&gt;</argument_list></name> <call><name>Build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>ObjectTemplateBuilder</name><modifier>&amp;</modifier></type> <name>SetImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>StringPiece</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                 <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Data</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ObjectTemplateBuilder</name><modifier>&amp;</modifier></type> <name>SetPropertyImpl</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>StringPiece</name><operator>&amp;</operator> <name>name</name></expr></argument>,
      <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>getter</name></expr></argument>,
      <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>setter</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name></expr>;</expr_stmt>

  <comment type="line">// ObjectTemplateBuilder should only be used on the stack.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>ObjectTemplate</name></expr></argument>&gt;</argument_list></name> <name>template_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_OBJECT_TEMPLATE_BUILDER_H_</comment>
</unit>
