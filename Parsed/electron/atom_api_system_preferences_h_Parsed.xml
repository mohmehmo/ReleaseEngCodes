<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_system_preferences.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_SYSTEM_PREFERENCES_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_SYSTEM_PREFERENCES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/error_thrower.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/event_emitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/promise.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/browser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/browser_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/sys_color_change_listener.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <name>NotificationCenterKind</name> <block>{
  <decl><name>kNSDistributedNotificationCenter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>kNSNotificationCenter</name></decl>,
  <decl><name>kNSWorkspaceNotificationCenter</name></decl>,
}</block>;</enum>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>SystemPreferences</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>EventEmitter</name><argument_list type="generic">&lt;<argument><expr><name>SystemPreferences</name></expr></argument>&gt;</argument_list></name></expr></range></decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    ,
                          <decl><type ref="prev"/><name>public</name> <name>BrowserObserver</name></decl>,
                          <decl><type ref="prev"/><name>public</name> <name>gfx</name>::<name>SysColorChangeListener</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>SystemPreferences</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetAccentColor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetColor</name><argument_list>(<argument>gin_helper::ErrorThrower thrower</argument>,
                       <argument>const std::string&amp; color</argument>)</argument_list></macro></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function_decl><type><name>bool</name></type> <name>IsAeroGlassEnabled</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>InitializeWindow</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// gfx::SysColorChangeListener:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnSysColorChange</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// BrowserObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnFinishLaunching</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>launch_info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>using</name></type> <name>NotificationCallback</name> <init>= <expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;
      <argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator>, <name>base</name><operator>::</operator><name>DictionaryValue</name>, <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>PostNotification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                        <argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name> <name>user_info</name></expr></argument>,
                        <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>SubscribeNotification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>NotificationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>UnsubscribeNotification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>PostLocalNotification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                             <argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name> <name>user_info</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>SubscribeLocalNotification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                 <argument><expr><specifier>const</specifier> <name>NotificationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>UnsubscribeLocalNotification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>request_id</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>PostWorkspaceNotification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                 <argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name> <name>user_info</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>SubscribeWorkspaceNotification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                     <argument><expr><specifier>const</specifier> <name>NotificationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>UnsubscribeWorkspaceNotification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>request_id</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetUserDefault</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RegisterDefaults</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetUserDefault</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>,
                      <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RemoveUserDefault</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>bool</name></type> <name>IsSwipeTrackingFromScrollEventsEnabled</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetSystemColor</name><argument_list>(<argument>gin_helper::ErrorThrower thrower</argument>,
                             <argument>const std::string&amp; color</argument>)</argument_list></macro></expr>;</expr_stmt>

  <function_decl><type><name>bool</name></type> <name>CanPromptTouchID</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>PromptTouchID</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsTrustedAccessibilityClient</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>prompt</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// TODO(codebytere): Write tests for these methods once we</comment>
  <comment type="line">// are running tests on a Mojave machine</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetMediaAccessStatus</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>media_type</name></expr></argument>,
                                   <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>AskForMediaAccess</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                           <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO(MarshallOfSound): Write tests for these methods once we</comment>
  <comment type="line">// are running tests on a Mojave machine</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetEffectiveAppearance</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetAppLevelAppearance</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAppLevelAppearance</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl><type><name>bool</name></type> <name>IsDarkMode</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsInvertedColorScheme</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsHighContrastColorScheme</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetAnimationSettings</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label><name>protected</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>SystemPreferences</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>SystemPreferences</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>DoSubscribeNotification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>NotificationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>,
                              <argument><expr><name>NotificationCenterKind</name> <name>kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>DoUnsubscribeNotification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>request_id</name></decl></parameter>, <parameter><decl><type><name>NotificationCenterKind</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <label><name>private</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Static callback invoked when a message comes in to our messaging window.</comment>
  <function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProcStatic</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,
                                        <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
                                        <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>,
                                        <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,
                           <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
                           <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>,
                           <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// The window class of |window_|.</comment>
  <decl_stmt><decl><type><name>ATOM</name></type> <name>atom_</name></decl>;</decl_stmt>

  <comment type="line">// The handle of the module that contains the window procedure of |window_|.</comment>
  <decl_stmt><decl><type><name>HMODULE</name></type> <name>instance_</name></decl>;</decl_stmt>

  <comment type="line">// The window used for processing events.</comment>
  <decl_stmt><decl><type><name>HWND</name></type> <name>window_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>current_color_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>invertered_color_scheme_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>high_contrast_color_scheme_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>ScopedSysColorChangeListener</name></expr></argument>&gt;</argument_list></name> <name>color_change_listener_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>SystemPreferences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_SYSTEM_PREFERENCES_H_</comment>
</unit>
