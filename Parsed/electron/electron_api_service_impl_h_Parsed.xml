<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/electron_api_service_impl.h"><comment type="line">// Copyright (c) 2019 Slack Technologies, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_ELECTRON_API_SERVICE_IMPL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_ELECTRON_API_SERVICE_IMPL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/shell/common/api/api.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/associated_receiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/pending_associated_receiver.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RendererClientBase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ElectronApiServiceImpl</name> <range>: <expr><name>public</name> <name>mojom</name><operator>::</operator><name>ElectronRenderer</name></expr></range></decl>,
                               <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>RenderFrameObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>ElectronApiServiceImpl</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>,
                         <argument><expr><name>RendererClientBase</name><operator>*</operator> <name>renderer_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>BindTo</name><argument_list>(
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingAssociatedReceiver</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>ElectronRenderer</name></expr></argument>&gt;</argument_list></name> <name>receiver</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>Message</name><argument_list>(<argument><expr><name>bool</name> <name>internal</name></expr></argument>,
               <argument><expr><name>bool</name> <name>send_to_all</name></expr></argument>,
               <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>channel</name></expr></argument>,
               <argument><expr><name>blink</name><operator>::</operator><name>CloneableMessage</name> <name>arguments</name></expr></argument>,
               <argument><expr><name>int32_t</name> <name>sender_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_REMOTE_MODULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>DereferenceRemoteJSCallback</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>context_id</name></expr></argument>,
                                   <argument><expr><name>int32_t</name> <name>object_id</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>void</name></type> <name>UpdateCrashpadPipeName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>pipe_name</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TakeHeapSnapshot</name><argument_list>(<argument><expr><name>mojo</name><operator>::</operator><name>ScopedHandle</name> <name>file</name></expr></argument>,
                        <argument><expr><name>TakeHeapSnapshotCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>ElectronApiServiceImpl</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWeakPtr</name><argument_list>()</argument_list></macro> <block>{
    <return>return <expr><call><name><name>weak_factory_</name><operator>.</operator><name>GetWeakPtr</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><operator>~</operator><macro><name>ElectronApiServiceImpl</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// RenderFrameObserver implementation.</comment>
  <expr_stmt><expr><name>void</name> <macro><name>DidCreateDocumentElement</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnDestruct</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>OnConnectionError</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Whether the DOM document element has been created.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>document_created_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>AssociatedReceiver</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>ElectronRenderer</name></expr></argument>&gt;</argument_list></name> <name>receiver_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>RendererClientBase</name><modifier>*</modifier></type> <name>renderer_client_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>ElectronApiServiceImpl</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ElectronApiServiceImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_ELECTRON_API_SERVICE_IMPL_H_</comment>
</unit>
