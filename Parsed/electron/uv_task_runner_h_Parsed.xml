<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/app/uv_task_runner.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_APP_UV_TASK_RUNNER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_APP_UV_TASK_RUNNER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/location.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/single_thread_task_runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uv.h"</cpp:file></cpp:include>  <comment type="line">// NOLINT(build/include)</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// TaskRunner implementation that posts tasks into libuv's default loop.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>UvTaskRunner</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>SingleThreadTaskRunner</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>UvTaskRunner</name><argument_list>(<argument><expr><name>uv_loop_t</name><operator>*</operator> <name>loop</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// base::SingleThreadTaskRunner:</comment>
  <expr><name>bool</name> <macro><name>PostDelayedTask</name><argument_list>(<argument>const base::Location&amp; from_here</argument>,
                       <argument>base::OnceClosure task</argument>,
                       <argument>base::TimeDelta delay</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>RunsTasksInCurrentSequence</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>PostNonNestableDelayedTask</name><argument_list>(<argument>const base::Location&amp; from_here</argument>,
                                  <argument>base::OnceClosure task</argument>,
                                  <argument>base::TimeDelta delay</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <operator>~</operator><macro><name>UvTaskRunner</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><specifier>static</specifier> <name>void</name> <call><name>OnTimeout</name><argument_list>(<argument><expr><name>uv_timer_t</name><operator>*</operator> <name>timer</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>void</name> <call><name>OnClose</name><argument_list>(<argument><expr><name>uv_handle_t</name><operator>*</operator> <name>handle</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>uv_loop_t</name><operator>*</operator> <name>loop_</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uv_timer_t</name><operator>*</operator></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name></expr></argument>&gt;</argument_list></name> <name>tasks_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>UvTaskRunner</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_APP_UV_TASK_RUNNER_H_</comment>
</unit>
