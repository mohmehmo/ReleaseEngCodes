<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/win/atom_desktop_window_tree_host_win.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_WIN_ATOM_DESKTOP_WINDOW_TREE_HOST_WIN_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_WIN_ATOM_DESKTOP_WINDOW_TREE_HOST_WIN_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window_views.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/widget/desktop_aura/desktop_window_tree_host_win.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomDesktopWindowTreeHostWin</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>DesktopWindowTreeHostWin</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomDesktopWindowTreeHostWin</name><argument_list>(
      <argument><expr><name>NativeWindowViews</name><operator>*</operator> <name>native_window_view</name></expr></argument>,
      <argument><expr><name>views</name><operator>::</operator><name>DesktopNativeWidgetAura</name><operator>*</operator> <name>desktop_native_widget_aura</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomDesktopWindowTreeHostWin</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <name>bool</name> <macro><name>PreHandleMSG</name><argument_list>(<argument>UINT message</argument>,
                    <argument>WPARAM w_param</argument>,
                    <argument>LPARAM l_param</argument>,
                    <argument>LRESULT* result</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>HasNativeFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>GetClientAreaInsets</name><argument_list>(<argument>gfx::Insets* insets</argument>,
                           <argument>HMONITOR monitor</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>NativeWindowViews</name><operator>*</operator> <name>native_window_view_</name></expr>;  <comment type="line">// weak ref</comment>

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomDesktopWindowTreeHostWin</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_WIN_ATOM_DESKTOP_WINDOW_TREE_HOST_WIN_H_</comment>
</unit>
