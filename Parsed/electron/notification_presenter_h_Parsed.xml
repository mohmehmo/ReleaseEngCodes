<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/notification_presenter.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_NOTIFICATION_PRESENTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_NOTIFICATION_PRESENTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Notification</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NotificationDelegate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NotificationPresenter</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>NotificationPresenter</name><modifier>*</modifier></type> <name>Create</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>NotificationPresenter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>Notification</name></expr></argument>&gt;</argument_list></name> <call><name>CreateNotification</name><argument_list>(
      <argument><expr><name>NotificationDelegate</name><operator>*</operator> <name>delegate</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>notification_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>CloseNotificationWithId</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>notification_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>Notification</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>notifications</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>notifications_</name></expr>;</return> }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><call><name>NotificationPresenter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>Notification</name><modifier>*</modifier></type> <name>CreateNotificationObject</name><parameter_list>(
      <parameter><decl><type><name>NotificationDelegate</name><modifier>*</modifier></type> <name>delegate</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Notification</name></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>RemoveNotification</name><parameter_list>(<parameter><decl><type><name>Notification</name><modifier>*</modifier></type> <name>notification</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>Notification</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>notifications_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NotificationPresenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_NOTIFICATION_PRESENTER_H_</comment>
</unit>
