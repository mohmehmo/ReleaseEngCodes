<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/session_preferences.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_SESSION_PREFERENCES_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_SESSION_PREFERENCES_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/supports_user_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_context.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SessionPreferences</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>SupportsUserData</name><operator>::</operator><name>Data</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>SessionPreferences</name><operator>*</operator> <call><name>FromBrowserContext</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>context</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>::</operator><name>StringType</name></expr></argument>&gt;</argument_list></name> <call><name>GetValidPreloads</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>context</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>explicit</name> <call><name>SessionPreferences</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>context</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>SessionPreferences</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>set_preloads</name><argument_list>(<argument>const std::vector&lt;base::FilePath::StringType&gt;&amp; preloads</argument>)</argument_list></macro> <block>{
    <expr><name>preloads_</name> <operator>=</operator> <name>preloads</name></expr>;
  }</block>
  <specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>::</operator><name>StringType</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>preloads</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>preloads_</name></expr>;</return>
  }</block>

 <name>private</name><operator>:</operator>
  <comment type="line">// The user data key.</comment>
  <specifier>static</specifier> <name>int</name> <name>kLocatorKey</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>FilePath</name><operator>::</operator><name>StringType</name></expr></argument>&gt;</argument_list></name> <name>preloads_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_SESSION_PREFERENCES_H_</comment>
</unit>
