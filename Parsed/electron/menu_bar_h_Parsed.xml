<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/menu_bar.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_MENU_BAR_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_MENU_BAR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/atom_menu_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/views/menu_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/views/root_view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/accessible_pane_view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/controls/button/menu_button_listener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/focus/focus_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/view.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>views</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Button</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MenuButton</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace views</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MenuBarColorUpdater</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>FocusChangeListener</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>MenuBarColorUpdater</name><argument_list>(<argument><expr><name>MenuBar</name><operator>*</operator> <name>menu_bar</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>MenuBarColorUpdater</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>OnDidChangeFocus</name><argument_list>(<argument>views::View* focused_before</argument>,
                        <argument>views::View* focused_now</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnWillChangeFocus</name><argument_list>(<argument>views::View* focused_before</argument>,
                         <argument>views::View* focused_now</argument>)</argument_list></macro> <name>override</name> <block>{}</block>

 <name>private</name><operator>:</operator>
  <name>MenuBar</name><operator>*</operator> <name>menu_bar_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MenuBar</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>AccessiblePaneView</name></expr></range></decl>,
                <decl><type ref="prev"/><name>public</name> <name>views</name>::<name>MenuButtonListener</name></decl>,
                <decl><type ref="prev"/><name>public</name> <name>electron</name>::<name>MenuDelegate</name>::<name>Observer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kViewClassName</name><index>[]</index></name></decl>;</decl_stmt>

  <function_decl><type><name>explicit</name></type> <name>MenuBar</name><parameter_list>(<parameter><decl><type><name>RootView</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><operator>~</operator><macro><name>MenuBar</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// Replaces current menu with a new one.</comment>
  <function_decl><type><name>void</name></type> <name>SetMenu</name><parameter_list>(<parameter><decl><type><name>AtomMenuModel</name><modifier>*</modifier></type> <name>menu_model</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Shows underline under accelerators.</comment>
  <function_decl><type><name>void</name></type> <name>SetAcceleratorVisibility</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Returns true if the submenu has accelerator |key|</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>HasAccelerator</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>char16</name> <name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Shows the submenu whose accelerator is |key|.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>ActivateAccelerator</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>char16</name> <name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Returns there are how many items in the root menu.</comment>
  <expr_stmt><expr><name>int</name> <macro><name>GetItemCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Get the menu under specified screen point.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>GetMenuButtonFromScreenPoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>point</name></expr></argument>,
                                    <argument><expr><name>AtomMenuModel</name><operator>*</operator><operator>*</operator> <name>menu_model</name></expr></argument>,
                                    <argument><expr><name>views</name><operator>::</operator><name>MenuButton</name><operator>*</operator><operator>*</operator> <name>button</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// electron::MenuDelegate::Observer:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnBeforeExecuteCommand</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnMenuClosed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// views::AccessiblePaneView:</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>AcceleratorPressed</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>Accelerator</name><operator>&amp;</operator> <name>accelerator</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <comment type="line">// views::View:</comment>
  <expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>GetClassName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// views::MenuButtonListener:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnMenuButtonClicked</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>Button</name><operator>*</operator> <name>source</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>point</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>Event</name><operator>*</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnThemeChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>SetPaneFocus</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>initial_focus</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>RemovePaneFocus</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>MenuBarColorUpdater</name></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>RebuildChildren</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>UpdateViewColors</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>RefreshColorCache</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>SkColor</name></type> <name>background_color_</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>SkColor</name></type> <name>enabled_color_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SkColor</name></type> <name>disabled_color_</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>RootView</name><modifier>*</modifier></type> <name>window_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>AtomMenuModel</name><modifier>*</modifier></type> <name>menu_model_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>View</name><modifier>*</modifier></type> <name>FindAccelChild</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>char16</name> <name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>has_focus_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MenuBarColorUpdater</name></expr></argument>&gt;</argument_list></name> <name>color_updater_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>MenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_MENU_BAR_H_</comment>
</unit>
