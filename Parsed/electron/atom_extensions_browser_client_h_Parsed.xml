<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/extensions/atom_extensions_browser_client.h"><comment type="line">// Copyright 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSIONS_BROWSER_CLIENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSIONS_BROWSER_CLIENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/build_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/browser/extensions_browser_client.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>PrefService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ExtensionsAPIClient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>KioskDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProcessManagerDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProcessMap</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace extensions</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// An ExtensionsBrowserClient that supports a single content::BrowserContext</comment>
<comment type="line">// with no related incognito context.</comment>
<comment type="line">// Must be initialized via InitWithBrowserContext() once the BrowserContext is</comment>
<comment type="line">// created.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionsBrowserClient</name> <range>: <expr><name>public</name> <name>extensions</name><operator>::</operator><name>ExtensionsBrowserClient</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomExtensionsBrowserClient</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomExtensionsBrowserClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// ExtensionsBrowserClient overrides:</comment>
  <expr><name>bool</name> <macro><name>IsShuttingDown</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>AreExtensionsDisabled</name><argument_list>(<argument>const base::CommandLine&amp; command_line</argument>,
                             <argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsValidContext</name><argument_list>(<argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsSameContext</name><argument_list>(<argument>content::BrowserContext* first</argument>,
                     <argument>content::BrowserContext* second</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>HasOffTheRecordContext</name><argument_list>(<argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <macro><name>GetOffTheRecordContext</name><argument_list>(
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <macro><name>GetOriginalContext</name><argument_list>(
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsGuestSession</name><argument_list>(<argument>content::BrowserContext* context</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsExtensionIncognitoEnabled</name><argument_list>(
      <argument>const std::string&amp; extension_id</argument>,
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>CanExtensionCrossIncognito</name><argument_list>(
      <argument>const extensions::Extension* extension</argument>,
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>base</name><operator>::</operator><name>FilePath</name> <macro><name>GetBundleResourcePath</name><argument_list>(
      <argument>const network::ResourceRequest&amp; request</argument>,
      <argument>const base::FilePath&amp; extension_resources_path</argument>,
      <argument>int* resource_id</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>LoadResourceFromResourceBundle</name><argument_list>(
      <argument>const network::ResourceRequest&amp; request</argument>,
      <argument>network::mojom::URLLoaderRequest loader</argument>,
      <argument>const base::FilePath&amp; resource_relative_path</argument>,
      <argument>int resource_id</argument>,
      <argument>const std::string&amp; content_security_policy</argument>,
      <argument>network::mojom::URLLoaderClientPtr client</argument>,
      <argument>bool send_cors_header</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>AllowCrossRendererResourceLoad</name><argument_list>(
      <argument>const GURL&amp; url</argument>,
      <argument>content::ResourceType resource_type</argument>,
      <argument>ui::PageTransition page_transition</argument>,
      <argument>int child_id</argument>,
      <argument>bool is_incognito</argument>,
      <argument>const extensions::Extension* extension</argument>,
      <argument>const extensions::ExtensionSet&amp; extensions</argument>,
      <argument>const extensions::ProcessMap&amp; process_map</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>PrefService</name><operator>*</operator> <macro><name>GetPrefServiceForContext</name><argument_list>(
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>GetEarlyExtensionPrefsObservers</name><argument_list>(
      <argument>content::BrowserContext* context</argument>,
      <argument>std::vector&lt;extensions::EarlyExtensionPrefsObserver*&gt;* observers</argument>)</argument_list></macro>
      <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>extensions</name><operator>::</operator><name>ProcessManagerDelegate</name><operator>*</operator> <macro><name>GetProcessManagerDelegate</name><argument_list>()</argument_list></macro>
      <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>extensions</name><operator>::</operator><name>ExtensionHostDelegate</name></expr></argument>&gt;</argument_list></name>
  <macro><name>CreateExtensionHostDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>DidVersionUpdate</name><argument_list>(<argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PermitExternalProtocolHandler</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsInDemoMode</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsScreensaverInDemoMode</name><argument_list>(<argument>const std::string&amp; app_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsRunningInForcedAppMode</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsAppModeForcedForApp</name><argument_list>(
      <argument>const extensions::ExtensionId&amp; extension_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsLoggedInAsPublicAccount</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>extensions</name><operator>::</operator><name>ExtensionSystemProvider</name><operator>*</operator> <macro><name>GetExtensionSystemFactory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RegisterExtensionInterfaces</name><argument_list>(
      <argument>service_manager::BinderRegistryWithArgs&lt;content::RenderFrameHost*&gt;*
          registry</argument>,
      <argument>content::RenderFrameHost* render_frame_host</argument>,
      <argument>const extensions::Extension* extension</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>extensions</name><operator>::</operator><name>RuntimeAPIDelegate</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateRuntimeAPIDelegate</name><argument_list>(
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><specifier>const</specifier> <name>extensions</name><operator>::</operator><name>ComponentExtensionResourceManager</name><operator>*</operator>
  <macro><name>GetComponentExtensionResourceManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>BroadcastEventToRenderers</name><argument_list>(
      <argument>extensions::events::HistogramValue histogram_value</argument>,
      <argument>const std::string&amp; event_name</argument>,
      <argument>std::unique_ptr&lt;base::ListValue&gt; args</argument>,
      <argument>bool dispatch_to_off_the_record_profiles</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>extensions</name><operator>::</operator><name>ExtensionCache</name><operator>*</operator> <macro><name>GetExtensionCache</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsBackgroundUpdateAllowed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsMinBrowserVersionSupported</name><argument_list>(<argument>const std::string&amp; min_version</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>extensions</name><operator>::</operator><name>ExtensionWebContentsObserver</name><operator>*</operator> <macro><name>GetExtensionWebContentsObserver</name><argument_list>(
      <argument>content::WebContents* web_contents</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>extensions</name><operator>::</operator><name>KioskDelegate</name><operator>*</operator> <macro><name>GetKioskDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsLockScreenContext</name><argument_list>(<argument>content::BrowserContext* context</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetApplicationLocale</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetUserAgent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

  <comment type="line">// |context| is the single BrowserContext used for IsValidContext().</comment>
  <comment type="line">// |pref_service| is used for GetPrefServiceForContext().</comment>
  <expr><name>void</name> <call><name>InitWithBrowserContext</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>context</name></expr></argument>,
                              <argument><expr><name>PrefService</name><operator>*</operator> <name>pref_service</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Sets the API client.</comment>
  <expr><name>void</name> <call><name>SetAPIClientForTest</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>ExtensionsAPIClient</name><operator>*</operator> <name>api_client</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// Support for extension APIs.</comment>
  <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>extensions</name><operator>::</operator><name>ExtensionsAPIClient</name></expr></argument>&gt;</argument_list></name> <name>api_client_</name></expr>;

  <comment type="line">// The extension cache used for download and installation.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>extensions</name><operator>::</operator><name>ExtensionCache</name></expr></argument>&gt;</argument_list></name> <name>extension_cache_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomExtensionsBrowserClient</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSIONS_BROWSER_CLIENT_H_</comment>
</unit>
