<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/chromium_src/chrome/browser/certificate_manager_model.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CHROME_BROWSER_CERTIFICATE_MANAGER_MODEL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROME_BROWSER_CERTIFICATE_MANAGER_MODEL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/cert/nss_cert_database.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BrowserContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ResourceContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace content</comment>

<comment type="line">// CertificateManagerModel provides the data to be displayed in the certificate</comment>
<comment type="line">// manager dialog, and processes changes from the view.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CertificateManagerModel</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CertificateManagerModel</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>&gt;</argument_list></name>
      <name>CreationCallback</name></expr>;</expr_stmt></typedef>

  <comment type="line">// Creates a CertificateManagerModel. The model will be passed to the callback</comment>
  <comment type="line">// when it is ready. The caller must ensure the model does not outlive the</comment>
  <comment type="line">// |browser_context|.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>Create</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>CreationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><operator>~</operator><call><name>CertificateManagerModel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>bool</name> <macro><name>is_user_db_available</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>is_user_db_available_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Accessor for read-only access to the underlying NSSCertDatabase.</comment>
  <expr_stmt><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>*</operator> <macro><name>cert_db</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>cert_db_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Import private keys and certificates from PKCS #12 encoded</comment>
  <comment type="line">// |data|, using the given |password|. If |is_extractable| is false,</comment>
  <comment type="line">// mark the private key as unextractable from the module.</comment>
  <comment type="line">// Returns a net error code on failure.</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ImportFromPKCS12</name><argument_list>(<argument><expr><name>PK11SlotInfo</name><operator>*</operator> <name>slot_info</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>data</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>password</name></expr></argument>,
                       <argument><expr><name>bool</name> <name>is_extractable</name></expr></argument>,
                       <argument><expr><name>net</name><operator>::</operator><name>ScopedCERTCertificateList</name><operator>*</operator> <name>imported_certs</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Import user certificate from DER encoded |data|.</comment>
  <comment type="line">// Returns a net error code on failure.</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ImportUserCert</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Import CA certificates.</comment>
  <comment type="line">// Tries to import all the certificates given.  The root will be trusted</comment>
  <comment type="line">// according to |trust_bits|.  Any certificates that could not be imported</comment>
  <comment type="line">// will be listed in |not_imported|.</comment>
  <comment type="line">// |trust_bits| should be a bit field of TRUST* values from NSSCertDatabase.</comment>
  <comment type="line">// Returns false if there is an internal error, otherwise true is returned and</comment>
  <comment type="line">// |not_imported| should be checked for any certificates that were not</comment>
  <comment type="line">// imported.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>ImportCACerts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>ScopedCERTCertificateList</name><operator>&amp;</operator> <name>certificates</name></expr></argument>,
                     <argument><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>::</operator><name>TrustBits</name> <name>trust_bits</name></expr></argument>,
                     <argument><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>::</operator><name>ImportCertFailureList</name><operator>*</operator> <name>not_imported</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Import server certificate.  The first cert should be the server cert.  Any</comment>
  <comment type="line">// additional certs should be intermediate/CA certs and will be imported but</comment>
  <comment type="line">// not given any trust.</comment>
  <comment type="line">// Any certificates that could not be imported will be listed in</comment>
  <comment type="line">// |not_imported|.</comment>
  <comment type="line">// |trust_bits| can be set to explicitly trust or distrust the certificate, or</comment>
  <comment type="line">// use TRUST_DEFAULT to inherit trust as normal.</comment>
  <comment type="line">// Returns false if there is an internal error, otherwise true is returned and</comment>
  <comment type="line">// |not_imported| should be checked for any certificates that were not</comment>
  <comment type="line">// imported.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>ImportServerCert</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>ScopedCERTCertificateList</name><operator>&amp;</operator> <name>certificates</name></expr></argument>,
      <argument><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>::</operator><name>TrustBits</name> <name>trust_bits</name></expr></argument>,
      <argument><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>::</operator><name>ImportCertFailureList</name><operator>*</operator> <name>not_imported</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Set trust values for certificate.</comment>
  <comment type="line">// |trust_bits| should be a bit field of TRUST* values from NSSCertDatabase.</comment>
  <comment type="line">// Returns true on success or false on failure.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetCertTrust</name><argument_list>(<argument><expr><name>CERTCertificate</name><operator>*</operator> <name>cert</name></expr></argument>,
                    <argument><expr><name>net</name><operator>::</operator><name>CertType</name> <name>type</name></expr></argument>,
                    <argument><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>::</operator><name>TrustBits</name> <name>trust_bits</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Delete the cert.  Returns true on success.  |cert| is still valid when this</comment>
  <comment type="line">// function returns.</comment>
  <function_decl><type><name>bool</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><name>CERTCertificate</name><modifier>*</modifier></type> <name>cert</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <macro><name>CertificateManagerModel</name><argument_list>(<argument>net::NSSCertDatabase* nss_cert_database</argument>,
                          <argument>bool is_user_db_available</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="line">// Methods used during initialization, see the comment at the top of the .cc</comment>
  <comment type="line">// file for details.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>DidGetCertDBOnUIThread</name><argument_list>(<argument><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>*</operator> <name>cert_db</name></expr></argument>,
                                     <argument><expr><name>bool</name> <name>is_user_db_available</name></expr></argument>,
                                     <argument><expr><specifier>const</specifier> <name>CreationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>DidGetCertDBOnIOThread</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CreationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>,
                                     <argument><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>*</operator> <name>cert_db</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>GetCertDBOnIOThread</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>ResourceContext</name><operator>*</operator> <name>context</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>CreationCallback</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>net</name><operator>::</operator><name>NSSCertDatabase</name><operator>*</operator> <name>cert_db_</name></expr>;</expr_stmt>
  <comment type="line">// Whether the certificate database has a public slot associated with the</comment>
  <comment type="line">// profile. If not set, importing certificates is not allowed with this model.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_user_db_available_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>CertificateManagerModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CHROME_BROWSER_CERTIFICATE_MANAGER_MODEL_H_</comment>
</unit>
