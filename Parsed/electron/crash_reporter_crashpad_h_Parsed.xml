<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/crash_reporter/crash_reporter_crashpad.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_CRASHPAD_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_CRASHPAD_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string_piece.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/crash_reporter/crash_reporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/crashpad/crashpad/client/crash_report_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/crashpad/crashpad/client/simple_string_dictionary.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>crash_reporter</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CrashReporterCrashpad</name> <range>: <expr><name>public</name> <name>CrashReporter</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>void</name> <macro><name>SetUploadToServer</name><argument_list>(<argument>bool upload_to_server</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>GetUploadToServer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddExtraParameter</name><argument_list>(<argument>const std::string&amp; key</argument>,
                         <argument>const std::string&amp; value</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RemoveExtraParameter</name><argument_list>(<argument>const std::string&amp; key</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>GetParameters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <call><name>CrashReporterCrashpad</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>CrashReporterCrashpad</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetUploadsEnabled</name><argument_list>(<argument>bool enable_uploads</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetCrashKeyValue</name><argument_list>(<argument>base::StringPiece key</argument>, <argument>base::StringPiece value</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>SetInitialCrashKeyValues</name><argument_list>()</argument_list></call></expr>;

  <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UploadReportResult</name></expr></argument>&gt;</argument_list></name> <macro><name>GetUploadedReports</name><argument_list>(
      <argument>const base::FilePath&amp; crashes_dir</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>crashpad</name><operator>::</operator><name>SimpleStringDictionary</name></expr></argument>&gt;</argument_list></name> <name>simple_string_dictionary_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>crashpad</name><operator>::</operator><name>CrashReportDatabase</name></expr></argument>&gt;</argument_list></name> <name>database_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>CrashReporterCrashpad</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace crash_reporter</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_CRASHPAD_H_</comment>
</unit>
