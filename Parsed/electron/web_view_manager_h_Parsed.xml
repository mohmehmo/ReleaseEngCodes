<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/web_view_manager.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_WEB_VIEW_MANAGER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_WEB_VIEW_MANAGER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_plugin_guest_manager.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>WebViewManager</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>BrowserPluginGuestManager</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>WebViewManager</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>WebViewManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>AddGuest</name><argument_list>(<argument>int guest_instance_id</argument>,
                <argument>int element_instance_id</argument>,
                <argument>content::WebContents* embedder</argument>,
                <argument>content::WebContents* web_contents</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>RemoveGuest</name><argument_list>(<argument>int guest_instance_id</argument>)</argument_list></macro></expr>;
  <expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetEmbedder</name><argument_list>(<argument>int guest_instance_id</argument>)</argument_list></macro></expr>;

  <expr><specifier>static</specifier> <name>WebViewManager</name><operator>*</operator> <call><name>GetWebViewManager</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// content::BrowserPluginGuestManager:</comment>
  <name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetGuestByInstanceID</name><argument_list>(<argument>int owner_process_id</argument>,
                                             <argument>int element_instance_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>ForEachGuest</name><argument_list>(<argument>content::WebContents* embedder</argument>,
                    <argument>const GuestCallback&amp; callback</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  struct <name>WebContentsWithEmbedder</name> <block>{
    <expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr>;
    <expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>embedder</name></expr>;
  }</block></expr>;
  <comment type="line">// guest_instance_id =&gt; (web_contents, embedder)</comment>
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>WebContentsWithEmbedder</name></expr></argument>&gt;</argument_list></name> <name>web_contents_embedder_map_</name></expr>;

  struct <expr><name>ElementInstanceKey</name> <block>{
    <expr><name>int</name> <name>embedder_process_id</name></expr>;
    <expr><name>int</name> <name>element_instance_id</name></expr>;

    <macro><name>ElementInstanceKey</name><argument_list>(<argument>int embedder_process_id</argument>, <argument>int element_instance_id</argument>)</argument_list></macro>
        <operator>:</operator> <expr><call><name>embedder_process_id</name><argument_list>(<argument><expr><name>embedder_process_id</name></expr></argument>)</argument_list></call></expr>,
          <macro><name>element_instance_id</name><argument_list>(<argument>element_instance_id</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ElementInstanceKey</name><operator>&amp;</operator> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
      <if_stmt><if>if <condition>(<expr><name>embedder_process_id</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>embedder_process_id</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>embedder_process_id</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>embedder_process_id</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr>
      <return>return <expr><name>element_instance_id</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>element_instance_id</name></name></expr>;</return>
    }</block>

    <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ElementInstanceKey</name><operator>&amp;</operator> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
      <return>return <expr><operator>(</operator><name>embedder_process_id</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>embedder_process_id</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
             <operator>(</operator><name>element_instance_id</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>element_instance_id</name></name><operator>)</operator></expr>;</return>
    }</block>
  }</expr>;
  <comment type="line">// (embedder_process_id, element_instance_id) =&gt; guest_instance_id</comment>
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ElementInstanceKey</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>element_instance_id_to_guest_map_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WebViewManager</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_WEB_VIEW_MANAGER_H_</comment>
</unit>
