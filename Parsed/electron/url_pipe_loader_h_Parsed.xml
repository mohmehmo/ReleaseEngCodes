<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/url_pipe_loader.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_URL_PIPE_LOADER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_URL_PIPE_LOADER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/strong_binding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/system/data_pipe_producer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/simple_url_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/simple_url_loader_stream_consumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_loader.mojom.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>network</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SharedURLLoaderFactory</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Read data from URL and pipe it to NetworkService.</comment>
<comment type="line">//</comment>
<comment type="line">// Different from creating a new loader for the URL directly, protocol handlers</comment>
<comment type="line">// using this loader can work around CORS restrictions.</comment>
<comment type="line">//</comment>
<comment type="line">// This class manages its own lifetime and should delete itself when the</comment>
<comment type="line">// connection is lost or finished.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>URLPipeLoader</name> <range>: <expr><name>public</name> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoader</name></expr></range></decl>,
                      <decl><type ref="prev"/><name>public</name> <name>network</name>::<name>SimpleURLLoaderStreamConsumer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>URLPipeLoader</name><argument_list>(<argument>scoped_refptr&lt;network::SharedURLLoaderFactory&gt; factory</argument>,
                <argument>std::unique_ptr&lt;network::ResourceRequest&gt; request</argument>,
                <argument>network::mojom::URLLoaderRequest loader</argument>,
                <argument>network::mojom::URLLoaderClientPtr client</argument>,
                <argument>const net::NetworkTrafficAnnotationTag&amp; annotation</argument>,
                <argument>base::DictionaryValue upload_data</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><operator>~</operator><macro><name>URLPipeLoader</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>Start</name><argument_list>(<argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SharedURLLoaderFactory</name></expr></argument>&gt;</argument_list></name> <name>factory</name></expr></argument>,
             <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequest</name></expr></argument>&gt;</argument_list></name> <name>request</name></expr></argument>,
             <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>NetworkTrafficAnnotationTag</name><operator>&amp;</operator> <name>annotation</name></expr></argument>,
             <argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name> <name>upload_data</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyComplete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>OnResponseStarted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>final_url</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLResponseHead</name><operator>&amp;</operator> <name>response_head</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWrite</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>resume</name></expr></argument>, <argument><expr><name>MojoResult</name> <name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// SimpleURLLoaderStreamConsumer:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnDataReceived</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>string_piece</name></expr></argument>,
                      <argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>resume</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnComplete</name><argument_list>(<argument><expr><name>bool</name> <name>success</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnRetry</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>start_retry</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// URLLoader:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>FollowRedirect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>removed_headers</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>&amp;</operator> <name>modified_headers</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>GURL</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>new_url</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content/>}</block></decl></decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetPriority</name><argument_list>(<argument><expr><name>net</name><operator>::</operator><name>RequestPriority</name> <name>priority</name></expr></argument>,
                   <argument><expr><name>int32_t</name> <name>intra_priority_value</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content/>}</block></decl></decl_stmt>
  <function><type><name>void</name></type> <name>PauseReadingBodyFromNet</name><parameter_list>()</parameter_list> override <block>{<block_content/>}</block></function>
  <function><type><name>void</name></type> <name>ResumeReadingBodyFromNet</name><parameter_list>()</parameter_list> override <block>{<block_content/>}</block></function>

  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Binding</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoader</name></expr></argument>&gt;</argument_list></name> <name>binding_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderClientPtr</name> <name>client_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>mojo</name><operator>::</operator><name>DataPipeProducer</name></expr></argument>&gt;</argument_list></name> <name>producer_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SimpleURLLoader</name></expr></argument>&gt;</argument_list></name> <name>loader_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>URLPipeLoader</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>URLPipeLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_URL_PIPE_LOADER_H_</comment>
</unit>
