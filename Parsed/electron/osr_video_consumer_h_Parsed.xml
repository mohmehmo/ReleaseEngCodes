<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/osr/osr_video_consumer.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_OSR_OSR_VIDEO_CONSUMER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_OSR_OSR_VIDEO_CONSUMER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/viz/host/client_frame_sink_video_capturer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OffScreenRenderWidgetHostView</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator>, <specifier>const</specifier> <name>SkBitmap</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name>
    <name>OnPaintCallback</name></expr>;</expr_stmt></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>OffScreenVideoConsumer</name> <range>: <expr><name>public</name> <name>viz</name><operator>::</operator><name>mojom</name><operator>::</operator><name>FrameSinkVideoConsumer</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <macro><name>OffScreenVideoConsumer</name><argument_list>(<argument>OffScreenRenderWidgetHostView* view</argument>,
                         <argument>OnPaintCallback callback</argument>)</argument_list></macro></expr>;
  <expr><operator>~</operator><macro><name>OffScreenVideoConsumer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>SetActive</name><argument_list>(<argument>bool active</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetFrameRate</name><argument_list>(<argument>int frame_rate</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>SizeChanged</name><argument_list>()</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// viz::mojom::FrameSinkVideoConsumer implementation.</comment>
  <name>void</name> <macro><name>OnFrameCaptured</name><argument_list>(
      <argument>base::ReadOnlySharedMemoryRegion data</argument>,
      <argument>::media::mojom::VideoFrameInfoPtr info</argument>,
      <argument>const gfx::Rect&amp; content_rect</argument>,
      <argument>viz::mojom::FrameSinkVideoConsumerFrameCallbacksPtr callbacks</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnStopped</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>bool</name> <call><name>CheckContentRect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>content_rect</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>OnPaintCallback</name> <name>callback_</name></expr>;

  <expr><name>OffScreenRenderWidgetHostView</name><operator>*</operator> <name>view_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>viz</name><operator>::</operator><name>ClientFrameSinkVideoCapturer</name></expr></argument>&gt;</argument_list></name> <name>video_capturer_</name></expr>;

  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>OffScreenVideoConsumer</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>OffScreenVideoConsumer</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_OSR_OSR_VIDEO_CONSUMER_H_</comment>
</unit>
