<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/menu_delegate.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_MENU_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_MENU_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/atom_menu_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/controls/menu/menu_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>views</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MenuRunner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Button</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace views</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MenuBar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MenuDelegate</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>MenuDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>MenuDelegate</name><argument_list>(<argument><expr><name>MenuBar</name><operator>*</operator> <name>menu_bar</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>MenuDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>RunMenu</name><argument_list>(<argument>AtomMenuModel* model</argument>,
               <argument>views::Button* button</argument>,
               <argument>ui::MenuSourceType source_type</argument>)</argument_list></macro></expr>;

  <expr><name>class</name> <name>Observer</name> <block>{
   <expr><name>public</name><operator>:</operator>
    <name>virtual</name> <name>void</name> <call><name>OnBeforeExecuteCommand</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><name>virtual</name> <name>void</name> <call><name>OnMenuClosed</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
  }</block></expr>;

  <expr><name>void</name> <macro><name>AddObserver</name><argument_list>(<argument>Observer* obs</argument>)</argument_list></macro> <block>{ <expr><call><name><name>observers_</name><operator>.</operator><name>AddObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>; }</block>

  <name>void</name> <macro><name>RemoveObserver</name><argument_list>(<argument>const Observer* obs</argument>)</argument_list></macro> <block>{ <expr><call><name><name>observers_</name><operator>.</operator><name>RemoveObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>; }</block>

 <name>protected</name><operator>:</operator>
  <comment type="line">// views::MenuDelegate:</comment>
  <name>void</name> <macro><name>ExecuteCommand</name><argument_list>(<argument>int id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ExecuteCommand</name><argument_list>(<argument>int id</argument>, <argument>int mouse_event_flags</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsTriggerableEvent</name><argument_list>(<argument>views::MenuItemView* source</argument>,
                          <argument>const ui::Event&amp; e</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>GetAccelerator</name><argument_list>(<argument>int id</argument>, <argument>ui::Accelerator* accelerator</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetLabel</name><argument_list>(<argument>int id</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>GetLabelStyle</name><argument_list>(<argument>int id</argument>, <argument>LabelStyle* style</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsCommandEnabled</name><argument_list>(<argument>int id</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsCommandVisible</name><argument_list>(<argument>int id</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsItemChecked</name><argument_list>(<argument>int id</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>WillShowMenu</name><argument_list>(<argument>views::MenuItemView* menu</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>WillHideMenu</name><argument_list>(<argument>views::MenuItemView* menu</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnMenuClosed</name><argument_list>(<argument>views::MenuItemView* menu</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>views</name><operator>::</operator><name>MenuItemView</name><operator>*</operator> <macro><name>GetSiblingMenu</name><argument_list>(<argument>views::MenuItemView* menu</argument>,
                                      <argument>const gfx::Point&amp; screen_point</argument>,
                                      <argument>views::MenuAnchorPosition* anchor</argument>,
                                      <argument>bool* has_mnemonics</argument>,
                                      <argument>views::MenuButton** button</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>MenuBar</name><operator>*</operator> <name>menu_bar_</name></expr>;
  <expr><name>int</name> <name>id_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>MenuDelegate</name></expr></argument>&gt;</argument_list></name> <name>adapter_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>MenuRunner</name></expr></argument>&gt;</argument_list></name> <name>menu_runner_</name></expr>;

  <comment type="line">// The menu button to switch to.</comment>
  <expr><name>views</name><operator>::</operator><name>MenuButton</name><operator>*</operator> <name>button_to_open_</name> <operator>=</operator> <name>nullptr</name></expr>;
  <expr><name>bool</name> <name>hold_first_switch_</name></expr>;

  <expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>Observer</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Unchecked</name> <name>observers_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>MenuDelegate</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_MENU_DELEGATE_H_</comment>
</unit>
