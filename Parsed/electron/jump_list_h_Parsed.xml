<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/win/jump_list.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_WIN_JUMP_LIST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_WIN_JUMP_LIST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atlbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shobjidl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>JumpListResult</name> <range>: <expr><name>int</name> <block>{
  <expr><name>SUCCESS</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <comment type="line">// In JS code this error will manifest as an exception.</comment>
  <expr><name>ARGUMENT_ERROR</name> <operator>=</operator> <literal type="number">1</literal></expr>,
  <comment type="line">// Generic error, the runtime logs may provide some clues.</comment>
  <expr><name>GENERIC_ERROR</name> <operator>=</operator> <literal type="number">2</literal></expr>,
  <comment type="line">// Custom categories can't contain separators.</comment>
  <expr><name>CUSTOM_CATEGORY_SEPARATOR_ERROR</name> <operator>=</operator> <literal type="number">3</literal></expr>,
  <comment type="line">// The app isn't registered to handle a file type found in a custom category.</comment>
  <expr><name>MISSING_FILE_TYPE_REGISTRATION_ERROR</name> <operator>=</operator> <literal type="number">4</literal></expr>,
  <comment type="line">// Custom categories can't be created due to user privacy settings.</comment>
  <expr><name>CUSTOM_CATEGORY_ACCESS_DENIED_ERROR</name> <operator>=</operator> <literal type="number">5</literal></expr>,
}</block></expr></range></decl>;</decl_stmt>

<struct>struct <name>JumpListItem</name> <block>{
  <decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Type</name> <block>{<block_content>
    <comment type="line">// A task will launch an app (usually the one that created the Jump List)</comment>
    <comment type="line">// with specific arguments.</comment>
    <expr_stmt><expr><name>TASK</name></expr><operator>,</operator>
    <comment type="line">// Separators can only be inserted between items in the standard Tasks</comment>
    <comment type="line">// category, they can't appear in custom categories.</comment>
    <expr><name>SEPARATOR</name></expr><operator>,</operator>
    <comment type="line">// A file link will open a file using the app that created the Jump List,</comment>
    <comment type="line">// for this to work the app must be registered as a handler for the file</comment>
    <comment type="line">// type (though the app doesn't have to be the default handler).</comment>
    <expr><name>FILE</name></expr></expr_stmt>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <decl_stmt><decl><type><name>Type</name></type> <name>type</name> <init>= <expr><name>Type</name><operator>::</operator><name>TASK</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// For tasks this is the path to the program executable, for file links this</comment>
  <comment type="line">// is the full filename.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>arguments</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>title</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>description</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>working_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>icon_path</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>icon_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>JumpListItem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JumpListItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JumpListItem</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>JumpListItem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>JumpListCategory</name> <block>{
  <decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Type</name> <block>{<block_content>
    <comment type="line">// A custom category can contain tasks and files, but not separators.</comment>
    <expr_stmt><expr><name>CUSTOM</name></expr><operator>,</operator>
    <comment type="line">// Frequent/Recent categories are managed by the OS, their name and items</comment>
    <comment type="line">// can't be set by the app (though items can be set indirectly).</comment>
    <expr><name>FREQUENT</name></expr><operator>,</operator>
    <expr><name>RECENT</name></expr><operator>,</operator>
    <comment type="line">// The standard Tasks category can't be renamed by the app, but the app</comment>
    <comment type="line">// can set the items that should appear in this category, and those items</comment>
    <comment type="line">// can include tasks, files, and separators.</comment>
    <expr><name>TASKS</name></expr></expr_stmt>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <decl_stmt><decl><type><name>Type</name></type> <name>type</name> <init>= <expr><name>Type</name><operator>::</operator><name>TASKS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>JumpListItem</name></expr></argument>&gt;</argument_list></name> <name>items</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JumpListCategory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JumpListCategory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JumpListCategory</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>JumpListCategory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<comment type="line">// Creates or removes a custom Jump List for an app.</comment>
<comment type="line">// See https://msdn.microsoft.com/en-us/library/windows/desktop/gg281362.aspx</comment>
<decl_stmt><decl><type><name>class</name></type> <name>JumpList</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// |app_id| must be the Application User Model ID of the app for which the</comment>
  <comment type="line">// custom Jump List should be created/removed, it's usually obtained by</comment>
  <comment type="line">// calling GetCurrentProcessExplicitAppUserModelID().</comment>
  <decl_stmt><decl><type><name>explicit</name></type> <name>JumpList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>app_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>JumpList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Starts a new transaction, must be called before appending any categories,</comment>
  <comment type="line">// aborting or committing. After the method returns |min_items| will indicate</comment>
  <comment type="line">// the minimum number of items that will be displayed in the Jump List, and</comment>
  <comment type="line">// |removed_items| (if not null) will contain all the items the user has</comment>
  <comment type="line">// unpinned from the Jump List. Both parameters are optional.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>Begin</name><argument_list>(<argument><expr><name>int</name><operator>*</operator> <name>min_items</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
             <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>JumpListItem</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>removed_items</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <comment type="line">// Abandons any changes queued up since Begin() was called.</comment>
  <function_decl><type><name>bool</name></type> <name>Abort</name><parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// Commits any changes queued up since Begin() was called.</comment>
  <function_decl><type><name>bool</name></type> <name>Commit</name><parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// Deletes the custom Jump List and restores the default Jump List.</comment>
  <function_decl><type><name>bool</name></type> <name>Delete</name><parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// Appends a category to the custom Jump List.</comment>
  <function_decl><type><name>JumpListResult</name></type> <name>AppendCategory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JumpListCategory</name><modifier>&amp;</modifier></type> <name>category</name></decl></parameter>)</parameter_list>;</function_decl>
  <comment type="line">// Appends categories to the custom Jump List.</comment>
  <decl_stmt><decl><type><name>JumpListResult</name></type> <name>AppendCategories</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>JumpListCategory</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>categories</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>app_id_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>CComPtr</name><argument_list type="generic">&lt;<argument><expr><name>ICustomDestinationList</name></expr></argument>&gt;</argument_list></name></type> <name>destinations_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>JumpList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_WIN_JUMP_LIST_H_</comment>
</unit>
