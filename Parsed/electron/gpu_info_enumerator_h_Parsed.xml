<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/gpu_info_enumerator.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_GPU_INFO_ENUMERATOR_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_GPU_INFO_ENUMERATOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gpu/config/gpu_info.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// This class implements the enumerator for reading all the attributes in</comment>
<comment type="line">// GPUInfo into a dictionary.</comment>
<decl_stmt><decl><type><name>class</name> <name>GPUInfoEnumerator</name></type> <name>final</name> <range>: <expr><name>public</name> <name>gpu</name><operator>::</operator><name>GPUInfo</name><operator>::</operator><name>Enumerator</name> <block>{
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>kGPUDeviceKey</name> <operator>=</operator> <literal type="string">"gpuDevice"</literal></expr>;
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>kVideoDecodeAcceleratorSupportedProfileKey</name> <operator>=</operator>
      <literal type="string">"videoDecodeAcceleratorSupportedProfile"</literal></expr>;
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>kVideoEncodeAcceleratorSupportedProfileKey</name> <operator>=</operator>
      <literal type="string">"videoEncodeAcceleratorSupportedProfile"</literal></expr>;
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>kImageDecodeAcceleratorSupportedProfileKey</name> <operator>=</operator>
      <literal type="string">"imageDecodeAcceleratorSupportedProfile"</literal></expr>;
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>kAuxAttributesKey</name> <operator>=</operator> <literal type="string">"auxAttributes"</literal></expr>;
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>kDx12VulkanVersionInfoKey</name> <operator>=</operator> <literal type="string">"dx12VulkanVersionInfo"</literal></expr>;

 <expr><name>public</name><operator>:</operator>
  <call><name>GPUInfoEnumerator</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>GPUInfoEnumerator</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddInt64</name><argument_list>(<argument>const char* name</argument>, <argument>int64_t value</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddInt</name><argument_list>(<argument>const char* name</argument>, <argument>int value</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddString</name><argument_list>(<argument>const char* name</argument>, <argument>const std::string&amp; value</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddBool</name><argument_list>(<argument>const char* name</argument>, <argument>bool value</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddTimeDeltaInSecondsF</name><argument_list>(<argument>const char* name</argument>,
                              <argument>const base::TimeDelta&amp; value</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>BeginGPUDevice</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>EndGPUDevice</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>BeginVideoDecodeAcceleratorSupportedProfile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>EndVideoDecodeAcceleratorSupportedProfile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>BeginVideoEncodeAcceleratorSupportedProfile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>EndVideoEncodeAcceleratorSupportedProfile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>BeginImageDecodeAcceleratorSupportedProfile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>EndImageDecodeAcceleratorSupportedProfile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>BeginAuxAttributes</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>EndAuxAttributes</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>BeginDx12VulkanVersionInfo</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>EndDx12VulkanVersionInfo</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <call><name>GetDictionary</name><argument_list>()</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// The stack is used to manage nested values</comment>
  <name>std</name><operator>::</operator><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>value_stack</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <name>current</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_GPU_INFO_ENUMERATOR_H_</comment>
</unit>
