<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/browser.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_BROWSER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_BROWSER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/browser_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/window_list_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/promise.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FilePath</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Image</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomMenuModel</name></decl>;</decl_stmt>

<comment type="line">// This class is used for control application-wide operations.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Browser</name> <range>: <expr><name>public</name> <name>WindowListObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>Browser</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>Browser</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><specifier>static</specifier> <name>Browser</name><operator>*</operator> <call><name>Get</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Try to close all windows and quit the application.</comment>
  <expr><name>void</name> <call><name>Quit</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Exit the application immediately and set exit code.</comment>
  <expr><name>void</name> <call><name>Exit</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Cleanup everything and shutdown the application gracefully.</comment>
  <expr><name>void</name> <call><name>Shutdown</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Focus the application.</comment>
  <expr><name>void</name> <call><name>Focus</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Returns the version of the executable (or bundle).</comment>
  <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// Overrides the application version.</comment>
  <expr><name>void</name> <call><name>SetVersion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Returns the application's name, default is just Electron.</comment>
  <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// Overrides the application name.</comment>
  <expr><name>void</name> <call><name>SetName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Add the |path| to recent documents list.</comment>
  <expr><name>void</name> <call><name>AddRecentDocument</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Clear the recent documents list.</comment>
  <expr><name>void</name> <call><name>ClearRecentDocuments</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Set the application user model ID.</comment>
  <expr><name>void</name> <call><name>SetAppUserModelID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Remove the default protocol handler registry key</comment>
  <expr><name>bool</name> <call><name>RemoveAsDefaultProtocolClient</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>protocol</name></expr></argument>,
                                     <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Set as default handler for a protocol.</comment>
  <expr><name>bool</name> <call><name>SetAsDefaultProtocolClient</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>protocol</name></expr></argument>,
                                  <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Query the current state of default handler for a protocol.</comment>
  <expr><name>bool</name> <call><name>IsDefaultProtocolClient</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>protocol</name></expr></argument>,
                               <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>base</name><operator>::</operator><name>string16</name> <call><name>GetApplicationNameForProtocol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Set/Get the badge count.</comment>
  <expr><name>bool</name> <macro><name>SetBadgeCount</name><argument_list>(<argument>int count</argument>)</argument_list></macro></expr>;
  <expr><name>int</name> <call><name>GetBadgeCount</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Set/Get the login item settings of the app</comment>
  struct <expr><name>LoginItemSettings</name> <block>{
    <expr><name>bool</name> <name>open_at_login</name> <operator>=</operator> <name>false</name></expr>;
    <expr><name>bool</name> <name>open_as_hidden</name> <operator>=</operator> <name>false</name></expr>;
    <expr><name>bool</name> <name>restore_state</name> <operator>=</operator> <name>false</name></expr>;
    <expr><name>bool</name> <name>opened_at_login</name> <operator>=</operator> <name>false</name></expr>;
    <expr><name>bool</name> <name>opened_as_hidden</name> <operator>=</operator> <name>false</name></expr>;
    <expr><name>base</name><operator>::</operator><name>string16</name> <name>path</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name> <name>args</name></expr>;

    <expr><call><name>LoginItemSettings</name><argument_list>()</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>LoginItemSettings</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>LoginItemSettings</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoginItemSettings</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
  }</block></expr>;
  <expr><name>void</name> <macro><name>SetLoginItemSettings</name><argument_list>(<argument>LoginItemSettings settings</argument>)</argument_list></macro></expr>;
  <expr><name>LoginItemSettings</name> <call><name>GetLoginItemSettings</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoginItemSettings</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></call></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Set the handler which decides whether to shutdown.</comment>
  <expr><name>void</name> <call><name>SetShutdownHandler</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>handler</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Hide the application.</comment>
  <expr><name>void</name> <call><name>Hide</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Show the application.</comment>
  <expr><name>void</name> <call><name>Show</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Creates an activity and sets it as the one currently in use.</comment>
  <expr><name>void</name> <macro><name>SetUserActivity</name><argument_list>(<argument>const std::string&amp; type</argument>,
                       <argument>base::DictionaryValue user_info</argument>,
                       <argument>gin_helper::Arguments* args</argument>)</argument_list></macro></expr>;

  <comment type="line">// Returns the type name of the current user activity.</comment>
  <expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetCurrentActivityType</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Invalidates an activity and marks it as no longer eligible for</comment>
  <comment type="line">// continuation</comment>
  <expr><name>void</name> <call><name>InvalidateCurrentActivity</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Marks this activity object as inactive without invalidating it.</comment>
  <expr><name>void</name> <call><name>ResignCurrentActivity</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Updates the current user activity</comment>
  <expr><name>void</name> <macro><name>UpdateCurrentActivity</name><argument_list>(<argument>const std::string&amp; type</argument>,
                             <argument>base::DictionaryValue user_info</argument>)</argument_list></macro></expr>;

  <comment type="line">// Indicates that an user activity is about to be resumed.</comment>
  <expr><name>bool</name> <call><name>WillContinueUserActivity</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Indicates a failure to resume a Handoff activity.</comment>
  <expr><name>void</name> <call><name>DidFailToContinueUserActivity</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>,
                                     <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Resumes an activity via hand-off.</comment>
  <expr><name>bool</name> <macro><name>ContinueUserActivity</name><argument_list>(<argument>const std::string&amp; type</argument>,
                            <argument>base::DictionaryValue user_info</argument>)</argument_list></macro></expr>;

  <comment type="line">// Indicates that an activity was continued on another device.</comment>
  <expr><name>void</name> <macro><name>UserActivityWasContinued</name><argument_list>(<argument>const std::string&amp; type</argument>,
                                <argument>base::DictionaryValue user_info</argument>)</argument_list></macro></expr>;

  <comment type="line">// Gives an oportunity to update the Handoff payload.</comment>
  <expr><name>bool</name> <macro><name>UpdateUserActivityState</name><argument_list>(<argument>const std::string&amp; type</argument>,
                               <argument>base::DictionaryValue user_info</argument>)</argument_list></macro></expr>;

  <comment type="line">// Bounce the dock icon.</comment>
  enum <expr><name>class</name> <name>BounceType</name><block>{
      <expr><name>CRITICAL</name> <operator>=</operator> <literal type="number">0</literal></expr>,        <comment type="line">// NSCriticalRequest</comment>
      <expr><name>INFORMATIONAL</name> <operator>=</operator> <literal type="number">10</literal></expr>,  <comment type="line">// NSInformationalRequest</comment>
  }</block></expr>;
  <expr><name>int</name> <macro><name>DockBounce</name><argument_list>(<argument>BounceType type</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>DockCancelBounce</name><argument_list>(<argument>int request_id</argument>)</argument_list></macro></expr>;

  <comment type="line">// Bounce the Downloads stack.</comment>
  <expr><name>void</name> <call><name>DockDownloadFinished</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>filePath</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Set/Get dock's badge text.</comment>
  <expr><name>void</name> <call><name>DockSetBadgeText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>label</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <call><name>DockGetBadgeText</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Hide/Show dock.</comment>
  <expr><name>void</name> <call><name>DockHide</name><argument_list>()</argument_list></call></expr>;
  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>DockShow</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>DockIsVisible</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Set docks' menu.</comment>
  <expr><name>void</name> <call><name>DockSetMenu</name><argument_list>(<argument><expr><name>AtomMenuModel</name><operator>*</operator> <name>model</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Set docks' icon.</comment>
  <expr><name>void</name> <call><name>DockSetIcon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator> <name>image</name></expr></argument>)</argument_list></call></expr>;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_MACOSX)</comment>

  <expr><name>void</name> <call><name>ShowAboutPanel</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>SetAboutPanelOptions</name><argument_list>(<argument>base::DictionaryValue options</argument>)</argument_list></macro></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>void</name> <call><name>ShowEmojiPanel</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  struct <expr><name>UserTask</name> <block>{
    <expr><name>base</name><operator>::</operator><name>FilePath</name> <name>program</name></expr>;
    <expr><name>base</name><operator>::</operator><name>string16</name> <name>arguments</name></expr>;
    <expr><name>base</name><operator>::</operator><name>string16</name> <name>title</name></expr>;
    <expr><name>base</name><operator>::</operator><name>string16</name> <name>description</name></expr>;
    <expr><name>base</name><operator>::</operator><name>FilePath</name> <name>working_dir</name></expr>;
    <expr><name>base</name><operator>::</operator><name>FilePath</name> <name>icon_path</name></expr>;
    <expr><name>int</name> <name>icon_index</name></expr>;

    <expr><call><name>UserTask</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>UserTask</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UserTask</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>UserTask</name><argument_list>()</argument_list></call></expr>;
  }</block></expr>;

  <comment type="line">// Add a custom task to jump list.</comment>
  <expr><name>bool</name> <call><name>SetUserTasks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UserTask</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>tasks</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Returns the application user model ID, if there isn't one, then create</comment>
  <comment type="line">// one from app's name.</comment>
  <comment type="line">// The returned string managed by Browser, and should not be modified.</comment>
  <expr><name>PCWSTR</name> <call><name>GetAppUserModelID</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_WIN)</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Whether Unity launcher is running.</comment>
  <expr><name>bool</name> <call><name>IsUnityRunning</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_LINUX)</comment>

  <comment type="line">// Tell the application to open a file.</comment>
  <expr><name>bool</name> <call><name>OpenFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>file_path</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Tell the application to open a url.</comment>
  <expr><name>void</name> <call><name>OpenURL</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>url</name></expr></argument>)</argument_list></call></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Tell the application to create a new window for a tab.</comment>
  <expr><name>void</name> <call><name>NewWindowForTab</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_MACOSX)</comment>

  <comment type="line">// Tell the application that application is activated with visible/invisible</comment>
  <comment type="line">// windows.</comment>
  <expr><name>void</name> <macro><name>Activate</name><argument_list>(<argument>bool has_visible_windows</argument>)</argument_list></macro></expr>;

  <expr><name>bool</name> <call><name>IsEmojiPanelSupported</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Tell the application the loading has been done.</comment>
  <expr><name>void</name> <call><name>WillFinishLaunching</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>DidFinishLaunching</name><argument_list>(<argument>base::DictionaryValue launch_info</argument>)</argument_list></macro></expr>;

  <expr><name>void</name> <call><name>OnAccessibilitySupportChanged</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <call><name>PreMainMessageLoopRun</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Stores the supplied |quit_closure|, to be run when the last Browser</comment>
  <comment type="line">// instance is destroyed.</comment>
  <expr><name>void</name> <macro><name>SetMainMessageLoopQuitClosure</name><argument_list>(<argument>base::OnceClosure quit_closure</argument>)</argument_list></macro></expr>;

  <expr><name>void</name> <macro><name>AddObserver</name><argument_list>(<argument>BrowserObserver* obs</argument>)</argument_list></macro> <block>{ <expr><call><name><name>observers_</name><operator>.</operator><name>AddObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>; }</block>

  <name>void</name> <macro><name>RemoveObserver</name><argument_list>(<argument>BrowserObserver* obs</argument>)</argument_list></macro> <block>{ <expr><call><name><name>observers_</name><operator>.</operator><name>RemoveObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>; }</block>

  <name>bool</name> <macro><name>is_shutting_down</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>is_shutdown_</name></expr>;</return> }</block>
  <name>bool</name> <macro><name>is_quiting</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>is_quiting_</name></expr>;</return> }</block>
  <name>bool</name> <macro><name>is_ready</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>is_ready_</name></expr>;</return> }</block>
  <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>WhenReady</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// Returns the version of application bundle or executable file.</comment>
  <name>std</name><operator>::</operator><name>string</name> <macro><name>GetExecutableFileVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// Returns the name of application bundle or executable file.</comment>
  <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetExecutableFileProductName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// Send the will-quit message and then shutdown the application.</comment>
  <expr><name>void</name> <call><name>NotifyAndShutdown</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Send the before-quit message and start closing windows.</comment>
  <expr><name>bool</name> <call><name>HandleBeforeQuit</name><argument_list>()</argument_list></call></expr>;

  <expr><name>bool</name> <name>is_quiting_</name> <operator>=</operator> <name>false</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// WindowListObserver implementations:</comment>
  <name>void</name> <macro><name>OnWindowCloseCancelled</name><argument_list>(<argument>NativeWindow* window</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnWindowAllClosed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Observers of the browser.</comment>
  <expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>BrowserObserver</name></expr></argument>&gt;</argument_list></name> <name>observers_</name></expr>;

  <comment type="line">// Whether `app.exit()` has been called</comment>
  <expr><name>bool</name> <name>is_exiting_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// Whether "ready" event has been emitted.</comment>
  <expr><name>bool</name> <name>is_ready_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// The browser is being shutdown.</comment>
  <expr><name>bool</name> <name>is_shutdown_</name> <operator>=</operator> <name>false</name></expr>;

  <comment type="line">// Null until/unless the default main message loop is running.</comment>
  <expr><name>base</name><operator>::</operator><name>OnceClosure</name> <name>quit_main_message_loop_</name></expr>;

  <expr><name>int</name> <name>badge_count_</name> <operator>=</operator> <literal type="number">0</literal></expr>;

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name><name>Promise</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ready_promise_</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>base</name><operator>::</operator><name>Value</name> <name>about_panel_options_</name></expr>;
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr><name>base</name><operator>::</operator><name>DictionaryValue</name> <name>about_panel_options_</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Browser</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_BROWSER_H_</comment>
</unit>
