<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/extensions/atom_extension_loader.h"><comment type="line">// Copyright 2018 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_LOADER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_LOADER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/browser/extension_registrar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/common/extension_id.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FilePath</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace base</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BrowserContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace content</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Extension</name></decl>;</decl_stmt>

<comment type="line">// Handles extension loading and reloading using ExtensionRegistrar.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionLoader</name> <range>: <expr><name>public</name> <name>ExtensionRegistrar</name><operator>::</operator><name>Delegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>AtomExtensionLoader</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomExtensionLoader</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Loads an unpacked extension from a directory synchronously. Returns the</comment>
  <comment type="line">// extension on success, or nullptr otherwise.</comment>
  <expr><specifier>const</specifier> <name>Extension</name><operator>*</operator> <call><name>LoadExtension</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>extension_dir</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Starts reloading the extension. A keep-alive is maintained until the</comment>
  <comment type="line">// reload succeeds/fails. If the extension is an app, it will be launched upon</comment>
  <comment type="line">// reloading.</comment>
  <comment type="line">// This may invalidate references to the old Extension object, so it takes the</comment>
  <comment type="line">// ID by value.</comment>
  <expr><name>void</name> <macro><name>ReloadExtension</name><argument_list>(<argument>ExtensionId extension_id</argument>)</argument_list></macro></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// If the extension loaded successfully, enables it. If it's an app, launches</comment>
  <comment type="line">// it. If the load failed, updates ShellKeepAliveRequester.</comment>
  <name>void</name> <macro><name>FinishExtensionReload</name><argument_list>(<argument>const ExtensionId old_extension_id</argument>,
                             <argument>scoped_refptr&lt;const Extension&gt; extension</argument>)</argument_list></macro></expr>;

  <comment type="line">// ExtensionRegistrar::Delegate:</comment>
  <expr><name>void</name> <macro><name>PreAddExtension</name><argument_list>(<argument>const Extension* extension</argument>,
                       <argument>const Extension* old_extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostActivateExtension</name><argument_list>(<argument>scoped_refptr&lt;const Extension&gt; extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostDeactivateExtension</name><argument_list>(
      <argument>scoped_refptr&lt;const Extension&gt; extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>LoadExtensionForReload</name><argument_list>(
      <argument>const ExtensionId&amp; extension_id</argument>,
      <argument>const base::FilePath&amp; path</argument>,
      <argument>ExtensionRegistrar::LoadErrorBehavior load_error_behavior</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>CanEnableExtension</name><argument_list>(<argument>const Extension* extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>CanDisableExtension</name><argument_list>(<argument>const Extension* extension</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>ShouldBlockExtension</name><argument_list>(<argument>const Extension* extension</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context_</name></expr>;  <comment type="line">// Not owned.</comment>

  <comment type="line">// Registers and unregisters extensions.</comment>
  <expr><name>ExtensionRegistrar</name> <name>extension_registrar_</name></expr>;

  <comment type="line">// Holds keep-alives for relaunching apps.</comment>
  <comment type="line">//   ShellKeepAliveRequester keep_alive_requester_;</comment>

  <comment type="line">// Indicates that we posted the (asynchronous) task to start reloading.</comment>
  <comment type="line">// Used by ReloadExtension() to check whether ExtensionRegistrar calls</comment>
  <comment type="line">// LoadExtensionForReload().</comment>
  <expr><name>bool</name> <name>did_schedule_reload_</name> <operator>=</operator> <name>false</name></expr>;

  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionLoader</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomExtensionLoader</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace extensions</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_EXTENSIONS_ATOM_EXTENSION_LOADER_H_</comment>
</unit>
