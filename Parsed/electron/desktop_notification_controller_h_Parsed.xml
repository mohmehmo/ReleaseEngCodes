<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/win/win32_desktop_notifications/desktop_notification_controller.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_DESKTOP_NOTIFICATION_CONTROLLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_DESKTOP_NOTIFICATION_CONTROLLER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<struct_decl>struct <name>NotificationData</name>;</struct_decl>

<decl_stmt><decl><type><name>class</name></type> <name>DesktopNotificationController</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>DesktopNotificationController</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>maximum_toasts</name> <init>= <expr><literal type="number">3</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><operator>~</operator><call><name>DesktopNotificationController</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>class</name></type> <name>Notification</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Notification</name></type> <name>AddNotification</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>wstring</name> <name>caption</name></expr></argument>,
                               <argument><expr><name>std</name><operator>::</operator><name>wstring</name> <name>body_text</name></expr></argument>,
                               <argument><expr><name>HBITMAP</name> <name>image</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>CloseNotification</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Notification</name><modifier>&amp;</modifier></type> <name>notification</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Event handlers -- override to receive the events</comment>
 <label><name>private</name>:</label>
  <function><type><name>virtual</name> <name>void</name></type> <name>OnNotificationClosed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Notification</name><modifier>&amp;</modifier></type> <name>notification</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
  <function><type><name>virtual</name> <name>void</name></type> <name>OnNotificationClicked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Notification</name><modifier>&amp;</modifier></type> <name>notification</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
  <function><type><name>virtual</name> <name>void</name></type> <name>OnNotificationDismissed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Notification</name><modifier>&amp;</modifier></type> <name>notification</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

 <label><name>private</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>RegisterWndClasses</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>StartAnimation</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>HFONT</name></type> <name>GetCaptionFont</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>HFONT</name></type> <name>GetBodyFont</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <enum>enum <name>TimerID</name> <block>{ <decl><name>TimerID_Animate</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

  <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>toast_margin_</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Wrapper around `NotificationData` which makes sure that</comment>
  <comment type="line">// the `controller` member is cleared when the controller object</comment>
  <comment type="line">// stops tracking the notification</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>NotificationLink</name></name></type> <range>: <expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NotificationData</name></expr></argument>&gt;</argument_list></name> <block>{
    <expr><name>explicit</name> <call><name>NotificationLink</name><argument_list>(<argument><expr><name>DesktopNotificationController</name><operator>*</operator> <name>controller</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>NotificationLink</name><argument_list>()</argument_list></call></expr>;

    <expr><call><name>NotificationLink</name><argument_list>(<argument><expr><name>NotificationLink</name><operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;
    <expr><call><name>NotificationLink</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NotificationLink</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
    <expr><name>NotificationLink</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name>NotificationLink</name><operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr>;
  }</block></expr></range></decl>;</decl_stmt>

  <struct>struct <name>ToastInstance</name> <block>{
    <decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NotificationLink</name></type> <name>data</name></decl>;</decl_stmt>
  }</block>;</struct>

  <decl_stmt><decl><type><name>class</name></type> <name>Toast</name></decl>;</decl_stmt>

  <function_decl><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>,
                                  <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>,
                                  <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>,
                                  <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>;</function_decl>
  <function><type><specifier>static</specifier> <name>DesktopNotificationController</name><modifier>*</modifier></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>DesktopNotificationController</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
        <argument><expr><call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <expr_stmt><expr><call><name>DesktopNotificationController</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DesktopNotificationController</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>InitializeFonts</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ClearAssets</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>AnimateAll</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>CheckQueue</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>CreateToast</name><argument_list>(<argument><expr><name>NotificationLink</name><operator>&amp;&amp;</operator> <name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HWND</name></type> <name>GetToast</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NotificationData</name><operator>*</operator> <name>data</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>DestroyToast</name><parameter_list>(<parameter><decl><type><name>ToastInstance</name><modifier>*</modifier></type> <name>inst</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TCHAR</name></type> <name><name>class_name_</name><index>[]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>HWND</name></type> <name>hwnd_controller_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HFONT</name></type> <name>caption_font_</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>body_font_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ToastInstance</name></expr></argument>&gt;</argument_list></name> <name>instances_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>NotificationLink</name></expr></argument>&gt;</argument_list></name> <name>queue_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_animating_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>class</name> <name>DesktopNotificationController</name><operator>::</operator><name>Notification</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>Notification</name><argument_list>()</argument_list></call></expr>;
  <expr><name>explicit</name> <call><name>Notification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NotificationData</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>Notification</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Notification</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><call><name>Notification</name><argument_list>()</argument_list></call></expr>;

  <expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Notification</name><operator>&amp;</operator> <name>other</name><operator>)</operator> <specifier>const</specifier></expr>;

  <expr><name>void</name> <call><name>Close</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>Set</name><argument_list>(<argument>std::wstring caption</argument>, <argument>std::wstring body_text</argument>, <argument>HBITMAP image</argument>)</argument_list></macro></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NotificationData</name></expr></argument>&gt;</argument_list></name> <name>data_</name></expr>;

  <expr><name>friend</name> <name>class</name> <name>DesktopNotificationController</name></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_DESKTOP_NOTIFICATION_CONTROLLER_H_</comment>
</unit>
