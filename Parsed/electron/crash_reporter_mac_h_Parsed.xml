<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/crash_reporter/crash_reporter_mac.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_MAC_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_MAC_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/crash_reporter/crash_reporter_crashpad.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>DefaultSingletonTraits</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>crash_reporter</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CrashReporterMac</name> <range>: <expr><name>public</name> <name>CrashReporterCrashpad</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>CrashReporterMac</name><operator>*</operator> <call><name>GetInstance</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>Init</name><argument_list>(<argument>const std::string&amp; product_name</argument>,
            <argument>const std::string&amp; company_name</argument>,
            <argument>const std::string&amp; submit_url</argument>,
            <argument>const base::FilePath&amp; crashes_dir</argument>,
            <argument>bool upload_to_server</argument>,
            <argument>bool skip_system_crash_handler</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetUploadParameters</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> struct <name>base</name><operator>::</operator><name><name>DefaultSingletonTraits</name><argument_list type="generic">&lt;<argument><expr><name>CrashReporterMac</name></expr></argument>&gt;</argument_list></name></expr>;

  <expr><call><name>CrashReporterMac</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>CrashReporterMac</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>CrashReporterMac</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace crash_reporter</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_CRASH_REPORTER_CRASH_REPORTER_MAC_H_</comment>
</unit>
