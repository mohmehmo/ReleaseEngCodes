<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/win/windows_toast_notification.h"><comment type="line">// Copyright (c) 2015 Felix Rieseberg &lt;feriese@microsoft.com&gt; and Jason Poon</comment>
<comment type="line">// &lt;jason.poon@microsoft.com&gt;. All rights reserved.</comment>
<comment type="line">// Copyright (c) 2015 Ryan McShane &lt;rmcshane@bandwidth.com&gt; and Brandon Smith</comment>
<comment type="line">// &lt;bsmith@bandwidth.com&gt;</comment>
<comment type="line">// Thanks to both of those folks mentioned above who first thought up a bunch of</comment>
<comment type="line">// this code</comment>
<comment type="line">// and released it as MIT to the world.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_WIN_WINDOWS_TOAST_NOTIFICATION_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_WIN_WINDOWS_TOAST_NOTIFICATION_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.ui.notifications.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wrl/implements.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/notifications/notification.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>using</name> <name>Microsoft</name><operator>::</operator><name>WRL</name><operator>::</operator><name>ClassicCom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>Microsoft</name><operator>::</operator><name>WRL</name><operator>::</operator><name>ComPtr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>Microsoft</name><operator>::</operator><name>WRL</name><operator>::</operator><name>Make</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>Microsoft</name><operator>::</operator><name>WRL</name><operator>::</operator><name>RuntimeClass</name></expr>;</expr_stmt>
<expr_stmt><expr><name>using</name> <name>Microsoft</name><operator>::</operator><name>WRL</name><operator>::</operator><name>RuntimeClassFlags</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedHString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>DesktopToastActivatedEventHandler</name> <init>=
    <expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Foundation</name><operator>::</operator><name><name>ITypedEventHandler</name><argument_list type="generic">&lt;
        <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>ToastNotification</name><operator>*</operator></expr></argument>,
        <argument><expr><name>IInspectable</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>DesktopToastDismissedEventHandler</name> <init>=
    <expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Foundation</name><operator>::</operator><name><name>ITypedEventHandler</name><argument_list type="generic">&lt;
        <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>ToastNotification</name><operator>*</operator></expr></argument>,
        <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>ToastDismissedEventArgs</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>DesktopToastFailedEventHandler</name> <init>=
    <expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Foundation</name><operator>::</operator><name><name>ITypedEventHandler</name><argument_list type="generic">&lt;
        <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>ToastNotification</name><operator>*</operator></expr></argument>,
        <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>ToastFailedEventArgs</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>WindowsToastNotification</name> <range>: <expr><name>public</name> <name>Notification</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <comment type="line">// Should only be called by NotificationPresenterWin.</comment>
  <specifier>static</specifier> <name>bool</name> <call><name>Initialize</name><argument_list>()</argument_list></call></expr>;

  <expr><call><name>WindowsToastNotification</name><argument_list>(<argument><expr><name>NotificationDelegate</name><operator>*</operator> <name>delegate</name></expr></argument>,
                           <argument><expr><name>NotificationPresenter</name><operator>*</operator> <name>presenter</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>WindowsToastNotification</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// Notification:</comment>
  <name>void</name> <macro><name>Show</name><argument_list>(<argument>const NotificationOptions&amp; options</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Dismiss</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> <name>class</name> <name>ToastEventHandler</name></expr>;

  <expr><name>bool</name> <macro><name>GetToastXml</name><argument_list>(
      <argument>ABI::Windows::UI::Notifications::IToastNotificationManagerStatics*
          toastManager</argument>,
      <argument>const std::wstring&amp; title</argument>,
      <argument>const std::wstring&amp; msg</argument>,
      <argument>const std::wstring&amp; icon_path</argument>,
      <argument>const std::wstring&amp; timeout_type</argument>,
      <argument>const bool silent</argument>,
      <argument>ABI::Windows::Data::Xml::Dom::IXmlDocument** toastXml</argument>)</argument_list></macro></expr>;
  <expr><name>bool</name> <call><name>SetXmlAudioSilent</name><argument_list>(<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Data</name><operator>::</operator><name>Xml</name><operator>::</operator><name>Dom</name><operator>::</operator><name>IXmlDocument</name><operator>*</operator> <name>doc</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>SetXmlScenarioReminder</name><argument_list>(<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Data</name><operator>::</operator><name>Xml</name><operator>::</operator><name>Dom</name><operator>::</operator><name>IXmlDocument</name><operator>*</operator> <name>doc</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>SetXmlText</name><argument_list>(<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Data</name><operator>::</operator><name>Xml</name><operator>::</operator><name>Dom</name><operator>::</operator><name>IXmlDocument</name><operator>*</operator> <name>doc</name></expr></argument>,
                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>text</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>SetXmlText</name><argument_list>(<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Data</name><operator>::</operator><name>Xml</name><operator>::</operator><name>Dom</name><operator>::</operator><name>IXmlDocument</name><operator>*</operator> <name>doc</name></expr></argument>,
                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>title</name></expr></argument>,
                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>body</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>SetXmlImage</name><argument_list>(<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Data</name><operator>::</operator><name>Xml</name><operator>::</operator><name>Dom</name><operator>::</operator><name>IXmlDocument</name><operator>*</operator> <name>doc</name></expr></argument>,
                   <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>icon_path</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <macro><name>GetTextNodeList</name><argument_list>(<argument>ScopedHString* tag</argument>,
                       <argument>ABI::Windows::Data::Xml::Dom::IXmlDocument* doc</argument>,
                       <argument>ABI::Windows::Data::Xml::Dom::IXmlNodeList** nodeList</argument>,
                       <argument>uint32_t reqLength</argument>)</argument_list></macro></expr>;
  <expr><name>bool</name> <call><name>AppendTextToXml</name><argument_list>(<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Data</name><operator>::</operator><name>Xml</name><operator>::</operator><name>Dom</name><operator>::</operator><name>IXmlDocument</name><operator>*</operator> <name>doc</name></expr></argument>,
                       <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>Data</name><operator>::</operator><name>Xml</name><operator>::</operator><name>Dom</name><operator>::</operator><name>IXmlNode</name><operator>*</operator> <name>node</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>text</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>SetupCallbacks</name><argument_list>(
      <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>IToastNotification</name><operator>*</operator> <name>toast</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>RemoveCallbacks</name><argument_list>(
      <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>IToastNotification</name><operator>*</operator> <name>toast</name></expr></argument>)</argument_list></call></expr>;

  <expr><specifier>static</specifier> <name><name>ComPtr</name><argument_list type="generic">&lt;
      <argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>IToastNotificationManagerStatics</name></expr></argument>&gt;</argument_list></name>
      <name>toast_manager_</name></expr>;
  <expr><specifier>static</specifier> <name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>IToastNotifier</name></expr></argument>&gt;</argument_list></name>
      <name>toast_notifier_</name></expr>;

  <expr><name>EventRegistrationToken</name> <name>activated_token_</name></expr>;
  <expr><name>EventRegistrationToken</name> <name>dismissed_token_</name></expr>;
  <expr><name>EventRegistrationToken</name> <name>failed_token_</name></expr>;

  <expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>ToastEventHandler</name></expr></argument>&gt;</argument_list></name> <name>event_handler_</name></expr>;
  <expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>ABI</name><operator>::</operator><name>Windows</name><operator>::</operator><name>UI</name><operator>::</operator><name>Notifications</name><operator>::</operator><name>IToastNotification</name></expr></argument>&gt;</argument_list></name>
      <name>toast_notification_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WindowsToastNotification</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ToastEventHandler</name> <range>: <expr><name>public</name> <name><name>RuntimeClass</name><argument_list type="generic">&lt;<argument><expr><name><name>RuntimeClassFlags</name><argument_list type="generic">&lt;<argument><expr><name>ClassicCom</name></expr></argument>&gt;</argument_list></name></expr></argument>,
                                              <argument><expr><name>DesktopToastActivatedEventHandler</name></expr></argument>,
                                              <argument><expr><name>DesktopToastDismissedEventHandler</name></expr></argument>,
                                              <argument><expr><name>DesktopToastFailedEventHandler</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>ToastEventHandler</name><argument_list>(<argument><expr><name>Notification</name><operator>*</operator> <name>notification</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>ToastEventHandler</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>IFACEMETHODIMP</name> <macro><name>Invoke</name><argument_list>(
      <argument>ABI::Windows::UI::Notifications::IToastNotification* sender</argument>,
      <argument>IInspectable* args</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>IFACEMETHODIMP</name> <macro><name>Invoke</name><argument_list>(
      <argument>ABI::Windows::UI::Notifications::IToastNotification* sender</argument>,
      <argument>ABI::Windows::UI::Notifications::IToastDismissedEventArgs* e</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>IFACEMETHODIMP</name> <macro><name>Invoke</name><argument_list>(
      <argument>ABI::Windows::UI::Notifications::IToastNotification* sender</argument>,
      <argument>ABI::Windows::UI::Notifications::IToastFailedEventArgs* e</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>Notification</name></expr></argument>&gt;</argument_list></name> <name>notification_</name></expr>;  <comment type="line">// weak ref.</comment>

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ToastEventHandler</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_WIN_WINDOWS_TOAST_NOTIFICATION_H_</comment>
</unit>
