<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/native_window.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NATIVE_WINDOW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NATIVE_WINDOW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/supports_user_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/desktop_media_id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_user_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/browser/app_window/size_constraints.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/widget/widget_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>SkRegion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<struct_decl>struct <name>NativeWebKeyboardEvent</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RectF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Size</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gfx</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PersistentDictionary</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomMenuModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NativeBrowserView</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>NSView</name><modifier>*</modifier></type> <name>NativeWindowHandle</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <expr_stmt><expr><name>gfx</name><operator>::</operator><name>AcceleratedWidget</name> <name>NativeWindowHandle</name></expr>;</expr_stmt></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindow</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>SupportsUserData</name></expr></range></decl>,
                     <decl><type ref="prev"/><name>public</name> <name>views</name>::<name>WidgetDelegate</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><operator>~</operator><macro><name>NativeWindow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// Create window with existing WebContents, the caller is responsible for</comment>
  <comment type="line">// managing the window's live.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>NativeWindow</name><modifier>*</modifier></type> <name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>,
                              <argument><expr><name>NativeWindow</name><operator>*</operator> <name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>InitFromOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetContentView</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>view</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Close</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>CloseImmediately</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsClosed</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Focus</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>focus</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsFocused</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Show</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ShowInactive</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Hide</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsVisible</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsEnabled</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Maximize</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Unmaximize</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsMaximized</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Minimize</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Restore</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsMinimized</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetFullScreen</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fullscreen</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsFullscreen</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>, <argument><expr><name>bool</name> <name>animate</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetBounds</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>size</name></expr></argument>, <argument><expr><name>bool</name> <name>animate</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Size</name> <call><name>GetSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetPosition</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>position</name></expr></argument>, <argument><expr><name>bool</name> <name>animate</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Point</name> <call><name>GetPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetContentSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>size</name></expr></argument>, <argument><expr><name>bool</name> <name>animate</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Size</name> <call><name>GetContentSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetContentBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>, <argument><expr><name>bool</name> <name>animate</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetContentBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsNormal</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetNormalBounds</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetSizeConstraints</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>extensions</name><operator>::</operator><name>SizeConstraints</name><operator>&amp;</operator> <name>size_constraints</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>extensions</name><operator>::</operator><name>SizeConstraints</name> <macro><name>GetSizeConstraints</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetContentSizeConstraints</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>extensions</name><operator>::</operator><name>SizeConstraints</name><operator>&amp;</operator> <name>size_constraints</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>extensions</name><operator>::</operator><name>SizeConstraints</name> <macro><name>GetContentSizeConstraints</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetMinimumSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetMinimumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetMaximumSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetMaximumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetContentMinimumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetContentMaximumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetSheetOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>offsetX</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>offsetY</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>double</name></type> <name>GetSheetOffsetX</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>double</name></type> <name>GetSheetOffsetY</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetResizable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>resizable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>MoveAbove</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>sourceId</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>MoveTop</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsResizable</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetMovable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>movable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsMovable</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetMinimizable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>minimizable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsMinimizable</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetMaximizable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>maximizable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsMaximizable</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetFullScreenable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fullscreenable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsFullScreenable</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetClosable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>closable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsClosable</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetAlwaysOnTop</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>ZOrderLevel</name> <name>z_order</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>level</name> <operator>=</operator> <literal type="string">"floating"</literal></expr></argument>,
                              <argument><expr><name>int</name> <name>relativeLevel</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>ui</name><operator>::</operator><name>ZOrderLevel</name> <call><name>GetZOrderLevel</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Center</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Invalidate</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetTitle</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Ability to augment the window title for the screen readers.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAccessibleTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetAccessibleTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>FlashFrame</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flash</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetSkipTaskbar</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>skip</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetExcludedFromShownWindowsMenu</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>excluded</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsExcludedFromShownWindowsMenu</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetSimpleFullScreen</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>simple_fullscreen</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsSimpleFullScreen</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetKiosk</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>kiosk</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsKiosk</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetBackgroundColor</name><parameter_list>(<parameter><decl><type><name>SkColor</name></type> <name>color</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetHasShadow</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>has_shadow</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>HasShadow</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetOpacity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>opacity</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>double</name></type> <name>GetOpacity</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetRepresentedFilename</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>filename</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetRepresentedFilename</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetDocumentEdited</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>edited</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsDocumentEdited</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetIgnoreMouseEvents</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forward</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetContentProtection</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetFocusable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>focusable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetMenu</name><parameter_list>(<parameter><decl><type><name>AtomMenuModel</name><modifier>*</modifier></type> <name>menu</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetParentWindow</name><parameter_list>(<parameter><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>AddBrowserView</name><parameter_list>(<parameter><decl><type><name>NativeBrowserView</name><modifier>*</modifier></type> <name>browser_view</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>RemoveBrowserView</name><parameter_list>(<parameter><decl><type><name>NativeBrowserView</name><modifier>*</modifier></type> <name>browser_view</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <expr_stmt><expr><name>virtual</name> <name>content</name><operator>::</operator><name>DesktopMediaID</name> <macro><name>GetDesktopMediaID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>NativeView</name> <macro><name>GetNativeView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>NativeWindow</name> <macro><name>GetNativeWindow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>AcceleratedWidget</name> <macro><name>GetAcceleratedWidget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>NativeWindowHandle</name> <macro><name>GetNativeWindowHandle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Taskbar/Dock APIs.</comment>
  <decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ProgressState</name> <block>{<block_content>
    <expr_stmt><expr><name>kNone</name></expr><operator>,</operator>           <comment type="line">// no progress, no marking</comment>
    <expr><name>kIndeterminate</name></expr><operator>,</operator>  <comment type="line">// progress, indeterminate</comment>
    <expr><name>kError</name></expr><operator>,</operator>          <comment type="line">// progress, errored (red)</comment>
    <expr><name>kPaused</name></expr><operator>,</operator>         <comment type="line">// progress, paused (yellow)</comment>
    <expr><name>kNormal</name></expr><operator>,</operator></expr_stmt>         <comment type="line">// progress, not marked (green)</comment>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetProgressBar</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ProgressState</name></type> <name>state</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetOverlayIcon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator> <name>overlay</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>description</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Workspace APIs.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetVisibleOnAllWorkspaces</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>,
                                         <parameter><decl><type><name>bool</name></type> <name>visibleOnFullScreen</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsVisibleOnAllWorkspaces</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetAutoHideCursor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_hide</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Vibrancy API</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetVibrancy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Touchbar API</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetTouchBar</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name>PersistentDictionary</name></expr></argument>&gt;</argument_list></name> <name>items</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>RefreshTouchBarItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>item_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetEscapeTouchBarItem</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>PersistentDictionary</name> <name>item</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Native Tab API</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SelectPreviousTab</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SelectNextTab</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>MergeAllWindows</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>MoveTabToNewWindow</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ToggleTabBar</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>AddTabbedWindow</name><parameter_list>(<parameter><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Returns false if unsupported.</comment>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>SetWindowButtonVisibility</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Toggle the menu bar.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetAutoHideMenuBar</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_hide</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsMenuBarAutoHide</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetMenuBarVisibility</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsMenuBarVisible</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Set the aspect ratio when resizing window.</comment>
  <function_decl><type><name>double</name></type> <name>GetAspectRatio</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <call><name>GetAspectRatioExtraSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetAspectRatio</name><argument_list>(<argument><expr><name>double</name> <name>aspect_ratio</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>extra_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// File preview APIs.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PreviewFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>path</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>display_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>CloseFilePreview</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetGTKDarkThemeEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_dark_theme</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Converts between content bounds and window bounds.</comment>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>ContentBoundsToWindowBounds</name><argument_list>(
      <argument>const gfx::Rect&amp; bounds</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>WindowBoundsToContentBounds</name><argument_list>(
      <argument>const gfx::Rect&amp; bounds</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWeakPtr</name><argument_list>()</argument_list></macro> <block>{
    <return>return <expr><call><name><name>weak_factory_</name><operator>.</operator><name>GetWeakPtr</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

  <comment type="line">// Methods called by the WebContents.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>HandleKeyboardEvent</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>NativeWebKeyboardEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

  <comment type="line">// Public API used by platform-dependent delegates and observers to send UI</comment>
  <comment type="line">// related notifications.</comment>
  <function_decl><type><name>void</name></type> <name>NotifyWindowRequestPreferredWith</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowCloseButtonClicked</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowClosed</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowEndSession</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowBlur</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowFocus</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowShow</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowHide</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowMaximize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowUnmaximize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowMinimize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowRestore</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowMove</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyWindowWillResize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>new_bounds</name></expr></argument>,
                              <argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyWindowResize</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyWindowWillMove</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>new_bounds</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyWindowMoved</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowScrollTouchBegin</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowScrollTouchEnd</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyWindowSwipe</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>direction</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyWindowRotateGesture</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowSheetBegin</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowSheetEnd</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowEnterFullScreen</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowLeaveFullScreen</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowEnterHtmlFullScreen</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowLeaveHtmlFullScreen</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyWindowAlwaysOnTopChanged</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyWindowExecuteAppCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>command</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyTouchBarItemInteraction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>item_id</name></expr></argument>,
                                     <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>details</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyNewWindowForTab</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function_decl><type><name>void</name></type> <name>NotifyWindowMessage</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>w_param</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>l_param</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <function><type><name>void</name></type> <name>AddObserver</name><parameter_list>(<parameter><decl><type><name>NativeWindowObserver</name><modifier>*</modifier></type> <name>obs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>observers_</name><operator>.</operator><name>AddObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>RemoveObserver</name><parameter_list>(<parameter><decl><type><name>NativeWindowObserver</name><modifier>*</modifier></type> <name>obs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>observers_</name><operator>.</operator><name>RemoveObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <expr_stmt><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <macro><name>widget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>widget_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <macro><name>content_view</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>content_view_</name></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>bool</name> <macro><name>has_frame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>has_frame_</name></expr>;</return> }</block></expr></expr_stmt>
  <function><type><name>void</name></type> <name>set_has_frame</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>has_frame</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>has_frame_</name> <operator>=</operator> <name>has_frame</name></expr>;</expr_stmt> </block_content>}</block></function>

  <expr_stmt><expr><name>bool</name> <macro><name>transparent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>transparent_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>enable_larger_than_screen</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>enable_larger_than_screen_</name></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>NativeWindow</name><operator>*</operator> <macro><name>parent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>parent_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>is_modal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>is_modal_</name></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>NativeBrowserView</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>browser_views</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>browser_views_</name></expr>;</return> }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><call><name>NativeWindow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>, <argument><expr><name>NativeWindow</name><operator>*</operator> <name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// views::WidgetDelegate:</comment>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <macro><name>GetWidget</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <macro><name>GetWidget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetAccessibleWindowTitle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>set_content_view</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>view</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>content_view_</name> <operator>=</operator> <name>view</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

  <function><type><name>void</name></type> <name>add_browser_view</name><parameter_list>(<parameter><decl><type><name>NativeBrowserView</name><modifier>*</modifier></type> <name>browser_view</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>browser_views_</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>browser_view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>remove_browser_view</name><parameter_list>(<parameter><decl><type><name>NativeBrowserView</name><modifier>*</modifier></type> <name>browser_view</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>browser_views_</name><operator>.</operator><name>remove_if</name></name><argument_list>(
        <argument><expr><index>[<expr><operator>&amp;</operator><name>browser_view</name></expr>]</index><operator>(</operator><name>NativeBrowserView</name><operator>*</operator> <name>n</name><operator>)</operator> <block>{ <return>return <expr><operator>(</operator><name>n</name> <operator>==</operator> <name>browser_view</name><operator>)</operator></expr>;</return> }</block></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
  </block_content>}</block></decl></decl_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>Widget</name></expr></argument>&gt;</argument_list></name> <name>widget_</name></expr>;</expr_stmt>

  <comment type="line">// The content view, weak ref.</comment>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>content_view_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

  <comment type="line">// Whether window has standard frame.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_frame_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Whether window is transparent.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>transparent_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Minimum and maximum size, stored as content size.</comment>
  <expr_stmt><expr><name>extensions</name><operator>::</operator><name>SizeConstraints</name> <name>size_constraints_</name></expr>;</expr_stmt>

  <comment type="line">// Whether window can be resized larger than screen.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>enable_larger_than_screen_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The windows has been closed.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_closed_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Used to display sheets at the appropriate horizontal and vertical offsets</comment>
  <comment type="line">// on macOS.</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>sheet_offset_x_</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>sheet_offset_y_</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Used to maintain the aspect ratio of a view which is inside of the</comment>
  <comment type="line">// content view.</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>aspect_ratio_</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <name>aspect_ratio_extraSize_</name></expr>;</expr_stmt>

  <comment type="line">// The parent window, it is guaranteed to be valid during this window's life.</comment>
  <decl_stmt><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>parent_</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Is this a modal window.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_modal_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The browser view layer.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>NativeBrowserView</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>browser_views_</name></expr>;</expr_stmt>

  <comment type="line">// Observers of this window.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindowObserver</name></expr></argument>&gt;</argument_list></name> <name>observers_</name></expr>;</expr_stmt>

  <comment type="line">// Accessible title.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>accessible_title_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NativeWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// This class provides a hook to get a NativeWindow from a WebContents.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>NativeWindowRelay</name>
    <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindowRelay</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>void</name> <call><name>CreateForWebContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator></expr></argument>,
                                   <argument><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;

  <expr><operator>~</operator><macro><name>NativeWindowRelay</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>NativeWindow</name><operator>*</operator> <macro><name>GetNativeWindow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>native_window_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

  <call><name>WEB_CONTENTS_USER_DATA_KEY_DECL</name><argument_list>()</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> <name>class</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name></expr>;
  <expr><name>explicit</name> <call><name>NativeWindowRelay</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name> <name>window</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name> <name>native_window_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

}  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NATIVE_WINDOW_H_</comment>
</unit>
