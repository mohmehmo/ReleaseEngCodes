<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/dictionary.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_DICTIONARY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_DICTIONARY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_converters/std_converter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/function_template.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<comment type="line">// Adds a few more extends methods to gin::Dictionary.</comment>
<comment type="line">//</comment>
<comment type="line">// Note that as the destructor of gin::Dictionary is not virtual, and we want to</comment>
<comment type="line">// convert between 2 types, we must not add any member.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Dictionary</name> <range>: <expr><name>public</name> <name>gin</name><operator>::</operator><name>Dictionary</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>Dictionary</name><argument_list>()</argument_list></call> <operator>:</operator> <name>gin</name><operator>::</operator><macro><name>Dictionary</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
  <call><name>Dictionary</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>object</name></expr></argument>)</argument_list></call>
      <operator>:</operator> <name>gin</name><operator>::</operator><macro><name>Dictionary</name><argument_list>(<argument>isolate</argument>, <argument>object</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// Allow implicitly converting from gin::Dictionary, as it is absolutely</comment>
  <comment type="line">// safe in this case.</comment>
  <call><name>Dictionary</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>dict</name></expr></argument>)</argument_list></call>  <comment type="line">// NOLINT(runtime/explicit)</comment>
      <operator>:</operator> <name>gin</name><operator>::</operator><macro><name>Dictionary</name><argument_list>(<argument>dict</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// Differences from the Get method in gin::Dictionary:</comment>
  <comment type="line">// 1. This is a const method;</comment>
  <comment type="line">// 2. It checks whether the key exists before reading;</comment>
  <comment type="line">// 3. It accepts arbitrary type of key.</comment>
  <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name> <macro><name>Get</name><argument_list>(<argument>const K&amp; key</argument>, <argument>V* out</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
    <comment type="line">// Check for existence before getting, otherwise this method will always</comment>
    <comment type="line">// returns true when T == v8::Local&lt;v8::Value&gt;.</comment>
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name> <operator>=</operator> <call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>v8_key</name> <operator>=</operator> <name>gin</name><operator>::</operator><call><name>ConvertToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Has</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v8_key</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>IsJust</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Get</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v8_key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>gin</name><operator>::</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
    <return>return <expr><name>false</name></expr>;</return>
  }</block></expr></range></decl></decl_stmt>

  <comment type="line">// Differences from the Set method in gin::Dictionary:</comment>
  <comment type="line">// 1. It accepts arbitrary type of key.</comment>
  <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>v8_value</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin</name><operator>::</operator><call><name>TryConvertToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v8_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator>
        <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Set</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><name>gin</name><operator>::</operator><call><name>ConvertToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v8_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>IsNothing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>GetHidden</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>key</name></expr></argument>, <argument><expr><name>T</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list> const <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name> <operator>=</operator> <call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Private</name></expr></argument>&gt;</argument_list></name> <name>privateKey</name> <operator>=</operator>
        <name>v8</name><operator>::</operator><name>Private</name><operator>::</operator><call><name>ForApi</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>HasPrivate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>privateKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>IsJust</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetPrivate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>privateKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>gin</name><operator>::</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>SetHidden</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>key</name></expr></argument>, <argument><expr><name>T</name> <name>val</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>v8_value</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin</name><operator>::</operator><call><name>TryConvertToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v8_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name> <operator>=</operator> <call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Private</name></expr></argument>&gt;</argument_list></name> <name>privateKey</name> <operator>=</operator>
        <name>v8</name><operator>::</operator><name>Private</name><operator>::</operator><call><name>ForApi</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator>
        <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SetPrivate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>privateKey</name></expr></argument>, <argument><expr><name>v8_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>IsNothing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>SetMethod</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>context</name> <init>= <expr><call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>templ</name> <init>= <expr><name><name>CallbackTraits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>CreateTemplate</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>GetHandle</name><argument_list>()</argument_list></call>
        <operator>-&gt;</operator><call><name>Set</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>templ</name><operator>-&gt;</operator><name>GetFunction</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>ToChecked</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>SetReadOnly</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>v8_value</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin</name><operator>::</operator><call><name>TryConvertToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v8_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>DefineOwnProperty</name><argument_list>(
        <argument><expr><call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>v8_value</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name>ReadOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>IsNothing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Note: If we plan to add more Set methods, consider adding an option instead</comment>
  <comment type="line">// of copying code.</comment>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>SetReadOnlyNonConfigurable</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>key</name></expr></argument>, <argument><expr><name>T</name> <name>val</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>v8_value</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin</name><operator>::</operator><call><name>TryConvertToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v8_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>DefineOwnProperty</name><argument_list>(
        <argument><expr><call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>v8_value</name></expr></argument>,
        <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>PropertyAttribute</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>ReadOnly</name> <operator>|</operator> <name>v8</name><operator>::</operator><name>DontDelete</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>IsNothing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>Has</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>key</name></expr></argument>)</argument_list> const <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Has</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>IsNothing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>Delete</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>key</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Maybe</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>result</name> <operator>=</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Delete</name><argument_list>(
        <argument><expr><call><name>isolate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetCurrentContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>IsNothing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>FromJust</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <expr_stmt><expr><name>bool</name> <macro><name>IsEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isolate</name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name> <operator>||</operator> <call><name>GetHandle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>IsEmpty</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>GetHandle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>gin</name><operator>::</operator><call><name>ConvertToV8</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>gin</name><operator>::</operator><name>Dictionary</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name><name>As</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <comment type="line">// DO NOT ADD ANY DATA MEMBER.</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace gin_helper</comment>

namespace <macro><name>gin</name></macro> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name>Dictionary</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>gin_helper::Dictionary val</argument>)</argument_list></macro> <block>{
    <return>return <expr><call><name><name>val</name><operator>.</operator><name>GetHandle</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
  }</block>
  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>gin_helper::Dictionary* out</argument>)</argument_list></macro> <block>{
    <expr><name>gin</name><operator>::</operator><name>Dictionary</name> <call><name>gdict</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConvertFromV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gdict</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <name>gin_helper</name><operator>::</operator><call><name>Dictionary</name><argument_list>(<argument><expr><name>gdict</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block>
};

}  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_DICTIONARY_H_</comment>
</unit>
