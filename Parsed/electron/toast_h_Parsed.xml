<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/win/win32_desktop_notifications/toast.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_TOAST_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_TOAST_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/notifications/win/win32_desktop_notifications/desktop_notification_controller.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/logging.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<expr_stmt><expr><name>class</name> <name>DesktopNotificationController</name><operator>::</operator><name>Toast</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>void</name> <macro><name>Register</name><argument_list>(<argument>HINSTANCE hinstance</argument>)</argument_list></macro></expr>;
  <expr><specifier>static</specifier> <name>HWND</name> <macro><name>Create</name><argument_list>(<argument>HINSTANCE hinstance</argument>,
                     <argument>std::shared_ptr&lt;NotificationData&gt; data</argument>)</argument_list></macro></expr>;
  <expr><specifier>static</specifier> <name>Toast</name><operator>*</operator> <macro><name>Get</name><argument_list>(<argument>HWND hwnd</argument>)</argument_list></macro> <block>{
    <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Toast</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block>

  <specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name> <macro><name>WndProc</name><argument_list>(<argument>HWND hwnd</argument>,
                                  <argument>UINT message</argument>,
                                  <argument>WPARAM wparam</argument>,
                                  <argument>LPARAM lparam</argument>)</argument_list></macro></expr>;

  <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NotificationData</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>GetNotification</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>data_</name></expr>;</return>
  }</block>

  <name>void</name> <call><name>ResetContents</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <call><name>Dismiss</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>PopUp</name><argument_list>(<argument>int y</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetVerticalPosition</name><argument_list>(<argument>int y</argument>)</argument_list></macro></expr>;
  <expr><name>int</name> <macro><name>GetVerticalPosition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>vertical_pos_target_</name></expr>;</return> }</block>
  <name>int</name> <macro><name>GetHeight</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>toast_size_</name><operator>.</operator><name>cy</name></name></expr>;</return> }</block>
  <name>HDWP</name> <macro><name>Animate</name><argument_list>(<argument>HDWP hdwp</argument>, <argument>const POINT&amp; origin</argument>)</argument_list></macro></expr>;
  <expr><name>bool</name> <macro><name>IsAnimationActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>ease_in_active_</name> <operator>||</operator> <name>ease_out_active_</name> <operator>||</operator> <call><name>IsStackCollapseActive</name><argument_list>()</argument_list></call></expr>;</return>
  }</block>
  <name>bool</name> <macro><name>IsHighlighted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <expr><call><name>DCHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>is_highlighted_</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsWindowVisible</name><argument_list>(<argument><expr><name>hwnd_</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>is_highlighted_</name></expr>;</return>
  }</block>

 <name>private</name><operator>:</operator>
  enum <name>TimerID</name> <block>{ <expr><name>TimerID_AutoDismiss</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>;

  <macro><name>Toast</name><argument_list>(<argument>HWND hwnd</argument>, <argument>std::shared_ptr&lt;NotificationData&gt;* data</argument>)</argument_list></macro>;
  <expr><operator>~</operator><call><name>Toast</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <call><name>UpdateBufferSize</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>UpdateScaledImage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SIZE</name><operator>&amp;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>Draw</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;
  <expr><name>bool</name> <macro><name>IsRedrawNeeded</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>void</name> <call><name>UpdateContents</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <call><name>AutoDismiss</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>CancelDismiss</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>ScheduleDismissal</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <call><name>StartEaseIn</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>StartEaseOut</name><argument_list>()</argument_list></call></expr>;
  <expr><name>bool</name> <macro><name>IsStackCollapseActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

  <expr><name>float</name> <call><name>AnimateEaseIn</name><argument_list>()</argument_list></call></expr>;
  <expr><name>float</name> <call><name>AnimateEaseOut</name><argument_list>()</argument_list></call></expr>;
  <expr><name>float</name> <call><name>AnimateStackCollapse</name><argument_list>()</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <specifier>static</specifier> <specifier>const</specifier> <name>TCHAR</name> <name><name>class_name_</name><index>[]</index></name></expr>;

  <expr><specifier>const</specifier> <name>HWND</name> <name>hwnd_</name></expr>;
  <expr><name>HDC</name> <name>hdc_</name></expr>;
  <expr><name>HBITMAP</name> <name>bitmap_</name> <operator>=</operator> <name>NULL</name></expr>;

  <expr><name>class</name> <name>UIAutomationInterface</name></expr>;
  <expr><name>UIAutomationInterface</name><operator>*</operator> <name>uia_</name> <operator>=</operator> <name>nullptr</name></expr>;

  <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NotificationData</name></expr></argument>&gt;</argument_list></name> <name>data_</name></expr>;  <comment type="line">// never null</comment>

  <expr><name>SIZE</name> <name>toast_size_</name> <operator>=</operator> <block>{}</block></expr>;
  <expr><name>SIZE</name> <name>margin_</name> <operator>=</operator> <block>{}</block></expr>;
  <expr><name>RECT</name> <name>close_button_rect_</name> <operator>=</operator> <block>{}</block></expr>;
  <expr><name>HBITMAP</name> <name>scaled_image_</name> <operator>=</operator> <name>NULL</name></expr>;

  <expr><name>int</name> <name>vertical_pos_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>int</name> <name>vertical_pos_target_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>bool</name> <name>is_non_interactive_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>ease_in_active_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>ease_out_active_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>is_content_updated_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>is_highlighted_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>bool</name> <name>is_close_hot_</name> <operator>=</operator> <name>false</name></expr>;
  <expr><name>DWORD</name> <name>ease_in_start_</name></expr>, <expr><name>ease_out_start_</name></expr>, <expr><name>stack_collapse_start_</name></expr>;
  <expr><name>float</name> <name>ease_in_pos_</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>ease_out_pos_</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>stack_collapse_pos_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_TOAST_H_</comment>
</unit>
