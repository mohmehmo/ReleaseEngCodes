<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/frameless_view.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_FRAMELESS_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_FRAMELESS_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/window/non_client_view.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>views</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Widget</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindowViews</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FramelessView</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>NonClientFrameView</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <specifier>const</specifier> <name>char</name> <name><name>kViewClassName</name><index>[]</index></name></expr>;
  <expr><call><name>FramelessView</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>FramelessView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>virtual</name> <name>void</name> <call><name>Init</name><argument_list>(<argument><expr><name>NativeWindowViews</name><operator>*</operator> <name>window</name></expr></argument>, <argument><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>frame</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Returns whether the |point| is on frameless window's resizing border.</comment>
  <expr><name>int</name> <call><name>ResizingBorderHitTest</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// views::NonClientFrameView:</comment>
  <name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetBoundsForClientView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetWindowBoundsForClientBounds</name><argument_list>(
      <argument>const gfx::Rect&amp; client_bounds</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>int</name> <macro><name>NonClientHitTest</name><argument_list>(<argument>const gfx::Point&amp; point</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>GetWindowMask</name><argument_list>(<argument>const gfx::Size&amp; size</argument>, <argument>SkPath* window_mask</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ResetWindowControls</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>UpdateWindowIcon</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>UpdateWindowTitle</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SizeConstraintsChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Overridden from View:</comment>
  <expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>CalculatePreferredSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetMinimumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Size</name> <macro><name>GetMaximumSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>GetClassName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

  <comment type="line">// Not owned.</comment>
  <expr><name>NativeWindowViews</name><operator>*</operator> <name>window_</name> <operator>=</operator> <name>nullptr</name></expr>;
  <expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>frame_</name> <operator>=</operator> <name>nullptr</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>FramelessView</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_FRAMELESS_VIEW_H_</comment>
</unit>
