<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/atom_autofill_agent.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_ATOM_AUTOFILL_AGENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_ATOM_AUTOFILL_AGENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/associated_receiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/associated_remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/pending_associated_receiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/api/api.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/common/associated_interfaces/associated_interface_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_autofill_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_element.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_form_control_element.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_input_element.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AutofillAgent</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>RenderFrameObserver</name></expr></range></decl>,
                      <decl><type ref="prev"/><name>public</name> <name>blink</name>::<name>WebAutofillClient</name></decl>,
                      <decl><type ref="prev"/><name>public</name> <name>mojom</name>::<name>ElectronAutofillAgent</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>AutofillAgent</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>frame</name></expr></argument>,
                         <argument><expr><name>blink</name><operator>::</operator><name>AssociatedInterfaceRegistry</name><operator>*</operator> <name>registry</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>AutofillAgent</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>BindReceiver</name><argument_list>(
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingAssociatedReceiver</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>ElectronAutofillAgent</name></expr></argument>&gt;</argument_list></name> <name>receiver</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// content::RenderFrameObserver:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnDestruct</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>void</name> <macro><name>DidChangeScrollOffset</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>FocusedElementChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebElement</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>DidCompleteFocusChangeInFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidReceiveLeftMouseDownOrGestureTapInNode</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebNode</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <struct>struct <name>ShowSuggestionsOptions</name> <block>{
    <expr_stmt><expr><call><name>ShowSuggestionsOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>autofill_on_empty_values</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>requires_caret_at_end</name></decl>;</decl_stmt>
  }</block>;</struct>

  <comment type="line">// blink::WebAutofillClient:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>TextFieldDidEndEditing</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebInputElement</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TextFieldDidChange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebFormControlElement</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TextFieldDidChangeImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebFormControlElement</name><operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>TextFieldDidReceiveKeyDown</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebInputElement</name><operator>&amp;</operator></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebKeyboardEvent</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OpenTextDataListChooser</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebInputElement</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DataListOptionsChanged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebInputElement</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// mojom::ElectronAutofillAgent</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>AcceptDataListSuggestion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>suggestion</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>bool</name> <macro><name>IsUserGesture</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>HidePopup</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>ShowPopup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebFormControlElement</name><operator>&amp;</operator></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>ShowSuggestions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebFormControlElement</name><operator>&amp;</operator> <name>element</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>ShowSuggestionsOptions</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>DoFocusChangeComplete</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><specifier>const</specifier> <name>mojo</name><operator>::</operator><name><name>AssociatedRemote</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>ElectronAutofillDriver</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
  <call><name>GetAutofillDriver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>AssociatedRemote</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>ElectronAutofillDriver</name></expr></argument>&gt;</argument_list></name> <name>autofill_driver_</name></expr>;</expr_stmt>

  <comment type="line">// True when the last click was on the focused node.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>focused_node_was_last_clicked_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// This is set to false when the focus changes, then set back to true soon</comment>
  <comment type="line">// afterwards. This helps track whether an event happened after a node was</comment>
  <comment type="line">// already focused, or if it caused the focus to change.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>was_focused_before_now_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>AssociatedReceiver</name><argument_list type="generic">&lt;<argument><expr><name>mojom</name><operator>::</operator><name>ElectronAutofillAgent</name></expr></argument>&gt;</argument_list></name> <name>receiver_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>AutofillAgent</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AutofillAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_ATOM_AUTOFILL_AGENT_H_</comment>
</unit>
