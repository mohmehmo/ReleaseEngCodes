<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/cert_verifier_client.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_CERT_VERIFIER_CLIENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_CERT_VERIFIER_CLIENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/cert/x509_certificate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/network_context.mojom.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<struct>struct <name>VerifyRequestParams</name> <block>{
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>hostname</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>default_result</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>error_code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>X509Certificate</name></expr></argument>&gt;</argument_list></name></type> <name>certificate</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>VerifyRequestParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>VerifyRequestParams</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VerifyRequestParams</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>VerifyRequestParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>CertVerifierClient</name> <range>: <expr><name>public</name> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>CertVerifierClient</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>using</name> <name>CertVerifyProc</name> <operator>=</operator>
      <name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>VerifyRequestParams</name><operator>&amp;</operator> <name>request</name>,
                                   <name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

  <expr><name>explicit</name> <macro><name>CertVerifierClient</name><argument_list>(<argument>CertVerifyProc proc</argument>)</argument_list></macro></expr>;
  <expr><operator>~</operator><macro><name>CertVerifierClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// network::mojom::CertVerifierClient</comment>
  <expr><name>void</name> <macro><name>Verify</name><argument_list>(<argument>int default_error</argument>,
              <argument>const net::CertVerifyResult&amp; default_result</argument>,
              <argument>const scoped_refptr&lt;net::X509Certificate&gt;&amp; certificate</argument>,
              <argument>const std::string&amp; hostname</argument>,
              <argument>int flags</argument>,
              <argument>const base::Optional&lt;std::string&gt;&amp; ocsp_response</argument>,
              <argument>VerifyCallback callback</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>CertVerifyProc</name> <name>cert_verify_proc_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_CERT_VERIFIER_CLIENT_H_</comment>
</unit>
