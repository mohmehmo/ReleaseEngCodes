<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/chromium_src/chrome/browser/process_singleton.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CHROME_BROWSER_PROCESS_SINGLETON_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROME_BROWSER_PROCESS_SINGLETON_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_WIN)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/command_line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/file_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/logging.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/process/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/sequence_checker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/native_widget_types.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_POSIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/files/scoped_temp_dir.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/win/message_window.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(OS_WIN)</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandLine</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// ProcessSingleton ----------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// This class allows different browser processes to communicate with</comment>
<comment type="line">// each other.  It is named according to the user data directory, so</comment>
<comment type="line">// we can be sure that no more than one copy of the application can be</comment>
<comment type="line">// running at once with a given data directory.</comment>
<comment type="line">//</comment>
<comment type="line">// Implementation notes:</comment>
<comment type="line">// - the Windows implementation uses an invisible global message window;</comment>
<comment type="line">// - the Linux implementation uses a Unix domain socket in the user data dir.</comment>

<decl_stmt><decl><type><name>class</name></type> <name>ProcessSingleton</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <enum>enum <name>NotifyResult</name> <block>{
    <decl><name>PROCESS_NONE</name></decl>,
    <decl><name>PROCESS_NOTIFIED</name></decl>,
    <decl><name>PROFILE_IN_USE</name></decl>,
    <decl><name>LOCK_ERROR</name></decl>,
  }</block>;</enum>

  <comment type="line">// Implement this callback to handle notifications from other processes. The</comment>
  <comment type="line">// callback will receive the command line and directory with which the other</comment>
  <comment type="line">// Chrome process was launched. Return true if the command line will be</comment>
  <comment type="line">// handled within the current browser instance or false if the remote process</comment>
  <comment type="line">// should handle it (i.e., because the current process is shutting down).</comment>
  <decl_stmt><decl><type><name>using</name></type> <name>NotificationCallback</name> <init>= <expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator>
      <specifier>const</specifier> <name>base</name><operator>::</operator><name>CommandLine</name><operator>::</operator><name>StringVector</name><operator>&amp;</operator> <name>command_line</name>,
      <specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>current_directory</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ProcessSingleton</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>FilePath</name><operator>&amp;</operator> <name>user_data_dir</name></expr></argument>,
                   <argument><expr><specifier>const</specifier> <name>NotificationCallback</name><operator>&amp;</operator> <name>notification_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>ProcessSingleton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Notify another process, if available. Otherwise sets ourselves as the</comment>
  <comment type="line">// singleton instance. Returns PROCESS_NONE if we became the singleton</comment>
  <comment type="line">// instance. Callers are guaranteed to either have notified an existing</comment>
  <comment type="line">// process or have grabbed the singleton (unless the profile is locked by an</comment>
  <comment type="line">// unreachable process).</comment>
  <comment type="line">// TODO(brettw): Make the implementation of this method non-platform-specific</comment>
  <comment type="line">// by making Linux re-use the Windows implementation.</comment>
  <function_decl><type><name>NotifyResult</name></type> <name>NotifyOtherProcessOrCreate</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>StartListeningOnSocket</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>OnBrowserReady</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Sets ourself up as the singleton instance.  Returns true on success.  If</comment>
  <comment type="line">// false is returned, we are not the singleton instance and the caller must</comment>
  <comment type="line">// exit.</comment>
  <comment type="line">// NOTE: Most callers should generally prefer NotifyOtherProcessOrCreate() to</comment>
  <comment type="line">// this method, only callers for whom failure is preferred to notifying</comment>
  <comment type="line">// another process should call this directly.</comment>
  <function_decl><type><name>bool</name></type> <name>Create</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Clear any lock state during shutdown.</comment>
  <function_decl><type><name>void</name></type> <name>Cleanup</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_POSIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DisablePromptForTesting</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Called to query whether to kill a hung browser process that has visible</comment>
  <comment type="line">// windows. Return true to allow killing the hung process.</comment>
  <decl_stmt><decl><type><name>using</name></type> <name>ShouldKillRemoteProcessCallback</name> <init>= <expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>OverrideShouldKillRemoteProcessCallbackForTesting</name><parameter_list>(
      <parameter><decl><type><specifier>const</specifier> <name>ShouldKillRemoteProcessCallback</name><modifier>&amp;</modifier></type> <name>display_dialog_callback</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <label><name>protected</name>:</label>
  <comment type="line">// Notify another process, if available.</comment>
  <comment type="line">// Returns true if another process was found and notified, false if we should</comment>
  <comment type="line">// continue with the current process.</comment>
  <comment type="line">// On Windows, Create() has to be called before this.</comment>
  <function_decl><type><name>NotifyResult</name></type> <name>NotifyOtherProcess</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_POSIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Exposed for testing.  We use a timeout on Linux, and in tests we want</comment>
  <comment type="line">// this timeout to be short.</comment>
  <decl_stmt><decl><type><name>NotifyResult</name></type> <name>NotifyOtherProcessWithTimeout</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>CommandLine</name><operator>&amp;</operator> <name>command_line</name></expr></argument>,
      <argument><expr><name>int</name> <name>retry_attempts</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>TimeDelta</name><operator>&amp;</operator> <name>timeout</name></expr></argument>,
      <argument><expr><name>bool</name> <name>kill_unresponsive</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>NotifyResult</name></type> <name>NotifyOtherProcessWithTimeoutOrCreate</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>CommandLine</name><operator>&amp;</operator> <name>command_line</name></expr></argument>,
      <argument><expr><name>int</name> <name>retry_attempts</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>TimeDelta</name><operator>&amp;</operator> <name>timeout</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OverrideCurrentPidForTesting</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>ProcessId</name> <name>pid</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OverrideKillCallbackForTesting</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>NotificationCallback</name></type> <name>notification_callback_</name></decl>;</decl_stmt>  <comment type="line">// Handler for notifications.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>HWND</name></type> <name>remote_window_</name></decl>;</decl_stmt>               <comment type="line">// The HWND_MESSAGE of another browser.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>win</name><operator>::</operator><name>MessageWindow</name> <name>window_</name></expr>;</expr_stmt>  <comment type="line">// The message-only window.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>is_virtualized_</name></decl>;</decl_stmt>  <comment type="line">// Stuck inside Microsoft Softricity VM environment.</comment>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>lock_file_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>user_data_dir_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ShouldKillRemoteProcessCallback</name></type> <name>should_kill_remote_process_callback_</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_POSIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="line">// Start listening to the socket.</comment>
  <function_decl><type><name>void</name></type> <name>StartListening</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sock</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Return true if the given pid is one of our child processes.</comment>
  <comment type="line">// Assumes that the current pid is the root of all pids of the current</comment>
  <comment type="line">// instance.</comment>
  <function_decl><type><name>bool</name></type> <name>IsSameChromeInstance</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Extract the process's pid from a symbol link path and if it is on</comment>
  <comment type="line">// the same host, kill the process, unlink the lock file and return true.</comment>
  <comment type="line">// If the process is part of the same chrome instance, unlink the lock file</comment>
  <comment type="line">// and return true without killing it.</comment>
  <comment type="line">// If the process is on a different host, return false.</comment>
  <function_decl><type><name>bool</name></type> <name>KillProcessByLockPath</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Default function to kill a process, overridable by tests.</comment>
  <function_decl><type><name>void</name></type> <name>KillProcess</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Allow overriding for tests.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>ProcessId</name> <name>current_pid_</name></expr>;</expr_stmt>

  <comment type="line">// Function to call when the other process is hung and needs to be killed.</comment>
  <comment type="line">// Allows overriding for tests.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>int</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>kill_callback_</name></expr>;</expr_stmt>

  <comment type="line">// Path in file system to the socket.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>socket_path_</name></expr>;</expr_stmt>

  <comment type="line">// Path in file system to the lock.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>lock_path_</name></expr>;</expr_stmt>

  <comment type="line">// Path in file system to the cookie file.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>FilePath</name> <name>cookie_path_</name></expr>;</expr_stmt>

  <comment type="line">// Temporary directory to hold the socket.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>ScopedTempDir</name> <name>socket_dir_</name></expr>;</expr_stmt>

  <comment type="line">// Helper class for linux specific messages.  LinuxWatcher is ref counted</comment>
  <comment type="line">// because it posts messages between threads.</comment>
  <decl_stmt><decl><type><name>class</name></type> <name>LinuxWatcher</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>LinuxWatcher</name></expr></argument>&gt;</argument_list></name></type> <name>watcher_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sock_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>listen_on_ready_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>SEQUENCE_CHECKER</name><argument_list>(<argument><expr><name>sequence_checker_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ProcessSingleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CHROME_BROWSER_PROCESS_SINGLETON_H_</comment>
</unit>
