<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/renderer_client_base.h"><comment type="line">// Copyright (c) 2017 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_RENDERER_CLIENT_BASE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_RENDERER_CLIENT_BASE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/content_renderer_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/web/web_local_frame.h"</cpp:file></cpp:include>
<comment type="line">// In SHARED_INTERMEDIATE_DIR.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"widevine_cdm_version.h"</cpp:file></cpp:include>  <comment type="line">// NOLINT(build/include)</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIDEVINE_CDM_AVAILABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/renderer/media/chrome_key_systems_provider.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_BUILTIN_SPELLCHECKER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/service_manager/public/cpp/binder_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/service_manager/public/cpp/local_interface_provider.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>SpellCheck</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>network_hints</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>WebPrescientNetworkingImpl</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>namespace</name></type> <name>extensions</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ExtensionsClient</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>class</name></type> <name>AtomExtensionsRendererClient</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>RendererClientBase</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>ContentRendererClient</name></expr></range></decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_BUILTIN_SPELLCHECKER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    ,
                           <decl><type ref="prev"/><name>public</name> <name>service_manager</name>::<name>LocalInterfaceProvider</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>RendererClientBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>RendererClientBase</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_BUILTIN_SPELLCHECKER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// service_manager::LocalInterfaceProvider implementation.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>GetInterface</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                    <argument><expr><name>mojo</name><operator>::</operator><name>ScopedMessagePipeHandle</name> <name>request_handle</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>BindReceiverOnMainThread</name><argument_list>(<argument><expr><name>mojo</name><operator>::</operator><name>GenericPendingReceiver</name> <name>receiver</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DidCreateScriptContext</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name></expr></argument>,
                                      <argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>WillReleaseScriptContext</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name></expr></argument>,
                                        <argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DidClearWindowObject</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetupMainWorldOverrides</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name></expr></argument>,
                                       <argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetupExtensionWorldOverrides</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name></expr></argument>,
                                            <argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>,
                                            <argument><expr><name>int</name> <name>world_id</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>blink</name><operator>::</operator><name>WebPrescientNetworking</name><operator>*</operator> <macro><name>GetPrescientNetworking</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>isolated_world</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>isolated_world_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Get the context that the Electron API is running in.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <macro><name>GetContext</name><argument_list>(<argument>blink::WebLocalFrame* frame</argument>,
                                    <argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <comment type="line">// Executes a given v8 Script</comment>
  <expr_stmt><expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>RunScript</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name></expr></argument>,
                                        <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>String</name></expr></argument>&gt;</argument_list></name> <name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// v8Util.getHiddenValue(window.frameElement, 'internal')</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>IsWebViewFrame</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context</name></expr></argument>,
                      <argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <decl_stmt><decl><type><name>void</name></type> <name>AddRenderBindings</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                         <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>binding_object</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// content::ContentRendererClient:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>RenderThreadStarted</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderFrameCreated</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>OverrideCreatePlugin</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebPluginParams</name><operator>&amp;</operator> <name>params</name></expr></argument>,
                            <argument><expr><name>blink</name><operator>::</operator><name>WebPlugin</name><operator>*</operator><operator>*</operator> <name>plugin</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>AddSupportedKeySystems</name><argument_list>(
      <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><operator>::</operator><name>media</name><operator>::</operator><name>KeySystemProperties</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>key_systems</name></expr></argument>)</argument_list>
      <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsKeySystemsUpdateNeeded</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DidSetUserAgent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>user_agent</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>RunScriptsAtDocumentStart</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RunScriptsAtDocumentEnd</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RunScriptsAtDocumentIdle</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// app_shell embedders may need custom extensions client interfaces.</comment>
  <comment type="line">// This class takes ownership of the returned object.</comment>
  <expr_stmt><expr><name>virtual</name> <name>extensions</name><operator>::</operator><name>ExtensionsClient</name><operator>*</operator> <call><name>CreateExtensionsClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>network_hints</name><operator>::</operator><name>WebPrescientNetworkingImpl</name></expr></argument>&gt;</argument_list></name>
      <name>web_prescient_networking_impl_</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_ELECTRON_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>extensions</name><operator>::</operator><name>ExtensionsClient</name></expr></argument>&gt;</argument_list></name> <name>extensions_client_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AtomExtensionsRendererClient</name></expr></argument>&gt;</argument_list></name> <name>extensions_renderer_client_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIDEVINE_CDM_AVAILABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>ChromeKeySystemsProvider</name></type> <name>key_systems_provider_</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>bool</name></type> <name>isolated_world_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>renderer_client_id_</name></expr>;</expr_stmt>
  <comment type="line">// An increasing ID used for indentifying an V8 context in this process.</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>next_context_id_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_BUILTIN_SPELLCHECKER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SpellCheck</name></expr></argument>&gt;</argument_list></name> <name>spellcheck_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>service_manager</name><operator>::</operator><name>BinderRegistry</name> <name>registry_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_RENDERER_CLIENT_BASE_H_</comment>
</unit>
