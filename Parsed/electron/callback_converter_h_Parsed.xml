<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_converters/callback_converter.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_CONVERTERS_CALLBACK_CONVERTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_CONVERTERS_CALLBACK_CONVERTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/callback.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Sig</name><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>const base::RepeatingCallback&lt;Sig&gt;&amp; val</argument>)</argument_list></macro> <block>{
    <comment type="line">// We don't use CreateFunctionTemplate here because it creates a new</comment>
    <comment type="line">// FunctionTemplate everytime, which is cached by V8 and causes leaks.</comment>
    <expr><name>auto</name> <name>translater</name> <operator>=</operator>
        <name>base</name><operator>::</operator><call><name>Bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gin_helper</name><operator>::</operator><name><name>NativeFunctionInvoker</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Go</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;
    <comment type="line">// To avoid memory leak, we ensure that the callback can only be called</comment>
    <comment type="line">// for once.</comment>
    <return>return <expr><name>gin_helper</name><operator>::</operator><call><name>CreateFunctionFromTranslater</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>translater</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block>
  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>base::RepeatingCallback&lt;Sig&gt;* out</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>val</name><operator>-&gt;</operator><name>IsFunction</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <operator>*</operator><name>out</name> <operator>=</operator> <name>base</name><operator>::</operator><call><name>BindRepeating</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gin_helper</name><operator>::</operator><name><name>V8FunctionInvoker</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Go</name></expr></argument>, <argument><expr><name>isolate</name></expr></argument>,
                               <argument><expr><name>gin_helper</name><operator>::</operator><call><name>SafeV8Function</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
    <return>return <expr><name>true</name></expr>;</return>
  }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>Sig</name><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>base::OnceCallback&lt;Sig&gt; in</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>gin</name><operator>::</operator><call><name>ConvertToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>,
                            <argument><expr><name>base</name><operator>::</operator><call><name>AdaptCallbackForRepeating</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
  }</block>
  <specifier>static</specifier> <name>bool</name> <macro><name>FromV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                     <argument>v8::Local&lt;v8::Value&gt; val</argument>,
                     <argument>base::OnceCallback&lt;Sig&gt;* out</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>val</name><operator>-&gt;</operator><name>IsFunction</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <operator>*</operator><name>out</name> <operator>=</operator> <name>base</name><operator>::</operator><call><name>BindOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gin_helper</name><operator>::</operator><name><name>V8FunctionInvoker</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Go</name></expr></argument>, <argument><expr><name>isolate</name></expr></argument>,
                          <argument><expr><name>gin_helper</name><operator>::</operator><call><name>SafeV8Function</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  }
}<empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_CONVERTERS_CALLBACK_CONVERTER_H_</comment>
</unit>
