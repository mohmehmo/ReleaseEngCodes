<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/event.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_EVENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_EVENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/shell/common/api/api.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/wrappable.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>IPC</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Message</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Event</name> <range>: <expr><name>public</name> <name>gin</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>Event</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>using</name> <name>InvokeCallback</name> <operator>=</operator> <name>electron</name><operator>::</operator><name>mojom</name><operator>::</operator><name>ElectronBrowser</name><operator>::</operator><name>InvokeCallback</name></expr>;

  <expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name>WrapperInfo</name> <name>kWrapperInfo</name></expr>;

  <expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>Event</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Pass the callback to be invoked.</comment>
  <expr><name>void</name> <macro><name>SetCallback</name><argument_list>(<argument>InvokeCallback callback</argument>)</argument_list></macro></expr>;

  <comment type="line">// event.PreventDefault().</comment>
  <expr><name>void</name> <call><name>PreventDefault</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// event.sendReply(value), used for replying to synchronous messages and</comment>
  <comment type="line">// `invoke` calls.</comment>
  <expr><name>bool</name> <call><name>SendReply</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>result</name></expr></argument>)</argument_list></call></expr>;

 <expr><name>protected</name><operator>:</operator>
  <call><name>Event</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>Event</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// gin::Wrappable:</comment>
  <expr><name>gin</name><operator>::</operator><name>ObjectTemplateBuilder</name> <macro><name>GetObjectTemplateBuilder</name><argument_list>(
      <argument>v8::Isolate* isolate</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>GetTypeName</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// Replyer for the synchronous messages.</comment>
  <name>InvokeCallback</name> <name>callback_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Event</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_EVENT_H_</comment>
</unit>
