<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/api/atom_api_key_weak_map.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_API_ATOM_API_KEY_WEAK_MAP_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_API_ATOM_API_KEY_WEAK_MAP_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_converters/std_converter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/object_template_builder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/wrappable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/key_weak_map.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>KeyWeakMap</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>Create</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <block>{
    <return>return <expr><name>gin</name><operator>::</operator><macro><name>CreateHandle</name><argument_list>(<argument>isolate</argument>, <argument>new KeyWeakMap&lt;K&gt;(isolate)</argument>)</argument_list></macro></expr>;</return>
  }</block>

  <specifier>static</specifier> <name>void</name> <macro><name>BuildPrototype</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                             <argument>v8::Local&lt;v8::FunctionTemplate&gt; prototype</argument>)</argument_list></macro> <block>{
    <expr><call><name><name>prototype</name><operator>-&gt;</operator><name>SetClassName</name></name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><literal type="string">"KeyWeakMap"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>gin_helper</name><operator>::</operator><call><name>ObjectTemplateBuilder</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><call><name><name>prototype</name><operator>-&gt;</operator><name>PrototypeTemplate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>SetMethod</name><argument_list>(<argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Set</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>SetMethod</name><argument_list>(<argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Get</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>SetMethod</name><argument_list>(<argument><expr><literal type="string">"has"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Has</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>SetMethod</name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Remove</name></expr></argument>)</argument_list></call></expr>;
  }</block>

 <name>protected</name><operator>:</operator>
  <name>explicit</name> <macro><name>KeyWeakMap</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <block>{
    <expr><name>gin_helper</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>Init</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;
  }</block>
  <operator>~</operator><macro><name>KeyWeakMap</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

 <name>private</name><operator>:</operator>
  <comment type="line">// API for KeyWeakMap.</comment>
  <name>void</name> <macro><name>Set</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>const K&amp; key</argument>, <argument>v8::Local&lt;v8::Object&gt; object</argument>)</argument_list></macro> <block>{
    <expr><call><name><name>key_weak_map_</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;
  }</block>

  <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>Get</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>const K&amp; key</argument>)</argument_list></macro> <block>{
    <return>return <expr><call><name><name>key_weak_map_</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr>;</return>
  }</block>

  <name>bool</name> <macro><name>Has</name><argument_list>(<argument>const K&amp; key</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>key_weak_map_</name><operator>.</operator><name>Has</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

  <name>void</name> <macro><name>Remove</name><argument_list>(<argument>const K&amp; key</argument>)</argument_list></macro> <block>{ <expr><call><name><name>key_weak_map_</name><operator>.</operator><name>Remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>; }</block>

  <name>electron</name><operator>::</operator><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>&gt;</argument_list></name> <name>key_weak_map_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>KeyWeakMap</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_API_ATOM_API_KEY_WEAK_MAP_H_</comment>
</unit>
