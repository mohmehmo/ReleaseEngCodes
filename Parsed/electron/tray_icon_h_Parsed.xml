<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/tray_icon.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_TRAY_ICON_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_TRAY_ICON_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/atom_menu_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/tray_icon_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/geometry/rect.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TrayIcon</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>TrayIcon</name><modifier>*</modifier></type> <name>Create</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>using</name></type> <name>ImageType</name> <init>= <expr><name>HICON</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>using</name></type> <name>ImageType</name> <init>= <expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>TrayIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Sets the image associated with this status icon.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetImage</name><parameter_list>(<parameter><decl><type><name>ImageType</name></type> <name>image</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Sets the image associated with this status icon when pressed.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetPressedImage</name><parameter_list>(<parameter><decl><type><name>ImageType</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Sets the hover text for this status icon. This is also used as the label</comment>
  <comment type="line">// for the menu item which is created as a replacement for the status icon</comment>
  <comment type="line">// click action on platforms that do not support custom click actions for the</comment>
  <comment type="line">// status icon (e.g. Ubuntu Unity).</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetToolTip</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tool_tip</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// Set/Get flag determining whether to ignore double click events.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetIgnoreDoubleClickEvents</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>GetIgnoreDoubleClickEvents</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Set/Get title displayed next to status icon in the status bar.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>GetTitle</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>IconType</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>Info</name></expr><operator>,</operator> <expr><name>Warning</name></expr><operator>,</operator> <expr><name>Error</name></expr><operator>,</operator> <expr><name>Custom</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <struct>struct <name>BalloonOptions</name> <block>{
    <decl_stmt><decl><type><name>IconType</name></type> <name>icon_type</name> <init>= <expr><name>IconType</name><operator>::</operator><name>Custom</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>HICON</name></type> <name>icon</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Image</name> <name>icon</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>title</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>content</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>large_icon</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>no_sound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>respect_quiet_time</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BalloonOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block>;</struct>

  <comment type="line">// Displays a notification balloon with the specified contents.</comment>
  <comment type="line">// Depending on the platform it might not appear by the icon tray.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>DisplayBalloon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BalloonOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Removes the notification balloon.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>RemoveBalloon</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Returns focus to the taskbar notification area.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Focus</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Popups the menu.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>PopUpContextMenu</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>pos</name></expr></argument>,
                                <argument><expr><name>AtomMenuModel</name><operator>*</operator> <name>menu_model</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Set the context menu for this icon.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetContextMenu</name><parameter_list>(<parameter><decl><type><name>AtomMenuModel</name><modifier>*</modifier></type> <name>menu_model</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Returns the bounds of tray icon.</comment>
  <expr_stmt><expr><name>virtual</name> <name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function><type><name>void</name></type> <name>AddObserver</name><parameter_list>(<parameter><decl><type><name>TrayIconObserver</name><modifier>*</modifier></type> <name>obs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>observers_</name><operator>.</operator><name>AddObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>RemoveObserver</name><parameter_list>(<parameter><decl><type><name>TrayIconObserver</name><modifier>*</modifier></type> <name>obs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>observers_</name><operator>.</operator><name>RemoveObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

  <decl_stmt><decl><type><name>void</name></type> <name>NotifyClicked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <operator>=</operator> <name>gfx</name><operator>::</operator><call><name>Rect</name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>location</name> <operator>=</operator> <name>gfx</name><operator>::</operator><call><name>Point</name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><name>int</name> <name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyDoubleClicked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <operator>=</operator> <name>gfx</name><operator>::</operator><call><name>Rect</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>int</name> <name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyBalloonShow</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyBalloonClicked</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyBalloonClosed</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyRightClicked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name> <operator>=</operator> <name>gfx</name><operator>::</operator><call><name>Rect</name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><name>int</name> <name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyDrop</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyDropFiles</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>files</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyDropText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>text</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>NotifyDragEntered</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyDragExited</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>NotifyDragEnded</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyMouseEntered</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>location</name> <operator>=</operator> <name>gfx</name><operator>::</operator><call><name>Point</name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><name>int</name> <name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyMouseExited</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>location</name> <operator>=</operator> <name>gfx</name><operator>::</operator><call><name>Point</name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><name>int</name> <name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>NotifyMouseMoved</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>location</name> <operator>=</operator> <name>gfx</name><operator>::</operator><call><name>Point</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>int</name> <name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><call><name>TrayIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>TrayIconObserver</name></expr></argument>&gt;</argument_list></name> <name>observers_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>TrayIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_TRAY_ICON_H_</comment>
</unit>
