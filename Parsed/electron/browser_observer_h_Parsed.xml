<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/browser_observer.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_BROWSER_OBSERVER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_BROWSER_OBSERVER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/scoped_refptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/build_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/login_handler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DictionaryValue</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BrowserObserver</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>CheckedObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <comment type="line">// The browser is about to close all windows.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnBeforeQuit</name><argument_list>(<argument>bool* prevent_default</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// The browser has closed all windows and will quit.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWillQuit</name><argument_list>(<argument>bool* prevent_default</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// The browser has closed all windows. If the browser is quiting, then this</comment>
  <comment type="line">// method will not be called, instead it will call OnWillQuit.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowAllClosed</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// The browser is quitting.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnQuit</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// The browser has opened a file by double clicking in Finder or dragging the</comment>
  <comment type="line">// file to the Dock icon. (macOS only)</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnOpenFile</name><argument_list>(<argument>bool* prevent_default</argument>, <argument>const std::string&amp; file_path</argument>)</argument_list></macro> <block>{
  }</block>

  <comment type="line">// Browser is used to open a url.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnOpenURL</name><argument_list>(<argument>const std::string&amp; url</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// The browser is activated with visible/invisible windows (usually by</comment>
  <comment type="line">// clicking on the dock icon).</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnActivate</name><argument_list>(<argument>bool has_visible_windows</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// The browser has finished loading.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWillFinishLaunching</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnFinishLaunching</name><argument_list>(<argument>const base::DictionaryValue&amp; launch_info</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// The browser's accessibility suppport has changed.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnAccessibilitySupportChanged</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// The app message loop is ready</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnPreMainMessageLoopRun</name><argument_list>()</argument_list></macro> <block>{}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// The browser wants to report that an user activity will resume. (macOS only)</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWillContinueUserActivity</name><argument_list>(<argument>bool* prevent_default</argument>,
                                          <argument>const std::string&amp; type</argument>)</argument_list></macro> <block>{}</block>
  <comment type="line">// The browser wants to report an user activity resuming error. (macOS only)</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnDidFailToContinueUserActivity</name><argument_list>(<argument>const std::string&amp; type</argument>,
                                               <argument>const std::string&amp; error</argument>)</argument_list></macro> <block>{}</block>
  <comment type="line">// The browser wants to resume a user activity via handoff. (macOS only)</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnContinueUserActivity</name><argument_list>(<argument>bool* prevent_default</argument>,
                                      <argument>const std::string&amp; type</argument>,
                                      <argument>const base::DictionaryValue&amp; user_info</argument>)</argument_list></macro> <block>{}</block>
  <comment type="line">// The browser wants to notify that an user activity was resumed. (macOS only)</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnUserActivityWasContinued</name><argument_list>(
      <argument>const std::string&amp; type</argument>,
      <argument>const base::DictionaryValue&amp; user_info</argument>)</argument_list></macro> <block>{}</block>
  <comment type="line">// The browser wants to update an user activity payload. (macOS only)</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnUpdateUserActivityState</name><argument_list>(
      <argument>bool* prevent_default</argument>,
      <argument>const std::string&amp; type</argument>,
      <argument>const base::DictionaryValue&amp; user_info</argument>)</argument_list></macro> <block>{}</block>
  <comment type="line">// User clicked the native macOS new tab button. (macOS only)</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnNewWindowForTab</name><argument_list>()</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <name>protected</name><operator>:</operator>
  <operator>~</operator><macro><name>BrowserObserver</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_BROWSER_OBSERVER_H_</comment>
</unit>
