<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/chromium_src/chrome/browser/ui/views/frame/global_menu_bar_registrar_x11.h"><comment type="line">// Copyright 2013 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CHROME_BROWSER_UI_VIEWS_FRAME_GLOBAL_MENU_BAR_REGISTRAR_X11_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROME_BROWSER_UI_VIEWS_FRAME_GLOBAL_MENU_BAR_REGISTRAR_X11_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/ref_counted.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/singleton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/base/glib/glib_signal.h"</cpp:file></cpp:include>

<comment type="line">// Advertises our menu bars to Unity.</comment>
<comment type="line">//</comment>
<comment type="line">// GlobalMenuBarX11 is responsible for managing the DbusmenuServer for each</comment>
<comment type="line">// XID. We need a separate object to own the dbus channel to</comment>
<comment type="line">// com.canonical.AppMenu.Registrar and to register/unregister the mapping</comment>
<comment type="line">// between a XID and the DbusmenuServer instance we are offering.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalMenuBarRegistrarX11</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>GlobalMenuBarRegistrarX11</name><modifier>*</modifier></type> <name>GetInstance</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>OnWindowMapped</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>xid</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>OnWindowUnmapped</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>xid</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <macro><name>friend</name></macro> struct <expr_stmt><expr><name>base</name><operator>::</operator><name><name>DefaultSingletonTraits</name><argument_list type="generic">&lt;<argument><expr><name>GlobalMenuBarRegistrarX11</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>GlobalMenuBarRegistrarX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>GlobalMenuBarRegistrarX11</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Sends the actual message.</comment>
  <function_decl><type><name>void</name></type> <name>RegisterXID</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>xid</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>UnregisterXID</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>xid</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>CHROMEG_CALLBACK_1</name><argument_list>(<argument><expr><name>GlobalMenuBarRegistrarX11</name></expr></argument>,
                     <argument><expr><name>void</name></expr></argument>,
                     <argument><expr><name>OnProxyCreated</name></expr></argument>,
                     <argument><expr><name>GObject</name><operator>*</operator></expr></argument>,
                     <argument><expr><name>GAsyncResult</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHROMEG_CALLBACK_1</name><argument_list>(<argument><expr><name>GlobalMenuBarRegistrarX11</name></expr></argument>,
                     <argument><expr><name>void</name></expr></argument>,
                     <argument><expr><name>OnNameOwnerChanged</name></expr></argument>,
                     <argument><expr><name>GObject</name><operator>*</operator></expr></argument>,
                     <argument><expr><name>GParamSpec</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>GDBusProxy</name><modifier>*</modifier></type> <name>registrar_proxy_</name></decl>;</decl_stmt>

  <comment type="line">// Window XIDs which want to be registered, but haven't yet been because</comment>
  <comment type="line">// we're waiting for the proxy to become available.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name></expr></argument>&gt;</argument_list></name> <name>live_xids_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>GlobalMenuBarRegistrarX11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CHROME_BROWSER_UI_VIEWS_FRAME_GLOBAL_MENU_BAR_REGISTRAR_X11_H_</comment>
</unit>
