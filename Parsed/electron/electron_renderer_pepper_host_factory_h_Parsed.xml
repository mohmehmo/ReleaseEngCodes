<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/electron_renderer_pepper_host_factory.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_ELECTRON_RENDERER_PEPPER_HOST_FACTORY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_ELECTRON_RENDERER_PEPPER_HOST_FACTORY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ppapi/host/host_factory.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>RendererPpapiHost</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ElectronRendererPepperHostFactory</name> <range>: <expr><name>public</name> <name>ppapi</name><operator>::</operator><name>host</name><operator>::</operator><name>HostFactory</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>ElectronRendererPepperHostFactory</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RendererPpapiHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>ElectronRendererPepperHostFactory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// HostFactory.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ppapi</name><operator>::</operator><name>host</name><operator>::</operator><name>ResourceHost</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateResourceHost</name><argument_list>(
      <argument>ppapi::host::PpapiHost* host</argument>,
      <argument>PP_Resource resource</argument>,
      <argument>PP_Instance instance</argument>,
      <argument>const IPC::Message&amp; message</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <comment type="line">// Not owned by this object.</comment>
  <name>content</name><operator>::</operator><name>RendererPpapiHost</name><operator>*</operator> <name>host_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ElectronRendererPepperHostFactory</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_ELECTRON_RENDERER_PEPPER_HOST_FACTORY_H_</comment>
</unit>
