<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/auto_updater.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_AUTO_UPDATER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_AUTO_UPDATER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/build_config.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Time</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>auto_updater</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Delegate</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// An error happened.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>int</name> <name>code</name></expr></argument>,
                       <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>domain</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

  <comment type="line">// Checking to see if there is an update</comment>
  <function><type><name>virtual</name> <name>void</name></type> <name>OnCheckingForUpdate</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

  <comment type="line">// There is an update available and it is being downloaded</comment>
  <function><type><name>virtual</name> <name>void</name></type> <name>OnUpdateAvailable</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

  <comment type="line">// There is no available update.</comment>
  <function><type><name>virtual</name> <name>void</name></type> <name>OnUpdateNotAvailable</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

  <comment type="line">// There is a new update which has been downloaded.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnUpdateDownloaded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>release_notes</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>release_name</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Time</name><operator>&amp;</operator> <name>release_date</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>update_url</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>Delegate</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AutoUpdater</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>HeaderMap</name></expr>;</expr_stmt></typedef>

  <comment type="line">// Gets/Sets the delegate.</comment>
  <function_decl><type><specifier>static</specifier> <name>Delegate</name><modifier>*</modifier></type> <name>GetDelegate</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetDelegate</name><parameter_list>(<parameter><decl><type><name>Delegate</name><modifier>*</modifier></type> <name>delegate</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>GetFeedURL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// FIXME(zcbenz): We should not do V8 in this file, this method should only</comment>
  <comment type="line">// accept C++ struct as parameter, and atom_api_auto_updater.cc is responsible</comment>
  <comment type="line">// for parsing the parameter from JavaScript.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>SetFeedURL</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CheckForUpdates</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QuitAndInstall</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <name>Delegate</name><modifier>*</modifier></type> <name>delegate_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_IMPLICIT_CONSTRUCTORS</name><argument_list>(<argument><expr><name>AutoUpdater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace auto_updater</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_AUTO_UPDATER_H_</comment>
</unit>
