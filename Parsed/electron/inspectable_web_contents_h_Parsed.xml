<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/inspectable_web_contents.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Copyright (c) 2013 Adam Roben &lt;adam@roben.org&gt;. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DevToolsAgentHost</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PrefService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsDelegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContentsView</name></decl>;</decl_stmt>

<comment type="line">// TODO(zcbenz): Remove this abstract wrapper and rename</comment>
<comment type="line">// InspectableWebContentsImpl to InspectableWebContents instead.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>InspectableWebContents</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// The returned InspectableWebContents takes ownership of the passed-in</comment>
  <comment type="line">// WebContents.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>InspectableWebContents</name><modifier>*</modifier></type> <name>Create</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>,
                                        <argument><expr><name>PrefService</name><operator>*</operator> <name>pref_service</name></expr></argument>,
                                        <argument><expr><name>bool</name> <name>is_guest</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>InspectableWebContents</name><argument_list>()</argument_list></macro> <block>{}</block>

  <name>virtual</name> <name>InspectableWebContentsView</name><operator>*</operator> <macro><name>GetView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetWebContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <macro><name>GetDevToolsWebContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// The delegate manages its own life.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetDelegate</name><parameter_list>(<parameter><decl><type><name>InspectableWebContentsDelegate</name><modifier>*</modifier></type> <name>delegate</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <expr_stmt><expr><name>virtual</name> <name>InspectableWebContentsDelegate</name><operator>*</operator> <macro><name>GetDelegate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsGuest</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ReleaseWebContents</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetDevToolsWebContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>devtools</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetDockState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>state</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ShowDevTools</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>activate</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>CloseDevTools</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>bool</name></type> <name>IsDevToolsViewShowing</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>AttachTo</name><parameter_list>(<parameter><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name></expr></argument>&gt;</argument_list></name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Detach</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>CallClientFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>function_name</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <name>arg1</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <name>arg2</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>*</operator> <name>arg3</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>InspectElement</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_INSPECTABLE_WEB_CONTENTS_H_</comment>
</unit>
