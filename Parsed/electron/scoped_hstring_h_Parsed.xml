<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/win/scoped_hstring.h"><comment type="line">// Copyright (c) 2015 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_WIN_SCOPED_HSTRING_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_WIN_SCOPED_HSTRING_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hstring.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ScopedHString</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Copy from |source|.</comment>
  <function_decl><type><name>explicit</name></type> <name>ScopedHString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>explicit</name></type> <name>ScopedHString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>source</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <comment type="line">// Create empty string.</comment>
  <expr_stmt><expr><call><name>ScopedHString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>ScopedHString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Sets to |source|.</comment>
  <function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>Reset</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>wstring</name><operator>&amp;</operator> <name>source</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Returns string.</comment>
  <expr_stmt><expr><name>operator</name> <macro><name>HSTRING</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>str_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Whether there is a string created.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>success</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>str_</name></expr>;</return> }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>HSTRING</name></type> <name>str_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ScopedHString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_WIN_SCOPED_HSTRING_H_</comment>
</unit>
