<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_protocol.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_PROTOCOL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_PROTOCOL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/content_browser_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/net/atom_url_loader_factory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/trackable_object.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>GetStandardSchemes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>RegisterSchemesAsPrivileged</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>ErrorThrower</name> <name>thrower</name></expr></argument>,
                                 <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Possible errors.</comment>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ProtocolError</name> <block>{<block_content>
  <expr_stmt><expr><name>OK</name></expr><operator>,</operator>  <comment type="line">// no error</comment>
  <expr><name>REGISTERED</name></expr><operator>,</operator>
  <expr><name>NOT_REGISTERED</name></expr><operator>,</operator>
  <expr><name>INTERCEPTED</name></expr><operator>,</operator>
  <expr><name>NOT_INTERCEPTED</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Protocol implementation based on network services.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Protocol</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>Protocol</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>Protocol</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                      <argument><expr><name>AtomBrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;

  <expr><specifier>static</specifier> <name>void</name> <call><name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Used by AtomBrowserClient for creating URLLoaderFactory.</comment>
  <expr><name>void</name> <call><name>RegisterURLLoaderFactories</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>ContentBrowserClient</name><operator>::</operator><name>NonNetworkURLLoaderFactoryMap</name><operator>*</operator> <name>factories</name></expr></argument>)</argument_list></call></expr>;

  <expr><specifier>const</specifier> <name>HandlersMap</name><operator>&amp;</operator> <macro><name>intercept_handlers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>intercept_handlers_</name></expr>;</return> }</block>

 <name>private</name><operator>:</operator>
  <call><name>Protocol</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>AtomBrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>Protocol</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Callback types.</comment>
  <expr><name>using</name> <name>CompletionCallback</name> <operator>=</operator>
      <name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

  <comment type="line">// JS APIs.</comment>
  <expr><name>ProtocolError</name> <macro><name>RegisterProtocol</name><argument_list>(<argument>ProtocolType type</argument>,
                                 <argument>const std::string&amp; scheme</argument>,
                                 <argument>const ProtocolHandler&amp; handler</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>UnregisterProtocol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>scheme</name></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>IsProtocolRegistered</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>scheme</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>ProtocolError</name> <macro><name>InterceptProtocol</name><argument_list>(<argument>ProtocolType type</argument>,
                                  <argument>const std::string&amp; scheme</argument>,
                                  <argument>const ProtocolHandler&amp; handler</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>UninterceptProtocol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>scheme</name></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>bool</name> <call><name>IsProtocolIntercepted</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>scheme</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Old async version of IsProtocolRegistered.</comment>
  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>IsProtocolHandled</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>scheme</name></expr></argument>,
                                           <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Helper for converting old registration APIs to new RegisterProtocol API.</comment>
  <expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>ProtocolType</name> <name>type</name></expr></argument>&gt;</argument_list></name>
  <name>void</name> <macro><name>RegisterProtocolFor</name><argument_list>(<argument>const std::string&amp; scheme</argument>,
                           <argument>const ProtocolHandler&amp; handler</argument>,
                           <argument>gin::Arguments* args</argument>)</argument_list></macro> <block>{
    <expr><call><name>HandleOptionalCallback</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>RegisterProtocol</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  }</block>
  <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>ProtocolType</name> <name>type</name></expr></argument>&gt;</argument_list></name>
  <name>void</name> <macro><name>InterceptProtocolFor</name><argument_list>(<argument>const std::string&amp; scheme</argument>,
                            <argument>const ProtocolHandler&amp; handler</argument>,
                            <argument>gin::Arguments* args</argument>)</argument_list></macro> <block>{
    <expr><call><name>HandleOptionalCallback</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>InterceptProtocol</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  }</block>

  <comment type="line">// Be compatible with old interface, which accepts optional callback.</comment>
  <name>void</name> <macro><name>HandleOptionalCallback</name><argument_list>(<argument>gin::Arguments* args</argument>, <argument>ProtocolError error</argument>)</argument_list></macro></expr>;

  <expr><name>HandlersMap</name> <name>handlers_</name></expr>;
  <expr><name>HandlersMap</name> <name>intercept_handlers_</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_PROTOCOL_H_</comment>
</unit>
