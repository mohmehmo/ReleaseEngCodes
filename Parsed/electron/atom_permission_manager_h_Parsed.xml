<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/atom_permission_manager.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_ATOM_PERMISSION_MANAGER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_ATOM_PERMISSION_MANAGER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/containers/id_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/permission_controller_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>WebContents</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomPermissionManager</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>PermissionControllerDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomPermissionManager</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomPermissionManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>using</name> <name>StatusCallback</name> <operator>=</operator>
      <name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>PermissionStatus</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;
  <expr><name>using</name> <name>StatusesCallback</name> <operator>=</operator> <name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator>
      <specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>PermissionStatus</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;
  <expr><name>using</name> <name>RequestHandler</name> <operator>=</operator> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator>,
                                             <name>content</name><operator>::</operator><name>PermissionType</name>,
                                             <name>StatusCallback</name>,
                                             <specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;
  <expr><name>using</name> <name>CheckHandler</name> <operator>=</operator> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator>,
                                           <name>content</name><operator>::</operator><name>PermissionType</name>,
                                           <specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>requesting_origin</name>,
                                           <specifier>const</specifier> <name>base</name><operator>::</operator><name>Value</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

  <comment type="line">// Handler to dispatch permission requests in JS.</comment>
  <expr><name>void</name> <call><name>SetPermissionRequestHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RequestHandler</name><operator>&amp;</operator> <name>handler</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>SetPermissionCheckHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CheckHandler</name><operator>&amp;</operator> <name>handler</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// content::PermissionControllerDelegate:</comment>
  <expr><name>int</name> <macro><name>RequestPermission</name><argument_list>(<argument>content::PermissionType permission</argument>,
                        <argument>content::RenderFrameHost* render_frame_host</argument>,
                        <argument>const GURL&amp; requesting_origin</argument>,
                        <argument>bool user_gesture</argument>,
                        <argument>StatusCallback callback</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>int</name> <macro><name>RequestPermissionWithDetails</name><argument_list>(<argument>content::PermissionType permission</argument>,
                                   <argument>content::RenderFrameHost* render_frame_host</argument>,
                                   <argument>const GURL&amp; requesting_origin</argument>,
                                   <argument>bool user_gesture</argument>,
                                   <argument>const base::DictionaryValue* details</argument>,
                                   <argument>StatusCallback callback</argument>)</argument_list></macro></expr>;
  <expr><name>int</name> <macro><name>RequestPermissions</name><argument_list>(
      <argument>const std::vector&lt;content::PermissionType&gt;&amp; permissions</argument>,
      <argument>content::RenderFrameHost* render_frame_host</argument>,
      <argument>const GURL&amp; requesting_origin</argument>,
      <argument>bool user_gesture</argument>,
      <argument>StatusesCallback callback</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>int</name> <macro><name>RequestPermissionsWithDetails</name><argument_list>(
      <argument>const std::vector&lt;content::PermissionType&gt;&amp; permissions</argument>,
      <argument>content::RenderFrameHost* render_frame_host</argument>,
      <argument>const GURL&amp; requesting_origin</argument>,
      <argument>bool user_gesture</argument>,
      <argument>const base::DictionaryValue* details</argument>,
      <argument>StatusesCallback callback</argument>)</argument_list></macro></expr>;
  <expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>PermissionStatus</name> <macro><name>GetPermissionStatusForFrame</name><argument_list>(
      <argument>content::PermissionType permission</argument>,
      <argument>content::RenderFrameHost* render_frame_host</argument>,
      <argument>const GURL&amp; requesting_origin</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>bool</name> <macro><name>CheckPermissionWithDetails</name><argument_list>(<argument>content::PermissionType permission</argument>,
                                  <argument>content::RenderFrameHost* render_frame_host</argument>,
                                  <argument>const GURL&amp; requesting_origin</argument>,
                                  <argument>const base::DictionaryValue* details</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

 <expr><name>protected</name><operator>:</operator>
  <name>void</name> <macro><name>OnPermissionResponse</name><argument_list>(<argument>int request_id</argument>,
                            <argument>int permission_id</argument>,
                            <argument>blink::mojom::PermissionStatus status</argument>)</argument_list></macro></expr>;

  <comment type="line">// content::PermissionControllerDelegate:</comment>
  <expr><name>void</name> <macro><name>ResetPermission</name><argument_list>(<argument>content::PermissionType permission</argument>,
                       <argument>const GURL&amp; requesting_origin</argument>,
                       <argument>const GURL&amp; embedding_origin</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>PermissionStatus</name> <macro><name>GetPermissionStatus</name><argument_list>(
      <argument>content::PermissionType permission</argument>,
      <argument>const GURL&amp; requesting_origin</argument>,
      <argument>const GURL&amp; embedding_origin</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>int</name> <macro><name>SubscribePermissionStatusChange</name><argument_list>(
      <argument>content::PermissionType permission</argument>,
      <argument>content::RenderFrameHost* render_frame_host</argument>,
      <argument>const GURL&amp; requesting_origin</argument>,
      <argument>base::RepeatingCallback&lt;void(blink::mojom::PermissionStatus)&gt; callback</argument>)</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>void</name> <macro><name>UnsubscribePermissionStatusChange</name><argument_list>(<argument>int subscription_id</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>class</name> <name>PendingRequest</name></expr>;
  <expr><name>using</name> <name>PendingRequestsMap</name> <operator>=</operator> <name>base</name><operator>::</operator><name><name>IDMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PendingRequest</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;

  <expr><name>RequestHandler</name> <name>request_handler_</name></expr>;
  <expr><name>CheckHandler</name> <name>check_handler_</name></expr>;

  <expr><name>PendingRequestsMap</name> <name>pending_requests_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomPermissionManager</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_ATOM_PERMISSION_MANAGER_H_</comment>
</unit>
