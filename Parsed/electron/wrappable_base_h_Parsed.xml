<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/wrappable_base.h"><comment type="line">// Copyright 2013 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE.chromium file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_WRAPPABLE_BASE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_WRAPPABLE_BASE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v8/include/v8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<comment type="line">// Wrappable is a base class for C++ objects that have corresponding v8 wrapper</comment>
<comment type="line">// objects. To retain a Wrappable object on the stack, use a gin::Handle.</comment>
<comment type="line">//</comment>
<comment type="line">// USAGE:</comment>
<comment type="line">// // my_class.h</comment>
<comment type="line">// class MyClass : Wrappable&lt;MyClass&gt; {</comment>
<comment type="line">//  public:</comment>
<comment type="line">//   ...</comment>
<comment type="line">// };</comment>
<comment type="line">//</comment>
<comment type="line">// Subclasses should also typically have private constructors and expose a</comment>
<comment type="line">// static Create function that returns a gin::Handle. Forcing creators through</comment>
<comment type="line">// this static Create function will enforce that clients actually create a</comment>
<comment type="line">// wrapper for the object. If clients fail to create a wrapper for a wrappable</comment>
<comment type="line">// object, the object will leak because we use the weak callback from the</comment>
<comment type="line">// wrapper as the signal to delete the wrapped object.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WrappableBase</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>WrappableBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>WrappableBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Retrieve the v8 wrapper object cooresponding to this object.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWrapper</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWrapper</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Returns the Isolate this object is created in.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <macro><name>isolate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>isolate_</name></expr>;</return> }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <comment type="line">// Called after the "_init" method gets called in JavaScript.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AfterInit</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

  <comment type="line">// Bind the C++ class to the JS wrapper.</comment>
  <comment type="line">// This method should only be called by classes using Constructor.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>InitWith</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Helper to init with arguments.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>InitWithArgs</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>FirstWeakCallback</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>v8</name><operator>::</operator><name><name>WeakCallbackInfo</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>SecondWeakCallback</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>v8</name><operator>::</operator><name><name>WeakCallbackInfo</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper_</name></expr>;</expr_stmt>  <comment type="line">// Weak</comment>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WrappableBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_WRAPPABLE_BASE_H_</comment>
</unit>
