<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/login_handler.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_LOGIN_HANDLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_LOGIN_HANDLER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/content_browser_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/login_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_observer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>WebContents</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Arguments</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Handles HTTP basic auth.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>LoginHandler</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>LoginDelegate</name></expr></range></decl>,
                     <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>WebContentsObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>LoginHandler</name><argument_list>(<argument>const net::AuthChallengeInfo&amp; auth_info</argument>,
               <argument>content::WebContents* web_contents</argument>,
               <argument>bool is_main_frame</argument>,
               <argument>const GURL&amp; url</argument>,
               <argument>scoped_refptr&lt;net::HttpResponseHeaders&gt; response_headers</argument>,
               <argument>bool first_auth_attempt</argument>,
               <argument>LoginAuthRequiredCallback auth_required_callback</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>LoginHandler</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name></type> <name>EmitEvent</name><argument_list>(<argument><expr><name>net</name><operator>::</operator><name>AuthChallengeInfo</name> <name>auth_info</name></expr></argument>,
                 <argument><expr><name>bool</name> <name>is_main_frame</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>url</name></expr></argument>,
                 <argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>HttpResponseHeaders</name></expr></argument>&gt;</argument_list></name> <name>response_headers</name></expr></argument>,
                 <argument><expr><name>bool</name> <name>first_auth_attempt</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>CallbackFromJS</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>LoginAuthRequiredCallback</name></type> <name>auth_required_callback_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>LoginHandler</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>LoginHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_LOGIN_HANDLER_H_</comment>
</unit>
