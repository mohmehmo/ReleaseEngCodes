<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/autofill_popup_view.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_AUTOFILL_POPUP_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_AUTOFILL_POPUP_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/autofill_popup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/native_web_keyboard_event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/render_widget_host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/accessibility/ax_node_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/drag_controller.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/focus/widget_focus_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/widget/widget_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/widget/widget_observer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_OSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/osr/osr_view_proxy.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kPopupBorderThickness</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kSmallerFontSizeDelta</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kEndPadding</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kNamePadding</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kRowHeight</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AutofillPopup</name></decl>;</decl_stmt>

<comment type="line">// Child view only for triggering accessibility events. Rendering is handled</comment>
<comment type="line">// by |AutofillPopupViewViews|.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AutofillPopupChildView</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>View</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>AutofillPopupChildView</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>suggestion</name></expr></argument>)</argument_list></call>
      <operator>:</operator> <macro><name>suggestion_</name><argument_list>(<argument>suggestion</argument>)</argument_list></macro> <block>{
    <expr><call><name>SetFocusBehavior</name><argument_list>(<argument><expr><name>FocusBehavior</name><operator>::</operator><name>ALWAYS</name></expr></argument>)</argument_list></call></expr>;
  }</block>

 <name>private</name><operator>:</operator>
  <operator>~</operator><macro><name>AutofillPopupChildView</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

  <comment type="line">// views::Views implementation</comment>
  <name>void</name> <macro><name>GetAccessibleNodeData</name><argument_list>(<argument>ui::AXNodeData* node_data</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>base</name><operator>::</operator><name>string16</name> <name>suggestion_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AutofillPopupChildView</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AutofillPopupView</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>WidgetDelegateView</name></expr></range></decl>,
                          <decl><type ref="prev"/><name>public</name> <name>views</name>::<name>WidgetFocusChangeListener</name></decl>,
                          <decl><type ref="prev"/><name>public</name> <name>views</name>::<name>WidgetObserver</name></decl>,
                          <decl><type ref="prev"/><name>public</name> <name>views</name>::<name>DragController</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>AutofillPopupView</name><argument_list>(<argument><expr><name>AutofillPopup</name><operator>*</operator> <name>popup</name></expr></argument>,
                             <argument><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>parent_widget</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>AutofillPopupView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>Show</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Hide</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>OnSuggestionsChanged</name><parameter_list>()</parameter_list>;</function_decl>

  <function><type><name>int</name></type> <name>GetSelectedLine</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>selected_line_</name><operator>.</operator><name>value_or</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

  <decl_stmt><decl><type><name>void</name></type> <name>WriteDragDataForView</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator></expr></argument>,
                            <argument><expr><name>ui</name><operator>::</operator><name>OSExchangeData</name><operator>*</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>GetDragOperationsForView</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>CanStartDragForView</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>AutofillPopup</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>OnSelectedRowChanged</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>previous_row_selection</name></expr></argument>,
                            <argument><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>current_row_selection</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Draw the given autofill entry in |entry_rect|.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>DrawAutofillEntry</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>Canvas</name><operator>*</operator> <name>canvas</name></expr></argument>,
                         <argument><expr><name>int</name> <name>index</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>entry_rect</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Creates child views based on the suggestions given by |controller_|. These</comment>
  <comment type="line">// child views are used for accessibility events only. We need child views to</comment>
  <comment type="line">// populate the correct |AXNodeData| when user selects a suggestion.</comment>
  <function_decl><type><name>void</name></type> <name>CreateChildViews</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>DoUpdateBoundsAndRedrawPopup</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// views::Views implementation.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnPaint</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>Canvas</name><operator>*</operator> <name>canvas</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>GetAccessibleNodeData</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>AXNodeData</name><operator>*</operator> <name>node_data</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnMouseCaptureLost</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>OnMouseDragged</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>MouseEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnMouseExited</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>MouseEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnMouseMoved</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>MouseEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>OnMousePressed</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>MouseEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnMouseReleased</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>MouseEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnGestureEvent</name><argument_list>(<argument><expr><name>ui</name><operator>::</operator><name>GestureEvent</name><operator>*</operator> <name>event</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>AcceleratorPressed</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ui</name><operator>::</operator><name>Accelerator</name><operator>&amp;</operator> <name>accelerator</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>HandleKeyPressEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>NativeWebKeyboardEvent</name><operator>&amp;</operator> <name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// views::WidgetFocusChangeListener implementation.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnNativeFocusChanged</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>NativeView</name> <name>focused_now</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// views::WidgetObserver implementation.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWidgetBoundsChanged</name><argument_list>(<argument><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>widget</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>new_bounds</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>AcceptSuggestion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>AcceptSelectedLine</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>AcceptSelection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSelectedLine</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>selected_line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSelection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Point</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SelectNextLine</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SelectPreviousLine</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ClearSelection</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Stop observing the widget.</comment>
  <function_decl><type><name>void</name></type> <name>RemoveObserver</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Controller for this popup. Weak reference.</comment>
  <decl_stmt><decl><type><name>AutofillPopup</name><modifier>*</modifier></type> <name>popup_</name></decl>;</decl_stmt>

  <comment type="line">// The widget of the window that triggered this popup. Weak reference.</comment>
  <expr_stmt><expr><name>views</name><operator>::</operator><name>Widget</name><operator>*</operator> <name>parent_widget_</name></expr>;</expr_stmt>

  <comment type="line">// The time when the popup was shown.</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>Time</name> <name>show_time_</name></expr>;</expr_stmt>

  <comment type="line">// The index of the currently selected line</comment>
  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>selected_line_</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_OSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OffscreenViewProxy</name></expr></argument>&gt;</argument_list></name> <name>view_proxy_</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// The registered keypress callback, responsible for switching lines on</comment>
  <comment type="line">// key presses</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHost</name><operator>::</operator><name>KeyPressEventCallback</name> <name>keypress_callback_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>AutofillPopupView</name></expr></argument>&gt;</argument_list></name> <name>weak_ptr_factory_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_AUTOFILL_POPUP_VIEW_H_</comment>
</unit>
