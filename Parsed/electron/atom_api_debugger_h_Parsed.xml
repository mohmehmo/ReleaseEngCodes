<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_debugger.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_DEBUGGER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_DEBUGGER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/callback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/devtools_agent_host_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/promise.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/trackable_object.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DevToolsAgentHost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WebContents</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace content</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Debugger</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>Debugger</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
                 <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>DevToolsAgentHostClient</name></decl>,
                 <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>WebContentsObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>Debugger</name></expr></argument>&gt;</argument_list></name> <call><name>Create</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                      <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// gin_helper::TrackableObject:</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>protected</name>:</label>
  <expr_stmt><expr><call><name>Debugger</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>Debugger</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// content::DevToolsAgentHostClient:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>AgentHostClosed</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name><operator>*</operator> <name>agent_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>DispatchProtocolMessage</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name><operator>*</operator> <name>agent_host</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// content::WebContentsObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderFrameHostChanged</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>old_rfh</name></expr></argument>,
                              <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>new_rfh</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>using</name></type> <name>PendingRequestMap</name> <init>=
      <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name><name>Promise</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>Attach</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>bool</name></type> <name>IsAttached</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Detach</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Promise</name></expr></argument>&gt;</argument_list></name> <call><name>SendCommand</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>ClearPendingRequests</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents_</name></expr>;</expr_stmt>  <comment type="line">// Weak Reference.</comment>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>DevToolsAgentHost</name></expr></argument>&gt;</argument_list></name></type> <name>agent_host_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PendingRequestMap</name></type> <name>pending_requests_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>previous_request_id_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>Debugger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_DEBUGGER_H_</comment>
</unit>
