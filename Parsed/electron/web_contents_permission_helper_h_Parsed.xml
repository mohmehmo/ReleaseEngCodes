<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/web_contents_permission_helper.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_WEB_CONTENTS_PERMISSION_HELPER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_WEB_CONTENTS_PERMISSION_HELPER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/media_stream_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/permission_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_user_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/common/mediastream/media_stream_request.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Applies the permission requested for WebContents.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WebContentsPermissionHelper</name>
    <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>WebContentsPermissionHelper</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <operator>~</operator><macro><name>WebContentsPermissionHelper</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  enum <expr><name>class</name> <name>PermissionType</name> <block>{
    <expr><name>POINTER_LOCK</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>PermissionType</name><operator>::</operator><name>NUM</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>,
    <expr><name>FULLSCREEN</name></expr>,
    <expr><name>OPEN_EXTERNAL</name></expr>,
  }</block></expr>;

  <comment type="line">// Asynchronous Requests</comment>
  <expr><name>void</name> <call><name>RequestFullscreenPermission</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>RequestMediaAccessPermission</name><argument_list>(<argument>const content::MediaStreamRequest&amp; request</argument>,
                                    <argument>content::MediaResponseCallback callback</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>RequestWebNotificationPermission</name><argument_list>(
      <argument><expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>callback</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>RequestPointerLockPermission</name><argument_list>(<argument>bool user_gesture</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>RequestOpenExternalPermission</name><argument_list>(<argument>base::OnceCallback&lt;void(bool)&gt; callback</argument>,
                                     <argument>bool user_gesture</argument>,
                                     <argument>const GURL&amp; url</argument>)</argument_list></macro></expr>;

  <comment type="line">// Synchronous Checks</comment>
  <expr><name>bool</name> <macro><name>CheckMediaAccessPermission</name><argument_list>(<argument>const GURL&amp; security_origin</argument>,
                                  <argument>blink::mojom::MediaStreamType type</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>explicit</name> <call><name>WebContentsPermissionHelper</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>friend</name> <name>class</name> <name>content</name><operator>::</operator><name><name>WebContentsUserData</name><argument_list type="generic">&lt;<argument><expr><name>WebContentsPermissionHelper</name></expr></argument>&gt;</argument_list></name></expr>;

  <expr><name>void</name> <macro><name>RequestPermission</name><argument_list>(<argument>content::PermissionType permission</argument>,
                         <argument>base::OnceCallback&lt;void(bool)&gt; callback</argument>,
                         <argument>bool user_gesture = false</argument>,
                         <argument>const base::DictionaryValue* details = nullptr</argument>)</argument_list></macro></expr>;

  <expr><name>bool</name> <macro><name>CheckPermission</name><argument_list>(<argument>content::PermissionType permission</argument>,
                       <argument>const base::DictionaryValue* details</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents_</name></expr>;

  <expr><call><name>WEB_CONTENTS_USER_DATA_KEY_DECL</name><argument_list>()</argument_list></call></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>WebContentsPermissionHelper</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_WEB_CONTENTS_PERMISSION_HELPER_H_</comment>
</unit>
