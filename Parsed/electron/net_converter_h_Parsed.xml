<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_converters/net_converter.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_CONVERTERS_NET_CONVERTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_CONVERTERS_NET_CONVERTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/converter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/fetch_api.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/net/cert_verifier_client.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>base</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DictionaryValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ListValue</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace base</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>net</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AuthChallengeInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>URLRequest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>X509Certificate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HttpResponseHeaders</name></decl>;</decl_stmt>
<struct_decl>struct <name>CertPrincipal</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>HttpVersion</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace net</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>network</name> <block>{<block_content>
<struct_decl>struct <name>ResourceRequest</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>AuthChallengeInfo</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>AuthChallengeInfo</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>X509Certificate</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>X509Certificate</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;

  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>X509Certificate</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>CertPrincipal</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>CertPrincipal</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>HttpResponseHeaders</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><name>net</name><operator>::</operator><name>HttpResponseHeaders</name><operator>*</operator> <name>headers</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>net</name><operator>::</operator><name>HttpResponseHeaders</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>HttpRequestHeaders</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>&amp;</operator> <name>headers</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequestBody</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequestBody</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequestBody</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(
      <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequestBody</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>bool</name> <call><name>FromV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>val</name></expr></argument>,
                     <argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequestBody</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>ResourceRequest</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>electron</name><operator>::</operator><name>VerifyRequestParams</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>ToV8</name><argument_list>(<argument>v8::Isolate* isolate</argument>,
                                   <argument>electron::VerifyRequestParams val</argument>)</argument_list></macro></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>HttpVersion</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpVersion</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>Converter</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>RedirectInfo</name></expr></argument>&gt;</argument_list></name> <block>{
  <expr><specifier>static</specifier> <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>ToV8</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                                   <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>RedirectInfo</name><operator>&amp;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_CONVERTERS_NET_CONVERTER_H_</comment>
</unit>
