<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/app/atom_main_delegate.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_APP_ATOM_MAIN_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_APP_ATOM_MAIN_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/app/content_main_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/common/content_client.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>tracing</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>TracingSamplerProfiler</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>void</name></type> <name>LoadResourceBundle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>locale</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AtomMainDelegate</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>ContentMainDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomMainDelegate</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomMainDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// content::ContentMainDelegate:</comment>
  <name>bool</name> <macro><name>BasicStartupComplete</name><argument_list>(<argument>int* exit_code</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PreSandboxStartup</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PreCreateMainMessageLoop</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PostEarlyInitialization</name><argument_list>(<argument>bool is_running_tests</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>ContentBrowserClient</name><operator>*</operator> <macro><name>CreateContentBrowserClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>ContentGpuClient</name><operator>*</operator> <macro><name>CreateContentGpuClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>ContentRendererClient</name><operator>*</operator> <macro><name>CreateContentRendererClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>ContentUtilityClient</name><operator>*</operator> <macro><name>CreateContentUtilityClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>int</name> <macro><name>RunProcess</name><argument_list>(
      <argument>const std::string&amp; process_type</argument>,
      <argument>const content::MainFunctionParams&amp; main_function_params</argument>)</argument_list></macro> <name>override</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>bool</name> <macro><name>DelaySandboxInitialization</name><argument_list>(<argument>const std::string&amp; process_type</argument>)</argument_list></macro> <name>override</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>bool</name> <macro><name>ShouldLockSchemeRegistry</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>ShouldCreateFeatureList</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <name>void</name> <call><name>OverrideChildProcessPath</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>OverrideFrameworkBundlePath</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>SetUpBundleOverrides</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>ContentBrowserClient</name></expr></argument>&gt;</argument_list></name> <name>browser_client_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>ContentClient</name></expr></argument>&gt;</argument_list></name> <name>content_client_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>ContentGpuClient</name></expr></argument>&gt;</argument_list></name> <name>gpu_client_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>ContentRendererClient</name></expr></argument>&gt;</argument_list></name> <name>renderer_client_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>ContentUtilityClient</name></expr></argument>&gt;</argument_list></name> <name>utility_client_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>tracing</name><operator>::</operator><name>TracingSamplerProfiler</name></expr></argument>&gt;</argument_list></name> <name>tracing_sampler_profiler_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomMainDelegate</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_APP_ATOM_MAIN_DELEGATE_H_</comment>
</unit>
