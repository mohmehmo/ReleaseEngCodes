<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/win/win32_desktop_notifications/toast_uia.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_TOAST_UIA_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_TOAST_UIA_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/notifications/win/win32_desktop_notifications/toast.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;combaseapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;UIAutomationCore.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<expr_stmt><expr><name>class</name> <name>DesktopNotificationController</name><operator>::</operator><name>Toast</name><operator>::</operator><name>UIAutomationInterface</name>
    <operator>:</operator> <name>public</name> <name>IRawElementProviderSimple</name></expr><operator>,</operator>
      <expr><name>public</name> <name>IWindowProvider</name></expr><operator>,</operator>
      <expr><name>public</name> <name>IInvokeProvider</name></expr><operator>,</operator>
      <expr><name>public</name> <name>ITextProvider</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>UIAutomationInterface</name><argument_list>(<argument><expr><name>Toast</name><operator>*</operator> <name>toast</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>DetachToast</name><argument_list>()</argument_list></macro> <block>{ <expr><name>hwnd_</name> <operator>=</operator> <name>NULL</name></expr>; }</block>

  <name>bool</name> <macro><name>IsDetached</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>hwnd_</name></expr>;</return> }</block>

 <name>private</name><operator>:</operator>
  <name>virtual</name> <operator>~</operator><call><name>UIAutomationInterface</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

  <comment type="line">// IUnknown</comment>
 <expr><name>public</name><operator>:</operator>
  <name>ULONG</name> <name>STDMETHODCALLTYPE</name> <macro><name>AddRef</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>ULONG</name> <name>STDMETHODCALLTYPE</name> <macro><name>Release</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>QueryInterface</name><argument_list>(<argument>REFIID riid</argument>, <argument>LPVOID* ppv</argument>)</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// IRawElementProviderSimple</comment>
 <expr><name>public</name><operator>:</operator>
  <name>STDMETHODIMP</name> <macro><name>get_ProviderOptions</name><argument_list>(<argument>ProviderOptions* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>GetPatternProvider</name><argument_list>(<argument>PATTERNID pattern_id</argument>,
                                  <argument>IUnknown** retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>GetPropertyValue</name><argument_list>(<argument>PROPERTYID property_id</argument>,
                                <argument>VARIANT* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_HostRawElementProvider</name><argument_list>(
      <argument>IRawElementProviderSimple** retval</argument>)</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// IWindowProvider</comment>
 <expr><name>public</name><operator>:</operator>
  <name>STDMETHODIMP</name> <macro><name>SetVisualState</name><argument_list>(<argument>WindowVisualState state</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>Close</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>WaitForInputIdle</name><argument_list>(<argument>int milliseconds</argument>, <argument>BOOL* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_CanMaximize</name><argument_list>(<argument>BOOL* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_CanMinimize</name><argument_list>(<argument>BOOL* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_IsModal</name><argument_list>(<argument>BOOL* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_WindowVisualState</name><argument_list>(<argument>WindowVisualState* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_WindowInteractionState</name><argument_list>(
      <argument>WindowInteractionState* retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_IsTopmost</name><argument_list>(<argument>BOOL* retval</argument>)</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// IInvokeProvider</comment>
 <expr><name>public</name><operator>:</operator>
  <name>STDMETHODIMP</name> <macro><name>Invoke</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// ITextProvider</comment>
 <expr><name>public</name><operator>:</operator>
  <name>STDMETHODIMP</name> <macro><name>GetSelection</name><argument_list>(<argument>SAFEARRAY** retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>GetVisibleRanges</name><argument_list>(<argument>SAFEARRAY** retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>RangeFromChild</name><argument_list>(<argument>IRawElementProviderSimple* child_element</argument>,
                              <argument>ITextRangeProvider** retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>RangeFromPoint</name><argument_list>(<argument>UiaPoint point</argument>,
                              <argument>ITextRangeProvider** retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_DocumentRange</name><argument_list>(<argument>ITextRangeProvider** retval</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>STDMETHODIMP</name> <macro><name>get_SupportedTextSelection</name><argument_list>(
      <argument>SupportedTextSelection* retval</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <specifier>volatile</specifier> <name>LONG</name> <name>cref_</name> <operator>=</operator> <literal type="number">0</literal></expr>;
  <expr><name>HWND</name> <name>hwnd_</name></expr>;
  <expr><name>std</name><operator>::</operator><name>wstring</name> <name>text_</name></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_WIN_WIN32_DESKTOP_NOTIFICATIONS_TOAST_UIA_H_</comment>
</unit>
