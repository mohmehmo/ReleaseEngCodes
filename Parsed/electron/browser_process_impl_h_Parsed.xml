<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/browser_process_impl.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<comment type="line">// This interface is for managing the global services of the application. Each</comment>
<comment type="line">// service is lazily created when requested the first time. The service getters</comment>
<comment type="line">// will return NULL if the service is not available, so callers must check for</comment>
<comment type="line">// this condition.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_BROWSER_PROCESS_IMPL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_BROWSER_PROCESS_IMPL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/command_line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/browser_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/prefs/pref_service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/prefs/value_map_pref_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"printing/buildflags/buildflags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/shared_url_loader_factory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/net/system_network_context_manager.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>printing</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>PrintJobManager</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Empty definition for std::unique_ptr</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BackgroundModeManager</name> <block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// NOT THREAD SAFE, call only from the main thread.</comment>
<comment type="line">// These functions shouldn't return NULL unless otherwise noted.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BrowserProcessImpl</name> <range>: <expr><name>public</name> <name>BrowserProcess</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>BrowserProcessImpl</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>BrowserProcessImpl</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><specifier>static</specifier> <name>void</name> <call><name>ApplyProxyModeFromCommandLine</name><argument_list>(<argument><expr><name>ValueMapPrefStore</name><operator>*</operator> <name>pref_store</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <call><name>PostEarlyInitialization</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>PreCreateThreads</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>PostDestroyThreads</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>void</name> <call><name>PostMainMessageLoopRun</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>EndSession</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>
  <name>void</name> <macro><name>FlushLocalStateAndReply</name><argument_list>(<argument>base::OnceClosure reply</argument>)</argument_list></macro> <name>override</name> <block>{}</block>
  <name>bool</name> <macro><name>IsShuttingDown</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>metrics_services_manager</name><operator>::</operator><name>MetricsServicesManager</name><operator>*</operator> <macro><name>GetMetricsServicesManager</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>metrics</name><operator>::</operator><name>MetricsService</name><operator>*</operator> <macro><name>metrics_service</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>rappor</name><operator>::</operator><name>RapporServiceImpl</name><operator>*</operator> <macro><name>rappor_service</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>ProfileManager</name><operator>*</operator> <macro><name>profile_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>PrefService</name><operator>*</operator> <macro><name>local_state</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>SharedURLLoaderFactory</name></expr></argument>&gt;</argument_list></name> <macro><name>shared_url_loader_factory</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>variations</name><operator>::</operator><name>VariationsService</name><operator>*</operator> <macro><name>variations_service</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>BrowserProcessPlatformPart</name><operator>*</operator> <macro><name>platform_part</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>extensions</name><operator>::</operator><name>EventRouterForwarder</name><operator>*</operator> <macro><name>extension_event_router_forwarder</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>NotificationUIManager</name><operator>*</operator> <macro><name>notification_ui_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>NotificationPlatformBridge</name><operator>*</operator> <macro><name>notification_platform_bridge</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>SystemNetworkContextManager</name><operator>*</operator> <macro><name>system_network_context_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>network</name><operator>::</operator><name>NetworkQualityTracker</name><operator>*</operator> <macro><name>network_quality_tracker</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>WatchDogThread</name><operator>*</operator> <macro><name>watchdog_thread</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>policy</name><operator>::</operator><name>ChromeBrowserPolicyConnector</name><operator>*</operator> <macro><name>browser_policy_connector</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>policy</name><operator>::</operator><name>PolicyService</name><operator>*</operator> <macro><name>policy_service</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>IconManager</name><operator>*</operator> <macro><name>icon_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>GpuModeManager</name><operator>*</operator> <macro><name>gpu_mode_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>printing</name><operator>::</operator><name>PrintPreviewDialogController</name><operator>*</operator> <macro><name>print_preview_dialog_controller</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>printing</name><operator>::</operator><name>BackgroundPrintingManager</name><operator>*</operator> <macro><name>background_printing_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>IntranetRedirectDetector</name><operator>*</operator> <macro><name>intranet_redirect_detector</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>DownloadStatusUpdater</name><operator>*</operator> <macro><name>download_status_updater</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>DownloadRequestLimiter</name><operator>*</operator> <macro><name>download_request_limiter</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>BackgroundModeManager</name><operator>*</operator> <macro><name>background_mode_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>StatusTray</name><operator>*</operator> <macro><name>status_tray</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>safe_browsing</name><operator>::</operator><name>SafeBrowsingService</name><operator>*</operator> <macro><name>safe_browsing_service</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>safe_browsing</name><operator>::</operator><name>ClientSideDetectionService</name><operator>*</operator> <macro><name>safe_browsing_detection_service</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>subresource_filter</name><operator>::</operator><name>RulesetService</name><operator>*</operator> <macro><name>subresource_filter_ruleset_service</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>optimization_guide</name><operator>::</operator><name>OptimizationGuideService</name><operator>*</operator> <macro><name>optimization_guide_service</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>component_updater</name><operator>::</operator><name>ComponentUpdateService</name><operator>*</operator> <macro><name>component_updater</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>MediaFileSystemRegistry</name><operator>*</operator> <macro><name>media_file_system_registry</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>WebRtcLogUploader</name><operator>*</operator> <macro><name>webrtc_log_uploader</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>network_time</name><operator>::</operator><name>NetworkTimeTracker</name><operator>*</operator> <macro><name>network_time_tracker</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>gcm</name><operator>::</operator><name>GCMDriver</name><operator>*</operator> <macro><name>gcm_driver</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>resource_coordinator</name><operator>::</operator><name>ResourceCoordinatorParts</name><operator>*</operator> <macro><name>resource_coordinator_parts</name><argument_list>()</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>resource_coordinator</name><operator>::</operator><name>TabManager</name><operator>*</operator> <macro><name>GetTabManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>CreateDevToolsProtocolHandler</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>
  <name>void</name> <macro><name>CreateDevToolsAutoOpener</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>
  <name>void</name> <macro><name>set_background_mode_manager_for_test</name><argument_list>(
      <argument>std::unique_ptr&lt;BackgroundModeManager&gt; manager</argument>)</argument_list></macro> <name>override</name> <block>{}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
  <name>void</name> <macro><name>StartAutoupdateTimer</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>void</name> <macro><name>SetApplicationLocale</name><argument_list>(<argument>const std::string&amp; locale</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>GetApplicationLocale</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>printing</name><operator>::</operator><name>PrintJobManager</name><operator>*</operator> <macro><name>print_job_manager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>StartupData</name><operator>*</operator> <macro><name>startup_data</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>BUILDFLAG</name><argument_list>(<argument><expr><name>ENABLE_PRINTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>printing</name><operator>::</operator><name>PrintJobManager</name></expr></argument>&gt;</argument_list></name> <name>print_job_manager_</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PrefService</name></expr></argument>&gt;</argument_list></name> <name>local_state_</name></expr>;
  <expr><name>std</name><operator>::</operator><name>string</name> <name>locale_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>BrowserProcessImpl</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_BROWSER_PROCESS_IMPL_H_</comment>
</unit>
