<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/event_emitter.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_EVENT_EMITTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_EVENT_EMITTER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"electron/shell/common/api/api.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/event_emitter_caller.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/wrappable.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>content</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>RenderFrameHost</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <call><name>CreateEvent</name><argument_list>(
    <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
    <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>sender</name> <operator>=</operator> <name>v8</name><operator>::</operator><call><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
    <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>custom_event</name> <operator>=</operator> <name>v8</name><operator>::</operator><call><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateEventFromFlags</name><argument_list>(<argument>v8::Isolate* isolate</argument>, <argument>int flags</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateNativeEvent</name><argument_list>(
    <argument>v8::Isolate* isolate</argument>,
    <argument>v8::Local&lt;v8::Object&gt; sender</argument>,
    <argument>content::RenderFrameHost* frame</argument>,
    <argument>electron::mojom::ElectronBrowser::MessageSyncCallback callback</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace internal</comment>

<comment type="line">// Provide helperers to emit event in JavaScript.</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>EventEmitter</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>using</name> <name>Base</name> <operator>=</operator> <name>gin_helper</name><operator>::</operator><name><name>Wrappable</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr>;
  <expr><name>using</name> <name>ValueArray</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;

  <comment type="line">// Make the convinient methods visible:</comment>
  <comment type="line">// https://isocpp.org/wiki/faq/templates#nondependent-name-lookup-members</comment>
  <expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <macro><name>isolate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Base</name><operator>::</operator><call><name>isolate</name><argument_list>()</argument_list></call></expr>;</return> }</block>
  <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWrapper</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Base</name><operator>::</operator><call><name>GetWrapper</name><argument_list>()</argument_list></call></expr>;</return> }</block>
  <name>v8</name><operator>::</operator><name><name>MaybeLocal</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWrapper</name><argument_list>(<argument>v8::Isolate* isolate</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>Base</name><operator>::</operator><call><name>GetWrapper</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block>

  <comment type="line">// this.emit(name, event, args...);</comment>
  <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name> <macro><name>EmitCustomEvent</name><argument_list>(<argument>base::StringPiece name</argument>,
                       <argument>v8::Local&lt;v8::Object&gt; event</argument>,
                       <argument>Args&amp;&amp;... args</argument>)</argument_list></macro> <block>{
    <return>return <expr><call><name>EmitWithEvent</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                         <argument><expr><name>internal</name><operator>::</operator><call><name>CreateEvent</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetWrapper</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
  }</block>

  <comment type="line">// this.emit(name, new Event(flags), args...);</comment>
  <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name> <macro><name>EmitWithFlags</name><argument_list>(<argument>base::StringPiece name</argument>, <argument>int flags</argument>, <argument>Args&amp;&amp;... args</argument>)</argument_list></macro> <block>{
    <return>return <expr><call><name>EmitCustomEvent</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                           <argument><expr><name>internal</name><operator>::</operator><call><name>CreateEventFromFlags</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
  }</block>

  <comment type="line">// this.emit(name, new Event(), args...);</comment>
  <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name> <macro><name>Emit</name><argument_list>(<argument>base::StringPiece name</argument>, <argument>Args&amp;&amp;... args</argument>)</argument_list></macro> <block>{
    <expr><name>v8</name><operator>::</operator><name>Locker</name> <call><name>locker</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>v8</name><operator>::</operator><name>HandleScope</name> <call><name>handle_scope</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper</name> <operator>=</operator> <call><name>GetWrapper</name><argument_list>()</argument_list></call></expr>;
    <if_stmt><if>if <condition>(<expr><call><name><name>wrapper</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>event</name> <operator>=</operator> <name>internal</name><operator>::</operator><call><name>CreateEvent</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></block></expr>;
    <return>return <expr><call><name>EmitWithEvent</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></range></decl></decl_stmt>

  <comment type="line">// this.emit(name, new Event(sender, message), args...);</comment>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>EmitWithSender</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>name</name></expr></argument>,
                      <argument><expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>sender</name></expr></argument>,
                      <argument><expr><name>electron</name><operator>::</operator><name>mojom</name><operator>::</operator><name>ElectronBrowser</name><operator>::</operator><name>InvokeCallback</name> <name>callback</name></expr></argument>,
                      <argument><expr><name>Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><call><name>DCHECK_CURRENTLY_ON</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>BrowserThread</name><operator>::</operator><name>UI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name>Locker</name> <call><name>locker</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name>HandleScope</name> <call><name>handle_scope</name><argument_list>(<argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper</name> <operator>=</operator> <call><name>GetWrapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>wrapper</name><operator>.</operator><name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>event</name> <operator>=</operator> <name>internal</name><operator>::</operator><call><name>CreateNativeEvent</name><argument_list>(
        <argument><expr><call><name>isolate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>wrapper</name></expr></argument>, <argument><expr><name>sender</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>EmitWithEvent</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

 <label><name>protected</name>:</label>
  <macro><name>EventEmitter</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

 <label><name>private</name>:</label>
  <comment type="line">// this.emit(name, event, args...);</comment>
  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>bool</name></type> <name>EmitWithEvent</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>name</name></expr></argument>,
                     <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>event</name></expr></argument>,
                     <argument><expr><name>Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
    <comment type="line">// It's possible that |this| will be deleted by EmitEvent, so save anything</comment>
    <comment type="line">// we need from |this| before calling EmitEvent.</comment>
    <expr_stmt><expr><name>auto</name><operator>*</operator> <name>isolate</name> <operator>=</operator> <call><name><name>this</name><operator>-&gt;</operator><name>isolate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name>Locker</name> <call><name>locker</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name>HandleScope</name> <call><name>handle_scope</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>context</name> <init>= <expr><call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>gin_helper</name><operator>::</operator><call><name>EmitEvent</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><call><name>GetWrapper</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
                          <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>defaultPrevented</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>gin</name><operator>::</operator><call><name>StringToV8</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><literal type="string">"defaultPrevented"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>ToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defaultPrevented</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>defaultPrevented</name><operator>-&gt;</operator><name>BooleanValue</name></name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>EventEmitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_EVENT_EMITTER_H_</comment>
</unit>
