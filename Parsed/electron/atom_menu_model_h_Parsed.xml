<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/atom_menu_model.h"><comment type="line">// Copyright (c) 2015 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_ATOM_MENU_MODEL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_ATOM_MENU_MODEL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/base/models/simple_menu_model.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomMenuModel</name> <range>: <expr><name>public</name> <name>ui</name><operator>::</operator><name>SimpleMenuModel</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>class</name> <name>Delegate</name> <operator>:</operator> <name>public</name> <name>ui</name><operator>::</operator><name>SimpleMenuModel</name><operator>::</operator><name>Delegate</name> <block>{
   <expr><name>public</name><operator>:</operator>
    <operator>~</operator><macro><name>Delegate</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

    <name>virtual</name> <name>bool</name> <macro><name>GetAcceleratorForCommandIdWithParams</name><argument_list>(
        <argument>int command_id</argument>,
        <argument>bool use_default_accelerator</argument>,
        <argument>ui::Accelerator* accelerator</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

    <expr><name>virtual</name> <name>bool</name> <macro><name>ShouldRegisterAcceleratorForCommandId</name><argument_list>(
        <argument>int command_id</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

    <expr><name>virtual</name> <name>bool</name> <macro><name>ShouldCommandIdWorkWhenHidden</name><argument_list>(<argument>int command_id</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

   <expr><name>private</name><operator>:</operator>
    <comment type="line">// ui::SimpleMenuModel::Delegate:</comment>
    <name>bool</name> <macro><name>GetAcceleratorForCommandId</name><argument_list>(
        <argument>int command_id</argument>,
        <argument>ui::Accelerator* accelerator</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  }</block></expr>;

  <expr><name>class</name> <name>Observer</name> <operator>:</operator> <name>public</name> <name>base</name><operator>::</operator><name>CheckedObserver</name> <block>{
   <expr><name>public</name><operator>:</operator>
    <operator>~</operator><macro><name>Observer</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

    <comment type="line">// Notifies the menu will open.</comment>
    <name>virtual</name> <name>void</name> <macro><name>OnMenuWillShow</name><argument_list>()</argument_list></macro> <block>{}</block>

    <comment type="line">// Notifies the menu has been closed.</comment>
    <name>virtual</name> <name>void</name> <macro><name>OnMenuWillClose</name><argument_list>()</argument_list></macro> <block>{}</block></expr>
  }</block></expr>;

  <expr><name>explicit</name> <call><name>AtomMenuModel</name><argument_list>(<argument><expr><name>Delegate</name><operator>*</operator> <name>delegate</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomMenuModel</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>AddObserver</name><argument_list>(<argument>Observer* obs</argument>)</argument_list></macro> <block>{ <expr><call><name><name>observers_</name><operator>.</operator><name>AddObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>; }</block>
  <name>void</name> <macro><name>RemoveObserver</name><argument_list>(<argument>Observer* obs</argument>)</argument_list></macro> <block>{ <expr><call><name><name>observers_</name><operator>.</operator><name>RemoveObserver</name></name><argument_list>(<argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>; }</block>

  <name>void</name> <macro><name>SetToolTip</name><argument_list>(<argument>int index</argument>, <argument>const base::string16&amp; toolTip</argument>)</argument_list></macro></expr>;
  <expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetToolTipAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetRole</name><argument_list>(<argument>int index</argument>, <argument>const base::string16&amp; role</argument>)</argument_list></macro></expr>;
  <expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetRoleAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetSublabel</name><argument_list>(<argument>int index</argument>, <argument>const base::string16&amp; sublabel</argument>)</argument_list></macro></expr>;
  <expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetSublabelAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>GetAcceleratorAtWithParams</name><argument_list>(<argument>int index</argument>,
                                  <argument>bool use_default_accelerator</argument>,
                                  <argument>ui::Accelerator* accelerator</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>bool</name> <macro><name>ShouldRegisterAcceleratorAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>bool</name> <macro><name>WorksWhenHiddenAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// ui::SimpleMenuModel:</comment>
  <expr><name>void</name> <macro><name>MenuWillClose</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>MenuWillShow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>using</name> <name>SimpleMenuModel</name><operator>::</operator><name>GetSubmenuModelAt</name></expr>;
  <expr><name>AtomMenuModel</name><operator>*</operator> <macro><name>GetSubmenuModelAt</name><argument_list>(<argument>int index</argument>)</argument_list></macro></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>Delegate</name><operator>*</operator> <name>delegate_</name></expr>;  <comment type="line">// weak ref.</comment>

  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name> <name>toolTips_</name></expr>;   <comment type="line">// command id -&gt; tooltip</comment>
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name> <name>roles_</name></expr>;      <comment type="line">// command id -&gt; role</comment>
  <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name> <name>sublabels_</name></expr>;  <comment type="line">// command id -&gt; sublabel</comment>
  <expr><name>base</name><operator>::</operator><name><name>ObserverList</name><argument_list type="generic">&lt;<argument><expr><name>Observer</name></expr></argument>&gt;</argument_list></name> <name>observers_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomMenuModel</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_ATOM_MENU_MODEL_H_</comment>
</unit>
