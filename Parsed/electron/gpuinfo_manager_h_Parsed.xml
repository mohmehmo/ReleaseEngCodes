<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/gpuinfo_manager.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_GPUINFO_MANAGER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_GPUINFO_MANAGER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/gpu/gpu_data_manager_impl.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/gpu_data_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/gpu_data_manager_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/promise.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// GPUInfoManager is a singleton used to manage and fetch GPUInfo</comment>
<decl_stmt><decl><type><name>class</name></type> <name>GPUInfoManager</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>GpuDataManagerObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <specifier>static</specifier> <name>GPUInfoManager</name><operator>*</operator> <call><name>GetInstance</name><argument_list>()</argument_list></call></expr>;

  <expr><call><name>GPUInfoManager</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>GPUInfoManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>NeedsCompleteGpuInfoCollection</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>void</name> <call><name>FetchCompleteInfo</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name><name>Promise</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <name>promise</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>FetchBasicInfo</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name><name>Promise</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <name>promise</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>OnGpuInfoUpdate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <macro><name>EnumerateGPUInfo</name><argument_list>(
      <argument>gpu::GPUInfo gpu_info</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// These should be posted to the task queue</comment>
  <expr><name>void</name> <call><name>CompleteInfoFetcher</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name><name>Promise</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name> <name>promise</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>ProcessCompleteInfo</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// This set maintains all the promises that should be fulfilled</comment>
  <comment type="line">// once we have the complete information data</comment>
  <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name><name>Promise</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>DictionaryValue</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
      <name>complete_info_promise_set_</name></expr>;
  <expr><name>content</name><operator>::</operator><name>GpuDataManager</name><operator>*</operator> <name>gpu_data_manager_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>GPUInfoManager</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_GPUINFO_MANAGER_H_</comment>
</unit>
