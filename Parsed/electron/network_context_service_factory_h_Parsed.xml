<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/network_context_service_factory.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_NETWORK_CONTEXT_SERVICE_FACTORY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_NETWORK_CONTEXT_SERVICE_FACTORY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/singleton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/keyed_service/content/browser_context_keyed_service_factory.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>KeyedService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>contenet</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BrowserContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NetworkContextService</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NetworkContextServiceFactory</name> <range>: <expr><name>public</name> <name>BrowserContextKeyedServiceFactory</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <comment type="line">// Returns the NetworkContextService that supports NetworkContexts for</comment>
  <comment type="line">// |browser_context|.</comment>
  <specifier>static</specifier> <name>NetworkContextService</name><operator>*</operator> <call><name>GetForContext</name><argument_list>(
      <argument><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Returns the NetworkContextServiceFactory singleton.</comment>
  <expr><specifier>static</specifier> <name>NetworkContextServiceFactory</name><operator>*</operator> <call><name>GetInstance</name><argument_list>()</argument_list></call></expr>;

  <expr><call><name>NetworkContextServiceFactory</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NetworkContextServiceFactory</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
  <expr><name>NetworkContextServiceFactory</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>NetworkContextServiceFactory</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator>
      <name>delete</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> struct <name>base</name><operator>::</operator><name><name>DefaultSingletonTraits</name><argument_list type="generic">&lt;<argument><expr><name>NetworkContextServiceFactory</name></expr></argument>&gt;</argument_list></name></expr>;

  <expr><call><name>NetworkContextServiceFactory</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>NetworkContextServiceFactory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// BrowserContextKeyedServiceFactory implementation:</comment>
  <expr><name>KeyedService</name><operator>*</operator> <macro><name>BuildServiceInstanceFor</name><argument_list>(
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <macro><name>GetBrowserContextToUse</name><argument_list>(
      <argument>content::BrowserContext* context</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_NETWORK_CONTEXT_SERVICE_FACTORY_H_</comment>
</unit>
