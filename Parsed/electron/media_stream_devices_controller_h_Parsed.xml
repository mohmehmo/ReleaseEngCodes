<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/media/media_stream_devices_controller.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_MEDIA_MEDIA_STREAM_DEVICES_CONTROLLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_MEDIA_MEDIA_STREAM_DEVICES_CONTROLLER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents_delegate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/common/mediastream/media_stream_request.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MediaStreamDevicesController</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>MediaStreamDevicesController</name><argument_list>(<argument>const content::MediaStreamRequest&amp; request</argument>,
                               <argument>content::MediaResponseCallback callback</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>MediaStreamDevicesController</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Accept or deny the request based on the default policy.</comment>
  <function_decl><type><name>bool</name></type> <name>TakeAction</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Explicitly accept or deny the request.</comment>
  <function_decl><type><name>void</name></type> <name>Accept</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>Deny</name><argument_list>(<argument><expr><name>blink</name><operator>::</operator><name>mojom</name><operator>::</operator><name>MediaStreamRequestResult</name> <name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <comment type="line">// Handle the request of desktop or tab screen cast.</comment>
  <function_decl><type><name>void</name></type> <name>HandleUserMediaRequest</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// The original request for access to devices.</comment>
  <expr_stmt><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>MediaStreamRequest</name> <name>request_</name></expr>;</expr_stmt>

  <comment type="line">// The callback that needs to be Run to notify WebRTC of whether access to</comment>
  <comment type="line">// audio/video devices was granted or not.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>MediaResponseCallback</name> <name>callback_</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>microphone_requested_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>webcam_requested_</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>MediaStreamDevicesController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_MEDIA_MEDIA_STREAM_DEVICES_CONTROLLER_H_</comment>
</unit>
