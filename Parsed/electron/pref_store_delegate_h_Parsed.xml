<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/pref_store_delegate.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_PREF_STORE_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_PREF_STORE_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/prefs/persistent_pref_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"components/prefs/pref_value_store.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserContext</name></decl>;</decl_stmt>

<comment type="line">// Retrieves handle to the in memory pref store that gets</comment>
<comment type="line">// initialized with the pref service.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>PrefStoreDelegate</name> <range>: <expr><name>public</name> <name>PrefValueStore</name><operator>::</operator><name>Delegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>PrefStoreDelegate</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name> <name>browser_context</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>PrefStoreDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>Init</name><argument_list>(<argument>PrefStore* managed_prefs</argument>,
            <argument>PrefStore* supervised_user_prefs</argument>,
            <argument>PrefStore* extension_prefs</argument>,
            <argument>PrefStore* command_line_prefs</argument>,
            <argument>PrefStore* user_prefs</argument>,
            <argument>PrefStore* recommended_prefs</argument>,
            <argument>PrefStore* default_prefs</argument>,
            <argument>PrefNotifier* pref_notifier</argument>)</argument_list></macro> <name>override</name> <block>{}</block>

  <name>void</name> <macro><name>InitIncognitoUserPrefs</name><argument_list>(
      <argument>scoped_refptr&lt;PersistentPrefStore&gt; incognito_user_prefs_overlay</argument>,
      <argument>scoped_refptr&lt;PersistentPrefStore&gt; incognito_user_prefs_underlay</argument>,
      <argument>const std::vector&lt;const char*&gt;&amp; overlay_pref_names</argument>)</argument_list></macro> <name>override</name> <block>{}</block>

  <name>void</name> <macro><name>InitPrefRegistry</name><argument_list>(<argument>PrefRegistry* pref_registry</argument>)</argument_list></macro> <name>override</name> <block>{}</block>

  <name>void</name> <macro><name>UpdateCommandLinePrefStore</name><argument_list>(<argument>PrefStore* command_line_prefs</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>AtomBrowserContext</name></expr></argument>&gt;</argument_list></name> <name>browser_context_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>PrefStoreDelegate</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_PREF_STORE_DELEGATE_H_</comment>
</unit>
