<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/atom_sandboxed_renderer_client.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_ATOM_SANDBOXED_RENDERER_CLIENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_ATOM_SANDBOXED_RENDERER_CLIENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/process/process_metrics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/renderer/renderer_client_base.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomSandboxedRendererClient</name> <range>: <expr><name>public</name> <name>RendererClientBase</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AtomSandboxedRendererClient</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AtomSandboxedRendererClient</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>InitializeBindings</name><argument_list>(<argument>v8::Local&lt;v8::Object&gt; binding</argument>,
                          <argument>v8::Local&lt;v8::Context&gt; context</argument>,
                          <argument>bool is_main_frame</argument>)</argument_list></macro></expr>;
  <comment type="line">// electron::RendererClientBase:</comment>
  <expr><name>void</name> <macro><name>DidCreateScriptContext</name><argument_list>(<argument>v8::Handle&lt;v8::Context&gt; context</argument>,
                              <argument>content::RenderFrame* render_frame</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>WillReleaseScriptContext</name><argument_list>(<argument>v8::Handle&lt;v8::Context&gt; context</argument>,
                                <argument>content::RenderFrame* render_frame</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetupMainWorldOverrides</name><argument_list>(<argument>v8::Handle&lt;v8::Context&gt; context</argument>,
                               <argument>content::RenderFrame* render_frame</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetupExtensionWorldOverrides</name><argument_list>(<argument>v8::Handle&lt;v8::Context&gt; context</argument>,
                                    <argument>content::RenderFrame* render_frame</argument>,
                                    <argument>int world_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <comment type="line">// content::ContentRendererClient:</comment>
  <expr><name>void</name> <macro><name>RenderFrameCreated</name><argument_list>(<argument>content::RenderFrame*</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RenderViewCreated</name><argument_list>(<argument>content::RenderView*</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RunScriptsAtDocumentStart</name><argument_list>(<argument>content::RenderFrame* render_frame</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RunScriptsAtDocumentEnd</name><argument_list>(<argument>content::RenderFrame* render_frame</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>ProcessMetrics</name></expr></argument>&gt;</argument_list></name> <name>metrics_</name></expr>;

  <comment type="line">// Getting main script context from web frame would lazily initializes</comment>
  <comment type="line">// its script context. Doing so in a web page without scripts would trigger</comment>
  <comment type="line">// assertion, so we have to keep a book of injected web frames.</comment>
  <expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>injected_frames_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomSandboxedRendererClient</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_ATOM_SANDBOXED_RENDERER_CLIENT_H_</comment>
</unit>
