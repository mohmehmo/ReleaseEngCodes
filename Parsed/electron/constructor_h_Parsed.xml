<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/common/gin_helper/constructor.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_COMMON_GIN_HELPER_CONSTRUCTOR_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMON_GIN_HELPER_CONSTRUCTOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/function_template.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/wrappable_base.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gin_helper</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<comment type="line">// This set of templates invokes a base::Callback by converting the Arguments</comment>
<comment type="line">// into native types. It relies on the function_template.h to provide helper</comment>
<comment type="line">// templates.</comment>
<decl_stmt><decl><type><specifier>inline</specifier> <name>WrappableBase</name><modifier>*</modifier></type> <name>InvokeFactory</name><argument_list>(
    <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name><operator>*</operator><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
  <return>return <expr><call><name><name>callback</name><operator>.</operator><name>Run</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>P1</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>WrappableBase</name><modifier>*</modifier></type> <name>InvokeFactory</name><argument_list>(
    <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name><operator>*</operator><operator>(</operator><name>P1</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a1</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>callback</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>P1</name></expr></argument>, <argument><expr><name>typename</name> <name>P2</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>WrappableBase</name><modifier>*</modifier></type> <name>InvokeFactory</name><argument_list>(
    <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name><operator>*</operator><operator>(</operator><name>P1</name>, <name>P2</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a2</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>callback</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>P1</name></expr></argument>, <argument><expr><name>typename</name> <name>P2</name></expr></argument>, <argument><expr><name>typename</name> <name>P3</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>WrappableBase</name><modifier>*</modifier></type> <name>InvokeFactory</name><argument_list>(
    <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name><operator>*</operator><operator>(</operator><name>P1</name>, <name>P2</name>, <name>P3</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P3</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a3</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>callback</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>P1</name></expr></argument>, <argument><expr><name>typename</name> <name>P2</name></expr></argument>, <argument><expr><name>typename</name> <name>P3</name></expr></argument>, <argument><expr><name>typename</name> <name>P4</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>WrappableBase</name><modifier>*</modifier></type> <name>InvokeFactory</name><argument_list>(
    <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name><operator>*</operator><operator>(</operator><name>P1</name>, <name>P2</name>, <name>P3</name>, <name>P4</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P3</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a3</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P4</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a4</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a4</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>callback</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>P1</name></expr></argument>, <argument><expr><name>typename</name> <name>P2</name></expr></argument>, <argument><expr><name>typename</name> <name>P3</name></expr></argument>, <argument><expr><name>typename</name> <name>P4</name></expr></argument>, <argument><expr><name>typename</name> <name>P5</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>WrappableBase</name><modifier>*</modifier></type> <name>InvokeFactory</name><argument_list>(
    <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name><operator>*</operator><operator>(</operator><name>P1</name>, <name>P2</name>, <name>P3</name>, <name>P4</name>, <name>P5</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P3</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a3</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P4</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a4</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P5</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a5</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a4</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a5</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>callback</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>P1</name></expr></argument>,
          <argument><expr><name>typename</name> <name>P2</name></expr></argument>,
          <argument><expr><name>typename</name> <name>P3</name></expr></argument>,
          <argument><expr><name>typename</name> <name>P4</name></expr></argument>,
          <argument><expr><name>typename</name> <name>P5</name></expr></argument>,
          <argument><expr><name>typename</name> <name>P6</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>WrappableBase</name><modifier>*</modifier></type> <name>InvokeFactory</name><argument_list>(
    <argument><expr><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>WrappableBase</name><operator>*</operator><operator>(</operator><name>P1</name>, <name>P2</name>, <name>P3</name>, <name>P4</name>, <name>P5</name>, <name>P6</name><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>callback</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P1</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P3</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a3</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P4</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a4</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P5</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a5</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>typename</name> <name><name>CallbackParamTraits</name><argument_list type="generic">&lt;<argument><expr><name>P6</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>LocalType</name> <name>a6</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a4</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a5</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><name>gin_helper</name><operator>::</operator><call><name>GetNextArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a6</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>callback</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Sig</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>InvokeNew</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>factory</name></expr></argument>,
               <argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
               <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>args</name><operator>-&gt;</operator><name>IsConstructCall</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>args</name><operator>-&gt;</operator><name>ThrowError</name></name><argument_list>(<argument><expr><literal type="string">"Requires constructor call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>WrappableBase</name><modifier>*</modifier></type> <name>object</name></decl>;</decl_stmt>
  <block>{<block_content>
    <comment type="line">// Don't continue if the constructor throws an exception.</comment>
    <expr_stmt><expr><name>v8</name><operator>::</operator><name>TryCatch</name> <call><name>try_catch</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>object</name> <operator>=</operator> <name>internal</name><operator>::</operator><call><name>InvokeFactory</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>try_catch</name><operator>.</operator><name>HasCaught</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>try_catch</name><operator>.</operator><name>ReThrow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>args</name><operator>-&gt;</operator><name>ThrowError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace internal</comment>

<comment type="line">// Create a FunctionTemplate that can be "new"ed in JavaScript.</comment>
<comment type="line">// It is user's responsibility to ensure this function is called for one type</comment>
<comment type="line">// only ONCE in the program's whole lifetime, otherwise we would have memory</comment>
<comment type="line">// leak.</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>Sig</name></expr></argument>&gt;</argument_list></name>
<name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Function</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateConstructor</name><argument_list>(
    <argument>v8::Isolate* isolate</argument>,
    <argument>const base::RepeatingCallback&lt;Sig&gt;&amp; func</argument>)</argument_list></macro> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <expr><specifier>static</specifier> <name>bool</name> <name>called</name> <operator>=</operator> <name>false</name></expr>;
  <expr><call><name>CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>called</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"CreateConstructor can only be called for one type once"</literal></expr>;
  <expr><name>called</name> <operator>=</operator> <name>true</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>templ</name> <operator>=</operator> <call><name>CreateFunctionTemplate</name><argument_list>(
      <argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>base</name><operator>::</operator><call><name>BindRepeating</name><argument_list>(<argument><expr><operator>&amp;</operator><name>internal</name><operator>::</operator><name><name>InvokeNew</name><argument_list type="generic">&lt;<argument><expr><name>Sig</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>templ</name><operator>-&gt;</operator><name>InstanceTemplate</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SetInternalFieldCount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
  <expr><name>T</name><operator>::</operator><call><name>BuildPrototype</name><argument_list>(<argument><expr><name>isolate</name></expr></argument>, <argument><expr><name>templ</name></expr></argument>)</argument_list></call></expr>;
  <return>return <expr><call><name><name>templ</name><operator>-&gt;</operator><name>GetFunction</name></name><argument_list>(<argument><expr><call><name><name>isolate</name><operator>-&gt;</operator><name>GetCurrentContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToLocalChecked</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace gin_helper</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_COMMON_GIN_HELPER_CONSTRUCTOR_H_</comment>
</unit>
