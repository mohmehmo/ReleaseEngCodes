<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/win/notify_icon.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_WIN_NOTIFY_ICON_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_WIN_NOTIFY_ICON_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>  <comment type="line">// windows.h must be included first</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/memory/weak_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/win/scoped_gdi_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/tray_icon.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Point</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>views</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MenuRunner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Widget</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace views</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NotifyIconHost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>NotifyIcon</name> <range>: <expr><name>public</name> <name>TrayIcon</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <comment type="line">// Constructor which provides this icon's unique ID and messaging window.</comment>
  <macro><name>NotifyIcon</name><argument_list>(<argument>NotifyIconHost* host</argument>, <argument>UINT id</argument>, <argument>HWND window</argument>, <argument>UINT message</argument>)</argument_list></macro></expr>;
  <expr><operator>~</operator><macro><name>NotifyIcon</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// Handles a click event from the user - if |left_button_click| is true and</comment>
  <comment type="line">// there is a registered observer, passes the click event to the observer,</comment>
  <comment type="line">// otherwise displays the context menu if there is one.</comment>
  <expr><name>void</name> <macro><name>HandleClickEvent</name><argument_list>(<argument>int modifiers</argument>,
                        <argument>bool left_button_click</argument>,
                        <argument>bool double_button_click</argument>)</argument_list></macro></expr>;

  <comment type="line">// Handles a mouse move event from the user.</comment>
  <expr><name>void</name> <macro><name>HandleMouseMoveEvent</name><argument_list>(<argument>int modifiers</argument>)</argument_list></macro></expr>;

  <comment type="line">// Re-creates the status tray icon now after the taskbar has been created.</comment>
  <expr><name>void</name> <call><name>ResetIcon</name><argument_list>()</argument_list></call></expr>;

  <expr><name>UINT</name> <macro><name>icon_id</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>icon_id_</name></expr>;</return> }</block>
  <name>HWND</name> <macro><name>window</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>window_</name></expr>;</return> }</block>
  <name>UINT</name> <macro><name>message_id</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>message_id_</name></expr>;</return> }</block>

  <comment type="line">// Overridden from TrayIcon:</comment>
  <name>void</name> <macro><name>SetImage</name><argument_list>(<argument>HICON image</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetPressedImage</name><argument_list>(<argument>HICON image</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetToolTip</name><argument_list>(<argument>const std::string&amp; tool_tip</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>DisplayBalloon</name><argument_list>(<argument>const BalloonOptions&amp; options</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RemoveBalloon</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Focus</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>PopUpContextMenu</name><argument_list>(<argument>const gfx::Point&amp; pos</argument>,
                        <argument>AtomMenuModel* menu_model</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>SetContextMenu</name><argument_list>(<argument>AtomMenuModel* menu_model</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetBounds</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>void</name> <call><name>InitIconData</name><argument_list>(<argument><expr><name>NOTIFYICONDATA</name><operator>*</operator> <name>icon_data</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>OnContextMenuClosed</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// The tray that owns us.  Weak.</comment>
  <expr><name>NotifyIconHost</name><operator>*</operator> <name>host_</name></expr>;

  <comment type="line">// The unique ID corresponding to this icon.</comment>
  <expr><name>UINT</name> <name>icon_id_</name></expr>;

  <comment type="line">// Window used for processing messages from this icon.</comment>
  <expr><name>HWND</name> <name>window_</name></expr>;

  <comment type="line">// The message identifier used for status icon messages.</comment>
  <expr><name>UINT</name> <name>message_id_</name></expr>;

  <comment type="line">// The currently-displayed icon for the window.</comment>
  <expr><name>base</name><operator>::</operator><name>win</name><operator>::</operator><name>ScopedHICON</name> <name>icon_</name></expr>;

  <comment type="line">// The context menu.</comment>
  <expr><name>AtomMenuModel</name><operator>*</operator> <name>menu_model_</name> <operator>=</operator> <name>nullptr</name></expr>;

  <comment type="line">// Context menu associated with this icon (if any).</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>MenuRunner</name></expr></argument>&gt;</argument_list></name> <name>menu_runner_</name></expr>;

  <comment type="line">// Temporary widget for the context menu, needed for keyboard event capture.</comment>
  <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>views</name><operator>::</operator><name>Widget</name></expr></argument>&gt;</argument_list></name> <name>widget_</name></expr>;

  <comment type="line">// WeakPtrFactory for CloseClosure safety.</comment>
  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>NotifyIcon</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NotifyIcon</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_WIN_NOTIFY_ICON_H_</comment>
</unit>
