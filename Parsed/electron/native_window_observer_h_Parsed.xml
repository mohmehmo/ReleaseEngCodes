<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/native_window_observer.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NATIVE_WINDOW_OBSERVER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NATIVE_WINDOW_OBSERVER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/observer_list_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/strings/string16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/base/window_open_disposition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url/gurl.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>gfx</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Rect</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NativeWindowObserver</name> <range>: <expr><name>public</name> <name>base</name><operator>::</operator><name>CheckedObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <operator>~</operator><macro><name>NativeWindowObserver</name><argument_list>()</argument_list></macro> <name>override</name> <block>{}</block>

  <comment type="line">// Called when the web page in window wants to create a popup window.</comment>
  <name>virtual</name> <name>void</name> <macro><name>WillCreatePopupWindow</name><argument_list>(<argument>const base::string16&amp; frame_name</argument>,
                                     <argument>const GURL&amp; target_url</argument>,
                                     <argument>const std::string&amp; partition_id</argument>,
                                     <argument>WindowOpenDisposition disposition</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when user is starting an navigation in web page.</comment>
  <name>virtual</name> <name>void</name> <macro><name>WillNavigate</name><argument_list>(<argument>bool* prevent_default</argument>, <argument>const GURL&amp; url</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when the window is gonna closed.</comment>
  <name>virtual</name> <name>void</name> <macro><name>WillCloseWindow</name><argument_list>(<argument>bool* prevent_default</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when the window wants to know the preferred width.</comment>
  <name>virtual</name> <name>void</name> <macro><name>RequestPreferredWidth</name><argument_list>(<argument>int* width</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when closed button is clicked.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnCloseButtonClicked</name><argument_list>(<argument>bool* prevent_default</argument>)</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when the window is closed.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowClosed</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when Windows sends WM_ENDSESSION message</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowEndSession</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when window loses focus.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowBlur</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when window gains focus.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowFocus</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when window is shown.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowShow</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when window is hidden.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowHide</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Called when window state changed.</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowMaximize</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowUnmaximize</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowMinimize</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowRestore</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowWillResize</name><argument_list>(<argument>const gfx::Rect&amp; new_bounds</argument>,
                                  <argument>bool* prevent_default</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowResize</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowWillMove</name><argument_list>(<argument>const gfx::Rect&amp; new_bounds</argument>,
                                <argument>bool* prevent_default</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowMove</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowMoved</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowScrollTouchBegin</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowScrollTouchEnd</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowSwipe</name><argument_list>(<argument>const std::string&amp; direction</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowRotateGesture</name><argument_list>(<argument>float rotation</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowSheetBegin</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowSheetEnd</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowEnterFullScreen</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowLeaveFullScreen</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowEnterHtmlFullScreen</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowLeaveHtmlFullScreen</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowAlwaysOnTopChanged</name><argument_list>()</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnTouchBarItemResult</name><argument_list>(<argument>const std::string&amp; item_id</argument>,
                                    <argument>const base::DictionaryValue&amp; details</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> <name>void</name> <macro><name>OnNewWindowForTab</name><argument_list>()</argument_list></macro> <block>{}</block>

<comment type="line">// Called when window message received</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <name>virtual</name> <name>void</name> <macro><name>OnWindowMessage</name><argument_list>(<argument>UINT message</argument>, <argument>WPARAM w_param</argument>, <argument>LPARAM l_param</argument>)</argument_list></macro> <block>{}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Called on Windows when App Commands arrive (WM_APPCOMMAND)</comment>
  <comment type="line">// Some commands are implemented on on other platforms as well</comment>
  <name>virtual</name> <name>void</name> <macro><name>OnExecuteAppCommand</name><argument_list>(<argument>const std::string&amp; command_name</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NATIVE_WINDOW_OBSERVER_H_</comment>
</unit>
