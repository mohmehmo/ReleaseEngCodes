<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/autofill_popup.h"><comment type="line">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_AUTOFILL_POPUP_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_AUTOFILL_POPUP_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/render_frame_host.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/views/autofill_popup_view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/gfx/font_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/native_theme/native_theme.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/widget/widget.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AutofillPopupView</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AutofillPopup</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>ViewObserver</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>AutofillPopup</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>AutofillPopup</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>CreateView</name><argument_list>(<argument>content::RenderFrameHost* render_frame</argument>,
                  <argument>content::RenderFrameHost* embedder_frame</argument>,
                  <argument>bool offscreen</argument>,
                  <argument>views::View* parent</argument>,
                  <argument>const gfx::RectF&amp; bounds</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>Hide</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <call><name>SetItems</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>values</name></expr></argument>,
                <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>labels</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>UpdatePopupBounds</name><argument_list>()</argument_list></call></expr>;

  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <call><name>popup_bounds_in_view</name><argument_list>()</argument_list></call></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> <name>class</name> <name>AutofillPopupView</name></expr>;

  <comment type="line">// views::ViewObserver:</comment>
  <expr><name>void</name> <macro><name>OnViewBoundsChanged</name><argument_list>(<argument>views::View* view</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnViewIsDeleting</name><argument_list>(<argument>views::View* view</argument>)</argument_list></macro> <name>override</name></expr>;

  <expr><name>void</name> <macro><name>AcceptSuggestion</name><argument_list>(<argument>int index</argument>)</argument_list></macro></expr>;

  <expr><name>int</name> <call><name>GetDesiredPopupHeight</name><argument_list>()</argument_list></call></expr>;
  <expr><name>int</name> <call><name>GetDesiredPopupWidth</name><argument_list>()</argument_list></call></expr>;
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetRowBounds</name><argument_list>(<argument>int i</argument>)</argument_list></macro></expr>;
  <expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>FontList</name><operator>&amp;</operator> <macro><name>GetValueFontListForRow</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>FontList</name><operator>&amp;</operator> <macro><name>GetLabelFontListForRow</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>ui</name><operator>::</operator><name>NativeTheme</name><operator>::</operator><name>ColorId</name> <macro><name>GetBackgroundColorIDForRow</name><argument_list>(<argument>int index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <expr><name>int</name> <call><name>GetLineCount</name><argument_list>()</argument_list></call></expr>;
  <expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetValueAt</name><argument_list>(<argument>int i</argument>)</argument_list></macro></expr>;
  <expr><name>base</name><operator>::</operator><name>string16</name> <macro><name>GetLabelAt</name><argument_list>(<argument>int i</argument>)</argument_list></macro></expr>;
  <expr><name>int</name> <macro><name>LineFromY</name><argument_list>(<argument>int y</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <expr><name>int</name> <name>selected_index_</name></expr>;

  <comment type="line">// Popup location</comment>
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <name>popup_bounds_</name></expr>;

  <comment type="line">// Bounds of the autofilled element</comment>
  <expr><name>gfx</name><operator>::</operator><name>Rect</name> <name>element_bounds_</name></expr>;

  <comment type="line">// Datalist suggestions</comment>
  <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name> <name>values_</name></expr>;
  <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>base</name><operator>::</operator><name>string16</name></expr></argument>&gt;</argument_list></name> <name>labels_</name></expr>;

  <comment type="line">// Font lists for the suggestions</comment>
  <expr><name>gfx</name><operator>::</operator><name>FontList</name> <name>smaller_font_list_</name></expr>;
  <expr><name>gfx</name><operator>::</operator><name>FontList</name> <name>bold_font_list_</name></expr>;

  <comment type="line">// For sending the accepted suggestion to the render frame that</comment>
  <comment type="line">// asked to open the popup</comment>
  <expr><name>content</name><operator>::</operator><name>RenderFrameHost</name><operator>*</operator> <name>frame_host_</name> <operator>=</operator> <name>nullptr</name></expr>;

  <comment type="line">// The popup view. The lifetime is managed by the owning Widget</comment>
  <expr><name>AutofillPopupView</name><operator>*</operator> <name>view_</name> <operator>=</operator> <name>nullptr</name></expr>;

  <comment type="line">// The parent view that the popup view shows on. Weak ref.</comment>
  <expr><name>views</name><operator>::</operator><name>View</name><operator>*</operator> <name>parent_</name> <operator>=</operator> <name>nullptr</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AutofillPopup</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_AUTOFILL_POPUP_H_</comment>
</unit>
