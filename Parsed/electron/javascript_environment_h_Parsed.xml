<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/javascript_environment.h"><comment type="line">// Copyright (c) 2013 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_JAVASCRIPT_ENVIRONMENT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_JAVASCRIPT_ENVIRONMENT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/public/isolate_holder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uv.h"</cpp:file></cpp:include>  <comment type="line">// NOLINT(build/include)</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>node</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Environment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MultiIsolatePlatform</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace node</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MicrotasksRunner</name></decl>;</decl_stmt>
<comment type="line">// Manage the V8 isolate and context automatically.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>JavascriptEnvironment</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>JavascriptEnvironment</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name><modifier>*</modifier></type> <name>event_loop</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><operator>~</operator><call><name>JavascriptEnvironment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>OnMessageLoopCreated</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>OnMessageLoopDestroying</name><parameter_list>()</parameter_list>;</function_decl>

  <expr_stmt><expr><name>node</name><operator>::</operator><name>MultiIsolatePlatform</name><operator>*</operator> <macro><name>platform</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>platform_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <macro><name>isolate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>isolate_</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <macro><name>context</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>New</name><argument_list>(<argument><expr><name>isolate_</name></expr></argument>, <argument><expr><name>context_</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <call><name>Initialize</name><argument_list>(<argument><expr><name>uv_loop_t</name><operator>*</operator> <name>event_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Leaked on exit.</comment>
  <expr_stmt><expr><name>node</name><operator>::</operator><name>MultiIsolatePlatform</name><operator>*</operator> <name>platform_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gin</name><operator>::</operator><name>IsolateHolder</name> <name>isolate_holder_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>::</operator><name>Scope</name> <name>isolate_scope_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Locker</name> <name>locker_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>HandleScope</name> <name>handle_scope_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Context</name></expr></argument>&gt;</argument_list></name> <name>context_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name>Context</name><operator>::</operator><name>Scope</name> <name>context_scope_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MicrotasksRunner</name></expr></argument>&gt;</argument_list></name> <name>microtasks_runner_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>JavascriptEnvironment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Manage the Node Environment automatically.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>NodeEnvironment</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>NodeEnvironment</name><argument_list>(<argument><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <name>env</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>NodeEnvironment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <expr_stmt><expr><name>node</name><operator>::</operator><name>Environment</name><operator>*</operator> <name>env_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>NodeEnvironment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_JAVASCRIPT_ENVIRONMENT_H_</comment>
</unit>
