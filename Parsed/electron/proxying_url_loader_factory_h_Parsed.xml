<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/proxying_url_loader_factory.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_PROXYING_URL_LOADER_FACTORY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_PROXYING_URL_LOADER_FACTORY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/content_browser_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extensions/browser/api/web_request/web_request_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/binding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/pending_receiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/pending_remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/receiver_set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/resource_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/network_context.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_loader.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_response_head.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/net/atom_url_loader_factory.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Defines the interface for WebRequest API, implemented by api::WebRequest.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WebRequestAPI</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>WebRequestAPI</name><argument_list>()</argument_list></macro> <block>{}</block>

  <name>using</name> <name>BeforeSendHeadersCallback</name> <operator>=</operator>
      <name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>removed_headers</name>,
                              <specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>set_headers</name>,
                              <name>int</name> <name>error_code</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>HasListener</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>OnBeforeRequest</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                              <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name> <name>callback</name></expr></argument>,
                              <argument><expr><name>GURL</name><operator>*</operator> <name>new_url</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>OnBeforeSendHeaders</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                                  <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                                  <argument><expr><name>BeforeSendHeadersCallback</name> <name>callback</name></expr></argument>,
                                  <argument><expr><name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>*</operator> <name>headers</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>OnHeadersReceived</name><argument_list>(
      <argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
      <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name> <name>callback</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpResponseHeaders</name><operator>*</operator> <name>original_response_headers</name></expr></argument>,
      <argument><expr><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>HttpResponseHeaders</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>override_response_headers</name></expr></argument>,
      <argument><expr><name>GURL</name><operator>*</operator> <name>allowed_unsafe_redirect_url</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnSendHeaders</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>&amp;</operator> <name>headers</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnBeforeRedirect</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                                <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                                <argument><expr><specifier>const</specifier> <name>GURL</name><operator>&amp;</operator> <name>new_location</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnResponseStarted</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                                 <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnErrorOccurred</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                               <argument><expr><name>int</name> <name>net_error</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnCompleted</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
                           <argument><expr><name>int</name> <name>net_error</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>OnRequestWillBeDestroyed</name><argument_list>(<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name><operator>*</operator> <name>info</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// This class is responsible for following tasks when NetworkService is enabled:</comment>
<comment type="line">// 1. handling intercepted protocols;</comment>
<comment type="line">// 2. implementing webRequest module;</comment>
<comment type="line">//</comment>
<comment type="line">// For the task #2, the code is referenced from the</comment>
<comment type="line">// extensions::WebRequestProxyingURLLoaderFactory class.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>ProxyingURLLoaderFactory</name>
    <range>: <expr><name>public</name> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></range></decl>,
      <decl><type ref="prev"/><name>public</name> <name>network</name>::<name>mojom</name>::<name>TrustedURLLoaderHeaderClient</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>class</name></type> <name>InProgressRequest</name> <range>: <expr><name>public</name> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoader</name></expr></range></decl>,
                            <decl><type ref="prev"/><name>public</name> <name>network</name>::<name>mojom</name>::<name>URLLoaderClient</name></decl>,
                            <decl><type ref="prev"/><name>public</name> <name>network</name>::<name>mojom</name>::<name>TrustedHeaderClient</name> <block>{<block_content>
   <label><name>public</name>:</label>
    <macro><name>InProgressRequest</name><argument_list>(
        <argument>ProxyingURLLoaderFactory* factory</argument>,
        <argument>int64_t web_request_id</argument>,
        <argument>int32_t routing_id</argument>,
        <argument>int32_t network_service_request_id</argument>,
        <argument>uint32_t options</argument>,
        <argument>const network::ResourceRequest&amp; request</argument>,
        <argument>const net::MutableNetworkTrafficAnnotationTag&amp; traffic_annotation</argument>,
        <argument>network::mojom::URLLoaderRequest loader_request</argument>,
        <argument>network::mojom::URLLoaderClientPtr client</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><operator>~</operator><macro><name>InProgressRequest</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

    <function_decl><type><name>void</name></type> <name>Restart</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// network::mojom::URLLoader:</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>FollowRedirect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>removed_headers</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>&amp;</operator> <name>modified_headers</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>GURL</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>new_url</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>SetPriority</name><argument_list>(<argument><expr><name>net</name><operator>::</operator><name>RequestPriority</name> <name>priority</name></expr></argument>,
                     <argument><expr><name>int32_t</name> <name>intra_priority_value</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>void</name> <macro><name>PauseReadingBodyFromNet</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>void</name> <macro><name>ResumeReadingBodyFromNet</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

    <comment type="line">// network::mojom::URLLoaderClient:</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>OnReceiveResponse</name><argument_list>(<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLResponseHeadPtr</name> <name>head</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnReceiveRedirect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>RedirectInfo</name><operator>&amp;</operator> <name>redirect_info</name></expr></argument>,
                           <argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLResponseHeadPtr</name> <name>head</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnUploadProgress</name><argument_list>(<argument><expr><name>int64_t</name> <name>current_position</name></expr></argument>,
                          <argument><expr><name>int64_t</name> <name>total_size</name></expr></argument>,
                          <argument><expr><name>OnUploadProgressCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnReceiveCachedMetadata</name><argument_list>(<argument><expr><name>mojo_base</name><operator>::</operator><name>BigBuffer</name> <name>data</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnTransferSizeUpdated</name><argument_list>(<argument><expr><name>int32_t</name> <name>transfer_size_diff</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnStartLoadingResponseBody</name><argument_list>(
        <argument><expr><name>mojo</name><operator>::</operator><name>ScopedDataPipeConsumerHandle</name> <name>body</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnComplete</name><argument_list>(<argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>URLLoaderCompletionStatus</name><operator>&amp;</operator> <name>status</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name></type> <name>OnLoaderCreated</name><argument_list>(
        <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingReceiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedHeaderClient</name></expr></argument>&gt;</argument_list></name> <name>receiver</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// network::mojom::TrustedHeaderClient:</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>OnBeforeSendHeaders</name><argument_list>(<argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>HttpRequestHeaders</name><operator>&amp;</operator> <name>headers</name></expr></argument>,
                             <argument><expr><name>OnBeforeSendHeadersCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnHeadersReceived</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>headers</name></expr></argument>,
                           <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>IPEndPoint</name><operator>&amp;</operator> <name>endpoint</name></expr></argument>,
                           <argument><expr><name>OnHeadersReceivedCallback</name> <name>callback</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

   <label><name>private</name>:</label>
    <comment type="line">// These two methods combined form the implementation of Restart().</comment>
    <function_decl><type><name>void</name></type> <name>UpdateRequestInfo</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>RestartInternal</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>ContinueToBeforeSendHeaders</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>void</name></type> <name>ContinueToSendHeaders</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>removed_headers</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>set_headers</name></expr></argument>,
                               <argument><expr><name>int</name> <name>error_code</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> <name>ContinueToStartRequest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>ContinueToHandleOverrideHeaders</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>ContinueToResponseStarted</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>void</name></type> <name>ContinueToBeforeRedirect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>RedirectInfo</name><operator>&amp;</operator> <name>redirect_info</name></expr></argument>,
                                  <argument><expr><name>int</name> <name>error_code</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> <name>HandleBeforeRequestRedirect</name><parameter_list>()</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>void</name></type> <name>HandleResponseOrRedirectHeaders</name><argument_list>(
        <argument><expr><name>net</name><operator>::</operator><name>CompletionOnceCallback</name> <name>continuation</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnRequestError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>URLLoaderCompletionStatus</name><operator>&amp;</operator> <name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ProxyingURLLoaderFactory</name><modifier>*</modifier></type> <name>factory_</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>network</name><operator>::</operator><name>ResourceRequest</name> <name>request_</name></expr>;</expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>url</name><operator>::</operator><name>Origin</name></expr></argument>&gt;</argument_list></name> <name>original_initiator_</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>request_id_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>routing_id_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>network_service_request_id_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>options_</name></decl>;</decl_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>MutableNetworkTrafficAnnotationTag</name> <name>traffic_annotation_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Binding</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoader</name></expr></argument>&gt;</argument_list></name> <name>proxied_loader_binding_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderClientPtr</name> <name>target_client_</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>extensions</name><operator>::</operator><name>WebRequestInfo</name></expr></argument>&gt;</argument_list></name> <name>info_</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLResponseHeadPtr</name> <name>current_response_</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>net</name><operator>::</operator><name>HttpResponseHeaders</name></expr></argument>&gt;</argument_list></name></type> <name>override_headers_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GURL</name></type> <name>redirect_url_</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Binding</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderClient</name></expr></argument>&gt;</argument_list></name> <name>proxied_client_binding_</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderPtr</name> <name>target_loader_</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>request_completed_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// If |has_any_extra_headers_listeners_| is set to true, the request will be</comment>
    <comment type="line">// sent with the network::mojom::kURLLoadOptionUseHeaderClient option, and</comment>
    <comment type="line">// we expect events to come through the</comment>
    <comment type="line">// network::mojom::TrustedURLLoaderHeaderClient binding on the factory. This</comment>
    <comment type="line">// is only set to true if there is a listener that needs to view or modify</comment>
    <comment type="line">// headers set in the network process.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>has_any_extra_headers_listeners_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>current_request_uses_header_client_</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OnBeforeSendHeadersCallback</name></type> <name>on_before_send_headers_callback_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OnHeadersReceivedCallback</name></type> <name>on_headers_received_callback_</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Receiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedHeaderClient</name></expr></argument>&gt;</argument_list></name> <name>header_client_receiver_</name><block>{
        <expr><name>this</name></expr>}</block></expr>;</expr_stmt>

    <comment type="line">// If |has_any_extra_headers_listeners_| is set to false and a redirect is</comment>
    <comment type="line">// in progress, this stores the parameters to FollowRedirect that came from</comment>
    <comment type="line">// the client. That way we can combine it with any other changes that</comment>
    <comment type="line">// extensions made to headers in their callbacks.</comment>
    <struct>struct <name>FollowRedirectParams</name> <block>{
      <expr_stmt><expr><call><name>FollowRedirectParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>~</operator><call><name>FollowRedirectParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>removed_headers</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>net</name><operator>::</operator><name>HttpRequestHeaders</name> <name>modified_headers</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>base</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>GURL</name></expr></argument>&gt;</argument_list></name> <name>new_url</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>FollowRedirectParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>;</struct>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FollowRedirectParams</name></expr></argument>&gt;</argument_list></name> <name>pending_follow_redirect_params_</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>InProgressRequest</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>InProgressRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

  <macro><name>ProxyingURLLoaderFactory</name><argument_list>(
      <argument>WebRequestAPI* web_request_api</argument>,
      <argument>const HandlersMap&amp; intercepted_handlers</argument>,
      <argument>content::BrowserContext* browser_context</argument>,
      <argument>int render_process_id</argument>,
      <argument>network::mojom::URLLoaderFactoryRequest loader_request</argument>,
      <argument>mojo::PendingRemote&lt;network::mojom::URLLoaderFactory&gt;
          target_factory_remote</argument>,
      <argument>mojo::PendingReceiver&lt;network::mojom::TrustedURLLoaderHeaderClient&gt;
          header_client_receiver</argument>,
      <argument>content::ContentBrowserClient::URLLoaderFactoryType loader_factory_type</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>ProxyingURLLoaderFactory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// network::mojom::URLLoaderFactory:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>CreateLoaderAndStart</name><argument_list>(
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingReceiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoader</name></expr></argument>&gt;</argument_list></name> <name>loader</name></expr></argument>,
      <argument><expr><name>int32_t</name> <name>routing_id</name></expr></argument>,
      <argument><expr><name>int32_t</name> <name>request_id</name></expr></argument>,
      <argument><expr><name>uint32_t</name> <name>options</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
      <argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderClientPtr</name> <name>client</name></expr></argument>,
      <argument><expr><specifier>const</specifier> <name>net</name><operator>::</operator><name>MutableNetworkTrafficAnnotationTag</name><operator>&amp;</operator> <name>traffic_annotation</name></expr></argument>)</argument_list>
      <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>Clone</name><argument_list>(<argument><expr><name>mojo</name><operator>::</operator><name><name>PendingReceiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name>
                 <name>loader_receiver</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// network::mojom::TrustedURLLoaderHeaderClient:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>OnLoaderCreated</name><argument_list>(
      <argument><expr><name>int32_t</name> <name>request_id</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingReceiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedHeaderClient</name></expr></argument>&gt;</argument_list></name> <name>receiver</name></expr></argument>)</argument_list>
      <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnLoaderForCorsPreflightCreated</name><argument_list>(
      <argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>,
      <argument><expr><name>mojo</name><operator>::</operator><name><name>PendingReceiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedHeaderClient</name></expr></argument>&gt;</argument_list></name> <name>receiver</name></expr></argument>)</argument_list>
      <name>override</name> <block>{<block_content/>}</block></decl></decl_stmt>

  <function><type><name>WebRequestAPI</name><modifier>*</modifier></type> <name>web_request_api</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>web_request_api_</name></expr>;</return> </block_content>}</block></function>

  <expr_stmt><expr><name>bool</name> <macro><name>IsForServiceWorkerScript</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>OnTargetFactoryError</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>OnProxyBindingError</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveRequest</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>network_service_request_id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>request_id</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>MaybeDeleteThis</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>bool</name></type> <name>ShouldIgnoreConnectionsLimit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Passed from api::WebRequest.</comment>
  <decl_stmt><decl><type><name>WebRequestAPI</name><modifier>*</modifier></type> <name>web_request_api_</name></decl>;</decl_stmt>

  <comment type="line">// This is passed from api::Protocol.</comment>
  <comment type="line">//</comment>
  <comment type="line">// The Protocol instance lives through the lifetime of BrowserContenxt,</comment>
  <comment type="line">// which is guarenteed to cover the lifetime of URLLoaderFactory, so the</comment>
  <comment type="line">// reference is guarenteed to be valid.</comment>
  <comment type="line">//</comment>
  <comment type="line">// In this way we can avoid using code from api namespace in this file.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>HandlersMap</name><modifier>&amp;</modifier></type> <name>intercepted_handlers_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>content</name><operator>::</operator><name>BrowserContext</name><operator>*</operator> <specifier>const</specifier> <name>browser_context_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>render_process_id_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>ReceiverSet</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name> <name>proxy_receivers_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Remote</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name> <name>target_factory_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mojo</name><operator>::</operator><name><name>Receiver</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>TrustedURLLoaderHeaderClient</name></expr></argument>&gt;</argument_list></name>
      <name>url_loader_header_client_receiver_</name><block>{<expr><name>this</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>ContentBrowserClient</name><operator>::</operator><name>URLLoaderFactoryType</name>
      <name>loader_factory_type_</name></expr>;</expr_stmt>

  <comment type="line">// Mapping from our own internally generated request ID to an</comment>
  <comment type="line">// InProgressRequest instance.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>InProgressRequest</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>requests_</name></expr>;</expr_stmt>

  <comment type="line">// A mapping from the network stack's notion of request ID to our own</comment>
  <comment type="line">// internally generated request ID for the same request.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>network_request_id_to_web_request_id_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ignore_connections_limit_domains_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ProxyingURLLoaderFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_PROXYING_URL_LOADER_FACTORY_H_</comment>
</unit>
