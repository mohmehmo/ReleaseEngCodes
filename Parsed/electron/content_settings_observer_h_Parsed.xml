<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/renderer/content_settings_observer.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_RENDERER_CONTENT_SETTINGS_OBSERVER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RENDERER_CONTENT_SETTINGS_OBSERVER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/renderer/render_frame_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"third_party/blink/public/platform/web_content_settings_client.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ContentSettingsObserver</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>RenderFrameObserver</name></expr></range></decl>,
                                <decl><type ref="prev"/><name>public</name> <name>blink</name>::<name>WebContentSettingsClient</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>ContentSettingsObserver</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderFrame</name><operator>*</operator> <name>render_frame</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>ContentSettingsObserver</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// blink::WebContentSettingsClient implementation.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>AllowDatabase</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>AllowStorage</name><argument_list>(<argument><expr><name>bool</name> <name>local</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>AllowIndexedDB</name><argument_list>(<argument><expr><specifier>const</specifier> <name>blink</name><operator>::</operator><name>WebSecurityOrigin</name><operator>&amp;</operator> <name>security_origin</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

 <label><name>private</name>:</label>
  <comment type="line">// content::RenderFrameObserver implementation.</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnDestruct</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ContentSettingsObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_RENDERER_CONTENT_SETTINGS_OBSERVER_H_</comment>
</unit>
