<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/api/atom_api_top_level_window.h"><comment type="line">// Copyright (c) 2018 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_API_ATOM_API_TOP_LEVEL_WINDOW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_API_ATOM_API_TOP_LEVEL_WINDOW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/task/post_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_task_traits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/browser_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gin/handle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window_observer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/api/atom_api_native_image.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/trackable_object.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>api</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>View</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TopLevelWindow</name> <range>: <expr><name>public</name> <name>gin_helper</name><operator>::</operator><name><name>TrackableObject</name><argument_list type="generic">&lt;<argument><expr><name>TopLevelWindow</name></expr></argument>&gt;</argument_list></name></expr></range></decl>,
                       <decl><type ref="prev"/><name>public</name> <name>NativeWindowObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><specifier>static</specifier> <name>gin_helper</name><operator>::</operator><name>WrappableBase</name><operator>*</operator> <call><name>New</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildPrototype</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>,
                             <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>FunctionTemplate</name></expr></argument>&gt;</argument_list></name> <name>prototype</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtr</name><argument_list type="generic">&lt;<argument><expr><name>TopLevelWindow</name></expr></argument>&gt;</argument_list></name> <macro><name>GetWeakPtr</name><argument_list>()</argument_list></macro> <block>{
    <return>return <expr><call><name><name>weak_factory_</name><operator>.</operator><name>GetWeakPtr</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

  <expr_stmt><expr><name>NativeWindow</name><operator>*</operator> <macro><name>window</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>window_</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

 <label><name>protected</name>:</label>
  <comment type="line">// Common constructor.</comment>
  <expr_stmt><expr><call><name>TopLevelWindow</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Creating independent TopLevelWindow instance.</comment>
  <expr_stmt><expr><call><name>TopLevelWindow</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>TopLevelWindow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// TrackableObject:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>InitWith</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name> <name>wrapper</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// NativeWindowObserver:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>WillCloseWindow</name><argument_list>(<argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowClosed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowEndSession</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowBlur</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowFocus</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowShow</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowHide</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowMaximize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowUnmaximize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowMinimize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowRestore</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWindowWillResize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>new_bounds</name></expr></argument>,
                          <argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowResize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWindowWillMove</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>new_bounds</name></expr></argument>,
                        <argument><expr><name>bool</name><operator>*</operator> <name>prevent_default</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowMove</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowMoved</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowScrollTouchBegin</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowScrollTouchEnd</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWindowSwipe</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>direction</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWindowRotateGesture</name><argument_list>(<argument><expr><name>float</name> <name>rotation</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowSheetBegin</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowSheetEnd</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowEnterFullScreen</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowLeaveFullScreen</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowEnterHtmlFullScreen</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowLeaveHtmlFullScreen</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowAlwaysOnTopChanged</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnExecuteAppCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>command_name</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>OnTouchBarItemResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>item_id</name></expr></argument>,
                            <argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>DictionaryValue</name><operator>&amp;</operator> <name>details</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnNewWindowForTab</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>OnWindowMessage</name><argument_list>(<argument><expr><name>UINT</name> <name>message</name></expr></argument>, <argument><expr><name>WPARAM</name> <name>w_param</name></expr></argument>, <argument><expr><name>LPARAM</name> <name>l_param</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Public APIs of NativeWindow.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContentView</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>View</name></expr></argument>&gt;</argument_list></name> <name>view</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>Close</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Focus</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Blur</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsFocused</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Show</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ShowInactive</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Hide</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsVisible</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsEnabled</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Maximize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Unmaximize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsMaximized</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Minimize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Restore</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsMinimized</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetFullScreen</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fullscreen</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsFullscreen</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSize</name><argument_list>(<argument><expr><name>int</name> <name>width</name></expr></argument>, <argument><expr><name>int</name> <name>height</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>GetSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContentSize</name><argument_list>(<argument><expr><name>int</name> <name>width</name></expr></argument>, <argument><expr><name>int</name> <name>height</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>GetContentSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContentBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>bounds</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetContentBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>bool</name></type> <name>IsNormal</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <call><name>GetNormalBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetMinimumSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>GetMinimumSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetMaximumSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>GetMaximumSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetSheetOffset</name><argument_list>(<argument><expr><name>double</name> <name>offsetY</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SetResizable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>resizable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsResizable</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetMovable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>movable</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>MoveAbove</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>sourceId</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>MoveTop</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsMovable</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetMinimizable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>minimizable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsMinimizable</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetMaximizable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>maximizable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsMaximizable</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetFullScreenable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fullscreenable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsFullScreenable</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetClosable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>closable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsClosable</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAlwaysOnTop</name><argument_list>(<argument><expr><name>bool</name> <name>top</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>bool</name></type> <name>IsAlwaysOnTop</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Center</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetPosition</name><argument_list>(<argument><expr><name>int</name> <name>x</name></expr></argument>, <argument><expr><name>int</name> <name>y</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>GetPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAccessibleTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetAccessibleTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>FlashFrame</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flash</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetSkipTaskbar</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>skip</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetExcludedFromShownWindowsMenu</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>excluded</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsExcludedFromShownWindowsMenu</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetSimpleFullScreen</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>simple_fullscreen</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsSimpleFullScreen</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetKiosk</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>kiosk</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsKiosk</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetBackgroundColor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>color_name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SetHasShadow</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>has_shadow</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>HasShadow</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetOpacity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>opacity</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>double</name></type> <name>GetOpacity</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetShape</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>gfx</name><operator>::</operator><name>Rect</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>rects</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetRepresentedFilename</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>filename</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetRepresentedFilename</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetDocumentEdited</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>edited</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsDocumentEdited</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetIgnoreMouseEvents</name><argument_list>(<argument><expr><name>bool</name> <name>ignore</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SetContentProtection</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetFocusable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>focusable</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetMenu</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>menu</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>RemoveMenu</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetParentWindow</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetBrowserView</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>AddBrowserView</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>RemoveBrowserView</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>GetBrowserViews</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ResetBrowserViews</name><parameter_list>()</parameter_list>;</function_decl>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetMediaSourceId</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <call><name>GetNativeWindowHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetProgressBar</name><argument_list>(<argument><expr><name>double</name> <name>progress</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetOverlayIcon</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator> <name>overlay</name></expr></argument>,
                      <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>description</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetVisibleOnAllWorkspaces</name><argument_list>(<argument><expr><name>bool</name> <name>visible</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>bool</name></type> <name>IsVisibleOnAllWorkspaces</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetAutoHideCursor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_hide</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SetVibrancy</name><argument_list>(<argument><expr><name>v8</name><operator>::</operator><name>Isolate</name><operator>*</operator> <name>isolate</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetTouchBar</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>gin_helper</name><operator>::</operator><name>PersistentDictionary</name></expr></argument>&gt;</argument_list></name> <name>items</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RefreshTouchBarItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>item_id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetEscapeTouchBarItem</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>PersistentDictionary</name> <name>item</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SelectPreviousTab</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SelectNextTab</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>MergeAllWindows</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>MoveTabToNewWindow</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ToggleTabBar</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>AddTabbedWindow</name><argument_list>(<argument><expr><name>NativeWindow</name><operator>*</operator> <name>window</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetWindowButtonVisibility</name><argument_list>(<argument><expr><name>bool</name> <name>visible</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SetAutoHideMenuBar</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>auto_hide</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsMenuBarAutoHide</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetMenuBarVisibility</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsMenuBarVisible</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAspectRatio</name><argument_list>(<argument><expr><name>double</name> <name>aspect_ratio</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>PreviewFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>path</name></expr></argument>, <argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>CloseFilePreview</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SetGTKDarkThemeEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_dark_theme</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Public getters of NativeWindow.</comment>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>GetContentView</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>GetParentWindow</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Object</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>GetChildWindows</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <macro><name>GetBrowserView</name><argument_list>(<argument>gin_helper::Arguments* args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>IsModal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Extra APIs added in JS.</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetThumbarButtons</name><argument_list>(<argument><expr><name>gin_helper</name><operator>::</operator><name>Arguments</name><operator>*</operator> <name>args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TOOLKIT_VIEWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name></type> <name>SetIcon</name><argument_list>(<argument><expr><name>gin</name><operator>::</operator><name><name>Handle</name><argument_list type="generic">&lt;<argument><expr><name>NativeImage</name></expr></argument>&gt;</argument_list></name> <name>icon</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <typedef>typedef <expr_stmt><expr><name>base</name><operator>::</operator><name><name>RepeatingCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name>,
                                       <name>v8</name><operator>::</operator><name><name>Local</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name><operator>)</operator></expr></argument>&gt;</argument_list></name>
      <name>MessageCallback</name></expr>;</expr_stmt></typedef>
  <function_decl><type><name>bool</name></type> <name>HookWindowMessage</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MessageCallback</name><modifier>&amp;</modifier></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>bool</name></type> <name>IsWindowMessageHooked</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>UnhookWindowMessage</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>UnhookAllWindowMessages</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetThumbnailClip</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Rect</name><operator>&amp;</operator> <name>region</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>SetThumbnailToolTip</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tooltip</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetAppDetails</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gin_helper</name><operator>::</operator><name>Dictionary</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>int32_t</name> <macro><name>GetID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <comment type="line">// Helpers.</comment>

  <comment type="line">// Remove BrowserView.</comment>
  <function_decl><type><name>void</name></type> <name>ResetBrowserView</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Remove this window from parent window's |child_windows_|.</comment>
  <function_decl><type><name>void</name></type> <name>RemoveFromParentChildWindows</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
  <name>void</name></type> <name>EmitEventSoon</name><argument_list>(<argument><expr><name>base</name><operator>::</operator><name>StringPiece</name> <name>eventName</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name>base</name><operator>::</operator><macro><name>PostTask</name><argument_list>(
        <argument>FROM_HERE</argument>, <argument>{content::BrowserThread::UI}</argument>,
        <argument>base::BindOnce(base::IgnoreResult(&amp;TopLevelWindow::Emit&lt;Args...&gt;),
                       weak_factory_.GetWeakPtr(), eventName)</argument>)</argument_list></macro></expr>;</expr_stmt>
  </block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>MessageCallback</name></expr></argument>&gt;</argument_list></name> <name>MessageCallbackMap</name></expr>;</expr_stmt></typedef>
  <decl_stmt><decl><type><name>MessageCallbackMap</name></type> <name>messages_callback_map_</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>content_view_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>browser_views_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>menu_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v8</name><operator>::</operator><name><name>Global</name><argument_list type="generic">&lt;<argument><expr><name>v8</name><operator>::</operator><name>Value</name></expr></argument>&gt;</argument_list></name> <name>parent_window_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>KeyWeakMap</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>child_windows_</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>NativeWindow</name></expr></argument>&gt;</argument_list></name> <name>window_</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>TopLevelWindow</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace api</comment>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_API_ATOM_API_TOP_LEVEL_WINDOW_H_</comment>
</unit>
