<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/osr/osr_web_contents_view.h"><comment type="line">// Copyright (c) 2016 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_OSR_OSR_WEB_CONTENTS_VIEW_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_OSR_OSR_WEB_CONTENTS_VIEW_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/native_window_observer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/renderer_host/render_view_host_delegate_view.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/browser/web_contents/web_contents_view.h"</cpp:file></cpp:include>  <comment type="line">// nogncheck</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/web_contents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/osr/osr_render_widget_host_view.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__OBJC__</name></cpp:ifdef>
@<decl_stmt><decl><type><name>class</name></type> <name>OffScreenView</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>class</name></type> <name>OffScreenView</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>OffScreenWebContentsView</name> <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>WebContentsView</name></expr></range></decl>,
                                 <decl><type ref="prev"/><name>public</name> <name>content</name>::<name>RenderViewHostDelegateView</name></decl>,
                                 <decl><type ref="prev"/><name>public</name> <name>NativeWindowObserver</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>OffScreenWebContentsView</name><argument_list>(<argument>bool transparent</argument>, <argument>const OnPaintCallback&amp; callback</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>OffScreenWebContentsView</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name></type> <name>SetWebContents</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>SetNativeWindow</name><parameter_list>(<parameter><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>window</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// NativeWindowObserver:</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowResize</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnWindowClosed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Size</name> <call><name>GetSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// content::WebContentsView:</comment>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>NativeView</name> <macro><name>GetNativeView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>NativeView</name> <macro><name>GetContentNativeView</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>NativeWindow</name> <macro><name>GetTopLevelNativeWindow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>GetContainerBounds</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>Rect</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SizeContents</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Size</name><operator>&amp;</operator> <name>size</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>Focus</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>SetInitialFocus</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>StoreFocus</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>RestoreFocus</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>FocusThroughTabTraversal</name><argument_list>(<argument><expr><name>bool</name> <name>reverse</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>DropData</name><operator>*</operator> <macro><name>GetDropData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>Rect</name> <macro><name>GetViewBounds</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>CreateView</name><argument_list>(<argument><expr><name>gfx</name><operator>::</operator><name>NativeView</name> <name>context</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHostViewBase</name><operator>*</operator> <macro><name>CreateViewForWidget</name><argument_list>(
      <argument>content::RenderWidgetHost* render_widget_host</argument>,
      <argument>bool is_guest_view_hack</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>RenderWidgetHostViewBase</name><operator>*</operator> <macro><name>CreateViewForChildWidget</name><argument_list>(
      <argument>content::RenderWidgetHost* render_widget_host</argument>)</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetPageTitle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <name>title</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewCreated</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>RenderViewReady</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>RenderViewHostChanged</name><argument_list>(<argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>old_host</name></expr></argument>,
                             <argument><expr><name>content</name><operator>::</operator><name>RenderViewHost</name><operator>*</operator> <name>new_host</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetOverscrollControllerEnabled</name><argument_list>(<argument><expr><name>bool</name> <name>enabled</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>bool</name> <macro><name>CloseTabAfterEventTrackingIfNeeded</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// content::RenderViewHostDelegateView</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>StartDragging</name><argument_list>(<argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>DropData</name><operator>&amp;</operator> <name>drop_data</name></expr></argument>,
                     <argument><expr><name>blink</name><operator>::</operator><name>WebDragOperationsMask</name> <name>allowed_ops</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>&amp;</operator> <name>image</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Vector2d</name><operator>&amp;</operator> <name>image_offset</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>content</name><operator>::</operator><name>DragEventSourceInfo</name><operator>&amp;</operator> <name>event_info</name></expr></argument>,
                     <argument><expr><name>content</name><operator>::</operator><name>RenderWidgetHostImpl</name><operator>*</operator> <name>source_rwh</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>UpdateDragCursor</name><argument_list>(<argument><expr><name>blink</name><operator>::</operator><name>WebDragOperation</name> <name>operation</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>SetPainting</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>painting</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>bool</name> <macro><name>IsPainting</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>SetFrameRate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frame_rate</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>int</name> <macro><name>GetFrameRate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

 <label><name>private</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function_decl><type><name>void</name></type> <name>PlatformCreate</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>PlatformDestroy</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>OffScreenRenderWidgetHostView</name><operator>*</operator> <macro><name>GetView</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NativeWindow</name><modifier>*</modifier></type> <name>native_window_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>transparent_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>painting_</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>frame_rate_</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OnPaintCallback</name></type> <name>callback_</name></decl>;</decl_stmt>

  <comment type="line">// Weak refs.</comment>
  <expr_stmt><expr><name>content</name><operator>::</operator><name>WebContents</name><operator>*</operator> <name>web_contents_</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>OffScreenView</name><modifier>*</modifier></type> <name>offScreenView_</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_OSR_OSR_WEB_CONTENTS_VIEW_H_</comment>
</unit>
