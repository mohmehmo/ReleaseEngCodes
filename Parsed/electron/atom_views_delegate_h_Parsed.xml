<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/views/atom_views_delegate.h"><comment type="line">// Copyright (c) 2014 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_VIEWS_ATOM_VIEWS_DELEGATE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_VIEWS_ATOM_VIEWS_DELEGATE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/compiler_specific.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/views_delegate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ViewsDelegate</name> <range>: <expr><name>public</name> <name>views</name><operator>::</operator><name>ViewsDelegate</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>ViewsDelegate</name><argument_list>()</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>ViewsDelegate</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// views::ViewsDelegate:</comment>
  <name>void</name> <macro><name>SaveWindowPlacement</name><argument_list>(<argument>const views::Widget* window</argument>,
                           <argument>const std::string&amp; window_name</argument>,
                           <argument>const gfx::Rect&amp; bounds</argument>,
                           <argument>ui::WindowShowState show_state</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>GetSavedWindowPlacement</name><argument_list>(<argument>const views::Widget* widget</argument>,
                               <argument>const std::string&amp; window_name</argument>,
                               <argument>gfx::Rect* bounds</argument>,
                               <argument>ui::WindowShowState* show_state</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>NotifyMenuItemFocused</name><argument_list>(<argument>const base::string16&amp; menu_name</argument>,
                             <argument>const base::string16&amp; menu_item_name</argument>,
                             <argument>int item_index</argument>,
                             <argument>int item_count</argument>,
                             <argument>bool has_submenu</argument>)</argument_list></macro> <name>override</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr><name>HICON</name> <macro><name>GetDefaultWindowIcon</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>HICON</name> <macro><name>GetSmallWindowIcon</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>IsWindowInMetro</name><argument_list>(<argument>gfx::NativeWindow window</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
  <expr><name>int</name> <macro><name>GetAppbarAutohideEdges</name><argument_list>(<argument>HMONITOR monitor</argument>,
                             <argument>base::OnceClosure callback</argument>)</argument_list></macro> <name>override</name></expr>;
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_LINUX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OS_CHROMEOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr><name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>*</operator> <macro><name>GetDefaultWindowIcon</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>views</name><operator>::</operator><name>NonClientFrameView</name><operator>*</operator> <macro><name>CreateDefaultNonClientFrameView</name><argument_list>(
      <argument>views::Widget* widget</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>AddRef</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ReleaseRef</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>OnBeforeWidgetInit</name><argument_list>(
      <argument>views::Widget::InitParams* params</argument>,
      <argument>views::internal::NativeWidgetDelegate* delegate</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>bool</name> <macro><name>WindowManagerProvidesTitleBar</name><argument_list>(<argument>bool maximized</argument>)</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <name>using</name> <name>AppbarAutohideEdgeMap</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>HMONITOR</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr>;

  <comment type="line">// Callback on main thread with the edges. |returned_edges| is the value that</comment>
  <comment type="line">// was returned from the call to GetAutohideEdges() that initiated the lookup.</comment>
  <expr><name>void</name> <macro><name>OnGotAppbarAutohideEdges</name><argument_list>(<argument>base::OnceClosure callback</argument>,
                                <argument>HMONITOR monitor</argument>,
                                <argument>int returned_edges</argument>,
                                <argument>int edges</argument>)</argument_list></macro></expr>;

  <expr><name>AppbarAutohideEdgeMap</name> <name>appbar_autohide_edge_map_</name></expr>;
  <comment type="line">// If true we're in the process of notifying a callback from</comment>
  <comment type="line">// GetAutohideEdges().start a new query.</comment>
  <expr><name>bool</name> <name>in_autohide_edges_callback_</name> <operator>=</operator> <name>false</name></expr>;

  <expr><name>base</name><operator>::</operator><name><name>WeakPtrFactory</name><argument_list type="generic">&lt;<argument><expr><name>ViewsDelegate</name></expr></argument>&gt;</argument_list></name> <name>weak_factory_</name><block>{<expr><name>this</name></expr>}</block></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>ViewsDelegate</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_VIEWS_ATOM_VIEWS_DELEGATE_H_</comment>
</unit>
