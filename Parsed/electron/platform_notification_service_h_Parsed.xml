<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/notifications/platform_notification_service.h"><comment type="line">// Copyright (c) 2015 The Chromium Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE-CHROMIUM file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NOTIFICATIONS_PLATFORM_NOTIFICATION_SERVICE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NOTIFICATIONS_PLATFORM_NOTIFICATION_SERVICE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content/public/browser/platform_notification_service.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AtomBrowserClient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PlatformNotificationService</name>
    <range>: <expr><name>public</name> <name>content</name><operator>::</operator><name>PlatformNotificationService</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>PlatformNotificationService</name><argument_list>(<argument><expr><name>AtomBrowserClient</name><operator>*</operator> <name>browser_client</name></expr></argument>)</argument_list></call></expr>;
  <expr><operator>~</operator><macro><name>PlatformNotificationService</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>protected</name><operator>:</operator>
  <comment type="line">// content::PlatformNotificationService:</comment>
  <name>void</name> <macro><name>DisplayNotification</name><argument_list>(
      <argument>content::RenderProcessHost* render_process_host</argument>,
      <argument>const std::string&amp; notification_id</argument>,
      <argument>const GURL&amp; origin</argument>,
      <argument>const blink::PlatformNotificationData&amp; notification_data</argument>,
      <argument>const blink::NotificationResources&amp; notification_resources</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>DisplayPersistentNotification</name><argument_list>(
      <argument>const std::string&amp; notification_id</argument>,
      <argument>const GURL&amp; service_worker_scope</argument>,
      <argument>const GURL&amp; origin</argument>,
      <argument>const blink::PlatformNotificationData&amp; notification_data</argument>,
      <argument>const blink::NotificationResources&amp; notification_resources</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ClosePersistentNotification</name><argument_list>(<argument>const std::string&amp; notification_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>CloseNotification</name><argument_list>(<argument>const std::string&amp; notification_id</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>GetDisplayedNotifications</name><argument_list>(
      <argument>DisplayedNotificationsCallback callback</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>int64_t</name> <macro><name>ReadNextPersistentNotificationId</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>RecordNotificationUkmEvent</name><argument_list>(
      <argument>const content::NotificationDatabaseData&amp; data</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>void</name> <macro><name>ScheduleTrigger</name><argument_list>(<argument>base::Time timestamp</argument>)</argument_list></macro> <name>override</name></expr>;
  <expr><name>base</name><operator>::</operator><name>Time</name> <macro><name>ReadNextTriggerTimestamp</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>AtomBrowserClient</name><operator>*</operator> <name>browser_client_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>PlatformNotificationService</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NOTIFICATIONS_PLATFORM_NOTIFICATION_SERVICE_H_</comment>
</unit>
