<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/net/atom_url_loader_factory.h"><comment type="line">// Copyright (c) 2019 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_NET_ATOM_URL_LOADER_FACTORY_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_NET_ATOM_URL_LOADER_FACTORY_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/pending_receiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mojo/public/cpp/bindings/receiver_set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/url_request/url_request_job_factory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/cpp/resource_response.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"services/network/public/mojom/url_loader_factory.mojom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/common/gin_helper/dictionary.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<comment type="line">// Old Protocol API can only serve one type of response for one scheme.</comment>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ProtocolType</name> <block>{<block_content>
  <expr_stmt><expr><name>kBuffer</name></expr><operator>,</operator>
  <expr><name>kString</name></expr><operator>,</operator>
  <expr><name>kFile</name></expr><operator>,</operator>
  <expr><name>kHttp</name></expr><operator>,</operator>
  <expr><name>kStream</name></expr><operator>,</operator>
  <expr><name>kFree</name></expr><operator>,</operator></expr_stmt>  <comment type="line">// special type for returning arbitrary type of response.</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>StartLoadingCallback</name> <init>= <expr><name>base</name><operator>::</operator><name><name>OnceCallback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>gin</name><operator>::</operator><name>Arguments</name><operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ProtocolHandler</name> <init>=
    <expr><name>base</name><operator>::</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>network</name><operator>::</operator><name>ResourceRequest</name><operator>&amp;</operator>, <name>StartLoadingCallback</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<comment type="line">// scheme =&gt; (type, handler).</comment>
<decl_stmt><decl><type><name>using</name></type> <name>HandlersMap</name> <init>=
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ProtocolType</name></expr></argument>, <argument><expr><name>ProtocolHandler</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<comment type="line">// Implementation of URLLoaderFactory.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomURLLoaderFactory</name> <range>: <expr><name>public</name> <name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <macro><name>AtomURLLoaderFactory</name><argument_list>(<argument>ProtocolType type</argument>, <argument>const ProtocolHandler&amp; handler</argument>)</argument_list></macro></expr>;
  <expr><operator>~</operator><macro><name>AtomURLLoaderFactory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

  <comment type="line">// network::mojom::URLLoaderFactory:</comment>
  <expr><name>void</name> <macro><name>CreateLoaderAndStart</name><argument_list>(
      <argument>mojo::PendingReceiver&lt;network::mojom::URLLoader&gt; loader</argument>,
      <argument>int32_t routing_id</argument>,
      <argument>int32_t request_id</argument>,
      <argument>uint32_t options</argument>,
      <argument>const network::ResourceRequest&amp; request</argument>,
      <argument>network::mojom::URLLoaderClientPtr client</argument>,
      <argument>const net::MutableNetworkTrafficAnnotationTag&amp; traffic_annotation</argument>)</argument_list></macro>
      <name>override</name></expr>;
  <expr><name>void</name> <macro><name>Clone</name><argument_list>(<argument>mojo::PendingReceiver&lt;network::mojom::URLLoaderFactory&gt; receiver</argument>)</argument_list></macro>
      <name>override</name></expr>;

  <expr><specifier>static</specifier> <name>void</name> <macro><name>StartLoading</name><argument_list>(
      <argument>mojo::PendingReceiver&lt;network::mojom::URLLoader&gt; loader</argument>,
      <argument>int32_t routing_id</argument>,
      <argument>int32_t request_id</argument>,
      <argument>uint32_t options</argument>,
      <argument>const network::ResourceRequest&amp; request</argument>,
      <argument>network::mojom::URLLoaderClientPtr client</argument>,
      <argument>const net::MutableNetworkTrafficAnnotationTag&amp; traffic_annotation</argument>,
      <argument>network::mojom::URLLoaderFactory* proxy_factory</argument>,
      <argument>ProtocolType type</argument>,
      <argument>gin::Arguments* args</argument>)</argument_list></macro></expr>;

 <expr><name>private</name><operator>:</operator>
  <specifier>static</specifier> <name>void</name> <macro><name>StartLoadingBuffer</name><argument_list>(<argument>network::mojom::URLLoaderClientPtr client</argument>,
                                 <argument>network::ResourceResponseHead head</argument>,
                                 <argument>const gin_helper::Dictionary&amp; dict</argument>)</argument_list></macro></expr>;
  <expr><specifier>static</specifier> <name>void</name> <macro><name>StartLoadingString</name><argument_list>(<argument>network::mojom::URLLoaderClientPtr client</argument>,
                                 <argument>network::ResourceResponseHead head</argument>,
                                 <argument>const gin_helper::Dictionary&amp; dict</argument>,
                                 <argument>v8::Isolate* isolate</argument>,
                                 <argument>v8::Local&lt;v8::Value&gt; response</argument>)</argument_list></macro></expr>;
  <expr><specifier>static</specifier> <name>void</name> <macro><name>StartLoadingFile</name><argument_list>(
      <argument>mojo::PendingReceiver&lt;network::mojom::URLLoader&gt; loader</argument>,
      <argument>network::ResourceRequest request</argument>,
      <argument>network::mojom::URLLoaderClientPtr client</argument>,
      <argument>network::ResourceResponseHead head</argument>,
      <argument>const gin_helper::Dictionary&amp; dict</argument>,
      <argument>v8::Isolate* isolate</argument>,
      <argument>v8::Local&lt;v8::Value&gt; response</argument>)</argument_list></macro></expr>;
  <expr><specifier>static</specifier> <name>void</name> <macro><name>StartLoadingHttp</name><argument_list>(
      <argument>mojo::PendingReceiver&lt;network::mojom::URLLoader&gt; loader</argument>,
      <argument>const network::ResourceRequest&amp; original_request</argument>,
      <argument>network::mojom::URLLoaderClientPtr client</argument>,
      <argument>const net::MutableNetworkTrafficAnnotationTag&amp; traffic_annotation</argument>,
      <argument>const gin_helper::Dictionary&amp; dict</argument>)</argument_list></macro></expr>;
  <expr><specifier>static</specifier> <name>void</name> <macro><name>StartLoadingStream</name><argument_list>(
      <argument>mojo::PendingReceiver&lt;network::mojom::URLLoader&gt; loader</argument>,
      <argument>network::mojom::URLLoaderClientPtr client</argument>,
      <argument>network::ResourceResponseHead head</argument>,
      <argument>const gin_helper::Dictionary&amp; dict</argument>)</argument_list></macro></expr>;

  <comment type="line">// Helper to send string as response.</comment>
  <expr><specifier>static</specifier> <name>void</name> <macro><name>SendContents</name><argument_list>(<argument>network::mojom::URLLoaderClientPtr client</argument>,
                           <argument>network::ResourceResponseHead head</argument>,
                           <argument>std::string data</argument>)</argument_list></macro></expr>;

  <comment type="line">// TODO(zcbenz): This comes from extensions/browser/extension_protocols.cc</comment>
  <comment type="line">// but I don't know what it actually does, find out the meanings of |Clone|</comment>
  <comment type="line">// and |bindings_| and add comments for them.</comment>
  <expr><name>mojo</name><operator>::</operator><name><name>ReceiverSet</name><argument_list type="generic">&lt;<argument><expr><name>network</name><operator>::</operator><name>mojom</name><operator>::</operator><name>URLLoaderFactory</name></expr></argument>&gt;</argument_list></name> <name>receivers_</name></expr>;

  <expr><name>ProtocolType</name> <name>type_</name></expr>;
  <expr><name>ProtocolHandler</name> <name>handler_</name></expr>;

  <expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>AtomURLLoaderFactory</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_NET_ATOM_URL_LOADER_FACTORY_H_</comment>
</unit>
