<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/electron/shell/browser/ui/tray_icon_gtk.h"><comment type="line">// Copyright (c) 2014 GitHub, Inc.</comment>
<comment type="line">// Use of this source code is governed by the MIT license that can be</comment>
<comment type="line">// found in the LICENSE file.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHELL_BROWSER_UI_TRAY_ICON_GTK_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_BROWSER_UI_TRAY_ICON_GTK_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chrome/browser/ui/views/status_icons/status_icon_linux_dbus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell/browser/ui/tray_icon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui/views/linux_ui/status_icon_linux.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>views</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StatusIconLinux</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>electron</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TrayIconGtk</name> <range>: <expr><name>public</name> <name>TrayIcon</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>views</name>::<name>StatusIconLinux</name>::<name>Delegate</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>TrayIconGtk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><macro><name>TrayIconGtk</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

  <comment type="line">// TrayIcon:</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SetImage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>Image</name><operator>&amp;</operator> <name>image</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetToolTip</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>tool_tip</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>SetContextMenu</name><argument_list>(<argument><expr><name>AtomMenuModel</name><operator>*</operator> <name>menu_model</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

  <comment type="line">// views::StatusIconLinux::Delegate</comment>
  <expr_stmt><expr><name>void</name> <macro><name>OnClick</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bool</name> <macro><name>HasClickAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
  <comment type="line">// The following four methods are only used by StatusIconLinuxDbus, which we</comment>
  <comment type="line">// aren't yet using, so they are given stub implementations.</comment>
  <expr_stmt><expr><specifier>const</specifier> <name>gfx</name><operator>::</operator><name>ImageSkia</name><operator>&amp;</operator> <macro><name>GetImage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>base</name><operator>::</operator><name>string16</name><operator>&amp;</operator> <macro><name>GetToolTip</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>MenuModel</name><operator>*</operator> <macro><name>GetMenuModel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>OnImplInitializationFailed</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name><name>scoped_refptr</name><argument_list type="generic">&lt;<argument><expr><name>StatusIconLinuxDbus</name></expr></argument>&gt;</argument_list></name></type> <name>icon_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gfx</name><operator>::</operator><name>ImageSkia</name> <name>image_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name><operator>::</operator><name>string16</name> <name>tool_tip_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ui</name><operator>::</operator><name>MenuModel</name><operator>*</operator> <name>menu_model_</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DISALLOW_COPY_AND_ASSIGN</name><argument_list>(<argument><expr><name>TrayIconGtk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace electron</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SHELL_BROWSER_UI_TRAY_ICON_GTK_H_</comment>
</unit>
